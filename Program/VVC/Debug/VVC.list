
VVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002770  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002868  08002868  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002868  08002868  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002868  08002868  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800286c  0800286c  0000386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002870  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  0800287c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800287c  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075fe  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d7  00000000  00000000  0000b632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000661  00000000  00000000  0000d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001369f  00000000  00000000  0000dbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009779  00000000  00000000  00021288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821ef  00000000  00000000  0002aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acbf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d90  00000000  00000000  000acc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000ae9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002810 	.word	0x08002810

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002810 	.word	0x08002810

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb06 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f81c 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f90e 	bl	8000444 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f860 	bl	80002ec <MX_ADC1_Init>
  MX_SPI2_Init();
 800022c:	f000 f8ca 	bl	80003c4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reset_screen();
 8000230:	f000 f966 	bl	8000500 <reset_screen>
  init_screen();
 8000234:	f000 f97d 	bl	8000532 <init_screen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	comm_write(0xAE); // Display OFF
 8000238:	20ae      	movs	r0, #174	@ 0xae
 800023a:	f000 f99b 	bl	8000574 <comm_write>
	HAL_Delay(1000);
 800023e:	23fa      	movs	r3, #250	@ 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fb78 	bl	8000938 <HAL_Delay>
	comm_write(0xAF); //Display ON
 8000248:	20af      	movs	r0, #175	@ 0xaf
 800024a:	f000 f993 	bl	8000574 <comm_write>
	HAL_Delay(1000);
 800024e:	23fa      	movs	r3, #250	@ 0xfa
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fb70 	bl	8000938 <HAL_Delay>
	comm_write(0xAE); // Display OFF
 8000258:	46c0      	nop			@ (mov r8, r8)
 800025a:	e7ed      	b.n	8000238 <main+0x20>

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b093      	sub	sp, #76	@ 0x4c
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2414      	movs	r4, #20
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2334      	movs	r3, #52	@ 0x34
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 faa3 	bl	80027b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f002 fa9c 	bl	80027b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	0018      	movs	r0, r3
 8000286:	f001 fa2f 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2202      	movs	r2, #2
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2240      	movs	r2, #64	@ 0x40
 80002a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fa5b 	bl	8001768 <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002b6:	f000 f985 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2207      	movs	r2, #7
 80002be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fd56 	bl	8001d88 <HAL_RCC_ClockConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002e0:	f000 f970 	bl	80005c4 <Error_Handler>
  }
}
 80002e4:	46c0      	nop			@ (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b013      	add	sp, #76	@ 0x4c
 80002ea:	bd90      	pop	{r4, r7, pc}

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	230c      	movs	r3, #12
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 fa5c 	bl	80027b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <MX_ADC1_Init+0xd0>)
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000308:	2280      	movs	r2, #128	@ 0x80
 800030a:	05d2      	lsls	r2, r2, #23
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000320:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000322:	2204      	movs	r2, #4
 8000324:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000328:	2200      	movs	r2, #0
 800032a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800032e:	2200      	movs	r2, #0
 8000330:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000332:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000334:	2200      	movs	r2, #0
 8000336:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800033a:	2201      	movs	r2, #1
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000340:	2220      	movs	r2, #32
 8000342:	2100      	movs	r1, #0
 8000344:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000348:	2200      	movs	r2, #0
 800034a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800034e:	2200      	movs	r2, #0
 8000350:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000354:	222c      	movs	r2, #44	@ 0x2c
 8000356:	2100      	movs	r1, #0
 8000358:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035a:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800035c:	2200      	movs	r2, #0
 800035e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000362:	2200      	movs	r2, #0
 8000364:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000368:	2200      	movs	r2, #0
 800036a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800036e:	223c      	movs	r2, #60	@ 0x3c
 8000370:	2100      	movs	r1, #0
 8000372:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000374:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fbfd 	bl	8000b7c <HAL_ADC_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000386:	f000 f91d 	bl	80005c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4a0c      	ldr	r2, [pc, #48]	@ (80003c0 <MX_ADC1_Init+0xd4>)
 800038e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039c:	1d3a      	adds	r2, r7, #4
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fd92 	bl	8000ecc <HAL_ADC_ConfigChannel>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003ac:	f000 f90a 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b0:	46c0      	nop			@ (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b004      	add	sp, #16
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40012400 	.word	0x40012400
 80003c0:	2c000800 	.word	0x2c000800

080003c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <MX_SPI2_Init+0x78>)
 80003ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000440 <MX_SPI2_Init+0x7c>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_SPI2_Init+0x78>)
 80003d0:	2282      	movs	r2, #130	@ 0x82
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003d6:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_SPI2_Init+0x78>)
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	0212      	lsls	r2, r2, #8
 80003dc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003de:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_SPI2_Init+0x78>)
 80003e0:	22e0      	movs	r2, #224	@ 0xe0
 80003e2:	00d2      	lsls	r2, r2, #3
 80003e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_SPI2_Init+0x78>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_SPI2_Init+0x78>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_SPI2_Init+0x78>)
 80003f4:	2280      	movs	r2, #128	@ 0x80
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003fa:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MX_SPI2_Init+0x78>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_SPI2_Init+0x78>)
 8000402:	2200      	movs	r2, #0
 8000404:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <MX_SPI2_Init+0x78>)
 8000408:	2200      	movs	r2, #0
 800040a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_SPI2_Init+0x78>)
 800040e:	2200      	movs	r2, #0
 8000410:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_SPI2_Init+0x78>)
 8000414:	2207      	movs	r2, #7
 8000416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_SPI2_Init+0x78>)
 800041a:	2200      	movs	r2, #0
 800041c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <MX_SPI2_Init+0x78>)
 8000420:	2208      	movs	r2, #8
 8000422:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <MX_SPI2_Init+0x78>)
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fe38 	bl	800209c <HAL_SPI_Init>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000430:	f000 f8c8 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	2000008c 	.word	0x2000008c
 8000440:	40003800 	.word	0x40003800

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	@ 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 f9af 	bl	80027b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 8000460:	2102      	movs	r1, #2
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2202      	movs	r2, #2
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0xb4>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2200      	movs	r2, #0
 8000490:	2106      	movs	r1, #6
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f90a 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 8000498:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <MX_GPIO_Init+0xb8>)
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 f904 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _RST_Pin A0_Pin */
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2206      	movs	r2, #6
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	23a0      	movs	r3, #160	@ 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 ff8d 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : _CS_Pin */
  GPIO_InitStruct.Pin = _CS_Pin;
 80004ca:	0021      	movs	r1, r4
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2208      	movs	r2, #8
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2201      	movs	r2, #1
 80004d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <MX_GPIO_Init+0xb8>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f000 ff7a 	bl	80013e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b009      	add	sp, #36	@ 0x24
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	50000400 	.word	0x50000400

08000500 <reset_screen>:

/* USER CODE BEGIN 4 */
void reset_screen()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_RESET);
 8000504:	23a0      	movs	r3, #160	@ 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f8cd 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	@ 0x64
 8000514:	f000 fa10 	bl	8000938 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_SET);
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 f8c3 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000526:	2064      	movs	r0, #100	@ 0x64
 8000528:	f000 fa06 	bl	8000938 <HAL_Delay>
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <init_screen>:

void init_screen()
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
	comm_write(0xA0); //Set SEG (column) direction - left to right
 8000536:	20a0      	movs	r0, #160	@ 0xa0
 8000538:	f000 f81c 	bl	8000574 <comm_write>
	comm_write(0xAE); //Turn the display off
 800053c:	20ae      	movs	r0, #174	@ 0xae
 800053e:	f000 f819 	bl	8000574 <comm_write>
	comm_write(0xC8); //Set COM (row) direction - top to bottom
 8000542:	20c8      	movs	r0, #200	@ 0xc8
 8000544:	f000 f816 	bl	8000574 <comm_write>
	comm_write(0xA2); //Set LCD bias
 8000548:	20a2      	movs	r0, #162	@ 0xa2
 800054a:	f000 f813 	bl	8000574 <comm_write>
	comm_write(0x2F); //Power Control Set - Boost, Regulator and Follower are all on
 800054e:	202f      	movs	r0, #47	@ 0x2f
 8000550:	f000 f810 	bl	8000574 <comm_write>
	comm_write(0x21); //Set Resistor Ratio - 001 -> 3.5
 8000554:	2021      	movs	r0, #33	@ 0x21
 8000556:	f000 f80d 	bl	8000574 <comm_write>
	comm_write(0x81); //Electronic Volume Command (set contrast) Double Byte: 1 of 2
 800055a:	2081      	movs	r0, #129	@ 0x81
 800055c:	f000 f80a 	bl	8000574 <comm_write>
	comm_write(0x20); //Electronic Volume value (contrast value) Double Byte: 2 of 2
 8000560:	2020      	movs	r0, #32
 8000562:	f000 f807 	bl	8000574 <comm_write>
	comm_write(0xAF); //Display ON
 8000566:	20af      	movs	r0, #175	@ 0xaf
 8000568:	f000 f804 	bl	8000574 <comm_write>
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <comm_write>:

void comm_write(uint8_t c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
 8000580:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <comm_write+0x48>)
 8000582:	2200      	movs	r2, #0
 8000584:	2108      	movs	r1, #8
 8000586:	0018      	movs	r0, r3
 8000588:	f001 f890 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_RESET);	//Set message type to command
 800058c:	23a0      	movs	r3, #160	@ 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f889 	bl	80016ac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 100);
 800059a:	1df9      	adds	r1, r7, #7
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <comm_write+0x4c>)
 800059e:	2364      	movs	r3, #100	@ 0x64
 80005a0:	2201      	movs	r2, #1
 80005a2:	f001 fe33 	bl	800220c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <comm_write+0x48>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	2108      	movs	r1, #8
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f87d 	bl	80016ac <HAL_GPIO_WritePin>

}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	50000400 	.word	0x50000400
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	e7fd      	b.n	80005cc <Error_Handler+0x8>

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x44>)
 80005d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_MspInit+0x44>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x44>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_MspInit+0x44>)
 80005f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <HAL_MspInit+0x44>)
 80005f4:	2180      	movs	r1, #128	@ 0x80
 80005f6:	0549      	lsls	r1, r1, #21
 80005f8:	430a      	orrs	r2, r1
 80005fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_MspInit+0x44>)
 80005fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000600:	2380      	movs	r3, #128	@ 0x80
 8000602:	055b      	lsls	r3, r3, #21
 8000604:	4013      	ands	r3, r2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b08b      	sub	sp, #44	@ 0x2c
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	2414      	movs	r4, #20
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0018      	movs	r0, r3
 8000626:	2314      	movs	r3, #20
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f002 f8c4 	bl	80027b8 <memset>
  if(hadc->Instance==ADC1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <HAL_ADC_MspInit+0xb8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d145      	bne.n	80006c6 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800063a:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 800063c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	0349      	lsls	r1, r1, #13
 8000644:	430a      	orrs	r2, r1
 8000646:	641a      	str	r2, [r3, #64]	@ 0x40
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 800064a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	035b      	lsls	r3, r3, #13
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 800065c:	2102      	movs	r1, #2
 800065e:	430a      	orrs	r2, r1
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000666:	2202      	movs	r2, #2
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <HAL_ADC_MspInit+0xbc>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Input_Current_Pin;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2281      	movs	r2, #129	@ 0x81
 800068a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2203      	movs	r2, #3
 8000690:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	193b      	adds	r3, r7, r4
 800069a:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <HAL_ADC_MspInit+0xc0>)
 800069c:	0019      	movs	r1, r3
 800069e:	0010      	movs	r0, r2
 80006a0:	f000 fea0 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_Output_Current_Pin|S_Output_Voltage_Pin;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	22c0      	movs	r2, #192	@ 0xc0
 80006aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2203      	movs	r2, #3
 80006b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe8f 	bl	80013e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b00b      	add	sp, #44	@ 0x2c
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	50000400 	.word	0x50000400

080006dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	@ 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2414      	movs	r4, #20
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 f862 	bl	80027b8 <memset>
  if(hspi->Instance==SPI2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <HAL_SPI_MspInit+0xb8>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d146      	bne.n	800078c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 8000700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000702:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 8000704:	2180      	movs	r1, #128	@ 0x80
 8000706:	01c9      	lsls	r1, r1, #7
 8000708:	430a      	orrs	r2, r1
 800070a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 800070e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	01db      	lsls	r3, r3, #7
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_SPI_MspInit+0xbc>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	193a      	adds	r2, r7, r4
 8000752:	23a0      	movs	r3, #160	@ 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fe43 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800075e:	0021      	movs	r1, r4
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2210      	movs	r2, #16
 8000764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2202      	movs	r2, #2
 800076a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	187a      	adds	r2, r7, r1
 8000780:	23a0      	movs	r3, #160	@ 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fe2c 	bl	80013e4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00b      	add	sp, #44	@ 0x2c
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40003800 	.word	0x40003800
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f89c 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff fff7 	bl	80007ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	@ (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000806:	f001 ffdf 	bl	80027c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800080a:	f7ff fd05 	bl	8000218 <main>

0800080e <LoopForever>:

LoopForever:
  b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	08002870 	.word	0x08002870
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	200000f4 	.word	0x200000f4

08000828 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_IRQHandler>
	...

0800082c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_Init+0x3c>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_Init+0x3c>)
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	0049      	lsls	r1, r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f810 	bl	800086c <HAL_InitTick>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d003      	beq.n	8000858 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e001      	b.n	800085c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff feba 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_InitTick+0x88>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d02b      	beq.n	80008dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <HAL_InitTick+0x8c>)
 8000886:	681c      	ldr	r4, [r3, #0]
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <HAL_InitTick+0x88>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0019      	movs	r1, r3
 800088e:	23fa      	movs	r3, #250	@ 0xfa
 8000890:	0098      	lsls	r0, r3, #2
 8000892:	f7ff fc35 	bl	8000100 <__udivsi3>
 8000896:	0003      	movs	r3, r0
 8000898:	0019      	movs	r1, r3
 800089a:	0020      	movs	r0, r4
 800089c:	f7ff fc30 	bl	8000100 <__udivsi3>
 80008a0:	0003      	movs	r3, r0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fd91 	bl	80013ca <HAL_SYSTICK_Config>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d112      	bne.n	80008d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d80a      	bhi.n	80008c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fd70 	bl	80013a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_InitTick+0x90>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e00d      	b.n	80008e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	230f      	movs	r3, #15
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e008      	b.n	80008e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d2:	230f      	movs	r3, #15
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e003      	b.n	80008e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b005      	add	sp, #20
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	18d2      	adds	r2, r2, r3
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <HAL_IncTick+0x20>)
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000008 	.word	0x20000008
 8000920:	200000f0 	.word	0x200000f0

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	@ (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	200000f0 	.word	0x200000f0

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff fff0 	bl	8000924 <HAL_GetTick>
 8000944:	0003      	movs	r3, r0
 8000946:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	001a      	movs	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	189b      	adds	r3, r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	f7ff ffe0 	bl	8000924 <HAL_GetTick>
 8000964:	0002      	movs	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	20000008 	.word	0x20000008

08000980 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000990:	401a      	ands	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	fe3fffff 	.word	0xfe3fffff

080009a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	23e0      	movs	r3, #224	@ 0xe0
 80009b6:	045b      	lsls	r3, r3, #17
 80009b8:	4013      	ands	r3, r2
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	2104      	movs	r1, #4
 80009d6:	400a      	ands	r2, r1
 80009d8:	2107      	movs	r1, #7
 80009da:	4091      	lsls	r1, r2
 80009dc:	000a      	movs	r2, r1
 80009de:	43d2      	mvns	r2, r2
 80009e0:	401a      	ands	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2104      	movs	r1, #4
 80009e6:	400b      	ands	r3, r1
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	4099      	lsls	r1, r3
 80009ec:	000b      	movs	r3, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b004      	add	sp, #16
 80009fa:	bd80      	pop	{r7, pc}

080009fc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	400a      	ands	r2, r1
 8000a10:	2107      	movs	r1, #7
 8000a12:	4091      	lsls	r1, r2
 8000a14:	000a      	movs	r2, r1
 8000a16:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a1e:	40da      	lsrs	r2, r3
 8000a20:	0013      	movs	r3, r2
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	211f      	movs	r1, #31
 8000a3e:	400a      	ands	r2, r1
 8000a40:	210f      	movs	r1, #15
 8000a42:	4091      	lsls	r1, r2
 8000a44:	000a      	movs	r2, r1
 8000a46:	43d2      	mvns	r2, r2
 8000a48:	401a      	ands	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	0e9b      	lsrs	r3, r3, #26
 8000a4e:	210f      	movs	r1, #15
 8000a50:	4019      	ands	r1, r3
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	201f      	movs	r0, #31
 8000a56:	4003      	ands	r3, r0
 8000a58:	4099      	lsls	r1, r3
 8000a5a:	000b      	movs	r3, r1
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	035b      	lsls	r3, r3, #13
 8000a7c:	0b5b      	lsrs	r3, r3, #13
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	0352      	lsls	r2, r2, #13
 8000a9e:	0b52      	lsrs	r2, r2, #13
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	0212      	lsls	r2, r2, #8
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	400b      	ands	r3, r1
 8000ad0:	4904      	ldr	r1, [pc, #16]	@ (8000ae4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	07ffff00 	.word	0x07ffff00

08000ae8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <LL_ADC_EnableInternalRegulator+0x24>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	2280      	movs	r2, #128	@ 0x80
 8000afa:	0552      	lsls	r2, r2, #21
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	6fffffe8 	.word	0x6fffffe8

08000b10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	055b      	lsls	r3, r3, #21
 8000b20:	401a      	ands	r2, r3
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	055b      	lsls	r3, r3, #21
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d101      	bne.n	8000b2e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <LL_ADC_IsEnabled+0x18>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <LL_ADC_IsEnabled+0x1a>
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2204      	movs	r2, #4
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d101      	bne.n	8000b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b84:	231f      	movs	r3, #31
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e17f      	b.n	8000ea2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10a      	bne.n	8000bc0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fd33 	bl	8000618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2254      	movs	r2, #84	@ 0x54
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ffa3 	bl	8000b10 <LL_ADC_IsInternalRegulatorEnabled>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d115      	bne.n	8000bfa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff88 	bl	8000ae8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bd8:	4bb4      	ldr	r3, [pc, #720]	@ (8000eac <HAL_ADC_Init+0x330>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	49b4      	ldr	r1, [pc, #720]	@ (8000eb0 <HAL_ADC_Init+0x334>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fa8e 	bl	8000100 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	3301      	adds	r3, #1
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bec:	e002      	b.n	8000bf4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f9      	bne.n	8000bee <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ff86 	bl	8000b10 <LL_ADC_IsInternalRegulatorEnabled>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d10f      	bne.n	8000c28 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c18:	2201      	movs	r2, #1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c20:	231f      	movs	r3, #31
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff94 	bl	8000b5a <LL_ADC_REG_IsConversionOngoing>
 8000c32:	0003      	movs	r3, r0
 8000c34:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d000      	beq.n	8000c42 <HAL_ADC_Init+0xc6>
 8000c40:	e122      	b.n	8000e88 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d000      	beq.n	8000c4a <HAL_ADC_Init+0xce>
 8000c48:	e11e      	b.n	8000e88 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	4a99      	ldr	r2, [pc, #612]	@ (8000eb4 <HAL_ADC_Init+0x338>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	2202      	movs	r2, #2
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff6a 	bl	8000b38 <LL_ADC_IsEnabled>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d000      	beq.n	8000c6a <HAL_ADC_Init+0xee>
 8000c68:	e0ad      	b.n	8000dc6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7e1b      	ldrb	r3, [r3, #24]
 8000c72:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000c74:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7e5b      	ldrb	r3, [r3, #25]
 8000c7a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c7c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7e9b      	ldrb	r3, [r3, #26]
 8000c82:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c84:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_ADC_Init+0x118>
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	015b      	lsls	r3, r3, #5
 8000c92:	e000      	b.n	8000c96 <HAL_ADC_Init+0x11a>
 8000c94:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c96:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c9c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da04      	bge.n	8000cb0 <HAL_ADC_Init+0x134>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	085b      	lsrs	r3, r3, #1
 8000cae:	e001      	b.n	8000cb4 <HAL_ADC_Init+0x138>
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000cb4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	212c      	movs	r1, #44	@ 0x2c
 8000cba:	5c5b      	ldrb	r3, [r3, r1]
 8000cbc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cbe:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2220      	movs	r2, #32
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d115      	bne.n	8000cfc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e9b      	ldrb	r3, [r3, #26]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	0252      	lsls	r2, r2, #9
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	e00b      	b.n	8000cfc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce8:	2220      	movs	r2, #32
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00a      	beq.n	8000d1a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d08:	23e0      	movs	r3, #224	@ 0xe0
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d12:	4313      	orrs	r3, r2
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a65      	ldr	r2, [pc, #404]	@ (8000eb8 <HAL_ADC_Init+0x33c>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	0019      	movs	r1, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	0f9b      	lsrs	r3, r3, #30
 8000d36:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	223c      	movs	r2, #60	@ 0x3c
 8000d48:	5c9b      	ldrb	r3, [r3, r2]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d111      	bne.n	8000d72 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	0f9b      	lsrs	r3, r3, #30
 8000d54:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d5a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000d60:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000d66:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	4a50      	ldr	r2, [pc, #320]	@ (8000ebc <HAL_ADC_Init+0x340>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	23c0      	movs	r3, #192	@ 0xc0
 8000d8e:	061b      	lsls	r3, r3, #24
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d018      	beq.n	8000dc6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d012      	beq.n	8000dc6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	061b      	lsls	r3, r3, #24
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d00c      	beq.n	8000dc6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000dac:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <HAL_ADC_Init+0x344>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a44      	ldr	r2, [pc, #272]	@ (8000ec4 <HAL_ADC_Init+0x348>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	0019      	movs	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	23f0      	movs	r3, #240	@ 0xf0
 8000dbc:	039b      	lsls	r3, r3, #14
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <HAL_ADC_Init+0x344>)
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f7ff fdf6 	bl	80009c2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dde:	493a      	ldr	r1, [pc, #232]	@ (8000ec8 <HAL_ADC_Init+0x34c>)
 8000de0:	001a      	movs	r2, r3
 8000de2:	f7ff fdee 	bl	80009c2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4249      	negs	r1, r1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e00:	e018      	b.n	8000e34 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	039b      	lsls	r3, r3, #14
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d112      	bne.n	8000e34 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2210      	movs	r2, #16
 8000e22:	4252      	negs	r2, r2
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0011      	movs	r1, r2
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fdde 	bl	80009fc <LL_ADC_GetSamplingTimeCommonChannels>
 8000e40:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d10b      	bne.n	8000e62 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e54:	2203      	movs	r2, #3
 8000e56:	4393      	bics	r3, r2
 8000e58:	2201      	movs	r2, #1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e60:	e01c      	b.n	8000e9c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	2212      	movs	r2, #18
 8000e68:	4393      	bics	r3, r2
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e76:	2201      	movs	r2, #1
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e7e:	231f      	movs	r3, #31
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e86:	e009      	b.n	8000e9c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000e94:	231f      	movs	r3, #31
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e9c:	231f      	movs	r3, #31
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b008      	add	sp, #32
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	00030d40 	.word	0x00030d40
 8000eb4:	fffffefd 	.word	0xfffffefd
 8000eb8:	ffde0201 	.word	0xffde0201
 8000ebc:	1ffffc02 	.word	0x1ffffc02
 8000ec0:	40012708 	.word	0x40012708
 8000ec4:	ffc3ffff 	.word	0xffc3ffff
 8000ec8:	07ffff04 	.word	0x07ffff04

08000ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed6:	2317      	movs	r3, #23
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2254      	movs	r2, #84	@ 0x54
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x24>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e1c0      	b.n	8001272 <HAL_ADC_ConfigChannel+0x3a6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2254      	movs	r2, #84	@ 0x54
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fe2c 	bl	8000b5a <LL_ADC_REG_IsConversionOngoing>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d000      	beq.n	8000f08 <HAL_ADC_ConfigChannel+0x3c>
 8000f06:	e1a3      	b.n	8001250 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d100      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x46>
 8000f10:	e143      	b.n	800119a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d004      	beq.n	8000f28 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000f22:	4ac1      	ldr	r2, [pc, #772]	@ (8001228 <HAL_ADC_ConfigChannel+0x35c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d108      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0019      	movs	r1, r3
 8000f32:	0010      	movs	r0, r2
 8000f34:	f7ff fd99 	bl	8000a6a <LL_ADC_REG_SetSequencerChAdd>
 8000f38:	e0c9      	b.n	80010ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	211f      	movs	r1, #31
 8000f44:	400b      	ands	r3, r1
 8000f46:	210f      	movs	r1, #15
 8000f48:	4099      	lsls	r1, r3
 8000f4a:	000b      	movs	r3, r1
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	035b      	lsls	r3, r3, #13
 8000f58:	0b5b      	lsrs	r3, r3, #13
 8000f5a:	d105      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x9c>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	221f      	movs	r2, #31
 8000f64:	4013      	ands	r3, r2
 8000f66:	e098      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d000      	beq.n	8000f74 <HAL_ADC_ConfigChannel+0xa8>
 8000f72:	e091      	b.n	8001098 <HAL_ADC_ConfigChannel+0x1cc>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d000      	beq.n	8000f80 <HAL_ADC_ConfigChannel+0xb4>
 8000f7e:	e089      	b.n	8001094 <HAL_ADC_ConfigChannel+0x1c8>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2204      	movs	r2, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d000      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0xc0>
 8000f8a:	e081      	b.n	8001090 <HAL_ADC_ConfigChannel+0x1c4>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2208      	movs	r2, #8
 8000f92:	4013      	ands	r3, r2
 8000f94:	d000      	beq.n	8000f98 <HAL_ADC_ConfigChannel+0xcc>
 8000f96:	e079      	b.n	800108c <HAL_ADC_ConfigChannel+0x1c0>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d000      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0xd8>
 8000fa2:	e071      	b.n	8001088 <HAL_ADC_ConfigChannel+0x1bc>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	4013      	ands	r3, r2
 8000fac:	d000      	beq.n	8000fb0 <HAL_ADC_ConfigChannel+0xe4>
 8000fae:	e069      	b.n	8001084 <HAL_ADC_ConfigChannel+0x1b8>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2240      	movs	r2, #64	@ 0x40
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d000      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0xf0>
 8000fba:	e061      	b.n	8001080 <HAL_ADC_ConfigChannel+0x1b4>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2280      	movs	r2, #128	@ 0x80
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d000      	beq.n	8000fc8 <HAL_ADC_ConfigChannel+0xfc>
 8000fc6:	e059      	b.n	800107c <HAL_ADC_ConfigChannel+0x1b0>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d151      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1ac>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d149      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1a8>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d141      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1a4>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d139      	bne.n	800106c <HAL_ADC_ConfigChannel+0x1a0>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	4013      	ands	r3, r2
 8001002:	d131      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x19c>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	019b      	lsls	r3, r3, #6
 800100c:	4013      	ands	r3, r2
 800100e:	d129      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x198>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	4013      	ands	r3, r2
 800101a:	d121      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x194>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2380      	movs	r3, #128	@ 0x80
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	4013      	ands	r3, r2
 8001026:	d119      	bne.n	800105c <HAL_ADC_ConfigChannel+0x190>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	4013      	ands	r3, r2
 8001032:	d111      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x18c>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d109      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x188>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	02db      	lsls	r3, r3, #11
 8001048:	4013      	ands	r3, r2
 800104a:	d001      	beq.n	8001050 <HAL_ADC_ConfigChannel+0x184>
 800104c:	2312      	movs	r3, #18
 800104e:	e024      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001050:	2300      	movs	r3, #0
 8001052:	e022      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001054:	2311      	movs	r3, #17
 8001056:	e020      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001058:	2310      	movs	r3, #16
 800105a:	e01e      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 800105c:	230f      	movs	r3, #15
 800105e:	e01c      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001060:	230e      	movs	r3, #14
 8001062:	e01a      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001064:	230d      	movs	r3, #13
 8001066:	e018      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001068:	230c      	movs	r3, #12
 800106a:	e016      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 800106c:	230b      	movs	r3, #11
 800106e:	e014      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001070:	230a      	movs	r3, #10
 8001072:	e012      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001074:	2309      	movs	r3, #9
 8001076:	e010      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001078:	2308      	movs	r3, #8
 800107a:	e00e      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 800107c:	2307      	movs	r3, #7
 800107e:	e00c      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001080:	2306      	movs	r3, #6
 8001082:	e00a      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001084:	2305      	movs	r3, #5
 8001086:	e008      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001088:	2304      	movs	r3, #4
 800108a:	e006      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 800108c:	2303      	movs	r3, #3
 800108e:	e004      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001090:	2302      	movs	r3, #2
 8001092:	e002      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_ADC_ConfigChannel+0x1ce>
 8001098:	2300      	movs	r3, #0
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	6852      	ldr	r2, [r2, #4]
 800109e:	201f      	movs	r0, #31
 80010a0:	4002      	ands	r2, r0
 80010a2:	4093      	lsls	r3, r2
 80010a4:	000a      	movs	r2, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d808      	bhi.n	80010ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	f7ff fcae 	bl	8000a2a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	001a      	movs	r2, r3
 80010dc:	f7ff fce8 	bl	8000ab0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db00      	blt.n	80010ea <HAL_ADC_ConfigChannel+0x21e>
 80010e8:	e0bc      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fc5b 	bl	80009a8 <LL_ADC_GetCommonPathInternalCh>
 80010f2:	0003      	movs	r3, r0
 80010f4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001230 <HAL_ADC_ConfigChannel+0x364>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d122      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001108:	d11d      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0412      	lsls	r2, r2, #16
 8001110:	4313      	orrs	r3, r2
 8001112:	4a46      	ldr	r2, [pc, #280]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 8001114:	0019      	movs	r1, r3
 8001116:	0010      	movs	r0, r2
 8001118:	f7ff fc32 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800111c:	4b45      	ldr	r3, [pc, #276]	@ (8001234 <HAL_ADC_ConfigChannel+0x368>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4945      	ldr	r1, [pc, #276]	@ (8001238 <HAL_ADC_ConfigChannel+0x36c>)
 8001122:	0018      	movs	r0, r3
 8001124:	f7fe ffec 	bl	8000100 <__udivsi3>
 8001128:	0003      	movs	r3, r0
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	0013      	movs	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	189b      	adds	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001136:	e002      	b.n	800113e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001144:	e08e      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a3c      	ldr	r2, [pc, #240]	@ (800123c <HAL_ADC_ConfigChannel+0x370>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10e      	bne.n	800116e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	045b      	lsls	r3, r3, #17
 8001156:	4013      	ands	r3, r2
 8001158:	d109      	bne.n	800116e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	0452      	lsls	r2, r2, #17
 8001160:	4313      	orrs	r3, r2
 8001162:	4a32      	ldr	r2, [pc, #200]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 8001164:	0019      	movs	r1, r3
 8001166:	0010      	movs	r0, r2
 8001168:	f7ff fc0a 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
 800116c:	e07a      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a33      	ldr	r2, [pc, #204]	@ (8001240 <HAL_ADC_ConfigChannel+0x374>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d000      	beq.n	800117a <HAL_ADC_ConfigChannel+0x2ae>
 8001178:	e074      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	03db      	lsls	r3, r3, #15
 8001180:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001182:	d000      	beq.n	8001186 <HAL_ADC_ConfigChannel+0x2ba>
 8001184:	e06e      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	03d2      	lsls	r2, r2, #15
 800118c:	4313      	orrs	r3, r2
 800118e:	4a27      	ldr	r2, [pc, #156]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f7ff fbf4 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
 8001198:	e064      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	061b      	lsls	r3, r3, #24
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d004      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <HAL_ADC_ConfigChannel+0x35c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d107      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0019      	movs	r1, r3
 80011ba:	0010      	movs	r0, r2
 80011bc:	f7ff fc66 	bl	8000a8c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da4d      	bge.n	8001264 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff fbec 	bl	80009a8 <LL_ADC_GetCommonPathInternalCh>
 80011d0:	0003      	movs	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a15      	ldr	r2, [pc, #84]	@ (8001230 <HAL_ADC_ConfigChannel+0x364>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d108      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <HAL_ADC_ConfigChannel+0x378>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	4a11      	ldr	r2, [pc, #68]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 80011e6:	0019      	movs	r1, r3
 80011e8:	0010      	movs	r0, r2
 80011ea:	f7ff fbc9 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
 80011ee:	e039      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_ADC_ConfigChannel+0x370>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d108      	bne.n	800120c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <HAL_ADC_ConfigChannel+0x37c>)
 80011fe:	4013      	ands	r3, r2
 8001200:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 8001202:	0019      	movs	r1, r3
 8001204:	0010      	movs	r0, r2
 8001206:	f7ff fbbb 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
 800120a:	e02b      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <HAL_ADC_ConfigChannel+0x374>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d126      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_ADC_ConfigChannel+0x380>)
 800121a:	4013      	ands	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	@ (800122c <HAL_ADC_ConfigChannel+0x360>)
 800121e:	0019      	movs	r1, r3
 8001220:	0010      	movs	r0, r2
 8001222:	f7ff fbad 	bl	8000980 <LL_ADC_SetCommonPathInternalCh>
 8001226:	e01d      	b.n	8001264 <HAL_ADC_ConfigChannel+0x398>
 8001228:	80000004 	.word	0x80000004
 800122c:	40012708 	.word	0x40012708
 8001230:	b0001000 	.word	0xb0001000
 8001234:	20000000 	.word	0x20000000
 8001238:	00030d40 	.word	0x00030d40
 800123c:	b8004000 	.word	0xb8004000
 8001240:	b4002000 	.word	0xb4002000
 8001244:	ff7fffff 	.word	0xff7fffff
 8001248:	feffffff 	.word	0xfeffffff
 800124c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	2220      	movs	r2, #32
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800125c:	2317      	movs	r3, #23
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2254      	movs	r2, #84	@ 0x54
 8001268:	2100      	movs	r1, #0
 800126a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800126c:	2317      	movs	r3, #23
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	781b      	ldrb	r3, [r3, #0]
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b006      	add	sp, #24
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001290:	d828      	bhi.n	80012e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001292:	4a2f      	ldr	r2, [pc, #188]	@ (8001350 <__NVIC_SetPriority+0xd4>)
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	33c0      	adds	r3, #192	@ 0xc0
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	589b      	ldr	r3, [r3, r2]
 80012a2:	1dfa      	adds	r2, r7, #7
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	0011      	movs	r1, r2
 80012a8:	2203      	movs	r2, #3
 80012aa:	400a      	ands	r2, r1
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	21ff      	movs	r1, #255	@ 0xff
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	401a      	ands	r2, r3
 80012b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	019b      	lsls	r3, r3, #6
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	401a      	ands	r2, r3
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	4003      	ands	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <__NVIC_SetPriority+0xd4>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	430a      	orrs	r2, r1
 80012dc:	33c0      	adds	r3, #192	@ 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012e2:	e031      	b.n	8001348 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <__NVIC_SetPriority+0xd8>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0019      	movs	r1, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	400b      	ands	r3, r1
 80012f0:	3b08      	subs	r3, #8
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3306      	adds	r3, #6
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	3304      	adds	r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1dfa      	adds	r2, r7, #7
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	0011      	movs	r1, r2
 8001304:	2203      	movs	r2, #3
 8001306:	400a      	ands	r2, r1
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	21ff      	movs	r1, #255	@ 0xff
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	43d2      	mvns	r2, r2
 8001312:	401a      	ands	r2, r3
 8001314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	401a      	ands	r2, r3
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	2303      	movs	r3, #3
 8001326:	4003      	ands	r3, r0
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800132c:	4809      	ldr	r0, [pc, #36]	@ (8001354 <__NVIC_SetPriority+0xd8>)
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	001c      	movs	r4, r3
 8001334:	230f      	movs	r3, #15
 8001336:	4023      	ands	r3, r4
 8001338:	3b08      	subs	r3, #8
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	430a      	orrs	r2, r1
 800133e:	3306      	adds	r3, #6
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	18c3      	adds	r3, r0, r3
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	045b      	lsls	r3, r3, #17
 8001368:	429a      	cmp	r2, r3
 800136a:	d301      	bcc.n	8001370 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136c:	2301      	movs	r3, #1
 800136e:	e010      	b.n	8001392 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <SysTick_Config+0x44>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	3a01      	subs	r2, #1
 8001376:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001378:	2301      	movs	r3, #1
 800137a:	425b      	negs	r3, r3
 800137c:	2103      	movs	r1, #3
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff ff7c 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x44>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x44>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	210f      	movs	r1, #15
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	1c02      	adds	r2, r0, #0
 80013b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ffbf 	bl	8001358 <SysTick_Config>
 80013da:	0003      	movs	r3, r0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e147      	b.n	8001684 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d100      	bne.n	800140c <HAL_GPIO_Init+0x28>
 800140a:	e138      	b.n	800167e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x40>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	4013      	ands	r3, r2
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	0013      	movs	r3, r2
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	2201      	movs	r2, #1
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	58d3      	ldr	r3, [r2, r3]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2207      	movs	r2, #7
 80014e0:	4013      	ands	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2107      	movs	r1, #7
 80014fa:	400b      	ands	r3, r1
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	401a      	ands	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	23c0      	movs	r3, #192	@ 0xc0
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d100      	bne.n	8001558 <HAL_GPIO_Init+0x174>
 8001556:	e092      	b.n	800167e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001558:	4a50      	ldr	r2, [pc, #320]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3318      	adds	r3, #24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	589b      	ldr	r3, [r3, r2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	220f      	movs	r2, #15
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	23a0      	movs	r3, #160	@ 0xa0
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	429a      	cmp	r2, r3
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x1ca>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	@ (80016a0 <HAL_GPIO_Init+0x2bc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x1c6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a44      	ldr	r2, [pc, #272]	@ (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x1c2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a43      	ldr	r2, [pc, #268]	@ (80016a8 <HAL_GPIO_Init+0x2c4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x1be>
 800159e:	2303      	movs	r3, #3
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015ae:	2300      	movs	r3, #0
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	2103      	movs	r1, #3
 80015b4:	400a      	ands	r2, r1
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	4093      	lsls	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015c0:	4936      	ldr	r1, [pc, #216]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3318      	adds	r3, #24
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	035b      	lsls	r3, r3, #13
 80015e6:	4013      	ands	r3, r2
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	039b      	lsls	r3, r3, #14
 8001610:	4013      	ands	r3, r2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001622:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 8001624:	2384      	movs	r3, #132	@ 0x84
 8001626:	58d3      	ldr	r3, [r2, r3]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001648:	4914      	ldr	r1, [pc, #80]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 800164a:	2284      	movs	r2, #132	@ 0x84
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001650:	4a12      	ldr	r2, [pc, #72]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	58d3      	ldr	r3, [r2, r3]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001676:	4909      	ldr	r1, [pc, #36]	@ (800169c <HAL_GPIO_Init+0x2b8>)
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	40da      	lsrs	r2, r3
 800168c:	1e13      	subs	r3, r2, #0
 800168e:	d000      	beq.n	8001692 <HAL_GPIO_Init+0x2ae>
 8001690:	e6b0      	b.n	80013f4 <HAL_GPIO_Init+0x10>
  }
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b006      	add	sp, #24
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021800 	.word	0x40021800
 80016a0:	50000400 	.word	0x50000400
 80016a4:	50000800 	.word	0x50000800
 80016a8:	50000c00 	.word	0x50000c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	0008      	movs	r0, r1
 80016b6:	0011      	movs	r1, r2
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1c7b      	adds	r3, r7, #1
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	1c7b      	adds	r3, r7, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d11f      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	0013      	movs	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	189b      	adds	r3, r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4912      	ldr	r1, [pc, #72]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800171a:	0018      	movs	r0, r3
 800171c:	f7fe fcf0 	bl	8000100 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001726:	e008      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3b01      	subs	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e001      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e009      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	401a      	ands	r2, r3
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	429a      	cmp	r2, r3
 800174a:	d0ed      	beq.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	40007000 	.word	0x40007000
 800175c:	fffff9ff 	.word	0xfffff9ff
 8001760:	20000000 	.word	0x20000000
 8001764:	000f4240 	.word	0x000f4240

08001768 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e2f3      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x1e>
 8001784:	e07c      	b.n	8001880 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001786:	4bc3      	ldr	r3, [pc, #780]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2238      	movs	r2, #56	@ 0x38
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001790:	4bc0      	ldr	r3, [pc, #768]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b10      	cmp	r3, #16
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3e>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d002      	beq.n	80017ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d062      	beq.n	800187e <HAL_RCC_OscConfig+0x116>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d15e      	bne.n	800187e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e2ce      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x78>
 80017d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4baf      	ldr	r3, [pc, #700]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	2180      	movs	r1, #128	@ 0x80
 80017d8:	0249      	lsls	r1, r1, #9
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e020      	b.n	8001822 <HAL_RCC_OscConfig+0xba>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	23a0      	movs	r3, #160	@ 0xa0
 80017e6:	02db      	lsls	r3, r3, #11
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10e      	bne.n	800180a <HAL_RCC_OscConfig+0xa2>
 80017ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	02c9      	lsls	r1, r1, #11
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0249      	lsls	r1, r1, #9
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0xba>
 800180a:	4ba2      	ldr	r3, [pc, #648]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4ba1      	ldr	r3, [pc, #644]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001810:	49a1      	ldr	r1, [pc, #644]	@ (8001a98 <HAL_RCC_OscConfig+0x330>)
 8001812:	400a      	ands	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4b9f      	ldr	r3, [pc, #636]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b9e      	ldr	r3, [pc, #632]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800181c:	499f      	ldr	r1, [pc, #636]	@ (8001a9c <HAL_RCC_OscConfig+0x334>)
 800181e:	400a      	ands	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d014      	beq.n	8001854 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f87b 	bl	8000924 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff f876 	bl	8000924 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e28d      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	4b93      	ldr	r3, [pc, #588]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	029b      	lsls	r3, r3, #10
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xcc>
 8001852:	e015      	b.n	8001880 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f866 	bl	8000924 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185e:	f7ff f861 	bl	8000924 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b64      	cmp	r3, #100	@ 0x64
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e278      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001870:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	029b      	lsls	r3, r3, #10
 8001878:	4013      	ands	r3, r2
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0xf6>
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d100      	bne.n	800188c <HAL_RCC_OscConfig+0x124>
 800188a:	e099      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188c:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2238      	movs	r2, #56	@ 0x38
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001896:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2203      	movs	r2, #3
 800189c:	4013      	ands	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d102      	bne.n	80018ac <HAL_RCC_OscConfig+0x144>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d002      	beq.n	80018b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d135      	bne.n	800191e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b2:	4b78      	ldr	r3, [pc, #480]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x162>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e24b      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b72      	ldr	r3, [pc, #456]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a74      	ldr	r2, [pc, #464]	@ (8001aa0 <HAL_RCC_OscConfig+0x338>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	021a      	lsls	r2, r3, #8
 80018da:	4b6e      	ldr	r3, [pc, #440]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d112      	bne.n	800190c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa4 <HAL_RCC_OscConfig+0x33c>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	4b67      	ldr	r3, [pc, #412]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018fa:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0adb      	lsrs	r3, r3, #11
 8001900:	2207      	movs	r2, #7
 8001902:	4013      	ands	r3, r2
 8001904:	4a68      	ldr	r2, [pc, #416]	@ (8001aa8 <HAL_RCC_OscConfig+0x340>)
 8001906:	40da      	lsrs	r2, r3
 8001908:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_OscConfig+0x344>)
 800190a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800190c:	4b68      	ldr	r3, [pc, #416]	@ (8001ab0 <HAL_RCC_OscConfig+0x348>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0018      	movs	r0, r3
 8001912:	f7fe ffab 	bl	800086c <HAL_InitTick>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d051      	beq.n	80019be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e221      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d030      	beq.n	8001988 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001926:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5e      	ldr	r2, [pc, #376]	@ (8001aa4 <HAL_RCC_OscConfig+0x33c>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800193a:	4b56      	ldr	r3, [pc, #344]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0049      	lsls	r1, r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7fe ffec 	bl	8000924 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7fe ffe7 	bl	8000924 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1fe      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001964:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4013      	ands	r3, r2
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b48      	ldr	r3, [pc, #288]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa0 <HAL_RCC_OscConfig+0x338>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	021a      	lsls	r2, r3, #8
 8001980:	4b44      	ldr	r3, [pc, #272]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001988:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 800198e:	4949      	ldr	r1, [pc, #292]	@ (8001ab4 <HAL_RCC_OscConfig+0x34c>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7fe ffc6 	bl	8000924 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7fe ffc1 	bl	8000924 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1d8      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4013      	ands	r3, r2
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x236>
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2208      	movs	r2, #8
 80019c6:	4013      	ands	r3, r2
 80019c8:	d047      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019ca:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2238      	movs	r2, #56	@ 0x38
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b18      	cmp	r3, #24
 80019d4:	d10a      	bne.n	80019ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2f2>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d138      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e1ba      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d019      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7fe ff90 	bl	8000924 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7fe ff8b 	bl	8000924 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1a2      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f1      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2a2>
 8001a26:	e018      	b.n	8001a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	438a      	bics	r2, r1
 8001a32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7fe ff76 	bl	8000924 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7fe ff71 	bl	8000924 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e188      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f1      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2fe>
 8001a64:	e0c6      	b.n	8001bf4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	231f      	movs	r3, #31
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2238      	movs	r2, #56	@ 0x38
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d11e      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x31e>
 8001a84:	e0b6      	b.n	8001bf4 <HAL_RCC_OscConfig+0x48c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d000      	beq.n	8001a90 <HAL_RCC_OscConfig+0x328>
 8001a8e:	e0b1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e166      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
 8001a94:	40021000 	.word	0x40021000
 8001a98:	fffeffff 	.word	0xfffeffff
 8001a9c:	fffbffff 	.word	0xfffbffff
 8001aa0:	ffff80ff 	.word	0xffff80ff
 8001aa4:	ffffc7ff 	.word	0xffffc7ff
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ab8:	4bac      	ldr	r3, [pc, #688]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	055b      	lsls	r3, r3, #21
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x360>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x362>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d011      	beq.n	8001af2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4ba7      	ldr	r3, [pc, #668]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ad2:	4ba6      	ldr	r3, [pc, #664]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001adc:	4ba3      	ldr	r3, [pc, #652]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	055b      	lsls	r3, r3, #21
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aea:	231f      	movs	r3, #31
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b9f      	ldr	r3, [pc, #636]	@ (8001d70 <HAL_RCC_OscConfig+0x608>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d11a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afe:	4b9c      	ldr	r3, [pc, #624]	@ (8001d70 <HAL_RCC_OscConfig+0x608>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b9b      	ldr	r3, [pc, #620]	@ (8001d70 <HAL_RCC_OscConfig+0x608>)
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	0049      	lsls	r1, r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b0c:	f7fe ff0a 	bl	8000924 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7fe ff05 	bl	8000924 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e11c      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b91      	ldr	r3, [pc, #580]	@ (8001d70 <HAL_RCC_OscConfig+0x608>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3e2>
 8001b3c:	4b8b      	ldr	r3, [pc, #556]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b40:	4b8a      	ldr	r3, [pc, #552]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x404>
 8001b52:	4b86      	ldr	r3, [pc, #536]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b56:	4b85      	ldr	r3, [pc, #532]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b5e:	4b83      	ldr	r3, [pc, #524]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b62:	4b82      	ldr	r3, [pc, #520]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
 8001b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b70:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b78:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001b7e:	2104      	movs	r1, #4
 8001b80:	438a      	bics	r2, r1
 8001b82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe feca 	bl	8000924 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe fec5 	bl	8000924 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a74      	ldr	r2, [pc, #464]	@ (8001d74 <HAL_RCC_OscConfig+0x60c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	4b70      	ldr	r3, [pc, #448]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x42e>
 8001bb4:	e013      	b.n	8001bde <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7fe feb5 	bl	8000924 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbe:	e009      	b.n	8001bd4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7fe feb0 	bl	8000924 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4a6a      	ldr	r2, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x60c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0c6      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	4b65      	ldr	r3, [pc, #404]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b60      	ldr	r3, [pc, #384]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bec:	4b5f      	ldr	r3, [pc, #380]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001bee:	4962      	ldr	r1, [pc, #392]	@ (8001d78 <HAL_RCC_OscConfig+0x610>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x496>
 8001bfc:	e0b0      	b.n	8001d60 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2238      	movs	r2, #56	@ 0x38
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d100      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4a4>
 8001c0a:	e078      	b.n	8001cfe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d153      	bne.n	8001cbc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c1a:	4958      	ldr	r1, [pc, #352]	@ (8001d7c <HAL_RCC_OscConfig+0x614>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7fe fe80 	bl	8000924 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe fe7b 	bl	8000924 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e092      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	049b      	lsls	r3, r3, #18
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b48      	ldr	r3, [pc, #288]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d80 <HAL_RCC_OscConfig+0x618>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0449      	lsls	r1, r1, #17
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c84:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b38      	ldr	r3, [pc, #224]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	0549      	lsls	r1, r1, #21
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7fe fe47 	bl	8000924 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe fe42 	bl	8000924 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e059      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x534>
 8001cba:	e051      	b.n	8001d60 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001cc2:	492e      	ldr	r1, [pc, #184]	@ (8001d7c <HAL_RCC_OscConfig+0x614>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fe2c 	bl	8000924 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fe27 	bl	8000924 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03e      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	049b      	lsls	r3, r3, #18
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001cf6:	4923      	ldr	r1, [pc, #140]	@ (8001d84 <HAL_RCC_OscConfig+0x61c>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e030      	b.n	8001d60 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e02b      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_RCC_OscConfig+0x604>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2203      	movs	r2, #3
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d11e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2270      	movs	r2, #112	@ 0x70
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d117      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	23fe      	movs	r3, #254	@ 0xfe
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d38:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	23f8      	movs	r3, #248	@ 0xf8
 8001d42:	039b      	lsls	r3, r3, #14
 8001d44:	401a      	ands	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	0f5b      	lsrs	r3, r3, #29
 8001d52:	075a      	lsls	r2, r3, #29
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b008      	add	sp, #32
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
 8001d74:	00001388 	.word	0x00001388
 8001d78:	efffffff 	.word	0xefffffff
 8001d7c:	feffffff 	.word	0xfeffffff
 8001d80:	1fc1808c 	.word	0x1fc1808c
 8001d84:	effefffc 	.word	0xeffefffc

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0e9      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2207      	movs	r2, #7
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d91e      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b73      	ldr	r3, [pc, #460]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2207      	movs	r2, #7
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	4b70      	ldr	r3, [pc, #448]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fdb2 	bl	8000924 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7fe fdad 	bl	8000924 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0ca      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dda:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2207      	movs	r2, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d006      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dfc:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4b5f      	ldr	r3, [pc, #380]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	21e0      	movs	r1, #224	@ 0xe0
 8001e04:	01c9      	lsls	r1, r1, #7
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f84 <HAL_RCC_ClockConfig+0x1fc>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b59      	ldr	r3, [pc, #356]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d057      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e30:	4b53      	ldr	r3, [pc, #332]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d12b      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e097      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	049b      	lsls	r3, r3, #18
 8001e50:	4013      	ands	r3, r2
 8001e52:	d11f      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e08b      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e60:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d113      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e07f      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e06d      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4393      	bics	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fd3c 	bl	8000924 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb0:	e009      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb2:	f7fe fd37 	bl	8000924 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e054      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2238      	movs	r2, #56	@ 0x38
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1ec      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d21e      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2207      	movs	r2, #7
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fd14 	bl	8000924 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f02:	f7fe fd0f 	bl	8000924 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e02c      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a15      	ldr	r2, [pc, #84]	@ (8001f88 <HAL_RCC_ClockConfig+0x200>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f42:	f000 f829 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f46:	0001      	movs	r1, r0
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	220f      	movs	r2, #15
 8001f50:	401a      	ands	r2, r3
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_RCC_ClockConfig+0x204>)
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	58d3      	ldr	r3, [r2, r3]
 8001f58:	221f      	movs	r2, #31
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	40da      	lsrs	r2, r3
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_ClockConfig+0x208>)
 8001f62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_RCC_ClockConfig+0x20c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7fe fc7f 	bl	800086c <HAL_InitTick>
 8001f6e:	0003      	movs	r3, r0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	00001388 	.word	0x00001388
 8001f80:	40021000 	.word	0x40021000
 8001f84:	fffff0ff 	.word	0xfffff0ff
 8001f88:	ffff8fff 	.word	0xffff8fff
 8001f8c:	08002828 	.word	0x08002828
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2238      	movs	r2, #56	@ 0x38
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0adb      	lsrs	r3, r3, #11
 8001fae:	2207      	movs	r2, #7
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	4835      	ldr	r0, [pc, #212]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fbe:	f7fe f89f 	bl	8000100 <__udivsi3>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e05d      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2238      	movs	r2, #56	@ 0x38
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e054      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fda:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2238      	movs	r2, #56	@ 0x38
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d138      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2203      	movs	r2, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10d      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4824      	ldr	r0, [pc, #144]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x100>)
 8002008:	f7fe f87a 	bl	8000100 <__udivsi3>
 800200c:	0003      	movs	r3, r0
 800200e:	0019      	movs	r1, r3
 8002010:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	227f      	movs	r2, #127	@ 0x7f
 8002018:	4013      	ands	r3, r2
 800201a:	434b      	muls	r3, r1
 800201c:	617b      	str	r3, [r7, #20]
        break;
 800201e:	e00d      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	481c      	ldr	r0, [pc, #112]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002024:	f7fe f86c 	bl	8000100 <__udivsi3>
 8002028:	0003      	movs	r3, r0
 800202a:	0019      	movs	r1, r3
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	227f      	movs	r2, #127	@ 0x7f
 8002034:	4013      	ands	r3, r2
 8002036:	434b      	muls	r3, r1
 8002038:	617b      	str	r3, [r7, #20]
        break;
 800203a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0f5b      	lsrs	r3, r3, #29
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	3301      	adds	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7fe f857 	bl	8000100 <__udivsi3>
 8002052:	0003      	movs	r3, r0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e015      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2238      	movs	r2, #56	@ 0x38
 800205e:	4013      	ands	r3, r2
 8002060:	2b20      	cmp	r3, #32
 8002062:	d103      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2238      	movs	r2, #56	@ 0x38
 8002072:	4013      	ands	r3, r2
 8002074:	2b18      	cmp	r3, #24
 8002076:	d103      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002078:	23fa      	movs	r3, #250	@ 0xfa
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e001      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002084:	693b      	ldr	r3, [r7, #16]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	00f42400 	.word	0x00f42400
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0a8      	b.n	8002200 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2382      	movs	r3, #130	@ 0x82
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	429a      	cmp	r2, r3
 80020c0:	d009      	beq.n	80020d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
 80020c8:	e005      	b.n	80020d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	225d      	movs	r2, #93	@ 0x5d
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	225c      	movs	r2, #92	@ 0x5c
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7fe faf2 	bl	80006dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	225d      	movs	r2, #93	@ 0x5d
 80020fc:	2102      	movs	r1, #2
 80020fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	438a      	bics	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	23e0      	movs	r3, #224	@ 0xe0
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	429a      	cmp	r2, r3
 800211a:	d902      	bls.n	8002122 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e002      	b.n	8002128 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	23f0      	movs	r3, #240	@ 0xf0
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	429a      	cmp	r2, r3
 8002132:	d008      	beq.n	8002146 <HAL_SPI_Init+0xaa>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	23e0      	movs	r3, #224	@ 0xe0
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	429a      	cmp	r2, r3
 800213e:	d002      	beq.n	8002146 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	2382      	movs	r3, #130	@ 0x82
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	401a      	ands	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	2384      	movs	r3, #132	@ 0x84
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	400b      	ands	r3, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2102      	movs	r1, #2
 8002162:	400b      	ands	r3, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2101      	movs	r1, #1
 800216c:	400b      	ands	r3, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6999      	ldr	r1, [r3, #24]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	400b      	ands	r3, r1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2138      	movs	r1, #56	@ 0x38
 8002182:	400b      	ands	r3, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	400b      	ands	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	0011      	movs	r1, r2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	2204      	movs	r2, #4
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	2110      	movs	r1, #16
 80021b4:	400b      	ands	r3, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	2108      	movs	r1, #8
 80021be:	400b      	ands	r3, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	23f0      	movs	r3, #240	@ 0xf0
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	0011      	movs	r1, r2
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	015b      	lsls	r3, r3, #5
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4907      	ldr	r1, [pc, #28]	@ (8002208 <HAL_SPI_Init+0x16c>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	225d      	movs	r2, #93	@ 0x5d
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}
 8002208:	fffff7ff 	.word	0xfffff7ff

0800220c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800221c:	231f      	movs	r3, #31
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	225c      	movs	r2, #92	@ 0x5c
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Transmit+0x26>
 800222e:	2302      	movs	r3, #2
 8002230:	e147      	b.n	80024c2 <HAL_SPI_Transmit+0x2b6>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	225c      	movs	r2, #92	@ 0x5c
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223a:	f7fe fb73 	bl	8000924 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002242:	2316      	movs	r3, #22
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	1dba      	adds	r2, r7, #6
 8002248:	8812      	ldrh	r2, [r2, #0]
 800224a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	225d      	movs	r2, #93	@ 0x5d
 8002250:	5c9b      	ldrb	r3, [r3, r2]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d004      	beq.n	8002262 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002258:	231f      	movs	r3, #31
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002260:	e128      	b.n	80024b4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_SPI_Transmit+0x64>
 8002268:	1dbb      	adds	r3, r7, #6
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002270:	231f      	movs	r3, #31
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    goto error;
 8002278:	e11c      	b.n	80024b4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	225d      	movs	r2, #93	@ 0x5d
 800227e:	2103      	movs	r1, #3
 8002280:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1dba      	adds	r2, r7, #6
 8002292:	8812      	ldrh	r2, [r2, #0]
 8002294:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1dba      	adds	r2, r7, #6
 800229a:	8812      	ldrh	r2, [r2, #0]
 800229c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2244      	movs	r2, #68	@ 0x44
 80022a8:	2100      	movs	r1, #0
 80022aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2246      	movs	r2, #70	@ 0x46
 80022b0:	2100      	movs	r1, #0
 80022b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	2380      	movs	r3, #128	@ 0x80
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d110      	bne.n	80022ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2140      	movs	r1, #64	@ 0x40
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	01c9      	lsls	r1, r1, #7
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b40      	cmp	r3, #64	@ 0x40
 80022fa:	d007      	beq.n	800230c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2140      	movs	r1, #64	@ 0x40
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23e0      	movs	r3, #224	@ 0xe0
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d952      	bls.n	80023be <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_SPI_Transmit+0x11e>
 8002320:	2316      	movs	r3, #22
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d143      	bne.n	80023b2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	1c9a      	adds	r2, r3, #2
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800234e:	e030      	b.n	80023b2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d112      	bne.n	8002384 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	1c9a      	adds	r2, r3, #2
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002382:	e016      	b.n	80023b2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002384:	f7fe face 	bl	8000924 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d802      	bhi.n	800239a <HAL_SPI_Transmit+0x18e>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_SPI_Transmit+0x194>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2203      	movs	r2, #3
 80023a6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	225d      	movs	r2, #93	@ 0x5d
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]
          goto error;
 80023b0:	e080      	b.n	80024b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1c9      	bne.n	8002350 <HAL_SPI_Transmit+0x144>
 80023bc:	e053      	b.n	8002466 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_SPI_Transmit+0x1c4>
 80023c6:	2316      	movs	r3, #22
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d145      	bne.n	800245c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80023f6:	e031      	b.n	800245c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2202      	movs	r2, #2
 8002400:	4013      	ands	r3, r2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d113      	bne.n	800242e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800242c:	e016      	b.n	800245c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe fa79 	bl	8000924 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d802      	bhi.n	8002444 <HAL_SPI_Transmit+0x238>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_SPI_Transmit+0x23e>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800244a:	231f      	movs	r3, #31
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2203      	movs	r2, #3
 8002450:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	225d      	movs	r2, #93	@ 0x5d
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
          goto error;
 800245a:	e02b      	b.n	80024b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1c8      	bne.n	80023f8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 f95d 	bl	800272c <SPI_EndRxTxTransaction>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d002      	beq.n	800247c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80024a2:	231f      	movs	r3, #31
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e003      	b.n	80024b4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	225d      	movs	r2, #93	@ 0x5d
 80024b0:	2101      	movs	r1, #1
 80024b2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	225c      	movs	r2, #92	@ 0x5c
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b008      	add	sp, #32
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024dc:	f7fe fa22 	bl	8000924 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024ec:	f7fe fa1a 	bl	8000924 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024f4:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	015b      	lsls	r3, r3, #5
 80024fa:	0d1b      	lsrs	r3, r3, #20
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	4353      	muls	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002502:	e058      	b.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	d055      	beq.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800250a:	f7fe fa0b 	bl	8000924 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	429a      	cmp	r2, r3
 8002518:	d902      	bls.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x54>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d142      	bne.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	21e0      	movs	r1, #224	@ 0xe0
 800252c:	438a      	bics	r2, r1
 800252e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	2382      	movs	r3, #130	@ 0x82
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	429a      	cmp	r2, r3
 800253a:	d113      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x98>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	429a      	cmp	r2, r3
 8002546:	d005      	beq.n	8002554 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	438a      	bics	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	429a      	cmp	r2, r3
 800256e:	d110      	bne.n	8002592 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	491a      	ldr	r1, [pc, #104]	@ (80025e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	0189      	lsls	r1, r1, #6
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	225d      	movs	r2, #93	@ 0x5d
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	225c      	movs	r2, #92	@ 0x5c
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e017      	b.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	425a      	negs	r2, r3
 80025c6:	4153      	adcs	r3, r2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	001a      	movs	r2, r3
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d197      	bne.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b008      	add	sp, #32
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	20000000 	.word	0x20000000
 80025e4:	ffffdfff 	.word	0xffffdfff

080025e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025f6:	2317      	movs	r3, #23
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025fe:	f7fe f991 	bl	8000924 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800260e:	f7fe f989 	bl	8000924 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800261e:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	0013      	movs	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	189b      	adds	r3, r3, r2
 8002628:	00da      	lsls	r2, r3, #3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	0d1b      	lsrs	r3, r3, #20
 800262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002630:	4353      	muls	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002634:	e068      	b.n	8002708 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	23c0      	movs	r3, #192	@ 0xc0
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	429a      	cmp	r2, r3
 800263e:	d10a      	bne.n	8002656 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	2117      	movs	r1, #23
 800264e:	187b      	adds	r3, r7, r1
 8002650:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002652:	187b      	adds	r3, r7, r1
 8002654:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	d055      	beq.n	8002708 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800265c:	f7fe f962 	bl	8000924 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002668:	429a      	cmp	r2, r3
 800266a:	d902      	bls.n	8002672 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d142      	bne.n	80026f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	21e0      	movs	r1, #224	@ 0xe0
 800267e:	438a      	bics	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	2382      	movs	r3, #130	@ 0x82
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	429a      	cmp	r2, r3
 800268c:	d113      	bne.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	429a      	cmp	r2, r3
 8002698:	d005      	beq.n	80026a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d107      	bne.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2140      	movs	r1, #64	@ 0x40
 80026b2:	438a      	bics	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	429a      	cmp	r2, r3
 80026c0:	d110      	bne.n	80026e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4916      	ldr	r1, [pc, #88]	@ (8002728 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	0189      	lsls	r1, r1, #6
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	225d      	movs	r2, #93	@ 0x5d
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	225c      	movs	r2, #92	@ 0x5c
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e010      	b.n	800271a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3b01      	subs	r3, #1
 8002706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	d18e      	bne.n	8002636 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b00a      	add	sp, #40	@ 0x28
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	20000000 	.word	0x20000000
 8002728:	ffffdfff 	.word	0xffffdfff

0800272c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	23c0      	movs	r3, #192	@ 0xc0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	0013      	movs	r3, r2
 8002746:	2200      	movs	r2, #0
 8002748:	f7ff ff4e 	bl	80025e8 <SPI_WaitFifoStateUntilTimeout>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d007      	beq.n	8002760 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	2220      	movs	r2, #32
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e027      	b.n	80027b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	0013      	movs	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	f7ff fead 	bl	80024cc <SPI_WaitFlagStateUntilTimeout>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d007      	beq.n	8002786 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277a:	2220      	movs	r2, #32
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e014      	b.n	80027b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	23c0      	movs	r3, #192	@ 0xc0
 800278a:	00d9      	lsls	r1, r3, #3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	0013      	movs	r3, r2
 8002794:	2200      	movs	r2, #0
 8002796:	f7ff ff27 	bl	80025e8 <SPI_WaitFifoStateUntilTimeout>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d007      	beq.n	80027ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	2220      	movs	r2, #32
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e000      	b.n	80027b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b004      	add	sp, #16
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <memset>:
 80027b8:	0003      	movs	r3, r0
 80027ba:	1882      	adds	r2, r0, r2
 80027bc:	4293      	cmp	r3, r2
 80027be:	d100      	bne.n	80027c2 <memset+0xa>
 80027c0:	4770      	bx	lr
 80027c2:	7019      	strb	r1, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	e7f9      	b.n	80027bc <memset+0x4>

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	2600      	movs	r6, #0
 80027cc:	4c0c      	ldr	r4, [pc, #48]	@ (8002800 <__libc_init_array+0x38>)
 80027ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002804 <__libc_init_array+0x3c>)
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	2600      	movs	r6, #0
 80027da:	f000 f819 	bl	8002810 <_init>
 80027de:	4c0a      	ldr	r4, [pc, #40]	@ (8002808 <__libc_init_array+0x40>)
 80027e0:	4d0a      	ldr	r5, [pc, #40]	@ (800280c <__libc_init_array+0x44>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	00b3      	lsls	r3, r6, #2
 80027ee:	58eb      	ldr	r3, [r5, r3]
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	00b3      	lsls	r3, r6, #2
 80027f8:	58eb      	ldr	r3, [r5, r3]
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	08002868 	.word	0x08002868
 8002804:	08002868 	.word	0x08002868
 8002808:	0800286c 	.word	0x0800286c
 800280c:	08002868 	.word	0x08002868

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr
