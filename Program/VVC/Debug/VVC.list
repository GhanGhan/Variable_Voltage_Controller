
VVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080064e8  080064e8  000074e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  080068a8  080068a8  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a8  080068a8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068ac  080068ac  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080068b0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08006920  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006920  000082f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdb3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e6  00000000  00000000  00013e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00003672  00000000  00000000  00016431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  00019aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000917  00000000  00000000  0001a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ca7  00000000  00000000  0001abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e687  00000000  00000000  0003088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d25  00000000  00000000  0003ef15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c5c3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f3c  00000000  00000000  000c5c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000c7bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080064cc 	.word	0x080064cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080064cc 	.word	0x080064cc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdrcmple>:
 8000410:	4684      	mov	ip, r0
 8000412:	0010      	movs	r0, r2
 8000414:	4662      	mov	r2, ip
 8000416:	468c      	mov	ip, r1
 8000418:	0019      	movs	r1, r3
 800041a:	4663      	mov	r3, ip
 800041c:	e000      	b.n	8000420 <__aeabi_cdcmpeq>
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__aeabi_cdcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f001 fd2f 	bl	8001e84 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cdcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_dcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fc6f 	bl	8001d14 <__eqdf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_dcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f001 fd21 	bl	8001e84 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_dcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_dcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fd17 	bl	8001e84 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_dcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fc99 	bl	8001d9c <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_dcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fc8f 	bl	8001d9c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_dcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cfrcmple>:
 800048c:	4684      	mov	ip, r0
 800048e:	0008      	movs	r0, r1
 8000490:	4661      	mov	r1, ip
 8000492:	e7ff      	b.n	8000494 <__aeabi_cfcmpeq>

08000494 <__aeabi_cfcmpeq>:
 8000494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000496:	f000 f9cb 	bl	8000830 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	d401      	bmi.n	80004a2 <__aeabi_cfcmpeq+0xe>
 800049e:	2100      	movs	r1, #0
 80004a0:	42c8      	cmn	r0, r1
 80004a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004a4 <__aeabi_fcmpeq>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 f94b 	bl	8000740 <__eqsf2>
 80004aa:	4240      	negs	r0, r0
 80004ac:	3001      	adds	r0, #1
 80004ae:	bd10      	pop	{r4, pc}

080004b0 <__aeabi_fcmplt>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f000 f9bd 	bl	8000830 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	db01      	blt.n	80004be <__aeabi_fcmplt+0xe>
 80004ba:	2000      	movs	r0, #0
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	2001      	movs	r0, #1
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)

080004c4 <__aeabi_fcmple>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f9b3 	bl	8000830 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	dd01      	ble.n	80004d2 <__aeabi_fcmple+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmpgt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f959 	bl	8000790 <__gesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dc01      	bgt.n	80004e6 <__aeabi_fcmpgt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpge>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f94f 	bl	8000790 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	da01      	bge.n	80004fa <__aeabi_fcmpge+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fdiv>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	464f      	mov	r7, r9
 8000504:	4646      	mov	r6, r8
 8000506:	46d6      	mov	lr, sl
 8000508:	0244      	lsls	r4, r0, #9
 800050a:	b5c0      	push	{r6, r7, lr}
 800050c:	0047      	lsls	r7, r0, #1
 800050e:	1c0e      	adds	r6, r1, #0
 8000510:	0a64      	lsrs	r4, r4, #9
 8000512:	0e3f      	lsrs	r7, r7, #24
 8000514:	0fc5      	lsrs	r5, r0, #31
 8000516:	2f00      	cmp	r7, #0
 8000518:	d03c      	beq.n	8000594 <__aeabi_fdiv+0x94>
 800051a:	2fff      	cmp	r7, #255	@ 0xff
 800051c:	d042      	beq.n	80005a4 <__aeabi_fdiv+0xa4>
 800051e:	2300      	movs	r3, #0
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	4699      	mov	r9, r3
 8000524:	469a      	mov	sl, r3
 8000526:	00e4      	lsls	r4, r4, #3
 8000528:	04d2      	lsls	r2, r2, #19
 800052a:	4314      	orrs	r4, r2
 800052c:	3f7f      	subs	r7, #127	@ 0x7f
 800052e:	0273      	lsls	r3, r6, #9
 8000530:	0a5b      	lsrs	r3, r3, #9
 8000532:	4698      	mov	r8, r3
 8000534:	0073      	lsls	r3, r6, #1
 8000536:	0e1b      	lsrs	r3, r3, #24
 8000538:	0ff6      	lsrs	r6, r6, #31
 800053a:	2b00      	cmp	r3, #0
 800053c:	d01b      	beq.n	8000576 <__aeabi_fdiv+0x76>
 800053e:	2bff      	cmp	r3, #255	@ 0xff
 8000540:	d013      	beq.n	800056a <__aeabi_fdiv+0x6a>
 8000542:	4642      	mov	r2, r8
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	04c9      	lsls	r1, r1, #19
 800054a:	4311      	orrs	r1, r2
 800054c:	4688      	mov	r8, r1
 800054e:	2000      	movs	r0, #0
 8000550:	3b7f      	subs	r3, #127	@ 0x7f
 8000552:	0029      	movs	r1, r5
 8000554:	1aff      	subs	r7, r7, r3
 8000556:	464b      	mov	r3, r9
 8000558:	4071      	eors	r1, r6
 800055a:	b2c9      	uxtb	r1, r1
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d900      	bls.n	8000562 <__aeabi_fdiv+0x62>
 8000560:	e0b5      	b.n	80006ce <__aeabi_fdiv+0x1ce>
 8000562:	4a74      	ldr	r2, [pc, #464]	@ (8000734 <__aeabi_fdiv+0x234>)
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	58d3      	ldr	r3, [r2, r3]
 8000568:	469f      	mov	pc, r3
 800056a:	4643      	mov	r3, r8
 800056c:	2b00      	cmp	r3, #0
 800056e:	d13f      	bne.n	80005f0 <__aeabi_fdiv+0xf0>
 8000570:	3fff      	subs	r7, #255	@ 0xff
 8000572:	3302      	adds	r3, #2
 8000574:	e003      	b.n	800057e <__aeabi_fdiv+0x7e>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d12d      	bne.n	80005d8 <__aeabi_fdiv+0xd8>
 800057c:	2301      	movs	r3, #1
 800057e:	0029      	movs	r1, r5
 8000580:	464a      	mov	r2, r9
 8000582:	4071      	eors	r1, r6
 8000584:	b2c9      	uxtb	r1, r1
 8000586:	431a      	orrs	r2, r3
 8000588:	2a0e      	cmp	r2, #14
 800058a:	d838      	bhi.n	80005fe <__aeabi_fdiv+0xfe>
 800058c:	486a      	ldr	r0, [pc, #424]	@ (8000738 <__aeabi_fdiv+0x238>)
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	5882      	ldr	r2, [r0, r2]
 8000592:	4697      	mov	pc, r2
 8000594:	2c00      	cmp	r4, #0
 8000596:	d113      	bne.n	80005c0 <__aeabi_fdiv+0xc0>
 8000598:	2304      	movs	r3, #4
 800059a:	4699      	mov	r9, r3
 800059c:	3b03      	subs	r3, #3
 800059e:	2700      	movs	r7, #0
 80005a0:	469a      	mov	sl, r3
 80005a2:	e7c4      	b.n	800052e <__aeabi_fdiv+0x2e>
 80005a4:	2c00      	cmp	r4, #0
 80005a6:	d105      	bne.n	80005b4 <__aeabi_fdiv+0xb4>
 80005a8:	2308      	movs	r3, #8
 80005aa:	4699      	mov	r9, r3
 80005ac:	3b06      	subs	r3, #6
 80005ae:	27ff      	movs	r7, #255	@ 0xff
 80005b0:	469a      	mov	sl, r3
 80005b2:	e7bc      	b.n	800052e <__aeabi_fdiv+0x2e>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	27ff      	movs	r7, #255	@ 0xff
 80005bc:	469a      	mov	sl, r3
 80005be:	e7b6      	b.n	800052e <__aeabi_fdiv+0x2e>
 80005c0:	0020      	movs	r0, r4
 80005c2:	f002 fc75 	bl	8002eb0 <__clzsi2>
 80005c6:	2776      	movs	r7, #118	@ 0x76
 80005c8:	1f43      	subs	r3, r0, #5
 80005ca:	409c      	lsls	r4, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	427f      	negs	r7, r7
 80005d0:	4699      	mov	r9, r3
 80005d2:	469a      	mov	sl, r3
 80005d4:	1a3f      	subs	r7, r7, r0
 80005d6:	e7aa      	b.n	800052e <__aeabi_fdiv+0x2e>
 80005d8:	4640      	mov	r0, r8
 80005da:	f002 fc69 	bl	8002eb0 <__clzsi2>
 80005de:	4642      	mov	r2, r8
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409a      	lsls	r2, r3
 80005e4:	2376      	movs	r3, #118	@ 0x76
 80005e6:	425b      	negs	r3, r3
 80005e8:	1a1b      	subs	r3, r3, r0
 80005ea:	4690      	mov	r8, r2
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7b0      	b.n	8000552 <__aeabi_fdiv+0x52>
 80005f0:	2303      	movs	r3, #3
 80005f2:	464a      	mov	r2, r9
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2003      	movs	r0, #3
 80005fa:	33fc      	adds	r3, #252	@ 0xfc
 80005fc:	e7a9      	b.n	8000552 <__aeabi_fdiv+0x52>
 80005fe:	000d      	movs	r5, r1
 8000600:	20ff      	movs	r0, #255	@ 0xff
 8000602:	2200      	movs	r2, #0
 8000604:	05c0      	lsls	r0, r0, #23
 8000606:	07ed      	lsls	r5, r5, #31
 8000608:	4310      	orrs	r0, r2
 800060a:	4328      	orrs	r0, r5
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	000d      	movs	r5, r1
 8000618:	2000      	movs	r0, #0
 800061a:	2200      	movs	r2, #0
 800061c:	e7f2      	b.n	8000604 <__aeabi_fdiv+0x104>
 800061e:	4653      	mov	r3, sl
 8000620:	2b02      	cmp	r3, #2
 8000622:	d0ed      	beq.n	8000600 <__aeabi_fdiv+0x100>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d033      	beq.n	8000690 <__aeabi_fdiv+0x190>
 8000628:	46a0      	mov	r8, r4
 800062a:	2b01      	cmp	r3, #1
 800062c:	d105      	bne.n	800063a <__aeabi_fdiv+0x13a>
 800062e:	2000      	movs	r0, #0
 8000630:	2200      	movs	r2, #0
 8000632:	e7e7      	b.n	8000604 <__aeabi_fdiv+0x104>
 8000634:	0035      	movs	r5, r6
 8000636:	2803      	cmp	r0, #3
 8000638:	d07a      	beq.n	8000730 <__aeabi_fdiv+0x230>
 800063a:	003b      	movs	r3, r7
 800063c:	337f      	adds	r3, #127	@ 0x7f
 800063e:	2b00      	cmp	r3, #0
 8000640:	dd2d      	ble.n	800069e <__aeabi_fdiv+0x19e>
 8000642:	4642      	mov	r2, r8
 8000644:	0752      	lsls	r2, r2, #29
 8000646:	d007      	beq.n	8000658 <__aeabi_fdiv+0x158>
 8000648:	220f      	movs	r2, #15
 800064a:	4641      	mov	r1, r8
 800064c:	400a      	ands	r2, r1
 800064e:	2a04      	cmp	r2, #4
 8000650:	d002      	beq.n	8000658 <__aeabi_fdiv+0x158>
 8000652:	2204      	movs	r2, #4
 8000654:	4694      	mov	ip, r2
 8000656:	44e0      	add	r8, ip
 8000658:	4642      	mov	r2, r8
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	d505      	bpl.n	800066a <__aeabi_fdiv+0x16a>
 800065e:	4642      	mov	r2, r8
 8000660:	4b36      	ldr	r3, [pc, #216]	@ (800073c <__aeabi_fdiv+0x23c>)
 8000662:	401a      	ands	r2, r3
 8000664:	003b      	movs	r3, r7
 8000666:	4690      	mov	r8, r2
 8000668:	3380      	adds	r3, #128	@ 0x80
 800066a:	2bfe      	cmp	r3, #254	@ 0xfe
 800066c:	dcc8      	bgt.n	8000600 <__aeabi_fdiv+0x100>
 800066e:	4642      	mov	r2, r8
 8000670:	0192      	lsls	r2, r2, #6
 8000672:	0a52      	lsrs	r2, r2, #9
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	e7c5      	b.n	8000604 <__aeabi_fdiv+0x104>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2500      	movs	r5, #0
 800067c:	20ff      	movs	r0, #255	@ 0xff
 800067e:	03d2      	lsls	r2, r2, #15
 8000680:	e7c0      	b.n	8000604 <__aeabi_fdiv+0x104>
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	4214      	tst	r4, r2
 8000688:	d002      	beq.n	8000690 <__aeabi_fdiv+0x190>
 800068a:	4643      	mov	r3, r8
 800068c:	4213      	tst	r3, r2
 800068e:	d049      	beq.n	8000724 <__aeabi_fdiv+0x224>
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	03d2      	lsls	r2, r2, #15
 8000694:	4322      	orrs	r2, r4
 8000696:	0252      	lsls	r2, r2, #9
 8000698:	20ff      	movs	r0, #255	@ 0xff
 800069a:	0a52      	lsrs	r2, r2, #9
 800069c:	e7b2      	b.n	8000604 <__aeabi_fdiv+0x104>
 800069e:	2201      	movs	r2, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	2b1b      	cmp	r3, #27
 80006a4:	dcc3      	bgt.n	800062e <__aeabi_fdiv+0x12e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	40da      	lsrs	r2, r3
 80006aa:	4643      	mov	r3, r8
 80006ac:	379e      	adds	r7, #158	@ 0x9e
 80006ae:	40bb      	lsls	r3, r7
 80006b0:	1e59      	subs	r1, r3, #1
 80006b2:	418b      	sbcs	r3, r1
 80006b4:	431a      	orrs	r2, r3
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fdiv+0x1c4>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fdiv+0x1c4>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d529      	bpl.n	800071c <__aeabi_fdiv+0x21c>
 80006c8:	2001      	movs	r0, #1
 80006ca:	2200      	movs	r2, #0
 80006cc:	e79a      	b.n	8000604 <__aeabi_fdiv+0x104>
 80006ce:	4642      	mov	r2, r8
 80006d0:	0163      	lsls	r3, r4, #5
 80006d2:	0155      	lsls	r5, r2, #5
 80006d4:	42ab      	cmp	r3, r5
 80006d6:	d215      	bcs.n	8000704 <__aeabi_fdiv+0x204>
 80006d8:	201b      	movs	r0, #27
 80006da:	2200      	movs	r2, #0
 80006dc:	3f01      	subs	r7, #1
 80006de:	2601      	movs	r6, #1
 80006e0:	001c      	movs	r4, r3
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	2c00      	cmp	r4, #0
 80006e8:	db01      	blt.n	80006ee <__aeabi_fdiv+0x1ee>
 80006ea:	429d      	cmp	r5, r3
 80006ec:	d801      	bhi.n	80006f2 <__aeabi_fdiv+0x1f2>
 80006ee:	1b5b      	subs	r3, r3, r5
 80006f0:	4332      	orrs	r2, r6
 80006f2:	3801      	subs	r0, #1
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d1f3      	bne.n	80006e0 <__aeabi_fdiv+0x1e0>
 80006f8:	1e58      	subs	r0, r3, #1
 80006fa:	4183      	sbcs	r3, r0
 80006fc:	4313      	orrs	r3, r2
 80006fe:	4698      	mov	r8, r3
 8000700:	000d      	movs	r5, r1
 8000702:	e79a      	b.n	800063a <__aeabi_fdiv+0x13a>
 8000704:	201a      	movs	r0, #26
 8000706:	2201      	movs	r2, #1
 8000708:	1b5b      	subs	r3, r3, r5
 800070a:	e7e8      	b.n	80006de <__aeabi_fdiv+0x1de>
 800070c:	3b02      	subs	r3, #2
 800070e:	425a      	negs	r2, r3
 8000710:	4153      	adcs	r3, r2
 8000712:	425b      	negs	r3, r3
 8000714:	0035      	movs	r5, r6
 8000716:	2200      	movs	r2, #0
 8000718:	b2d8      	uxtb	r0, r3
 800071a:	e773      	b.n	8000604 <__aeabi_fdiv+0x104>
 800071c:	0192      	lsls	r2, r2, #6
 800071e:	2000      	movs	r0, #0
 8000720:	0a52      	lsrs	r2, r2, #9
 8000722:	e76f      	b.n	8000604 <__aeabi_fdiv+0x104>
 8000724:	431a      	orrs	r2, r3
 8000726:	0252      	lsls	r2, r2, #9
 8000728:	0035      	movs	r5, r6
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	0a52      	lsrs	r2, r2, #9
 800072e:	e769      	b.n	8000604 <__aeabi_fdiv+0x104>
 8000730:	4644      	mov	r4, r8
 8000732:	e7ad      	b.n	8000690 <__aeabi_fdiv+0x190>
 8000734:	080064e8 	.word	0x080064e8
 8000738:	08006528 	.word	0x08006528
 800073c:	f7ffffff 	.word	0xf7ffffff

08000740 <__eqsf2>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	0042      	lsls	r2, r0, #1
 8000744:	024e      	lsls	r6, r1, #9
 8000746:	004c      	lsls	r4, r1, #1
 8000748:	0245      	lsls	r5, r0, #9
 800074a:	0a6d      	lsrs	r5, r5, #9
 800074c:	0e12      	lsrs	r2, r2, #24
 800074e:	0fc3      	lsrs	r3, r0, #31
 8000750:	0a76      	lsrs	r6, r6, #9
 8000752:	0e24      	lsrs	r4, r4, #24
 8000754:	0fc9      	lsrs	r1, r1, #31
 8000756:	2aff      	cmp	r2, #255	@ 0xff
 8000758:	d010      	beq.n	800077c <__eqsf2+0x3c>
 800075a:	2cff      	cmp	r4, #255	@ 0xff
 800075c:	d00c      	beq.n	8000778 <__eqsf2+0x38>
 800075e:	2001      	movs	r0, #1
 8000760:	42a2      	cmp	r2, r4
 8000762:	d10a      	bne.n	800077a <__eqsf2+0x3a>
 8000764:	42b5      	cmp	r5, r6
 8000766:	d108      	bne.n	800077a <__eqsf2+0x3a>
 8000768:	428b      	cmp	r3, r1
 800076a:	d00f      	beq.n	800078c <__eqsf2+0x4c>
 800076c:	2a00      	cmp	r2, #0
 800076e:	d104      	bne.n	800077a <__eqsf2+0x3a>
 8000770:	0028      	movs	r0, r5
 8000772:	1e43      	subs	r3, r0, #1
 8000774:	4198      	sbcs	r0, r3
 8000776:	e000      	b.n	800077a <__eqsf2+0x3a>
 8000778:	2001      	movs	r0, #1
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	2001      	movs	r0, #1
 800077e:	2cff      	cmp	r4, #255	@ 0xff
 8000780:	d1fb      	bne.n	800077a <__eqsf2+0x3a>
 8000782:	4335      	orrs	r5, r6
 8000784:	d1f9      	bne.n	800077a <__eqsf2+0x3a>
 8000786:	404b      	eors	r3, r1
 8000788:	0018      	movs	r0, r3
 800078a:	e7f6      	b.n	800077a <__eqsf2+0x3a>
 800078c:	2000      	movs	r0, #0
 800078e:	e7f4      	b.n	800077a <__eqsf2+0x3a>

08000790 <__gesf2>:
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	0042      	lsls	r2, r0, #1
 8000794:	0244      	lsls	r4, r0, #9
 8000796:	024d      	lsls	r5, r1, #9
 8000798:	0fc3      	lsrs	r3, r0, #31
 800079a:	0048      	lsls	r0, r1, #1
 800079c:	0a64      	lsrs	r4, r4, #9
 800079e:	0e12      	lsrs	r2, r2, #24
 80007a0:	0a6d      	lsrs	r5, r5, #9
 80007a2:	0e00      	lsrs	r0, r0, #24
 80007a4:	0fc9      	lsrs	r1, r1, #31
 80007a6:	2aff      	cmp	r2, #255	@ 0xff
 80007a8:	d019      	beq.n	80007de <__gesf2+0x4e>
 80007aa:	28ff      	cmp	r0, #255	@ 0xff
 80007ac:	d00b      	beq.n	80007c6 <__gesf2+0x36>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d11e      	bne.n	80007f0 <__gesf2+0x60>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d10b      	bne.n	80007ce <__gesf2+0x3e>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d027      	beq.n	800080a <__gesf2+0x7a>
 80007ba:	2c00      	cmp	r4, #0
 80007bc:	d134      	bne.n	8000828 <__gesf2+0x98>
 80007be:	2900      	cmp	r1, #0
 80007c0:	d02f      	beq.n	8000822 <__gesf2+0x92>
 80007c2:	0008      	movs	r0, r1
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d128      	bne.n	800081c <__gesf2+0x8c>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d101      	bne.n	80007d2 <__gesf2+0x42>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d0f5      	beq.n	80007be <__gesf2+0x2e>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d107      	bne.n	80007e6 <__gesf2+0x56>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d023      	beq.n	8000822 <__gesf2+0x92>
 80007da:	0018      	movs	r0, r3
 80007dc:	e7f2      	b.n	80007c4 <__gesf2+0x34>
 80007de:	2c00      	cmp	r4, #0
 80007e0:	d11c      	bne.n	800081c <__gesf2+0x8c>
 80007e2:	28ff      	cmp	r0, #255	@ 0xff
 80007e4:	d014      	beq.n	8000810 <__gesf2+0x80>
 80007e6:	1e58      	subs	r0, r3, #1
 80007e8:	2302      	movs	r3, #2
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e7e9      	b.n	80007c4 <__gesf2+0x34>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d0f8      	beq.n	80007e6 <__gesf2+0x56>
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d1f6      	bne.n	80007e6 <__gesf2+0x56>
 80007f8:	4282      	cmp	r2, r0
 80007fa:	dcf4      	bgt.n	80007e6 <__gesf2+0x56>
 80007fc:	dbeb      	blt.n	80007d6 <__gesf2+0x46>
 80007fe:	42ac      	cmp	r4, r5
 8000800:	d8f1      	bhi.n	80007e6 <__gesf2+0x56>
 8000802:	2000      	movs	r0, #0
 8000804:	42ac      	cmp	r4, r5
 8000806:	d2dd      	bcs.n	80007c4 <__gesf2+0x34>
 8000808:	e7e5      	b.n	80007d6 <__gesf2+0x46>
 800080a:	2c00      	cmp	r4, #0
 800080c:	d0da      	beq.n	80007c4 <__gesf2+0x34>
 800080e:	e7ea      	b.n	80007e6 <__gesf2+0x56>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d103      	bne.n	800081c <__gesf2+0x8c>
 8000814:	428b      	cmp	r3, r1
 8000816:	d1e6      	bne.n	80007e6 <__gesf2+0x56>
 8000818:	2000      	movs	r0, #0
 800081a:	e7d3      	b.n	80007c4 <__gesf2+0x34>
 800081c:	2002      	movs	r0, #2
 800081e:	4240      	negs	r0, r0
 8000820:	e7d0      	b.n	80007c4 <__gesf2+0x34>
 8000822:	2001      	movs	r0, #1
 8000824:	4240      	negs	r0, r0
 8000826:	e7cd      	b.n	80007c4 <__gesf2+0x34>
 8000828:	428b      	cmp	r3, r1
 800082a:	d0e8      	beq.n	80007fe <__gesf2+0x6e>
 800082c:	e7db      	b.n	80007e6 <__gesf2+0x56>
 800082e:	46c0      	nop			@ (mov r8, r8)

08000830 <__lesf2>:
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	0042      	lsls	r2, r0, #1
 8000834:	0244      	lsls	r4, r0, #9
 8000836:	024d      	lsls	r5, r1, #9
 8000838:	0fc3      	lsrs	r3, r0, #31
 800083a:	0048      	lsls	r0, r1, #1
 800083c:	0a64      	lsrs	r4, r4, #9
 800083e:	0e12      	lsrs	r2, r2, #24
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e00      	lsrs	r0, r0, #24
 8000844:	0fc9      	lsrs	r1, r1, #31
 8000846:	2aff      	cmp	r2, #255	@ 0xff
 8000848:	d01a      	beq.n	8000880 <__lesf2+0x50>
 800084a:	28ff      	cmp	r0, #255	@ 0xff
 800084c:	d00e      	beq.n	800086c <__lesf2+0x3c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d11e      	bne.n	8000890 <__lesf2+0x60>
 8000852:	2800      	cmp	r0, #0
 8000854:	d10e      	bne.n	8000874 <__lesf2+0x44>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d02a      	beq.n	80008b0 <__lesf2+0x80>
 800085a:	2c00      	cmp	r4, #0
 800085c:	d00c      	beq.n	8000878 <__lesf2+0x48>
 800085e:	428b      	cmp	r3, r1
 8000860:	d01d      	beq.n	800089e <__lesf2+0x6e>
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	2302      	movs	r3, #2
 8000866:	4018      	ands	r0, r3
 8000868:	3801      	subs	r0, #1
 800086a:	e010      	b.n	800088e <__lesf2+0x5e>
 800086c:	2d00      	cmp	r5, #0
 800086e:	d10d      	bne.n	800088c <__lesf2+0x5c>
 8000870:	2a00      	cmp	r2, #0
 8000872:	d120      	bne.n	80008b6 <__lesf2+0x86>
 8000874:	2c00      	cmp	r4, #0
 8000876:	d11e      	bne.n	80008b6 <__lesf2+0x86>
 8000878:	2900      	cmp	r1, #0
 800087a:	d023      	beq.n	80008c4 <__lesf2+0x94>
 800087c:	0008      	movs	r0, r1
 800087e:	e006      	b.n	800088e <__lesf2+0x5e>
 8000880:	2c00      	cmp	r4, #0
 8000882:	d103      	bne.n	800088c <__lesf2+0x5c>
 8000884:	28ff      	cmp	r0, #255	@ 0xff
 8000886:	d1ec      	bne.n	8000862 <__lesf2+0x32>
 8000888:	2d00      	cmp	r5, #0
 800088a:	d017      	beq.n	80008bc <__lesf2+0x8c>
 800088c:	2002      	movs	r0, #2
 800088e:	bd30      	pop	{r4, r5, pc}
 8000890:	2800      	cmp	r0, #0
 8000892:	d0e6      	beq.n	8000862 <__lesf2+0x32>
 8000894:	428b      	cmp	r3, r1
 8000896:	d1e4      	bne.n	8000862 <__lesf2+0x32>
 8000898:	4282      	cmp	r2, r0
 800089a:	dce2      	bgt.n	8000862 <__lesf2+0x32>
 800089c:	db04      	blt.n	80008a8 <__lesf2+0x78>
 800089e:	42ac      	cmp	r4, r5
 80008a0:	d8df      	bhi.n	8000862 <__lesf2+0x32>
 80008a2:	2000      	movs	r0, #0
 80008a4:	42ac      	cmp	r4, r5
 80008a6:	d2f2      	bcs.n	800088e <__lesf2+0x5e>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00b      	beq.n	80008c4 <__lesf2+0x94>
 80008ac:	0018      	movs	r0, r3
 80008ae:	e7ee      	b.n	800088e <__lesf2+0x5e>
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d0ec      	beq.n	800088e <__lesf2+0x5e>
 80008b4:	e7d5      	b.n	8000862 <__lesf2+0x32>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d1d3      	bne.n	8000862 <__lesf2+0x32>
 80008ba:	e7f5      	b.n	80008a8 <__lesf2+0x78>
 80008bc:	2000      	movs	r0, #0
 80008be:	428b      	cmp	r3, r1
 80008c0:	d0e5      	beq.n	800088e <__lesf2+0x5e>
 80008c2:	e7ce      	b.n	8000862 <__lesf2+0x32>
 80008c4:	2001      	movs	r0, #1
 80008c6:	4240      	negs	r0, r0
 80008c8:	e7e1      	b.n	800088e <__lesf2+0x5e>
 80008ca:	46c0      	nop			@ (mov r8, r8)

080008cc <__aeabi_fmul>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	464f      	mov	r7, r9
 80008d0:	4646      	mov	r6, r8
 80008d2:	46d6      	mov	lr, sl
 80008d4:	0243      	lsls	r3, r0, #9
 80008d6:	0a5b      	lsrs	r3, r3, #9
 80008d8:	0045      	lsls	r5, r0, #1
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	4699      	mov	r9, r3
 80008de:	1c0f      	adds	r7, r1, #0
 80008e0:	0e2d      	lsrs	r5, r5, #24
 80008e2:	0fc6      	lsrs	r6, r0, #31
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fmul+0x1e>
 80008e8:	e088      	b.n	80009fc <__aeabi_fmul+0x130>
 80008ea:	2dff      	cmp	r5, #255	@ 0xff
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fmul+0x24>
 80008ee:	e08d      	b.n	8000a0c <__aeabi_fmul+0x140>
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	04d2      	lsls	r2, r2, #19
 80008f6:	431a      	orrs	r2, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4691      	mov	r9, r2
 80008fc:	4698      	mov	r8, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3d7f      	subs	r5, #127	@ 0x7f
 8000902:	027c      	lsls	r4, r7, #9
 8000904:	007b      	lsls	r3, r7, #1
 8000906:	0a64      	lsrs	r4, r4, #9
 8000908:	0e1b      	lsrs	r3, r3, #24
 800090a:	0fff      	lsrs	r7, r7, #31
 800090c:	2b00      	cmp	r3, #0
 800090e:	d068      	beq.n	80009e2 <__aeabi_fmul+0x116>
 8000910:	2bff      	cmp	r3, #255	@ 0xff
 8000912:	d021      	beq.n	8000958 <__aeabi_fmul+0x8c>
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	00e4      	lsls	r4, r4, #3
 8000918:	04d2      	lsls	r2, r2, #19
 800091a:	4314      	orrs	r4, r2
 800091c:	4642      	mov	r2, r8
 800091e:	3b7f      	subs	r3, #127	@ 0x7f
 8000920:	195b      	adds	r3, r3, r5
 8000922:	2100      	movs	r1, #0
 8000924:	1c5d      	adds	r5, r3, #1
 8000926:	2a0a      	cmp	r2, #10
 8000928:	dc2e      	bgt.n	8000988 <__aeabi_fmul+0xbc>
 800092a:	407e      	eors	r6, r7
 800092c:	4642      	mov	r2, r8
 800092e:	2a02      	cmp	r2, #2
 8000930:	dc23      	bgt.n	800097a <__aeabi_fmul+0xae>
 8000932:	3a01      	subs	r2, #1
 8000934:	2a01      	cmp	r2, #1
 8000936:	d900      	bls.n	800093a <__aeabi_fmul+0x6e>
 8000938:	e0bd      	b.n	8000ab6 <__aeabi_fmul+0x1ea>
 800093a:	2902      	cmp	r1, #2
 800093c:	d06e      	beq.n	8000a1c <__aeabi_fmul+0x150>
 800093e:	2901      	cmp	r1, #1
 8000940:	d12c      	bne.n	800099c <__aeabi_fmul+0xd0>
 8000942:	2000      	movs	r0, #0
 8000944:	2200      	movs	r2, #0
 8000946:	05c0      	lsls	r0, r0, #23
 8000948:	07f6      	lsls	r6, r6, #31
 800094a:	4310      	orrs	r0, r2
 800094c:	4330      	orrs	r0, r6
 800094e:	bce0      	pop	{r5, r6, r7}
 8000950:	46ba      	mov	sl, r7
 8000952:	46b1      	mov	r9, r6
 8000954:	46a8      	mov	r8, r5
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	002b      	movs	r3, r5
 800095a:	33ff      	adds	r3, #255	@ 0xff
 800095c:	2c00      	cmp	r4, #0
 800095e:	d065      	beq.n	8000a2c <__aeabi_fmul+0x160>
 8000960:	2203      	movs	r2, #3
 8000962:	4641      	mov	r1, r8
 8000964:	4311      	orrs	r1, r2
 8000966:	0032      	movs	r2, r6
 8000968:	3501      	adds	r5, #1
 800096a:	4688      	mov	r8, r1
 800096c:	407a      	eors	r2, r7
 800096e:	35ff      	adds	r5, #255	@ 0xff
 8000970:	290a      	cmp	r1, #10
 8000972:	dd00      	ble.n	8000976 <__aeabi_fmul+0xaa>
 8000974:	e0d8      	b.n	8000b28 <__aeabi_fmul+0x25c>
 8000976:	0016      	movs	r6, r2
 8000978:	2103      	movs	r1, #3
 800097a:	4640      	mov	r0, r8
 800097c:	2201      	movs	r2, #1
 800097e:	4082      	lsls	r2, r0
 8000980:	20a6      	movs	r0, #166	@ 0xa6
 8000982:	00c0      	lsls	r0, r0, #3
 8000984:	4202      	tst	r2, r0
 8000986:	d020      	beq.n	80009ca <__aeabi_fmul+0xfe>
 8000988:	4653      	mov	r3, sl
 800098a:	2b02      	cmp	r3, #2
 800098c:	d046      	beq.n	8000a1c <__aeabi_fmul+0x150>
 800098e:	2b03      	cmp	r3, #3
 8000990:	d100      	bne.n	8000994 <__aeabi_fmul+0xc8>
 8000992:	e0bb      	b.n	8000b0c <__aeabi_fmul+0x240>
 8000994:	4651      	mov	r1, sl
 8000996:	464c      	mov	r4, r9
 8000998:	2901      	cmp	r1, #1
 800099a:	d0d2      	beq.n	8000942 <__aeabi_fmul+0x76>
 800099c:	002b      	movs	r3, r5
 800099e:	337f      	adds	r3, #127	@ 0x7f
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dd70      	ble.n	8000a86 <__aeabi_fmul+0x1ba>
 80009a4:	0762      	lsls	r2, r4, #29
 80009a6:	d004      	beq.n	80009b2 <__aeabi_fmul+0xe6>
 80009a8:	220f      	movs	r2, #15
 80009aa:	4022      	ands	r2, r4
 80009ac:	2a04      	cmp	r2, #4
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fmul+0xe6>
 80009b0:	3404      	adds	r4, #4
 80009b2:	0122      	lsls	r2, r4, #4
 80009b4:	d503      	bpl.n	80009be <__aeabi_fmul+0xf2>
 80009b6:	4b63      	ldr	r3, [pc, #396]	@ (8000b44 <__aeabi_fmul+0x278>)
 80009b8:	401c      	ands	r4, r3
 80009ba:	002b      	movs	r3, r5
 80009bc:	3380      	adds	r3, #128	@ 0x80
 80009be:	2bfe      	cmp	r3, #254	@ 0xfe
 80009c0:	dc2c      	bgt.n	8000a1c <__aeabi_fmul+0x150>
 80009c2:	01a2      	lsls	r2, r4, #6
 80009c4:	0a52      	lsrs	r2, r2, #9
 80009c6:	b2d8      	uxtb	r0, r3
 80009c8:	e7bd      	b.n	8000946 <__aeabi_fmul+0x7a>
 80009ca:	2090      	movs	r0, #144	@ 0x90
 80009cc:	0080      	lsls	r0, r0, #2
 80009ce:	4202      	tst	r2, r0
 80009d0:	d127      	bne.n	8000a22 <__aeabi_fmul+0x156>
 80009d2:	38b9      	subs	r0, #185	@ 0xb9
 80009d4:	38ff      	subs	r0, #255	@ 0xff
 80009d6:	4210      	tst	r0, r2
 80009d8:	d06d      	beq.n	8000ab6 <__aeabi_fmul+0x1ea>
 80009da:	003e      	movs	r6, r7
 80009dc:	46a1      	mov	r9, r4
 80009de:	468a      	mov	sl, r1
 80009e0:	e7d2      	b.n	8000988 <__aeabi_fmul+0xbc>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d141      	bne.n	8000a6a <__aeabi_fmul+0x19e>
 80009e6:	2301      	movs	r3, #1
 80009e8:	4642      	mov	r2, r8
 80009ea:	431a      	orrs	r2, r3
 80009ec:	4690      	mov	r8, r2
 80009ee:	002b      	movs	r3, r5
 80009f0:	4642      	mov	r2, r8
 80009f2:	2101      	movs	r1, #1
 80009f4:	1c5d      	adds	r5, r3, #1
 80009f6:	2a0a      	cmp	r2, #10
 80009f8:	dd97      	ble.n	800092a <__aeabi_fmul+0x5e>
 80009fa:	e7c5      	b.n	8000988 <__aeabi_fmul+0xbc>
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d126      	bne.n	8000a4e <__aeabi_fmul+0x182>
 8000a00:	2304      	movs	r3, #4
 8000a02:	4698      	mov	r8, r3
 8000a04:	3b03      	subs	r3, #3
 8000a06:	2500      	movs	r5, #0
 8000a08:	469a      	mov	sl, r3
 8000a0a:	e77a      	b.n	8000902 <__aeabi_fmul+0x36>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d118      	bne.n	8000a42 <__aeabi_fmul+0x176>
 8000a10:	2308      	movs	r3, #8
 8000a12:	4698      	mov	r8, r3
 8000a14:	3b06      	subs	r3, #6
 8000a16:	25ff      	movs	r5, #255	@ 0xff
 8000a18:	469a      	mov	sl, r3
 8000a1a:	e772      	b.n	8000902 <__aeabi_fmul+0x36>
 8000a1c:	20ff      	movs	r0, #255	@ 0xff
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e791      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	2600      	movs	r6, #0
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	03d2      	lsls	r2, r2, #15
 8000a2a:	e78c      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000a2c:	4641      	mov	r1, r8
 8000a2e:	2202      	movs	r2, #2
 8000a30:	3501      	adds	r5, #1
 8000a32:	4311      	orrs	r1, r2
 8000a34:	4688      	mov	r8, r1
 8000a36:	35ff      	adds	r5, #255	@ 0xff
 8000a38:	290a      	cmp	r1, #10
 8000a3a:	dca5      	bgt.n	8000988 <__aeabi_fmul+0xbc>
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	407e      	eors	r6, r7
 8000a40:	e774      	b.n	800092c <__aeabi_fmul+0x60>
 8000a42:	230c      	movs	r3, #12
 8000a44:	4698      	mov	r8, r3
 8000a46:	3b09      	subs	r3, #9
 8000a48:	25ff      	movs	r5, #255	@ 0xff
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	e759      	b.n	8000902 <__aeabi_fmul+0x36>
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fa2e 	bl	8002eb0 <__clzsi2>
 8000a54:	464a      	mov	r2, r9
 8000a56:	1f43      	subs	r3, r0, #5
 8000a58:	2576      	movs	r5, #118	@ 0x76
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	426d      	negs	r5, r5
 8000a60:	4691      	mov	r9, r2
 8000a62:	4698      	mov	r8, r3
 8000a64:	469a      	mov	sl, r3
 8000a66:	1a2d      	subs	r5, r5, r0
 8000a68:	e74b      	b.n	8000902 <__aeabi_fmul+0x36>
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	f002 fa20 	bl	8002eb0 <__clzsi2>
 8000a70:	4642      	mov	r2, r8
 8000a72:	1f43      	subs	r3, r0, #5
 8000a74:	409c      	lsls	r4, r3
 8000a76:	1a2b      	subs	r3, r5, r0
 8000a78:	3b76      	subs	r3, #118	@ 0x76
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	1c5d      	adds	r5, r3, #1
 8000a7e:	2a0a      	cmp	r2, #10
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_fmul+0x1b8>
 8000a82:	e752      	b.n	800092a <__aeabi_fmul+0x5e>
 8000a84:	e780      	b.n	8000988 <__aeabi_fmul+0xbc>
 8000a86:	2201      	movs	r2, #1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b1b      	cmp	r3, #27
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_fmul+0x1c4>
 8000a8e:	e758      	b.n	8000942 <__aeabi_fmul+0x76>
 8000a90:	359e      	adds	r5, #158	@ 0x9e
 8000a92:	0022      	movs	r2, r4
 8000a94:	40ac      	lsls	r4, r5
 8000a96:	40da      	lsrs	r2, r3
 8000a98:	1e63      	subs	r3, r4, #1
 8000a9a:	419c      	sbcs	r4, r3
 8000a9c:	4322      	orrs	r2, r4
 8000a9e:	0753      	lsls	r3, r2, #29
 8000aa0:	d004      	beq.n	8000aac <__aeabi_fmul+0x1e0>
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fmul+0x1e0>
 8000aaa:	3204      	adds	r2, #4
 8000aac:	0153      	lsls	r3, r2, #5
 8000aae:	d537      	bpl.n	8000b20 <__aeabi_fmul+0x254>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	e747      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000ab6:	0c21      	lsrs	r1, r4, #16
 8000ab8:	464a      	mov	r2, r9
 8000aba:	0424      	lsls	r4, r4, #16
 8000abc:	0c24      	lsrs	r4, r4, #16
 8000abe:	0027      	movs	r7, r4
 8000ac0:	0c10      	lsrs	r0, r2, #16
 8000ac2:	0412      	lsls	r2, r2, #16
 8000ac4:	0c12      	lsrs	r2, r2, #16
 8000ac6:	4344      	muls	r4, r0
 8000ac8:	4357      	muls	r7, r2
 8000aca:	4348      	muls	r0, r1
 8000acc:	4351      	muls	r1, r2
 8000ace:	0c3a      	lsrs	r2, r7, #16
 8000ad0:	1909      	adds	r1, r1, r4
 8000ad2:	1852      	adds	r2, r2, r1
 8000ad4:	4294      	cmp	r4, r2
 8000ad6:	d903      	bls.n	8000ae0 <__aeabi_fmul+0x214>
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	0249      	lsls	r1, r1, #9
 8000adc:	468c      	mov	ip, r1
 8000ade:	4460      	add	r0, ip
 8000ae0:	043f      	lsls	r7, r7, #16
 8000ae2:	0411      	lsls	r1, r2, #16
 8000ae4:	0c3f      	lsrs	r7, r7, #16
 8000ae6:	19c9      	adds	r1, r1, r7
 8000ae8:	018c      	lsls	r4, r1, #6
 8000aea:	1e67      	subs	r7, r4, #1
 8000aec:	41bc      	sbcs	r4, r7
 8000aee:	0c12      	lsrs	r2, r2, #16
 8000af0:	0e89      	lsrs	r1, r1, #26
 8000af2:	1812      	adds	r2, r2, r0
 8000af4:	430c      	orrs	r4, r1
 8000af6:	0192      	lsls	r2, r2, #6
 8000af8:	4314      	orrs	r4, r2
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	d50e      	bpl.n	8000b1c <__aeabi_fmul+0x250>
 8000afe:	2301      	movs	r3, #1
 8000b00:	0862      	lsrs	r2, r4, #1
 8000b02:	401c      	ands	r4, r3
 8000b04:	4314      	orrs	r4, r2
 8000b06:	e749      	b.n	800099c <__aeabi_fmul+0xd0>
 8000b08:	003e      	movs	r6, r7
 8000b0a:	46a1      	mov	r9, r4
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	464b      	mov	r3, r9
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	431a      	orrs	r2, r3
 8000b14:	0252      	lsls	r2, r2, #9
 8000b16:	20ff      	movs	r0, #255	@ 0xff
 8000b18:	0a52      	lsrs	r2, r2, #9
 8000b1a:	e714      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000b1c:	001d      	movs	r5, r3
 8000b1e:	e73d      	b.n	800099c <__aeabi_fmul+0xd0>
 8000b20:	0192      	lsls	r2, r2, #6
 8000b22:	2000      	movs	r0, #0
 8000b24:	0a52      	lsrs	r2, r2, #9
 8000b26:	e70e      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000b28:	290f      	cmp	r1, #15
 8000b2a:	d1ed      	bne.n	8000b08 <__aeabi_fmul+0x23c>
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	464b      	mov	r3, r9
 8000b30:	03d2      	lsls	r2, r2, #15
 8000b32:	4213      	tst	r3, r2
 8000b34:	d0ea      	beq.n	8000b0c <__aeabi_fmul+0x240>
 8000b36:	4214      	tst	r4, r2
 8000b38:	d1e8      	bne.n	8000b0c <__aeabi_fmul+0x240>
 8000b3a:	003e      	movs	r6, r7
 8000b3c:	20ff      	movs	r0, #255	@ 0xff
 8000b3e:	4322      	orrs	r2, r4
 8000b40:	e701      	b.n	8000946 <__aeabi_fmul+0x7a>
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	f7ffffff 	.word	0xf7ffffff

08000b48 <__aeabi_fsub>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	4647      	mov	r7, r8
 8000b4c:	46ce      	mov	lr, r9
 8000b4e:	024e      	lsls	r6, r1, #9
 8000b50:	0243      	lsls	r3, r0, #9
 8000b52:	0045      	lsls	r5, r0, #1
 8000b54:	0a72      	lsrs	r2, r6, #9
 8000b56:	0fc4      	lsrs	r4, r0, #31
 8000b58:	0048      	lsls	r0, r1, #1
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	0a5f      	lsrs	r7, r3, #9
 8000b60:	0e2d      	lsrs	r5, r5, #24
 8000b62:	099b      	lsrs	r3, r3, #6
 8000b64:	0e00      	lsrs	r0, r0, #24
 8000b66:	0fc9      	lsrs	r1, r1, #31
 8000b68:	09b6      	lsrs	r6, r6, #6
 8000b6a:	28ff      	cmp	r0, #255	@ 0xff
 8000b6c:	d024      	beq.n	8000bb8 <__aeabi_fsub+0x70>
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4051      	eors	r1, r2
 8000b72:	1a2a      	subs	r2, r5, r0
 8000b74:	428c      	cmp	r4, r1
 8000b76:	d00f      	beq.n	8000b98 <__aeabi_fsub+0x50>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	dc00      	bgt.n	8000b7e <__aeabi_fsub+0x36>
 8000b7c:	e16a      	b.n	8000e54 <__aeabi_fsub+0x30c>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d135      	bne.n	8000bee <__aeabi_fsub+0xa6>
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x40>
 8000b86:	e0a2      	b.n	8000cce <__aeabi_fsub+0x186>
 8000b88:	1e51      	subs	r1, r2, #1
 8000b8a:	2a01      	cmp	r2, #1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x48>
 8000b8e:	e124      	b.n	8000dda <__aeabi_fsub+0x292>
 8000b90:	2aff      	cmp	r2, #255	@ 0xff
 8000b92:	d021      	beq.n	8000bd8 <__aeabi_fsub+0x90>
 8000b94:	000a      	movs	r2, r1
 8000b96:	e02f      	b.n	8000bf8 <__aeabi_fsub+0xb0>
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_fsub+0x56>
 8000b9c:	e167      	b.n	8000e6e <__aeabi_fsub+0x326>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d05e      	beq.n	8000c60 <__aeabi_fsub+0x118>
 8000ba2:	2dff      	cmp	r5, #255	@ 0xff
 8000ba4:	d018      	beq.n	8000bd8 <__aeabi_fsub+0x90>
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	04c9      	lsls	r1, r1, #19
 8000baa:	430e      	orrs	r6, r1
 8000bac:	2a1b      	cmp	r2, #27
 8000bae:	dc00      	bgt.n	8000bb2 <__aeabi_fsub+0x6a>
 8000bb0:	e076      	b.n	8000ca0 <__aeabi_fsub+0x158>
 8000bb2:	002a      	movs	r2, r5
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	e032      	b.n	8000c1e <__aeabi_fsub+0xd6>
 8000bb8:	002a      	movs	r2, r5
 8000bba:	3aff      	subs	r2, #255	@ 0xff
 8000bbc:	4691      	mov	r9, r2
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d042      	beq.n	8000c48 <__aeabi_fsub+0x100>
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	d055      	beq.n	8000c72 <__aeabi_fsub+0x12a>
 8000bc6:	464a      	mov	r2, r9
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x86>
 8000bcc:	e09c      	b.n	8000d08 <__aeabi_fsub+0x1c0>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x8c>
 8000bd2:	e077      	b.n	8000cc4 <__aeabi_fsub+0x17c>
 8000bd4:	000c      	movs	r4, r1
 8000bd6:	0033      	movs	r3, r6
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x98>
 8000bde:	e06e      	b.n	8000cbe <__aeabi_fsub+0x176>
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	4313      	orrs	r3, r2
 8000be6:	025b      	lsls	r3, r3, #9
 8000be8:	20ff      	movs	r0, #255	@ 0xff
 8000bea:	0a5b      	lsrs	r3, r3, #9
 8000bec:	e024      	b.n	8000c38 <__aeabi_fsub+0xf0>
 8000bee:	2dff      	cmp	r5, #255	@ 0xff
 8000bf0:	d0f2      	beq.n	8000bd8 <__aeabi_fsub+0x90>
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	04c9      	lsls	r1, r1, #19
 8000bf6:	430e      	orrs	r6, r1
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2a1b      	cmp	r2, #27
 8000bfc:	dc08      	bgt.n	8000c10 <__aeabi_fsub+0xc8>
 8000bfe:	0031      	movs	r1, r6
 8000c00:	2020      	movs	r0, #32
 8000c02:	40d1      	lsrs	r1, r2
 8000c04:	1a82      	subs	r2, r0, r2
 8000c06:	4096      	lsls	r6, r2
 8000c08:	0032      	movs	r2, r6
 8000c0a:	1e50      	subs	r0, r2, #1
 8000c0c:	4182      	sbcs	r2, r0
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	015a      	lsls	r2, r3, #5
 8000c14:	d460      	bmi.n	8000cd8 <__aeabi_fsub+0x190>
 8000c16:	2107      	movs	r1, #7
 8000c18:	002a      	movs	r2, r5
 8000c1a:	4019      	ands	r1, r3
 8000c1c:	d057      	beq.n	8000cce <__aeabi_fsub+0x186>
 8000c1e:	210f      	movs	r1, #15
 8000c20:	4019      	ands	r1, r3
 8000c22:	2904      	cmp	r1, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fsub+0xe0>
 8000c26:	3304      	adds	r3, #4
 8000c28:	0159      	lsls	r1, r3, #5
 8000c2a:	d550      	bpl.n	8000cce <__aeabi_fsub+0x186>
 8000c2c:	1c50      	adds	r0, r2, #1
 8000c2e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c30:	d045      	beq.n	8000cbe <__aeabi_fsub+0x176>
 8000c32:	019b      	lsls	r3, r3, #6
 8000c34:	b2c0      	uxtb	r0, r0
 8000c36:	0a5b      	lsrs	r3, r3, #9
 8000c38:	05c0      	lsls	r0, r0, #23
 8000c3a:	4318      	orrs	r0, r3
 8000c3c:	07e4      	lsls	r4, r4, #31
 8000c3e:	4320      	orrs	r0, r4
 8000c40:	bcc0      	pop	{r6, r7}
 8000c42:	46b9      	mov	r9, r7
 8000c44:	46b0      	mov	r8, r6
 8000c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4051      	eors	r1, r2
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d1ba      	bne.n	8000bc6 <__aeabi_fsub+0x7e>
 8000c50:	464a      	mov	r2, r9
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d010      	beq.n	8000c78 <__aeabi_fsub+0x130>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x114>
 8000c5a:	e098      	b.n	8000d8e <__aeabi_fsub+0x246>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e7bb      	b.n	8000bd8 <__aeabi_fsub+0x90>
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d034      	beq.n	8000cce <__aeabi_fsub+0x186>
 8000c64:	1e51      	subs	r1, r2, #1
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d06e      	beq.n	8000d48 <__aeabi_fsub+0x200>
 8000c6a:	2aff      	cmp	r2, #255	@ 0xff
 8000c6c:	d0b4      	beq.n	8000bd8 <__aeabi_fsub+0x90>
 8000c6e:	000a      	movs	r2, r1
 8000c70:	e79c      	b.n	8000bac <__aeabi_fsub+0x64>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_fsub+0x130>
 8000c76:	e088      	b.n	8000d8a <__aeabi_fsub+0x242>
 8000c78:	20fe      	movs	r0, #254	@ 0xfe
 8000c7a:	1c6a      	adds	r2, r5, #1
 8000c7c:	4210      	tst	r0, r2
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fsub+0x13a>
 8000c80:	e092      	b.n	8000da8 <__aeabi_fsub+0x260>
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_fsub+0x140>
 8000c86:	e0a4      	b.n	8000dd2 <__aeabi_fsub+0x28a>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0x146>
 8000c8c:	e0cb      	b.n	8000e26 <__aeabi_fsub+0x2de>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fsub+0x14c>
 8000c92:	e0ca      	b.n	8000e2a <__aeabi_fsub+0x2e2>
 8000c94:	2200      	movs	r2, #0
 8000c96:	08db      	lsrs	r3, r3, #3
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	b2d0      	uxtb	r0, r2
 8000c9e:	e7cb      	b.n	8000c38 <__aeabi_fsub+0xf0>
 8000ca0:	0031      	movs	r1, r6
 8000ca2:	2020      	movs	r0, #32
 8000ca4:	40d1      	lsrs	r1, r2
 8000ca6:	1a82      	subs	r2, r0, r2
 8000ca8:	4096      	lsls	r6, r2
 8000caa:	0032      	movs	r2, r6
 8000cac:	1e50      	subs	r0, r2, #1
 8000cae:	4182      	sbcs	r2, r0
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	189b      	adds	r3, r3, r2
 8000cb4:	015a      	lsls	r2, r3, #5
 8000cb6:	d5ae      	bpl.n	8000c16 <__aeabi_fsub+0xce>
 8000cb8:	1c6a      	adds	r2, r5, #1
 8000cba:	2dfe      	cmp	r5, #254	@ 0xfe
 8000cbc:	d14a      	bne.n	8000d54 <__aeabi_fsub+0x20c>
 8000cbe:	20ff      	movs	r0, #255	@ 0xff
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e7b9      	b.n	8000c38 <__aeabi_fsub+0xf0>
 8000cc4:	22ff      	movs	r2, #255	@ 0xff
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14b      	bne.n	8000d62 <__aeabi_fsub+0x21a>
 8000cca:	000c      	movs	r4, r1
 8000ccc:	0033      	movs	r3, r6
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	2aff      	cmp	r2, #255	@ 0xff
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x18e>
 8000cd4:	e781      	b.n	8000bda <__aeabi_fsub+0x92>
 8000cd6:	e7df      	b.n	8000c98 <__aeabi_fsub+0x150>
 8000cd8:	019f      	lsls	r7, r3, #6
 8000cda:	09bf      	lsrs	r7, r7, #6
 8000cdc:	0038      	movs	r0, r7
 8000cde:	f002 f8e7 	bl	8002eb0 <__clzsi2>
 8000ce2:	3805      	subs	r0, #5
 8000ce4:	4087      	lsls	r7, r0
 8000ce6:	4285      	cmp	r5, r0
 8000ce8:	dc21      	bgt.n	8000d2e <__aeabi_fsub+0x1e6>
 8000cea:	003b      	movs	r3, r7
 8000cec:	2120      	movs	r1, #32
 8000cee:	1b42      	subs	r2, r0, r5
 8000cf0:	3201      	adds	r2, #1
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	4097      	lsls	r7, r2
 8000cf8:	1e7a      	subs	r2, r7, #1
 8000cfa:	4197      	sbcs	r7, r2
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	433b      	orrs	r3, r7
 8000d00:	0759      	lsls	r1, r3, #29
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x1be>
 8000d04:	e78b      	b.n	8000c1e <__aeabi_fsub+0xd6>
 8000d06:	e78f      	b.n	8000c28 <__aeabi_fsub+0xe0>
 8000d08:	20fe      	movs	r0, #254	@ 0xfe
 8000d0a:	1c6a      	adds	r2, r5, #1
 8000d0c:	4210      	tst	r0, r2
 8000d0e:	d112      	bne.n	8000d36 <__aeabi_fsub+0x1ee>
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d152      	bne.n	8000dba <__aeabi_fsub+0x272>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d07c      	beq.n	8000e12 <__aeabi_fsub+0x2ca>
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d0bb      	beq.n	8000c94 <__aeabi_fsub+0x14c>
 8000d1c:	1b9a      	subs	r2, r3, r6
 8000d1e:	0150      	lsls	r0, r2, #5
 8000d20:	d400      	bmi.n	8000d24 <__aeabi_fsub+0x1dc>
 8000d22:	e08b      	b.n	8000e3c <__aeabi_fsub+0x2f4>
 8000d24:	2401      	movs	r4, #1
 8000d26:	2200      	movs	r2, #0
 8000d28:	1af3      	subs	r3, r6, r3
 8000d2a:	400c      	ands	r4, r1
 8000d2c:	e7e8      	b.n	8000d00 <__aeabi_fsub+0x1b8>
 8000d2e:	4b56      	ldr	r3, [pc, #344]	@ (8000e88 <__aeabi_fsub+0x340>)
 8000d30:	1a2a      	subs	r2, r5, r0
 8000d32:	403b      	ands	r3, r7
 8000d34:	e7e4      	b.n	8000d00 <__aeabi_fsub+0x1b8>
 8000d36:	1b9f      	subs	r7, r3, r6
 8000d38:	017a      	lsls	r2, r7, #5
 8000d3a:	d446      	bmi.n	8000dca <__aeabi_fsub+0x282>
 8000d3c:	2f00      	cmp	r7, #0
 8000d3e:	d1cd      	bne.n	8000cdc <__aeabi_fsub+0x194>
 8000d40:	2400      	movs	r4, #0
 8000d42:	2000      	movs	r0, #0
 8000d44:	2300      	movs	r3, #0
 8000d46:	e777      	b.n	8000c38 <__aeabi_fsub+0xf0>
 8000d48:	199b      	adds	r3, r3, r6
 8000d4a:	2501      	movs	r5, #1
 8000d4c:	3201      	adds	r2, #1
 8000d4e:	0159      	lsls	r1, r3, #5
 8000d50:	d400      	bmi.n	8000d54 <__aeabi_fsub+0x20c>
 8000d52:	e760      	b.n	8000c16 <__aeabi_fsub+0xce>
 8000d54:	2101      	movs	r1, #1
 8000d56:	484d      	ldr	r0, [pc, #308]	@ (8000e8c <__aeabi_fsub+0x344>)
 8000d58:	4019      	ands	r1, r3
 8000d5a:	085b      	lsrs	r3, r3, #1
 8000d5c:	4003      	ands	r3, r0
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	e7ce      	b.n	8000d00 <__aeabi_fsub+0x1b8>
 8000d62:	1e57      	subs	r7, r2, #1
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d05a      	beq.n	8000e1e <__aeabi_fsub+0x2d6>
 8000d68:	000c      	movs	r4, r1
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d033      	beq.n	8000dd6 <__aeabi_fsub+0x28e>
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2f1b      	cmp	r7, #27
 8000d72:	dc07      	bgt.n	8000d84 <__aeabi_fsub+0x23c>
 8000d74:	2120      	movs	r1, #32
 8000d76:	1bc9      	subs	r1, r1, r7
 8000d78:	001a      	movs	r2, r3
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	40fa      	lsrs	r2, r7
 8000d7e:	1e59      	subs	r1, r3, #1
 8000d80:	418b      	sbcs	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	0005      	movs	r5, r0
 8000d86:	1ab3      	subs	r3, r6, r2
 8000d88:	e743      	b.n	8000c12 <__aeabi_fsub+0xca>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d123      	bne.n	8000dd6 <__aeabi_fsub+0x28e>
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d09b      	beq.n	8000ccc <__aeabi_fsub+0x184>
 8000d94:	1e51      	subs	r1, r2, #1
 8000d96:	2a01      	cmp	r2, #1
 8000d98:	d0d6      	beq.n	8000d48 <__aeabi_fsub+0x200>
 8000d9a:	2aff      	cmp	r2, #255	@ 0xff
 8000d9c:	d01b      	beq.n	8000dd6 <__aeabi_fsub+0x28e>
 8000d9e:	291b      	cmp	r1, #27
 8000da0:	dd2c      	ble.n	8000dfc <__aeabi_fsub+0x2b4>
 8000da2:	0002      	movs	r2, r0
 8000da4:	1c73      	adds	r3, r6, #1
 8000da6:	e73a      	b.n	8000c1e <__aeabi_fsub+0xd6>
 8000da8:	2aff      	cmp	r2, #255	@ 0xff
 8000daa:	d088      	beq.n	8000cbe <__aeabi_fsub+0x176>
 8000dac:	199b      	adds	r3, r3, r6
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	0759      	lsls	r1, r3, #29
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x26e>
 8000db4:	e733      	b.n	8000c1e <__aeabi_fsub+0xd6>
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	e76e      	b.n	8000c98 <__aeabi_fsub+0x150>
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d110      	bne.n	8000de0 <__aeabi_fsub+0x298>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d043      	beq.n	8000e4a <__aeabi_fsub+0x302>
 8000dc2:	2401      	movs	r4, #1
 8000dc4:	0033      	movs	r3, r6
 8000dc6:	400c      	ands	r4, r1
 8000dc8:	e706      	b.n	8000bd8 <__aeabi_fsub+0x90>
 8000dca:	2401      	movs	r4, #1
 8000dcc:	1af7      	subs	r7, r6, r3
 8000dce:	400c      	ands	r4, r1
 8000dd0:	e784      	b.n	8000cdc <__aeabi_fsub+0x194>
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fsub+0x298>
 8000dd6:	0033      	movs	r3, r6
 8000dd8:	e6fe      	b.n	8000bd8 <__aeabi_fsub+0x90>
 8000dda:	2501      	movs	r5, #1
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	e718      	b.n	8000c12 <__aeabi_fsub+0xca>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x29e>
 8000de4:	e6f8      	b.n	8000bd8 <__aeabi_fsub+0x90>
 8000de6:	2280      	movs	r2, #128	@ 0x80
 8000de8:	03d2      	lsls	r2, r2, #15
 8000dea:	4297      	cmp	r7, r2
 8000dec:	d304      	bcc.n	8000df8 <__aeabi_fsub+0x2b0>
 8000dee:	4594      	cmp	ip, r2
 8000df0:	d202      	bcs.n	8000df8 <__aeabi_fsub+0x2b0>
 8000df2:	2401      	movs	r4, #1
 8000df4:	0033      	movs	r3, r6
 8000df6:	400c      	ands	r4, r1
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	e6f1      	b.n	8000be0 <__aeabi_fsub+0x98>
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2520      	movs	r5, #32
 8000e00:	40ca      	lsrs	r2, r1
 8000e02:	1a69      	subs	r1, r5, r1
 8000e04:	408b      	lsls	r3, r1
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	418b      	sbcs	r3, r1
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	0005      	movs	r5, r0
 8000e0e:	199b      	adds	r3, r3, r6
 8000e10:	e750      	b.n	8000cb4 <__aeabi_fsub+0x16c>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d094      	beq.n	8000d40 <__aeabi_fsub+0x1f8>
 8000e16:	2401      	movs	r4, #1
 8000e18:	0033      	movs	r3, r6
 8000e1a:	400c      	ands	r4, r1
 8000e1c:	e73a      	b.n	8000c94 <__aeabi_fsub+0x14c>
 8000e1e:	000c      	movs	r4, r1
 8000e20:	2501      	movs	r5, #1
 8000e22:	1af3      	subs	r3, r6, r3
 8000e24:	e6f5      	b.n	8000c12 <__aeabi_fsub+0xca>
 8000e26:	0033      	movs	r3, r6
 8000e28:	e734      	b.n	8000c94 <__aeabi_fsub+0x14c>
 8000e2a:	199b      	adds	r3, r3, r6
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0159      	lsls	r1, r3, #5
 8000e30:	d5c1      	bpl.n	8000db6 <__aeabi_fsub+0x26e>
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <__aeabi_fsub+0x340>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	2201      	movs	r2, #1
 8000e3a:	e72d      	b.n	8000c98 <__aeabi_fsub+0x150>
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_fsub+0x2fa>
 8000e40:	e77e      	b.n	8000d40 <__aeabi_fsub+0x1f8>
 8000e42:	0013      	movs	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	e726      	b.n	8000c98 <__aeabi_fsub+0x150>
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	20ff      	movs	r0, #255	@ 0xff
 8000e50:	03db      	lsls	r3, r3, #15
 8000e52:	e6f1      	b.n	8000c38 <__aeabi_fsub+0xf0>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x312>
 8000e58:	e756      	b.n	8000d08 <__aeabi_fsub+0x1c0>
 8000e5a:	1b47      	subs	r7, r0, r5
 8000e5c:	003a      	movs	r2, r7
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x31c>
 8000e62:	e730      	b.n	8000cc6 <__aeabi_fsub+0x17e>
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	04d2      	lsls	r2, r2, #19
 8000e68:	000c      	movs	r4, r1
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	e77f      	b.n	8000d6e <__aeabi_fsub+0x226>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0x32c>
 8000e72:	e701      	b.n	8000c78 <__aeabi_fsub+0x130>
 8000e74:	1b41      	subs	r1, r0, r5
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fsub+0x336>
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	e788      	b.n	8000d90 <__aeabi_fsub+0x248>
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	04d2      	lsls	r2, r2, #19
 8000e82:	4313      	orrs	r3, r2
 8000e84:	e78b      	b.n	8000d9e <__aeabi_fsub+0x256>
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	fbffffff 	.word	0xfbffffff
 8000e8c:	7dffffff 	.word	0x7dffffff

08000e90 <__aeabi_fcmpun>:
 8000e90:	0243      	lsls	r3, r0, #9
 8000e92:	024a      	lsls	r2, r1, #9
 8000e94:	0040      	lsls	r0, r0, #1
 8000e96:	0049      	lsls	r1, r1, #1
 8000e98:	0a5b      	lsrs	r3, r3, #9
 8000e9a:	0a52      	lsrs	r2, r2, #9
 8000e9c:	0e09      	lsrs	r1, r1, #24
 8000e9e:	0e00      	lsrs	r0, r0, #24
 8000ea0:	28ff      	cmp	r0, #255	@ 0xff
 8000ea2:	d006      	beq.n	8000eb2 <__aeabi_fcmpun+0x22>
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	29ff      	cmp	r1, #255	@ 0xff
 8000ea8:	d102      	bne.n	8000eb0 <__aeabi_fcmpun+0x20>
 8000eaa:	1e53      	subs	r3, r2, #1
 8000eac:	419a      	sbcs	r2, r3
 8000eae:	0010      	movs	r0, r2
 8000eb0:	4770      	bx	lr
 8000eb2:	38fe      	subs	r0, #254	@ 0xfe
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1fb      	bne.n	8000eb0 <__aeabi_fcmpun+0x20>
 8000eb8:	e7f4      	b.n	8000ea4 <__aeabi_fcmpun+0x14>
 8000eba:	46c0      	nop			@ (mov r8, r8)

08000ebc <__aeabi_f2iz>:
 8000ebc:	0241      	lsls	r1, r0, #9
 8000ebe:	0042      	lsls	r2, r0, #1
 8000ec0:	0fc3      	lsrs	r3, r0, #31
 8000ec2:	0a49      	lsrs	r1, r1, #9
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	0e12      	lsrs	r2, r2, #24
 8000ec8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000eca:	dd03      	ble.n	8000ed4 <__aeabi_f2iz+0x18>
 8000ecc:	2a9d      	cmp	r2, #157	@ 0x9d
 8000ece:	dd02      	ble.n	8000ed6 <__aeabi_f2iz+0x1a>
 8000ed0:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <__aeabi_f2iz+0x3c>)
 8000ed2:	1898      	adds	r0, r3, r2
 8000ed4:	4770      	bx	lr
 8000ed6:	2080      	movs	r0, #128	@ 0x80
 8000ed8:	0400      	lsls	r0, r0, #16
 8000eda:	4301      	orrs	r1, r0
 8000edc:	2a95      	cmp	r2, #149	@ 0x95
 8000ede:	dc07      	bgt.n	8000ef0 <__aeabi_f2iz+0x34>
 8000ee0:	2096      	movs	r0, #150	@ 0x96
 8000ee2:	1a82      	subs	r2, r0, r2
 8000ee4:	40d1      	lsrs	r1, r2
 8000ee6:	4248      	negs	r0, r1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f3      	bne.n	8000ed4 <__aeabi_f2iz+0x18>
 8000eec:	0008      	movs	r0, r1
 8000eee:	e7f1      	b.n	8000ed4 <__aeabi_f2iz+0x18>
 8000ef0:	3a96      	subs	r2, #150	@ 0x96
 8000ef2:	4091      	lsls	r1, r2
 8000ef4:	e7f7      	b.n	8000ee6 <__aeabi_f2iz+0x2a>
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	7fffffff 	.word	0x7fffffff

08000efc <__aeabi_i2f>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d013      	beq.n	8000f2a <__aeabi_i2f+0x2e>
 8000f02:	17c3      	asrs	r3, r0, #31
 8000f04:	18c5      	adds	r5, r0, r3
 8000f06:	405d      	eors	r5, r3
 8000f08:	0fc4      	lsrs	r4, r0, #31
 8000f0a:	0028      	movs	r0, r5
 8000f0c:	f001 ffd0 	bl	8002eb0 <__clzsi2>
 8000f10:	239e      	movs	r3, #158	@ 0x9e
 8000f12:	0001      	movs	r1, r0
 8000f14:	1a1b      	subs	r3, r3, r0
 8000f16:	2b96      	cmp	r3, #150	@ 0x96
 8000f18:	dc0f      	bgt.n	8000f3a <__aeabi_i2f+0x3e>
 8000f1a:	2808      	cmp	r0, #8
 8000f1c:	d034      	beq.n	8000f88 <__aeabi_i2f+0x8c>
 8000f1e:	3908      	subs	r1, #8
 8000f20:	408d      	lsls	r5, r1
 8000f22:	026d      	lsls	r5, r5, #9
 8000f24:	0a6d      	lsrs	r5, r5, #9
 8000f26:	b2d8      	uxtb	r0, r3
 8000f28:	e002      	b.n	8000f30 <__aeabi_i2f+0x34>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	2500      	movs	r5, #0
 8000f30:	05c0      	lsls	r0, r0, #23
 8000f32:	4328      	orrs	r0, r5
 8000f34:	07e4      	lsls	r4, r4, #31
 8000f36:	4320      	orrs	r0, r4
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
 8000f3a:	2b99      	cmp	r3, #153	@ 0x99
 8000f3c:	dc16      	bgt.n	8000f6c <__aeabi_i2f+0x70>
 8000f3e:	1f42      	subs	r2, r0, #5
 8000f40:	2805      	cmp	r0, #5
 8000f42:	d000      	beq.n	8000f46 <__aeabi_i2f+0x4a>
 8000f44:	4095      	lsls	r5, r2
 8000f46:	002a      	movs	r2, r5
 8000f48:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <__aeabi_i2f+0x94>)
 8000f4a:	4002      	ands	r2, r0
 8000f4c:	076e      	lsls	r6, r5, #29
 8000f4e:	d009      	beq.n	8000f64 <__aeabi_i2f+0x68>
 8000f50:	260f      	movs	r6, #15
 8000f52:	4035      	ands	r5, r6
 8000f54:	2d04      	cmp	r5, #4
 8000f56:	d005      	beq.n	8000f64 <__aeabi_i2f+0x68>
 8000f58:	3204      	adds	r2, #4
 8000f5a:	0155      	lsls	r5, r2, #5
 8000f5c:	d502      	bpl.n	8000f64 <__aeabi_i2f+0x68>
 8000f5e:	239f      	movs	r3, #159	@ 0x9f
 8000f60:	4002      	ands	r2, r0
 8000f62:	1a5b      	subs	r3, r3, r1
 8000f64:	0192      	lsls	r2, r2, #6
 8000f66:	0a55      	lsrs	r5, r2, #9
 8000f68:	b2d8      	uxtb	r0, r3
 8000f6a:	e7e1      	b.n	8000f30 <__aeabi_i2f+0x34>
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	1a12      	subs	r2, r2, r0
 8000f70:	0028      	movs	r0, r5
 8000f72:	40d0      	lsrs	r0, r2
 8000f74:	0002      	movs	r2, r0
 8000f76:	0008      	movs	r0, r1
 8000f78:	301b      	adds	r0, #27
 8000f7a:	4085      	lsls	r5, r0
 8000f7c:	0028      	movs	r0, r5
 8000f7e:	1e45      	subs	r5, r0, #1
 8000f80:	41a8      	sbcs	r0, r5
 8000f82:	4302      	orrs	r2, r0
 8000f84:	0015      	movs	r5, r2
 8000f86:	e7de      	b.n	8000f46 <__aeabi_i2f+0x4a>
 8000f88:	026d      	lsls	r5, r5, #9
 8000f8a:	2096      	movs	r0, #150	@ 0x96
 8000f8c:	0a6d      	lsrs	r5, r5, #9
 8000f8e:	e7cf      	b.n	8000f30 <__aeabi_i2f+0x34>
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_ui2f>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	1e04      	subs	r4, r0, #0
 8000f98:	d00e      	beq.n	8000fb8 <__aeabi_ui2f+0x24>
 8000f9a:	f001 ff89 	bl	8002eb0 <__clzsi2>
 8000f9e:	239e      	movs	r3, #158	@ 0x9e
 8000fa0:	0001      	movs	r1, r0
 8000fa2:	1a1b      	subs	r3, r3, r0
 8000fa4:	2b96      	cmp	r3, #150	@ 0x96
 8000fa6:	dc0c      	bgt.n	8000fc2 <__aeabi_ui2f+0x2e>
 8000fa8:	2808      	cmp	r0, #8
 8000faa:	d02f      	beq.n	800100c <__aeabi_ui2f+0x78>
 8000fac:	3908      	subs	r1, #8
 8000fae:	408c      	lsls	r4, r1
 8000fb0:	0264      	lsls	r4, r4, #9
 8000fb2:	0a64      	lsrs	r4, r4, #9
 8000fb4:	b2d8      	uxtb	r0, r3
 8000fb6:	e001      	b.n	8000fbc <__aeabi_ui2f+0x28>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	2400      	movs	r4, #0
 8000fbc:	05c0      	lsls	r0, r0, #23
 8000fbe:	4320      	orrs	r0, r4
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	2b99      	cmp	r3, #153	@ 0x99
 8000fc4:	dc16      	bgt.n	8000ff4 <__aeabi_ui2f+0x60>
 8000fc6:	1f42      	subs	r2, r0, #5
 8000fc8:	2805      	cmp	r0, #5
 8000fca:	d000      	beq.n	8000fce <__aeabi_ui2f+0x3a>
 8000fcc:	4094      	lsls	r4, r2
 8000fce:	0022      	movs	r2, r4
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <__aeabi_ui2f+0x80>)
 8000fd2:	4002      	ands	r2, r0
 8000fd4:	0765      	lsls	r5, r4, #29
 8000fd6:	d009      	beq.n	8000fec <__aeabi_ui2f+0x58>
 8000fd8:	250f      	movs	r5, #15
 8000fda:	402c      	ands	r4, r5
 8000fdc:	2c04      	cmp	r4, #4
 8000fde:	d005      	beq.n	8000fec <__aeabi_ui2f+0x58>
 8000fe0:	3204      	adds	r2, #4
 8000fe2:	0154      	lsls	r4, r2, #5
 8000fe4:	d502      	bpl.n	8000fec <__aeabi_ui2f+0x58>
 8000fe6:	239f      	movs	r3, #159	@ 0x9f
 8000fe8:	4002      	ands	r2, r0
 8000fea:	1a5b      	subs	r3, r3, r1
 8000fec:	0192      	lsls	r2, r2, #6
 8000fee:	0a54      	lsrs	r4, r2, #9
 8000ff0:	b2d8      	uxtb	r0, r3
 8000ff2:	e7e3      	b.n	8000fbc <__aeabi_ui2f+0x28>
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	321b      	adds	r2, #27
 8000ffa:	4090      	lsls	r0, r2
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	1e50      	subs	r0, r2, #1
 8001000:	4182      	sbcs	r2, r0
 8001002:	2005      	movs	r0, #5
 8001004:	1a40      	subs	r0, r0, r1
 8001006:	40c4      	lsrs	r4, r0
 8001008:	4314      	orrs	r4, r2
 800100a:	e7e0      	b.n	8000fce <__aeabi_ui2f+0x3a>
 800100c:	0264      	lsls	r4, r4, #9
 800100e:	2096      	movs	r0, #150	@ 0x96
 8001010:	0a64      	lsrs	r4, r4, #9
 8001012:	e7d3      	b.n	8000fbc <__aeabi_ui2f+0x28>
 8001014:	fbffffff 	.word	0xfbffffff

08001018 <__aeabi_dadd>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	4657      	mov	r7, sl
 800101c:	464e      	mov	r6, r9
 800101e:	4645      	mov	r5, r8
 8001020:	46de      	mov	lr, fp
 8001022:	b5e0      	push	{r5, r6, r7, lr}
 8001024:	b083      	sub	sp, #12
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	9101      	str	r1, [sp, #4]
 800102a:	030c      	lsls	r4, r1, #12
 800102c:	004f      	lsls	r7, r1, #1
 800102e:	0fce      	lsrs	r6, r1, #31
 8001030:	0a61      	lsrs	r1, r4, #9
 8001032:	9c00      	ldr	r4, [sp, #0]
 8001034:	031d      	lsls	r5, r3, #12
 8001036:	0f64      	lsrs	r4, r4, #29
 8001038:	430c      	orrs	r4, r1
 800103a:	9900      	ldr	r1, [sp, #0]
 800103c:	9200      	str	r2, [sp, #0]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	00c8      	lsls	r0, r1, #3
 8001042:	0059      	lsls	r1, r3, #1
 8001044:	0d4b      	lsrs	r3, r1, #21
 8001046:	4699      	mov	r9, r3
 8001048:	9a00      	ldr	r2, [sp, #0]
 800104a:	9b01      	ldr	r3, [sp, #4]
 800104c:	0a6d      	lsrs	r5, r5, #9
 800104e:	0fd9      	lsrs	r1, r3, #31
 8001050:	0f53      	lsrs	r3, r2, #29
 8001052:	432b      	orrs	r3, r5
 8001054:	469a      	mov	sl, r3
 8001056:	9b00      	ldr	r3, [sp, #0]
 8001058:	0d7f      	lsrs	r7, r7, #21
 800105a:	00da      	lsls	r2, r3, #3
 800105c:	4694      	mov	ip, r2
 800105e:	464a      	mov	r2, r9
 8001060:	46b0      	mov	r8, r6
 8001062:	1aba      	subs	r2, r7, r2
 8001064:	428e      	cmp	r6, r1
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x52>
 8001068:	e0b0      	b.n	80011cc <__aeabi_dadd+0x1b4>
 800106a:	2a00      	cmp	r2, #0
 800106c:	dc00      	bgt.n	8001070 <__aeabi_dadd+0x58>
 800106e:	e078      	b.n	8001162 <__aeabi_dadd+0x14a>
 8001070:	4649      	mov	r1, r9
 8001072:	2900      	cmp	r1, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_dadd+0x60>
 8001076:	e0e9      	b.n	800124c <__aeabi_dadd+0x234>
 8001078:	49c9      	ldr	r1, [pc, #804]	@ (80013a0 <__aeabi_dadd+0x388>)
 800107a:	428f      	cmp	r7, r1
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x68>
 800107e:	e195      	b.n	80013ac <__aeabi_dadd+0x394>
 8001080:	2501      	movs	r5, #1
 8001082:	2a38      	cmp	r2, #56	@ 0x38
 8001084:	dc16      	bgt.n	80010b4 <__aeabi_dadd+0x9c>
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	4653      	mov	r3, sl
 800108a:	0409      	lsls	r1, r1, #16
 800108c:	430b      	orrs	r3, r1
 800108e:	469a      	mov	sl, r3
 8001090:	2a1f      	cmp	r2, #31
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x7e>
 8001094:	e1e7      	b.n	8001466 <__aeabi_dadd+0x44e>
 8001096:	2120      	movs	r1, #32
 8001098:	4655      	mov	r5, sl
 800109a:	1a8b      	subs	r3, r1, r2
 800109c:	4661      	mov	r1, ip
 800109e:	409d      	lsls	r5, r3
 80010a0:	40d1      	lsrs	r1, r2
 80010a2:	430d      	orrs	r5, r1
 80010a4:	4661      	mov	r1, ip
 80010a6:	4099      	lsls	r1, r3
 80010a8:	1e4b      	subs	r3, r1, #1
 80010aa:	4199      	sbcs	r1, r3
 80010ac:	4653      	mov	r3, sl
 80010ae:	40d3      	lsrs	r3, r2
 80010b0:	430d      	orrs	r5, r1
 80010b2:	1ae4      	subs	r4, r4, r3
 80010b4:	1b45      	subs	r5, r0, r5
 80010b6:	42a8      	cmp	r0, r5
 80010b8:	4180      	sbcs	r0, r0
 80010ba:	4240      	negs	r0, r0
 80010bc:	1a24      	subs	r4, r4, r0
 80010be:	0223      	lsls	r3, r4, #8
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_dadd+0xac>
 80010c2:	e10f      	b.n	80012e4 <__aeabi_dadd+0x2cc>
 80010c4:	0264      	lsls	r4, r4, #9
 80010c6:	0a64      	lsrs	r4, r4, #9
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0xb6>
 80010cc:	e139      	b.n	8001342 <__aeabi_dadd+0x32a>
 80010ce:	0020      	movs	r0, r4
 80010d0:	f001 feee 	bl	8002eb0 <__clzsi2>
 80010d4:	0003      	movs	r3, r0
 80010d6:	3b08      	subs	r3, #8
 80010d8:	2120      	movs	r1, #32
 80010da:	0028      	movs	r0, r5
 80010dc:	1aca      	subs	r2, r1, r3
 80010de:	40d0      	lsrs	r0, r2
 80010e0:	409c      	lsls	r4, r3
 80010e2:	0002      	movs	r2, r0
 80010e4:	409d      	lsls	r5, r3
 80010e6:	4322      	orrs	r2, r4
 80010e8:	429f      	cmp	r7, r3
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dadd+0xd6>
 80010ec:	e173      	b.n	80013d6 <__aeabi_dadd+0x3be>
 80010ee:	1bd8      	subs	r0, r3, r7
 80010f0:	3001      	adds	r0, #1
 80010f2:	1a09      	subs	r1, r1, r0
 80010f4:	002c      	movs	r4, r5
 80010f6:	408d      	lsls	r5, r1
 80010f8:	40c4      	lsrs	r4, r0
 80010fa:	1e6b      	subs	r3, r5, #1
 80010fc:	419d      	sbcs	r5, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	40c2      	lsrs	r2, r0
 8001102:	408b      	lsls	r3, r1
 8001104:	4325      	orrs	r5, r4
 8001106:	2700      	movs	r7, #0
 8001108:	0014      	movs	r4, r2
 800110a:	431d      	orrs	r5, r3
 800110c:	076b      	lsls	r3, r5, #29
 800110e:	d009      	beq.n	8001124 <__aeabi_dadd+0x10c>
 8001110:	230f      	movs	r3, #15
 8001112:	402b      	ands	r3, r5
 8001114:	2b04      	cmp	r3, #4
 8001116:	d005      	beq.n	8001124 <__aeabi_dadd+0x10c>
 8001118:	1d2b      	adds	r3, r5, #4
 800111a:	42ab      	cmp	r3, r5
 800111c:	41ad      	sbcs	r5, r5
 800111e:	426d      	negs	r5, r5
 8001120:	1964      	adds	r4, r4, r5
 8001122:	001d      	movs	r5, r3
 8001124:	0223      	lsls	r3, r4, #8
 8001126:	d400      	bmi.n	800112a <__aeabi_dadd+0x112>
 8001128:	e12d      	b.n	8001386 <__aeabi_dadd+0x36e>
 800112a:	4a9d      	ldr	r2, [pc, #628]	@ (80013a0 <__aeabi_dadd+0x388>)
 800112c:	3701      	adds	r7, #1
 800112e:	4297      	cmp	r7, r2
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x11c>
 8001132:	e0d3      	b.n	80012dc <__aeabi_dadd+0x2c4>
 8001134:	4646      	mov	r6, r8
 8001136:	499b      	ldr	r1, [pc, #620]	@ (80013a4 <__aeabi_dadd+0x38c>)
 8001138:	08ed      	lsrs	r5, r5, #3
 800113a:	4021      	ands	r1, r4
 800113c:	074a      	lsls	r2, r1, #29
 800113e:	432a      	orrs	r2, r5
 8001140:	057c      	lsls	r4, r7, #21
 8001142:	024d      	lsls	r5, r1, #9
 8001144:	0b2d      	lsrs	r5, r5, #12
 8001146:	0d64      	lsrs	r4, r4, #21
 8001148:	0524      	lsls	r4, r4, #20
 800114a:	432c      	orrs	r4, r5
 800114c:	07f6      	lsls	r6, r6, #31
 800114e:	4334      	orrs	r4, r6
 8001150:	0010      	movs	r0, r2
 8001152:	0021      	movs	r1, r4
 8001154:	b003      	add	sp, #12
 8001156:	bcf0      	pop	{r4, r5, r6, r7}
 8001158:	46bb      	mov	fp, r7
 800115a:	46b2      	mov	sl, r6
 800115c:	46a9      	mov	r9, r5
 800115e:	46a0      	mov	r8, r4
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001162:	2a00      	cmp	r2, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x150>
 8001166:	e084      	b.n	8001272 <__aeabi_dadd+0x25a>
 8001168:	464a      	mov	r2, r9
 800116a:	1bd2      	subs	r2, r2, r7
 800116c:	2f00      	cmp	r7, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x15a>
 8001170:	e16d      	b.n	800144e <__aeabi_dadd+0x436>
 8001172:	0025      	movs	r5, r4
 8001174:	4305      	orrs	r5, r0
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x162>
 8001178:	e127      	b.n	80013ca <__aeabi_dadd+0x3b2>
 800117a:	1e56      	subs	r6, r2, #1
 800117c:	2a01      	cmp	r2, #1
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x16a>
 8001180:	e23b      	b.n	80015fa <__aeabi_dadd+0x5e2>
 8001182:	4d87      	ldr	r5, [pc, #540]	@ (80013a0 <__aeabi_dadd+0x388>)
 8001184:	42aa      	cmp	r2, r5
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x172>
 8001188:	e26a      	b.n	8001660 <__aeabi_dadd+0x648>
 800118a:	2501      	movs	r5, #1
 800118c:	2e38      	cmp	r6, #56	@ 0x38
 800118e:	dc12      	bgt.n	80011b6 <__aeabi_dadd+0x19e>
 8001190:	0032      	movs	r2, r6
 8001192:	2a1f      	cmp	r2, #31
 8001194:	dd00      	ble.n	8001198 <__aeabi_dadd+0x180>
 8001196:	e1f8      	b.n	800158a <__aeabi_dadd+0x572>
 8001198:	2620      	movs	r6, #32
 800119a:	0025      	movs	r5, r4
 800119c:	1ab6      	subs	r6, r6, r2
 800119e:	0007      	movs	r7, r0
 80011a0:	4653      	mov	r3, sl
 80011a2:	40b0      	lsls	r0, r6
 80011a4:	40d4      	lsrs	r4, r2
 80011a6:	40b5      	lsls	r5, r6
 80011a8:	40d7      	lsrs	r7, r2
 80011aa:	1e46      	subs	r6, r0, #1
 80011ac:	41b0      	sbcs	r0, r6
 80011ae:	1b1b      	subs	r3, r3, r4
 80011b0:	469a      	mov	sl, r3
 80011b2:	433d      	orrs	r5, r7
 80011b4:	4305      	orrs	r5, r0
 80011b6:	4662      	mov	r2, ip
 80011b8:	1b55      	subs	r5, r2, r5
 80011ba:	45ac      	cmp	ip, r5
 80011bc:	4192      	sbcs	r2, r2
 80011be:	4653      	mov	r3, sl
 80011c0:	4252      	negs	r2, r2
 80011c2:	000e      	movs	r6, r1
 80011c4:	464f      	mov	r7, r9
 80011c6:	4688      	mov	r8, r1
 80011c8:	1a9c      	subs	r4, r3, r2
 80011ca:	e778      	b.n	80010be <__aeabi_dadd+0xa6>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	dc00      	bgt.n	80011d2 <__aeabi_dadd+0x1ba>
 80011d0:	e08e      	b.n	80012f0 <__aeabi_dadd+0x2d8>
 80011d2:	4649      	mov	r1, r9
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d175      	bne.n	80012c4 <__aeabi_dadd+0x2ac>
 80011d8:	4661      	mov	r1, ip
 80011da:	4653      	mov	r3, sl
 80011dc:	4319      	orrs	r1, r3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x1ca>
 80011e0:	e0f6      	b.n	80013d0 <__aeabi_dadd+0x3b8>
 80011e2:	1e51      	subs	r1, r2, #1
 80011e4:	2a01      	cmp	r2, #1
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0x1d2>
 80011e8:	e191      	b.n	800150e <__aeabi_dadd+0x4f6>
 80011ea:	4d6d      	ldr	r5, [pc, #436]	@ (80013a0 <__aeabi_dadd+0x388>)
 80011ec:	42aa      	cmp	r2, r5
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x1da>
 80011f0:	e0dc      	b.n	80013ac <__aeabi_dadd+0x394>
 80011f2:	2501      	movs	r5, #1
 80011f4:	2938      	cmp	r1, #56	@ 0x38
 80011f6:	dc14      	bgt.n	8001222 <__aeabi_dadd+0x20a>
 80011f8:	000a      	movs	r2, r1
 80011fa:	2a1f      	cmp	r2, #31
 80011fc:	dd00      	ble.n	8001200 <__aeabi_dadd+0x1e8>
 80011fe:	e1a2      	b.n	8001546 <__aeabi_dadd+0x52e>
 8001200:	2120      	movs	r1, #32
 8001202:	4653      	mov	r3, sl
 8001204:	1a89      	subs	r1, r1, r2
 8001206:	408b      	lsls	r3, r1
 8001208:	001d      	movs	r5, r3
 800120a:	4663      	mov	r3, ip
 800120c:	40d3      	lsrs	r3, r2
 800120e:	431d      	orrs	r5, r3
 8001210:	4663      	mov	r3, ip
 8001212:	408b      	lsls	r3, r1
 8001214:	0019      	movs	r1, r3
 8001216:	1e4b      	subs	r3, r1, #1
 8001218:	4199      	sbcs	r1, r3
 800121a:	4653      	mov	r3, sl
 800121c:	40d3      	lsrs	r3, r2
 800121e:	430d      	orrs	r5, r1
 8001220:	18e4      	adds	r4, r4, r3
 8001222:	182d      	adds	r5, r5, r0
 8001224:	4285      	cmp	r5, r0
 8001226:	4180      	sbcs	r0, r0
 8001228:	4240      	negs	r0, r0
 800122a:	1824      	adds	r4, r4, r0
 800122c:	0223      	lsls	r3, r4, #8
 800122e:	d559      	bpl.n	80012e4 <__aeabi_dadd+0x2cc>
 8001230:	4b5b      	ldr	r3, [pc, #364]	@ (80013a0 <__aeabi_dadd+0x388>)
 8001232:	3701      	adds	r7, #1
 8001234:	429f      	cmp	r7, r3
 8001236:	d051      	beq.n	80012dc <__aeabi_dadd+0x2c4>
 8001238:	2101      	movs	r1, #1
 800123a:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <__aeabi_dadd+0x38c>)
 800123c:	086a      	lsrs	r2, r5, #1
 800123e:	401c      	ands	r4, r3
 8001240:	4029      	ands	r1, r5
 8001242:	430a      	orrs	r2, r1
 8001244:	07e5      	lsls	r5, r4, #31
 8001246:	4315      	orrs	r5, r2
 8001248:	0864      	lsrs	r4, r4, #1
 800124a:	e75f      	b.n	800110c <__aeabi_dadd+0xf4>
 800124c:	4661      	mov	r1, ip
 800124e:	4653      	mov	r3, sl
 8001250:	4319      	orrs	r1, r3
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x23e>
 8001254:	e0bc      	b.n	80013d0 <__aeabi_dadd+0x3b8>
 8001256:	1e51      	subs	r1, r2, #1
 8001258:	2a01      	cmp	r2, #1
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x246>
 800125c:	e164      	b.n	8001528 <__aeabi_dadd+0x510>
 800125e:	4d50      	ldr	r5, [pc, #320]	@ (80013a0 <__aeabi_dadd+0x388>)
 8001260:	42aa      	cmp	r2, r5
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x24e>
 8001264:	e16a      	b.n	800153c <__aeabi_dadd+0x524>
 8001266:	2501      	movs	r5, #1
 8001268:	2938      	cmp	r1, #56	@ 0x38
 800126a:	dd00      	ble.n	800126e <__aeabi_dadd+0x256>
 800126c:	e722      	b.n	80010b4 <__aeabi_dadd+0x9c>
 800126e:	000a      	movs	r2, r1
 8001270:	e70e      	b.n	8001090 <__aeabi_dadd+0x78>
 8001272:	4a4d      	ldr	r2, [pc, #308]	@ (80013a8 <__aeabi_dadd+0x390>)
 8001274:	1c7d      	adds	r5, r7, #1
 8001276:	4215      	tst	r5, r2
 8001278:	d000      	beq.n	800127c <__aeabi_dadd+0x264>
 800127a:	e0d0      	b.n	800141e <__aeabi_dadd+0x406>
 800127c:	0025      	movs	r5, r4
 800127e:	4662      	mov	r2, ip
 8001280:	4653      	mov	r3, sl
 8001282:	4305      	orrs	r5, r0
 8001284:	431a      	orrs	r2, r3
 8001286:	2f00      	cmp	r7, #0
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x274>
 800128a:	e137      	b.n	80014fc <__aeabi_dadd+0x4e4>
 800128c:	2d00      	cmp	r5, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x27a>
 8001290:	e1a8      	b.n	80015e4 <__aeabi_dadd+0x5cc>
 8001292:	2a00      	cmp	r2, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x280>
 8001296:	e16a      	b.n	800156e <__aeabi_dadd+0x556>
 8001298:	4663      	mov	r3, ip
 800129a:	1ac5      	subs	r5, r0, r3
 800129c:	4653      	mov	r3, sl
 800129e:	1ae2      	subs	r2, r4, r3
 80012a0:	42a8      	cmp	r0, r5
 80012a2:	419b      	sbcs	r3, r3
 80012a4:	425b      	negs	r3, r3
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	021a      	lsls	r2, r3, #8
 80012aa:	d400      	bmi.n	80012ae <__aeabi_dadd+0x296>
 80012ac:	e203      	b.n	80016b6 <__aeabi_dadd+0x69e>
 80012ae:	4663      	mov	r3, ip
 80012b0:	1a1d      	subs	r5, r3, r0
 80012b2:	45ac      	cmp	ip, r5
 80012b4:	4192      	sbcs	r2, r2
 80012b6:	4653      	mov	r3, sl
 80012b8:	4252      	negs	r2, r2
 80012ba:	1b1c      	subs	r4, r3, r4
 80012bc:	000e      	movs	r6, r1
 80012be:	4688      	mov	r8, r1
 80012c0:	1aa4      	subs	r4, r4, r2
 80012c2:	e723      	b.n	800110c <__aeabi_dadd+0xf4>
 80012c4:	4936      	ldr	r1, [pc, #216]	@ (80013a0 <__aeabi_dadd+0x388>)
 80012c6:	428f      	cmp	r7, r1
 80012c8:	d070      	beq.n	80013ac <__aeabi_dadd+0x394>
 80012ca:	2501      	movs	r5, #1
 80012cc:	2a38      	cmp	r2, #56	@ 0x38
 80012ce:	dca8      	bgt.n	8001222 <__aeabi_dadd+0x20a>
 80012d0:	2180      	movs	r1, #128	@ 0x80
 80012d2:	4653      	mov	r3, sl
 80012d4:	0409      	lsls	r1, r1, #16
 80012d6:	430b      	orrs	r3, r1
 80012d8:	469a      	mov	sl, r3
 80012da:	e78e      	b.n	80011fa <__aeabi_dadd+0x1e2>
 80012dc:	003c      	movs	r4, r7
 80012de:	2500      	movs	r5, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	e731      	b.n	8001148 <__aeabi_dadd+0x130>
 80012e4:	2307      	movs	r3, #7
 80012e6:	402b      	ands	r3, r5
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d000      	beq.n	80012ee <__aeabi_dadd+0x2d6>
 80012ec:	e710      	b.n	8001110 <__aeabi_dadd+0xf8>
 80012ee:	e093      	b.n	8001418 <__aeabi_dadd+0x400>
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	d074      	beq.n	80013de <__aeabi_dadd+0x3c6>
 80012f4:	464a      	mov	r2, r9
 80012f6:	1bd2      	subs	r2, r2, r7
 80012f8:	2f00      	cmp	r7, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x2e6>
 80012fc:	e0c7      	b.n	800148e <__aeabi_dadd+0x476>
 80012fe:	4928      	ldr	r1, [pc, #160]	@ (80013a0 <__aeabi_dadd+0x388>)
 8001300:	4589      	cmp	r9, r1
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x2ee>
 8001304:	e185      	b.n	8001612 <__aeabi_dadd+0x5fa>
 8001306:	2501      	movs	r5, #1
 8001308:	2a38      	cmp	r2, #56	@ 0x38
 800130a:	dc12      	bgt.n	8001332 <__aeabi_dadd+0x31a>
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	0409      	lsls	r1, r1, #16
 8001310:	430c      	orrs	r4, r1
 8001312:	2a1f      	cmp	r2, #31
 8001314:	dd00      	ble.n	8001318 <__aeabi_dadd+0x300>
 8001316:	e1ab      	b.n	8001670 <__aeabi_dadd+0x658>
 8001318:	2120      	movs	r1, #32
 800131a:	0025      	movs	r5, r4
 800131c:	1a89      	subs	r1, r1, r2
 800131e:	0007      	movs	r7, r0
 8001320:	4088      	lsls	r0, r1
 8001322:	408d      	lsls	r5, r1
 8001324:	40d7      	lsrs	r7, r2
 8001326:	1e41      	subs	r1, r0, #1
 8001328:	4188      	sbcs	r0, r1
 800132a:	40d4      	lsrs	r4, r2
 800132c:	433d      	orrs	r5, r7
 800132e:	4305      	orrs	r5, r0
 8001330:	44a2      	add	sl, r4
 8001332:	4465      	add	r5, ip
 8001334:	4565      	cmp	r5, ip
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	4452      	add	r2, sl
 800133c:	0014      	movs	r4, r2
 800133e:	464f      	mov	r7, r9
 8001340:	e774      	b.n	800122c <__aeabi_dadd+0x214>
 8001342:	0028      	movs	r0, r5
 8001344:	f001 fdb4 	bl	8002eb0 <__clzsi2>
 8001348:	0003      	movs	r3, r0
 800134a:	3318      	adds	r3, #24
 800134c:	2b1f      	cmp	r3, #31
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x33a>
 8001350:	e6c2      	b.n	80010d8 <__aeabi_dadd+0xc0>
 8001352:	002a      	movs	r2, r5
 8001354:	3808      	subs	r0, #8
 8001356:	4082      	lsls	r2, r0
 8001358:	429f      	cmp	r7, r3
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x346>
 800135c:	e0a9      	b.n	80014b2 <__aeabi_dadd+0x49a>
 800135e:	1bdb      	subs	r3, r3, r7
 8001360:	1c58      	adds	r0, r3, #1
 8001362:	281f      	cmp	r0, #31
 8001364:	dc00      	bgt.n	8001368 <__aeabi_dadd+0x350>
 8001366:	e1ac      	b.n	80016c2 <__aeabi_dadd+0x6aa>
 8001368:	0015      	movs	r5, r2
 800136a:	3b1f      	subs	r3, #31
 800136c:	40dd      	lsrs	r5, r3
 800136e:	2820      	cmp	r0, #32
 8001370:	d005      	beq.n	800137e <__aeabi_dadd+0x366>
 8001372:	2340      	movs	r3, #64	@ 0x40
 8001374:	1a1b      	subs	r3, r3, r0
 8001376:	409a      	lsls	r2, r3
 8001378:	1e53      	subs	r3, r2, #1
 800137a:	419a      	sbcs	r2, r3
 800137c:	4315      	orrs	r5, r2
 800137e:	2307      	movs	r3, #7
 8001380:	2700      	movs	r7, #0
 8001382:	402b      	ands	r3, r5
 8001384:	e7b0      	b.n	80012e8 <__aeabi_dadd+0x2d0>
 8001386:	08ed      	lsrs	r5, r5, #3
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <__aeabi_dadd+0x388>)
 800138a:	0762      	lsls	r2, r4, #29
 800138c:	432a      	orrs	r2, r5
 800138e:	08e4      	lsrs	r4, r4, #3
 8001390:	429f      	cmp	r7, r3
 8001392:	d00f      	beq.n	80013b4 <__aeabi_dadd+0x39c>
 8001394:	0324      	lsls	r4, r4, #12
 8001396:	0b25      	lsrs	r5, r4, #12
 8001398:	057c      	lsls	r4, r7, #21
 800139a:	0d64      	lsrs	r4, r4, #21
 800139c:	e6d4      	b.n	8001148 <__aeabi_dadd+0x130>
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	ff7fffff 	.word	0xff7fffff
 80013a8:	000007fe 	.word	0x000007fe
 80013ac:	08c0      	lsrs	r0, r0, #3
 80013ae:	0762      	lsls	r2, r4, #29
 80013b0:	4302      	orrs	r2, r0
 80013b2:	08e4      	lsrs	r4, r4, #3
 80013b4:	0013      	movs	r3, r2
 80013b6:	4323      	orrs	r3, r4
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x3a4>
 80013ba:	e186      	b.n	80016ca <__aeabi_dadd+0x6b2>
 80013bc:	2580      	movs	r5, #128	@ 0x80
 80013be:	032d      	lsls	r5, r5, #12
 80013c0:	4325      	orrs	r5, r4
 80013c2:	032d      	lsls	r5, r5, #12
 80013c4:	4cc3      	ldr	r4, [pc, #780]	@ (80016d4 <__aeabi_dadd+0x6bc>)
 80013c6:	0b2d      	lsrs	r5, r5, #12
 80013c8:	e6be      	b.n	8001148 <__aeabi_dadd+0x130>
 80013ca:	4660      	mov	r0, ip
 80013cc:	4654      	mov	r4, sl
 80013ce:	000e      	movs	r6, r1
 80013d0:	0017      	movs	r7, r2
 80013d2:	08c5      	lsrs	r5, r0, #3
 80013d4:	e7d8      	b.n	8001388 <__aeabi_dadd+0x370>
 80013d6:	4cc0      	ldr	r4, [pc, #768]	@ (80016d8 <__aeabi_dadd+0x6c0>)
 80013d8:	1aff      	subs	r7, r7, r3
 80013da:	4014      	ands	r4, r2
 80013dc:	e696      	b.n	800110c <__aeabi_dadd+0xf4>
 80013de:	4abf      	ldr	r2, [pc, #764]	@ (80016dc <__aeabi_dadd+0x6c4>)
 80013e0:	1c79      	adds	r1, r7, #1
 80013e2:	4211      	tst	r1, r2
 80013e4:	d16b      	bne.n	80014be <__aeabi_dadd+0x4a6>
 80013e6:	0022      	movs	r2, r4
 80013e8:	4302      	orrs	r2, r0
 80013ea:	2f00      	cmp	r7, #0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dadd+0x3d8>
 80013ee:	e0db      	b.n	80015a8 <__aeabi_dadd+0x590>
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x3de>
 80013f4:	e12d      	b.n	8001652 <__aeabi_dadd+0x63a>
 80013f6:	4662      	mov	r2, ip
 80013f8:	4653      	mov	r3, sl
 80013fa:	431a      	orrs	r2, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x3e8>
 80013fe:	e0b6      	b.n	800156e <__aeabi_dadd+0x556>
 8001400:	4663      	mov	r3, ip
 8001402:	18c5      	adds	r5, r0, r3
 8001404:	4285      	cmp	r5, r0
 8001406:	4180      	sbcs	r0, r0
 8001408:	4454      	add	r4, sl
 800140a:	4240      	negs	r0, r0
 800140c:	1824      	adds	r4, r4, r0
 800140e:	0223      	lsls	r3, r4, #8
 8001410:	d502      	bpl.n	8001418 <__aeabi_dadd+0x400>
 8001412:	000f      	movs	r7, r1
 8001414:	4bb0      	ldr	r3, [pc, #704]	@ (80016d8 <__aeabi_dadd+0x6c0>)
 8001416:	401c      	ands	r4, r3
 8001418:	003a      	movs	r2, r7
 800141a:	0028      	movs	r0, r5
 800141c:	e7d8      	b.n	80013d0 <__aeabi_dadd+0x3b8>
 800141e:	4662      	mov	r2, ip
 8001420:	1a85      	subs	r5, r0, r2
 8001422:	42a8      	cmp	r0, r5
 8001424:	4192      	sbcs	r2, r2
 8001426:	4653      	mov	r3, sl
 8001428:	4252      	negs	r2, r2
 800142a:	4691      	mov	r9, r2
 800142c:	1ae3      	subs	r3, r4, r3
 800142e:	001a      	movs	r2, r3
 8001430:	464b      	mov	r3, r9
 8001432:	1ad2      	subs	r2, r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	4691      	mov	r9, r2
 8001438:	021a      	lsls	r2, r3, #8
 800143a:	d454      	bmi.n	80014e6 <__aeabi_dadd+0x4ce>
 800143c:	464a      	mov	r2, r9
 800143e:	464c      	mov	r4, r9
 8001440:	432a      	orrs	r2, r5
 8001442:	d000      	beq.n	8001446 <__aeabi_dadd+0x42e>
 8001444:	e640      	b.n	80010c8 <__aeabi_dadd+0xb0>
 8001446:	2600      	movs	r6, #0
 8001448:	2400      	movs	r4, #0
 800144a:	2500      	movs	r5, #0
 800144c:	e67c      	b.n	8001148 <__aeabi_dadd+0x130>
 800144e:	4da1      	ldr	r5, [pc, #644]	@ (80016d4 <__aeabi_dadd+0x6bc>)
 8001450:	45a9      	cmp	r9, r5
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x43e>
 8001454:	e090      	b.n	8001578 <__aeabi_dadd+0x560>
 8001456:	2501      	movs	r5, #1
 8001458:	2a38      	cmp	r2, #56	@ 0x38
 800145a:	dd00      	ble.n	800145e <__aeabi_dadd+0x446>
 800145c:	e6ab      	b.n	80011b6 <__aeabi_dadd+0x19e>
 800145e:	2580      	movs	r5, #128	@ 0x80
 8001460:	042d      	lsls	r5, r5, #16
 8001462:	432c      	orrs	r4, r5
 8001464:	e695      	b.n	8001192 <__aeabi_dadd+0x17a>
 8001466:	0011      	movs	r1, r2
 8001468:	4655      	mov	r5, sl
 800146a:	3920      	subs	r1, #32
 800146c:	40cd      	lsrs	r5, r1
 800146e:	46a9      	mov	r9, r5
 8001470:	2a20      	cmp	r2, #32
 8001472:	d006      	beq.n	8001482 <__aeabi_dadd+0x46a>
 8001474:	2140      	movs	r1, #64	@ 0x40
 8001476:	4653      	mov	r3, sl
 8001478:	1a8a      	subs	r2, r1, r2
 800147a:	4093      	lsls	r3, r2
 800147c:	4662      	mov	r2, ip
 800147e:	431a      	orrs	r2, r3
 8001480:	4694      	mov	ip, r2
 8001482:	4665      	mov	r5, ip
 8001484:	1e6b      	subs	r3, r5, #1
 8001486:	419d      	sbcs	r5, r3
 8001488:	464b      	mov	r3, r9
 800148a:	431d      	orrs	r5, r3
 800148c:	e612      	b.n	80010b4 <__aeabi_dadd+0x9c>
 800148e:	0021      	movs	r1, r4
 8001490:	4301      	orrs	r1, r0
 8001492:	d100      	bne.n	8001496 <__aeabi_dadd+0x47e>
 8001494:	e0c4      	b.n	8001620 <__aeabi_dadd+0x608>
 8001496:	1e51      	subs	r1, r2, #1
 8001498:	2a01      	cmp	r2, #1
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x486>
 800149c:	e0fb      	b.n	8001696 <__aeabi_dadd+0x67e>
 800149e:	4d8d      	ldr	r5, [pc, #564]	@ (80016d4 <__aeabi_dadd+0x6bc>)
 80014a0:	42aa      	cmp	r2, r5
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x48e>
 80014a4:	e0b5      	b.n	8001612 <__aeabi_dadd+0x5fa>
 80014a6:	2501      	movs	r5, #1
 80014a8:	2938      	cmp	r1, #56	@ 0x38
 80014aa:	dd00      	ble.n	80014ae <__aeabi_dadd+0x496>
 80014ac:	e741      	b.n	8001332 <__aeabi_dadd+0x31a>
 80014ae:	000a      	movs	r2, r1
 80014b0:	e72f      	b.n	8001312 <__aeabi_dadd+0x2fa>
 80014b2:	4c89      	ldr	r4, [pc, #548]	@ (80016d8 <__aeabi_dadd+0x6c0>)
 80014b4:	1aff      	subs	r7, r7, r3
 80014b6:	4014      	ands	r4, r2
 80014b8:	0762      	lsls	r2, r4, #29
 80014ba:	08e4      	lsrs	r4, r4, #3
 80014bc:	e76a      	b.n	8001394 <__aeabi_dadd+0x37c>
 80014be:	4a85      	ldr	r2, [pc, #532]	@ (80016d4 <__aeabi_dadd+0x6bc>)
 80014c0:	4291      	cmp	r1, r2
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x4ae>
 80014c4:	e0e3      	b.n	800168e <__aeabi_dadd+0x676>
 80014c6:	4663      	mov	r3, ip
 80014c8:	18c2      	adds	r2, r0, r3
 80014ca:	4282      	cmp	r2, r0
 80014cc:	4180      	sbcs	r0, r0
 80014ce:	0023      	movs	r3, r4
 80014d0:	4240      	negs	r0, r0
 80014d2:	4453      	add	r3, sl
 80014d4:	181b      	adds	r3, r3, r0
 80014d6:	07dd      	lsls	r5, r3, #31
 80014d8:	085c      	lsrs	r4, r3, #1
 80014da:	2307      	movs	r3, #7
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	4315      	orrs	r5, r2
 80014e0:	000f      	movs	r7, r1
 80014e2:	402b      	ands	r3, r5
 80014e4:	e700      	b.n	80012e8 <__aeabi_dadd+0x2d0>
 80014e6:	4663      	mov	r3, ip
 80014e8:	1a1d      	subs	r5, r3, r0
 80014ea:	45ac      	cmp	ip, r5
 80014ec:	4192      	sbcs	r2, r2
 80014ee:	4653      	mov	r3, sl
 80014f0:	4252      	negs	r2, r2
 80014f2:	1b1c      	subs	r4, r3, r4
 80014f4:	000e      	movs	r6, r1
 80014f6:	4688      	mov	r8, r1
 80014f8:	1aa4      	subs	r4, r4, r2
 80014fa:	e5e5      	b.n	80010c8 <__aeabi_dadd+0xb0>
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d000      	beq.n	8001502 <__aeabi_dadd+0x4ea>
 8001500:	e091      	b.n	8001626 <__aeabi_dadd+0x60e>
 8001502:	2a00      	cmp	r2, #0
 8001504:	d138      	bne.n	8001578 <__aeabi_dadd+0x560>
 8001506:	2480      	movs	r4, #128	@ 0x80
 8001508:	2600      	movs	r6, #0
 800150a:	0324      	lsls	r4, r4, #12
 800150c:	e756      	b.n	80013bc <__aeabi_dadd+0x3a4>
 800150e:	4663      	mov	r3, ip
 8001510:	18c5      	adds	r5, r0, r3
 8001512:	4285      	cmp	r5, r0
 8001514:	4180      	sbcs	r0, r0
 8001516:	4454      	add	r4, sl
 8001518:	4240      	negs	r0, r0
 800151a:	1824      	adds	r4, r4, r0
 800151c:	2701      	movs	r7, #1
 800151e:	0223      	lsls	r3, r4, #8
 8001520:	d400      	bmi.n	8001524 <__aeabi_dadd+0x50c>
 8001522:	e6df      	b.n	80012e4 <__aeabi_dadd+0x2cc>
 8001524:	2702      	movs	r7, #2
 8001526:	e687      	b.n	8001238 <__aeabi_dadd+0x220>
 8001528:	4663      	mov	r3, ip
 800152a:	1ac5      	subs	r5, r0, r3
 800152c:	42a8      	cmp	r0, r5
 800152e:	4180      	sbcs	r0, r0
 8001530:	4653      	mov	r3, sl
 8001532:	4240      	negs	r0, r0
 8001534:	1ae4      	subs	r4, r4, r3
 8001536:	2701      	movs	r7, #1
 8001538:	1a24      	subs	r4, r4, r0
 800153a:	e5c0      	b.n	80010be <__aeabi_dadd+0xa6>
 800153c:	0762      	lsls	r2, r4, #29
 800153e:	08c0      	lsrs	r0, r0, #3
 8001540:	4302      	orrs	r2, r0
 8001542:	08e4      	lsrs	r4, r4, #3
 8001544:	e736      	b.n	80013b4 <__aeabi_dadd+0x39c>
 8001546:	0011      	movs	r1, r2
 8001548:	4653      	mov	r3, sl
 800154a:	3920      	subs	r1, #32
 800154c:	40cb      	lsrs	r3, r1
 800154e:	4699      	mov	r9, r3
 8001550:	2a20      	cmp	r2, #32
 8001552:	d006      	beq.n	8001562 <__aeabi_dadd+0x54a>
 8001554:	2140      	movs	r1, #64	@ 0x40
 8001556:	4653      	mov	r3, sl
 8001558:	1a8a      	subs	r2, r1, r2
 800155a:	4093      	lsls	r3, r2
 800155c:	4662      	mov	r2, ip
 800155e:	431a      	orrs	r2, r3
 8001560:	4694      	mov	ip, r2
 8001562:	4665      	mov	r5, ip
 8001564:	1e6b      	subs	r3, r5, #1
 8001566:	419d      	sbcs	r5, r3
 8001568:	464b      	mov	r3, r9
 800156a:	431d      	orrs	r5, r3
 800156c:	e659      	b.n	8001222 <__aeabi_dadd+0x20a>
 800156e:	0762      	lsls	r2, r4, #29
 8001570:	08c0      	lsrs	r0, r0, #3
 8001572:	4302      	orrs	r2, r0
 8001574:	08e4      	lsrs	r4, r4, #3
 8001576:	e70d      	b.n	8001394 <__aeabi_dadd+0x37c>
 8001578:	4653      	mov	r3, sl
 800157a:	075a      	lsls	r2, r3, #29
 800157c:	4663      	mov	r3, ip
 800157e:	08d8      	lsrs	r0, r3, #3
 8001580:	4653      	mov	r3, sl
 8001582:	000e      	movs	r6, r1
 8001584:	4302      	orrs	r2, r0
 8001586:	08dc      	lsrs	r4, r3, #3
 8001588:	e714      	b.n	80013b4 <__aeabi_dadd+0x39c>
 800158a:	0015      	movs	r5, r2
 800158c:	0026      	movs	r6, r4
 800158e:	3d20      	subs	r5, #32
 8001590:	40ee      	lsrs	r6, r5
 8001592:	2a20      	cmp	r2, #32
 8001594:	d003      	beq.n	800159e <__aeabi_dadd+0x586>
 8001596:	2540      	movs	r5, #64	@ 0x40
 8001598:	1aaa      	subs	r2, r5, r2
 800159a:	4094      	lsls	r4, r2
 800159c:	4320      	orrs	r0, r4
 800159e:	1e42      	subs	r2, r0, #1
 80015a0:	4190      	sbcs	r0, r2
 80015a2:	0005      	movs	r5, r0
 80015a4:	4335      	orrs	r5, r6
 80015a6:	e606      	b.n	80011b6 <__aeabi_dadd+0x19e>
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d07c      	beq.n	80016a6 <__aeabi_dadd+0x68e>
 80015ac:	4662      	mov	r2, ip
 80015ae:	4653      	mov	r3, sl
 80015b0:	08c0      	lsrs	r0, r0, #3
 80015b2:	431a      	orrs	r2, r3
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x5a0>
 80015b6:	e6fa      	b.n	80013ae <__aeabi_dadd+0x396>
 80015b8:	0762      	lsls	r2, r4, #29
 80015ba:	4310      	orrs	r0, r2
 80015bc:	2280      	movs	r2, #128	@ 0x80
 80015be:	08e4      	lsrs	r4, r4, #3
 80015c0:	0312      	lsls	r2, r2, #12
 80015c2:	4214      	tst	r4, r2
 80015c4:	d008      	beq.n	80015d8 <__aeabi_dadd+0x5c0>
 80015c6:	08d9      	lsrs	r1, r3, #3
 80015c8:	4211      	tst	r1, r2
 80015ca:	d105      	bne.n	80015d8 <__aeabi_dadd+0x5c0>
 80015cc:	4663      	mov	r3, ip
 80015ce:	08d8      	lsrs	r0, r3, #3
 80015d0:	4653      	mov	r3, sl
 80015d2:	000c      	movs	r4, r1
 80015d4:	075b      	lsls	r3, r3, #29
 80015d6:	4318      	orrs	r0, r3
 80015d8:	0f42      	lsrs	r2, r0, #29
 80015da:	00c0      	lsls	r0, r0, #3
 80015dc:	08c0      	lsrs	r0, r0, #3
 80015de:	0752      	lsls	r2, r2, #29
 80015e0:	4302      	orrs	r2, r0
 80015e2:	e6e7      	b.n	80013b4 <__aeabi_dadd+0x39c>
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x5d2>
 80015e8:	e72d      	b.n	8001446 <__aeabi_dadd+0x42e>
 80015ea:	4663      	mov	r3, ip
 80015ec:	08d8      	lsrs	r0, r3, #3
 80015ee:	4653      	mov	r3, sl
 80015f0:	075a      	lsls	r2, r3, #29
 80015f2:	000e      	movs	r6, r1
 80015f4:	4302      	orrs	r2, r0
 80015f6:	08dc      	lsrs	r4, r3, #3
 80015f8:	e6cc      	b.n	8001394 <__aeabi_dadd+0x37c>
 80015fa:	4663      	mov	r3, ip
 80015fc:	1a1d      	subs	r5, r3, r0
 80015fe:	45ac      	cmp	ip, r5
 8001600:	4192      	sbcs	r2, r2
 8001602:	4653      	mov	r3, sl
 8001604:	4252      	negs	r2, r2
 8001606:	1b1c      	subs	r4, r3, r4
 8001608:	000e      	movs	r6, r1
 800160a:	4688      	mov	r8, r1
 800160c:	1aa4      	subs	r4, r4, r2
 800160e:	3701      	adds	r7, #1
 8001610:	e555      	b.n	80010be <__aeabi_dadd+0xa6>
 8001612:	4663      	mov	r3, ip
 8001614:	08d9      	lsrs	r1, r3, #3
 8001616:	4653      	mov	r3, sl
 8001618:	075a      	lsls	r2, r3, #29
 800161a:	430a      	orrs	r2, r1
 800161c:	08dc      	lsrs	r4, r3, #3
 800161e:	e6c9      	b.n	80013b4 <__aeabi_dadd+0x39c>
 8001620:	4660      	mov	r0, ip
 8001622:	4654      	mov	r4, sl
 8001624:	e6d4      	b.n	80013d0 <__aeabi_dadd+0x3b8>
 8001626:	08c0      	lsrs	r0, r0, #3
 8001628:	2a00      	cmp	r2, #0
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x616>
 800162c:	e6bf      	b.n	80013ae <__aeabi_dadd+0x396>
 800162e:	0762      	lsls	r2, r4, #29
 8001630:	4310      	orrs	r0, r2
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	08e4      	lsrs	r4, r4, #3
 8001636:	0312      	lsls	r2, r2, #12
 8001638:	4214      	tst	r4, r2
 800163a:	d0cd      	beq.n	80015d8 <__aeabi_dadd+0x5c0>
 800163c:	08dd      	lsrs	r5, r3, #3
 800163e:	4215      	tst	r5, r2
 8001640:	d1ca      	bne.n	80015d8 <__aeabi_dadd+0x5c0>
 8001642:	4663      	mov	r3, ip
 8001644:	08d8      	lsrs	r0, r3, #3
 8001646:	4653      	mov	r3, sl
 8001648:	075b      	lsls	r3, r3, #29
 800164a:	000e      	movs	r6, r1
 800164c:	002c      	movs	r4, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	e7c2      	b.n	80015d8 <__aeabi_dadd+0x5c0>
 8001652:	4663      	mov	r3, ip
 8001654:	08d9      	lsrs	r1, r3, #3
 8001656:	4653      	mov	r3, sl
 8001658:	075a      	lsls	r2, r3, #29
 800165a:	430a      	orrs	r2, r1
 800165c:	08dc      	lsrs	r4, r3, #3
 800165e:	e699      	b.n	8001394 <__aeabi_dadd+0x37c>
 8001660:	4663      	mov	r3, ip
 8001662:	08d8      	lsrs	r0, r3, #3
 8001664:	4653      	mov	r3, sl
 8001666:	075a      	lsls	r2, r3, #29
 8001668:	000e      	movs	r6, r1
 800166a:	4302      	orrs	r2, r0
 800166c:	08dc      	lsrs	r4, r3, #3
 800166e:	e6a1      	b.n	80013b4 <__aeabi_dadd+0x39c>
 8001670:	0011      	movs	r1, r2
 8001672:	0027      	movs	r7, r4
 8001674:	3920      	subs	r1, #32
 8001676:	40cf      	lsrs	r7, r1
 8001678:	2a20      	cmp	r2, #32
 800167a:	d003      	beq.n	8001684 <__aeabi_dadd+0x66c>
 800167c:	2140      	movs	r1, #64	@ 0x40
 800167e:	1a8a      	subs	r2, r1, r2
 8001680:	4094      	lsls	r4, r2
 8001682:	4320      	orrs	r0, r4
 8001684:	1e42      	subs	r2, r0, #1
 8001686:	4190      	sbcs	r0, r2
 8001688:	0005      	movs	r5, r0
 800168a:	433d      	orrs	r5, r7
 800168c:	e651      	b.n	8001332 <__aeabi_dadd+0x31a>
 800168e:	000c      	movs	r4, r1
 8001690:	2500      	movs	r5, #0
 8001692:	2200      	movs	r2, #0
 8001694:	e558      	b.n	8001148 <__aeabi_dadd+0x130>
 8001696:	4460      	add	r0, ip
 8001698:	4560      	cmp	r0, ip
 800169a:	4192      	sbcs	r2, r2
 800169c:	4454      	add	r4, sl
 800169e:	4252      	negs	r2, r2
 80016a0:	0005      	movs	r5, r0
 80016a2:	18a4      	adds	r4, r4, r2
 80016a4:	e73a      	b.n	800151c <__aeabi_dadd+0x504>
 80016a6:	4653      	mov	r3, sl
 80016a8:	075a      	lsls	r2, r3, #29
 80016aa:	4663      	mov	r3, ip
 80016ac:	08d9      	lsrs	r1, r3, #3
 80016ae:	4653      	mov	r3, sl
 80016b0:	430a      	orrs	r2, r1
 80016b2:	08dc      	lsrs	r4, r3, #3
 80016b4:	e67e      	b.n	80013b4 <__aeabi_dadd+0x39c>
 80016b6:	001a      	movs	r2, r3
 80016b8:	001c      	movs	r4, r3
 80016ba:	432a      	orrs	r2, r5
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dadd+0x6a8>
 80016be:	e6ab      	b.n	8001418 <__aeabi_dadd+0x400>
 80016c0:	e6c1      	b.n	8001446 <__aeabi_dadd+0x42e>
 80016c2:	2120      	movs	r1, #32
 80016c4:	2500      	movs	r5, #0
 80016c6:	1a09      	subs	r1, r1, r0
 80016c8:	e519      	b.n	80010fe <__aeabi_dadd+0xe6>
 80016ca:	2200      	movs	r2, #0
 80016cc:	2500      	movs	r5, #0
 80016ce:	4c01      	ldr	r4, [pc, #4]	@ (80016d4 <__aeabi_dadd+0x6bc>)
 80016d0:	e53a      	b.n	8001148 <__aeabi_dadd+0x130>
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	ff7fffff 	.word	0xff7fffff
 80016dc:	000007fe 	.word	0x000007fe

080016e0 <__aeabi_ddiv>:
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	46de      	mov	lr, fp
 80016e4:	4645      	mov	r5, r8
 80016e6:	4657      	mov	r7, sl
 80016e8:	464e      	mov	r6, r9
 80016ea:	b5e0      	push	{r5, r6, r7, lr}
 80016ec:	b087      	sub	sp, #28
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	030b      	lsls	r3, r1, #12
 80016f4:	0b1b      	lsrs	r3, r3, #12
 80016f6:	469b      	mov	fp, r3
 80016f8:	0fca      	lsrs	r2, r1, #31
 80016fa:	004b      	lsls	r3, r1, #1
 80016fc:	0004      	movs	r4, r0
 80016fe:	4680      	mov	r8, r0
 8001700:	0d5b      	lsrs	r3, r3, #21
 8001702:	9202      	str	r2, [sp, #8]
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x28>
 8001706:	e16a      	b.n	80019de <__aeabi_ddiv+0x2fe>
 8001708:	4ad4      	ldr	r2, [pc, #848]	@ (8001a5c <__aeabi_ddiv+0x37c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d100      	bne.n	8001710 <__aeabi_ddiv+0x30>
 800170e:	e18c      	b.n	8001a2a <__aeabi_ddiv+0x34a>
 8001710:	4659      	mov	r1, fp
 8001712:	0f42      	lsrs	r2, r0, #29
 8001714:	00c9      	lsls	r1, r1, #3
 8001716:	430a      	orrs	r2, r1
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	0409      	lsls	r1, r1, #16
 800171c:	4311      	orrs	r1, r2
 800171e:	00c2      	lsls	r2, r0, #3
 8001720:	4690      	mov	r8, r2
 8001722:	4acf      	ldr	r2, [pc, #828]	@ (8001a60 <__aeabi_ddiv+0x380>)
 8001724:	4689      	mov	r9, r1
 8001726:	4692      	mov	sl, r2
 8001728:	449a      	add	sl, r3
 800172a:	2300      	movs	r3, #0
 800172c:	2400      	movs	r4, #0
 800172e:	9303      	str	r3, [sp, #12]
 8001730:	9e00      	ldr	r6, [sp, #0]
 8001732:	9f01      	ldr	r7, [sp, #4]
 8001734:	033b      	lsls	r3, r7, #12
 8001736:	0b1b      	lsrs	r3, r3, #12
 8001738:	469b      	mov	fp, r3
 800173a:	007b      	lsls	r3, r7, #1
 800173c:	0030      	movs	r0, r6
 800173e:	0d5b      	lsrs	r3, r3, #21
 8001740:	0ffd      	lsrs	r5, r7, #31
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x68>
 8001746:	e128      	b.n	800199a <__aeabi_ddiv+0x2ba>
 8001748:	4ac4      	ldr	r2, [pc, #784]	@ (8001a5c <__aeabi_ddiv+0x37c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d100      	bne.n	8001750 <__aeabi_ddiv+0x70>
 800174e:	e177      	b.n	8001a40 <__aeabi_ddiv+0x360>
 8001750:	4659      	mov	r1, fp
 8001752:	0f72      	lsrs	r2, r6, #29
 8001754:	00c9      	lsls	r1, r1, #3
 8001756:	430a      	orrs	r2, r1
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0409      	lsls	r1, r1, #16
 800175c:	4311      	orrs	r1, r2
 800175e:	468b      	mov	fp, r1
 8001760:	49bf      	ldr	r1, [pc, #764]	@ (8001a60 <__aeabi_ddiv+0x380>)
 8001762:	00f2      	lsls	r2, r6, #3
 8001764:	468c      	mov	ip, r1
 8001766:	4651      	mov	r1, sl
 8001768:	4463      	add	r3, ip
 800176a:	1acb      	subs	r3, r1, r3
 800176c:	469a      	mov	sl, r3
 800176e:	2300      	movs	r3, #0
 8001770:	9e02      	ldr	r6, [sp, #8]
 8001772:	406e      	eors	r6, r5
 8001774:	2c0f      	cmp	r4, #15
 8001776:	d827      	bhi.n	80017c8 <__aeabi_ddiv+0xe8>
 8001778:	49ba      	ldr	r1, [pc, #744]	@ (8001a64 <__aeabi_ddiv+0x384>)
 800177a:	00a4      	lsls	r4, r4, #2
 800177c:	5909      	ldr	r1, [r1, r4]
 800177e:	468f      	mov	pc, r1
 8001780:	46cb      	mov	fp, r9
 8001782:	4642      	mov	r2, r8
 8001784:	9e02      	ldr	r6, [sp, #8]
 8001786:	9b03      	ldr	r3, [sp, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d016      	beq.n	80017ba <__aeabi_ddiv+0xda>
 800178c:	2b03      	cmp	r3, #3
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0xb2>
 8001790:	e2a6      	b.n	8001ce0 <__aeabi_ddiv+0x600>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d000      	beq.n	8001798 <__aeabi_ddiv+0xb8>
 8001796:	e0df      	b.n	8001958 <__aeabi_ddiv+0x278>
 8001798:	2200      	movs	r2, #0
 800179a:	2300      	movs	r3, #0
 800179c:	2400      	movs	r4, #0
 800179e:	4690      	mov	r8, r2
 80017a0:	051b      	lsls	r3, r3, #20
 80017a2:	4323      	orrs	r3, r4
 80017a4:	07f6      	lsls	r6, r6, #31
 80017a6:	4333      	orrs	r3, r6
 80017a8:	4640      	mov	r0, r8
 80017aa:	0019      	movs	r1, r3
 80017ac:	b007      	add	sp, #28
 80017ae:	bcf0      	pop	{r4, r5, r6, r7}
 80017b0:	46bb      	mov	fp, r7
 80017b2:	46b2      	mov	sl, r6
 80017b4:	46a9      	mov	r9, r5
 80017b6:	46a0      	mov	r8, r4
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ba:	2200      	movs	r2, #0
 80017bc:	2400      	movs	r4, #0
 80017be:	4690      	mov	r8, r2
 80017c0:	4ba6      	ldr	r3, [pc, #664]	@ (8001a5c <__aeabi_ddiv+0x37c>)
 80017c2:	e7ed      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 80017c4:	002e      	movs	r6, r5
 80017c6:	e7df      	b.n	8001788 <__aeabi_ddiv+0xa8>
 80017c8:	45cb      	cmp	fp, r9
 80017ca:	d200      	bcs.n	80017ce <__aeabi_ddiv+0xee>
 80017cc:	e1d4      	b.n	8001b78 <__aeabi_ddiv+0x498>
 80017ce:	d100      	bne.n	80017d2 <__aeabi_ddiv+0xf2>
 80017d0:	e1cf      	b.n	8001b72 <__aeabi_ddiv+0x492>
 80017d2:	2301      	movs	r3, #1
 80017d4:	425b      	negs	r3, r3
 80017d6:	469c      	mov	ip, r3
 80017d8:	4644      	mov	r4, r8
 80017da:	4648      	mov	r0, r9
 80017dc:	2700      	movs	r7, #0
 80017de:	44e2      	add	sl, ip
 80017e0:	465b      	mov	r3, fp
 80017e2:	0e15      	lsrs	r5, r2, #24
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	431d      	orrs	r5, r3
 80017e8:	0c19      	lsrs	r1, r3, #16
 80017ea:	042b      	lsls	r3, r5, #16
 80017ec:	0212      	lsls	r2, r2, #8
 80017ee:	9500      	str	r5, [sp, #0]
 80017f0:	0c1d      	lsrs	r5, r3, #16
 80017f2:	4691      	mov	r9, r2
 80017f4:	9102      	str	r1, [sp, #8]
 80017f6:	9503      	str	r5, [sp, #12]
 80017f8:	f7fe fd1a 	bl	8000230 <__aeabi_uidivmod>
 80017fc:	0002      	movs	r2, r0
 80017fe:	436a      	muls	r2, r5
 8001800:	040b      	lsls	r3, r1, #16
 8001802:	0c21      	lsrs	r1, r4, #16
 8001804:	4680      	mov	r8, r0
 8001806:	4319      	orrs	r1, r3
 8001808:	428a      	cmp	r2, r1
 800180a:	d909      	bls.n	8001820 <__aeabi_ddiv+0x140>
 800180c:	9d00      	ldr	r5, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	46ac      	mov	ip, r5
 8001812:	425b      	negs	r3, r3
 8001814:	4461      	add	r1, ip
 8001816:	469c      	mov	ip, r3
 8001818:	44e0      	add	r8, ip
 800181a:	428d      	cmp	r5, r1
 800181c:	d800      	bhi.n	8001820 <__aeabi_ddiv+0x140>
 800181e:	e1fb      	b.n	8001c18 <__aeabi_ddiv+0x538>
 8001820:	1a88      	subs	r0, r1, r2
 8001822:	9902      	ldr	r1, [sp, #8]
 8001824:	f7fe fd04 	bl	8000230 <__aeabi_uidivmod>
 8001828:	9a03      	ldr	r2, [sp, #12]
 800182a:	0424      	lsls	r4, r4, #16
 800182c:	4342      	muls	r2, r0
 800182e:	0409      	lsls	r1, r1, #16
 8001830:	0c24      	lsrs	r4, r4, #16
 8001832:	0003      	movs	r3, r0
 8001834:	430c      	orrs	r4, r1
 8001836:	42a2      	cmp	r2, r4
 8001838:	d906      	bls.n	8001848 <__aeabi_ddiv+0x168>
 800183a:	9900      	ldr	r1, [sp, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	468c      	mov	ip, r1
 8001840:	4464      	add	r4, ip
 8001842:	42a1      	cmp	r1, r4
 8001844:	d800      	bhi.n	8001848 <__aeabi_ddiv+0x168>
 8001846:	e1e1      	b.n	8001c0c <__aeabi_ddiv+0x52c>
 8001848:	1aa0      	subs	r0, r4, r2
 800184a:	4642      	mov	r2, r8
 800184c:	0412      	lsls	r2, r2, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	4693      	mov	fp, r2
 8001852:	464b      	mov	r3, r9
 8001854:	4659      	mov	r1, fp
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	001d      	movs	r5, r3
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	040b      	lsls	r3, r1, #16
 800185e:	4649      	mov	r1, r9
 8001860:	0409      	lsls	r1, r1, #16
 8001862:	0c09      	lsrs	r1, r1, #16
 8001864:	000c      	movs	r4, r1
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	435c      	muls	r4, r3
 800186a:	0c12      	lsrs	r2, r2, #16
 800186c:	436b      	muls	r3, r5
 800186e:	4688      	mov	r8, r1
 8001870:	4351      	muls	r1, r2
 8001872:	436a      	muls	r2, r5
 8001874:	0c25      	lsrs	r5, r4, #16
 8001876:	46ac      	mov	ip, r5
 8001878:	185b      	adds	r3, r3, r1
 800187a:	4463      	add	r3, ip
 800187c:	4299      	cmp	r1, r3
 800187e:	d903      	bls.n	8001888 <__aeabi_ddiv+0x1a8>
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	0249      	lsls	r1, r1, #9
 8001884:	468c      	mov	ip, r1
 8001886:	4462      	add	r2, ip
 8001888:	0c19      	lsrs	r1, r3, #16
 800188a:	0424      	lsls	r4, r4, #16
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	0c24      	lsrs	r4, r4, #16
 8001890:	188a      	adds	r2, r1, r2
 8001892:	191c      	adds	r4, r3, r4
 8001894:	4290      	cmp	r0, r2
 8001896:	d302      	bcc.n	800189e <__aeabi_ddiv+0x1be>
 8001898:	d116      	bne.n	80018c8 <__aeabi_ddiv+0x1e8>
 800189a:	42a7      	cmp	r7, r4
 800189c:	d214      	bcs.n	80018c8 <__aeabi_ddiv+0x1e8>
 800189e:	465b      	mov	r3, fp
 80018a0:	9d00      	ldr	r5, [sp, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	444f      	add	r7, r9
 80018a6:	9305      	str	r3, [sp, #20]
 80018a8:	454f      	cmp	r7, r9
 80018aa:	419b      	sbcs	r3, r3
 80018ac:	46ac      	mov	ip, r5
 80018ae:	425b      	negs	r3, r3
 80018b0:	4463      	add	r3, ip
 80018b2:	18c0      	adds	r0, r0, r3
 80018b4:	4285      	cmp	r5, r0
 80018b6:	d300      	bcc.n	80018ba <__aeabi_ddiv+0x1da>
 80018b8:	e1a1      	b.n	8001bfe <__aeabi_ddiv+0x51e>
 80018ba:	4282      	cmp	r2, r0
 80018bc:	d900      	bls.n	80018c0 <__aeabi_ddiv+0x1e0>
 80018be:	e1f6      	b.n	8001cae <__aeabi_ddiv+0x5ce>
 80018c0:	d100      	bne.n	80018c4 <__aeabi_ddiv+0x1e4>
 80018c2:	e1f1      	b.n	8001ca8 <__aeabi_ddiv+0x5c8>
 80018c4:	9b05      	ldr	r3, [sp, #20]
 80018c6:	469b      	mov	fp, r3
 80018c8:	1b3c      	subs	r4, r7, r4
 80018ca:	42a7      	cmp	r7, r4
 80018cc:	41bf      	sbcs	r7, r7
 80018ce:	9d00      	ldr	r5, [sp, #0]
 80018d0:	1a80      	subs	r0, r0, r2
 80018d2:	427f      	negs	r7, r7
 80018d4:	1bc0      	subs	r0, r0, r7
 80018d6:	4285      	cmp	r5, r0
 80018d8:	d100      	bne.n	80018dc <__aeabi_ddiv+0x1fc>
 80018da:	e1d0      	b.n	8001c7e <__aeabi_ddiv+0x59e>
 80018dc:	9902      	ldr	r1, [sp, #8]
 80018de:	f7fe fca7 	bl	8000230 <__aeabi_uidivmod>
 80018e2:	9a03      	ldr	r2, [sp, #12]
 80018e4:	040b      	lsls	r3, r1, #16
 80018e6:	4342      	muls	r2, r0
 80018e8:	0c21      	lsrs	r1, r4, #16
 80018ea:	0007      	movs	r7, r0
 80018ec:	4319      	orrs	r1, r3
 80018ee:	428a      	cmp	r2, r1
 80018f0:	d900      	bls.n	80018f4 <__aeabi_ddiv+0x214>
 80018f2:	e178      	b.n	8001be6 <__aeabi_ddiv+0x506>
 80018f4:	1a88      	subs	r0, r1, r2
 80018f6:	9902      	ldr	r1, [sp, #8]
 80018f8:	f7fe fc9a 	bl	8000230 <__aeabi_uidivmod>
 80018fc:	9a03      	ldr	r2, [sp, #12]
 80018fe:	0424      	lsls	r4, r4, #16
 8001900:	4342      	muls	r2, r0
 8001902:	0409      	lsls	r1, r1, #16
 8001904:	0c24      	lsrs	r4, r4, #16
 8001906:	0003      	movs	r3, r0
 8001908:	430c      	orrs	r4, r1
 800190a:	42a2      	cmp	r2, r4
 800190c:	d900      	bls.n	8001910 <__aeabi_ddiv+0x230>
 800190e:	e15d      	b.n	8001bcc <__aeabi_ddiv+0x4ec>
 8001910:	4641      	mov	r1, r8
 8001912:	1aa4      	subs	r4, r4, r2
 8001914:	043a      	lsls	r2, r7, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	9d04      	ldr	r5, [sp, #16]
 800191a:	0413      	lsls	r3, r2, #16
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	4359      	muls	r1, r3
 8001920:	4647      	mov	r7, r8
 8001922:	436b      	muls	r3, r5
 8001924:	469c      	mov	ip, r3
 8001926:	0c10      	lsrs	r0, r2, #16
 8001928:	4347      	muls	r7, r0
 800192a:	0c0b      	lsrs	r3, r1, #16
 800192c:	44bc      	add	ip, r7
 800192e:	4463      	add	r3, ip
 8001930:	4368      	muls	r0, r5
 8001932:	429f      	cmp	r7, r3
 8001934:	d903      	bls.n	800193e <__aeabi_ddiv+0x25e>
 8001936:	2580      	movs	r5, #128	@ 0x80
 8001938:	026d      	lsls	r5, r5, #9
 800193a:	46ac      	mov	ip, r5
 800193c:	4460      	add	r0, ip
 800193e:	0c1f      	lsrs	r7, r3, #16
 8001940:	0409      	lsls	r1, r1, #16
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	0c09      	lsrs	r1, r1, #16
 8001946:	183f      	adds	r7, r7, r0
 8001948:	185b      	adds	r3, r3, r1
 800194a:	42bc      	cmp	r4, r7
 800194c:	d200      	bcs.n	8001950 <__aeabi_ddiv+0x270>
 800194e:	e102      	b.n	8001b56 <__aeabi_ddiv+0x476>
 8001950:	d100      	bne.n	8001954 <__aeabi_ddiv+0x274>
 8001952:	e0fd      	b.n	8001b50 <__aeabi_ddiv+0x470>
 8001954:	2301      	movs	r3, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <__aeabi_ddiv+0x388>)
 800195a:	4453      	add	r3, sl
 800195c:	2b00      	cmp	r3, #0
 800195e:	dc00      	bgt.n	8001962 <__aeabi_ddiv+0x282>
 8001960:	e0ae      	b.n	8001ac0 <__aeabi_ddiv+0x3e0>
 8001962:	0751      	lsls	r1, r2, #29
 8001964:	d000      	beq.n	8001968 <__aeabi_ddiv+0x288>
 8001966:	e198      	b.n	8001c9a <__aeabi_ddiv+0x5ba>
 8001968:	4659      	mov	r1, fp
 800196a:	01c9      	lsls	r1, r1, #7
 800196c:	d506      	bpl.n	800197c <__aeabi_ddiv+0x29c>
 800196e:	4659      	mov	r1, fp
 8001970:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <__aeabi_ddiv+0x38c>)
 8001972:	4019      	ands	r1, r3
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	468b      	mov	fp, r1
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4453      	add	r3, sl
 800197c:	493c      	ldr	r1, [pc, #240]	@ (8001a70 <__aeabi_ddiv+0x390>)
 800197e:	428b      	cmp	r3, r1
 8001980:	dd00      	ble.n	8001984 <__aeabi_ddiv+0x2a4>
 8001982:	e71a      	b.n	80017ba <__aeabi_ddiv+0xda>
 8001984:	4659      	mov	r1, fp
 8001986:	08d2      	lsrs	r2, r2, #3
 8001988:	0749      	lsls	r1, r1, #29
 800198a:	4311      	orrs	r1, r2
 800198c:	465a      	mov	r2, fp
 800198e:	055b      	lsls	r3, r3, #21
 8001990:	0254      	lsls	r4, r2, #9
 8001992:	4688      	mov	r8, r1
 8001994:	0b24      	lsrs	r4, r4, #12
 8001996:	0d5b      	lsrs	r3, r3, #21
 8001998:	e702      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 800199a:	465a      	mov	r2, fp
 800199c:	9b00      	ldr	r3, [sp, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x2c4>
 80019a2:	e07e      	b.n	8001aa2 <__aeabi_ddiv+0x3c2>
 80019a4:	465b      	mov	r3, fp
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_ddiv+0x2cc>
 80019aa:	e100      	b.n	8001bae <__aeabi_ddiv+0x4ce>
 80019ac:	4658      	mov	r0, fp
 80019ae:	f001 fa7f 	bl	8002eb0 <__clzsi2>
 80019b2:	0002      	movs	r2, r0
 80019b4:	0003      	movs	r3, r0
 80019b6:	3a0b      	subs	r2, #11
 80019b8:	271d      	movs	r7, #29
 80019ba:	9e00      	ldr	r6, [sp, #0]
 80019bc:	1aba      	subs	r2, r7, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4658      	mov	r0, fp
 80019c2:	40d6      	lsrs	r6, r2
 80019c4:	3908      	subs	r1, #8
 80019c6:	4088      	lsls	r0, r1
 80019c8:	0032      	movs	r2, r6
 80019ca:	4302      	orrs	r2, r0
 80019cc:	4693      	mov	fp, r2
 80019ce:	9a00      	ldr	r2, [sp, #0]
 80019d0:	408a      	lsls	r2, r1
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_ddiv+0x394>)
 80019d4:	4453      	add	r3, sl
 80019d6:	468a      	mov	sl, r1
 80019d8:	449a      	add	sl, r3
 80019da:	2300      	movs	r3, #0
 80019dc:	e6c8      	b.n	8001770 <__aeabi_ddiv+0x90>
 80019de:	465b      	mov	r3, fp
 80019e0:	4303      	orrs	r3, r0
 80019e2:	4699      	mov	r9, r3
 80019e4:	d056      	beq.n	8001a94 <__aeabi_ddiv+0x3b4>
 80019e6:	465b      	mov	r3, fp
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d100      	bne.n	80019ee <__aeabi_ddiv+0x30e>
 80019ec:	e0cd      	b.n	8001b8a <__aeabi_ddiv+0x4aa>
 80019ee:	4658      	mov	r0, fp
 80019f0:	f001 fa5e 	bl	8002eb0 <__clzsi2>
 80019f4:	230b      	movs	r3, #11
 80019f6:	425b      	negs	r3, r3
 80019f8:	469c      	mov	ip, r3
 80019fa:	0002      	movs	r2, r0
 80019fc:	4484      	add	ip, r0
 80019fe:	4666      	mov	r6, ip
 8001a00:	231d      	movs	r3, #29
 8001a02:	1b9b      	subs	r3, r3, r6
 8001a04:	0026      	movs	r6, r4
 8001a06:	0011      	movs	r1, r2
 8001a08:	4658      	mov	r0, fp
 8001a0a:	40de      	lsrs	r6, r3
 8001a0c:	3908      	subs	r1, #8
 8001a0e:	4088      	lsls	r0, r1
 8001a10:	0033      	movs	r3, r6
 8001a12:	4303      	orrs	r3, r0
 8001a14:	4699      	mov	r9, r3
 8001a16:	0023      	movs	r3, r4
 8001a18:	408b      	lsls	r3, r1
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <__aeabi_ddiv+0x398>)
 8001a1e:	2400      	movs	r4, #0
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	469a      	mov	sl, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	9303      	str	r3, [sp, #12]
 8001a28:	e682      	b.n	8001730 <__aeabi_ddiv+0x50>
 8001a2a:	465a      	mov	r2, fp
 8001a2c:	4302      	orrs	r2, r0
 8001a2e:	4691      	mov	r9, r2
 8001a30:	d12a      	bne.n	8001a88 <__aeabi_ddiv+0x3a8>
 8001a32:	2200      	movs	r2, #0
 8001a34:	469a      	mov	sl, r3
 8001a36:	2302      	movs	r3, #2
 8001a38:	4690      	mov	r8, r2
 8001a3a:	2408      	movs	r4, #8
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	e677      	b.n	8001730 <__aeabi_ddiv+0x50>
 8001a40:	465a      	mov	r2, fp
 8001a42:	9b00      	ldr	r3, [sp, #0]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <__aeabi_ddiv+0x39c>)
 8001a48:	469c      	mov	ip, r3
 8001a4a:	44e2      	add	sl, ip
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d117      	bne.n	8001a80 <__aeabi_ddiv+0x3a0>
 8001a50:	2302      	movs	r3, #2
 8001a52:	431c      	orrs	r4, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	469b      	mov	fp, r3
 8001a58:	3302      	adds	r3, #2
 8001a5a:	e689      	b.n	8001770 <__aeabi_ddiv+0x90>
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	fffffc01 	.word	0xfffffc01
 8001a64:	08006564 	.word	0x08006564
 8001a68:	000003ff 	.word	0x000003ff
 8001a6c:	feffffff 	.word	0xfeffffff
 8001a70:	000007fe 	.word	0x000007fe
 8001a74:	000003f3 	.word	0x000003f3
 8001a78:	fffffc0d 	.word	0xfffffc0d
 8001a7c:	fffff801 	.word	0xfffff801
 8001a80:	2303      	movs	r3, #3
 8001a82:	0032      	movs	r2, r6
 8001a84:	431c      	orrs	r4, r3
 8001a86:	e673      	b.n	8001770 <__aeabi_ddiv+0x90>
 8001a88:	469a      	mov	sl, r3
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	46d9      	mov	r9, fp
 8001a8e:	240c      	movs	r4, #12
 8001a90:	9303      	str	r3, [sp, #12]
 8001a92:	e64d      	b.n	8001730 <__aeabi_ddiv+0x50>
 8001a94:	2300      	movs	r3, #0
 8001a96:	4698      	mov	r8, r3
 8001a98:	469a      	mov	sl, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	2404      	movs	r4, #4
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	e646      	b.n	8001730 <__aeabi_ddiv+0x50>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	431c      	orrs	r4, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	e660      	b.n	8001770 <__aeabi_ddiv+0x90>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2480      	movs	r4, #128	@ 0x80
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	4b92      	ldr	r3, [pc, #584]	@ (8001d00 <__aeabi_ddiv+0x620>)
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	e671      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001abc:	2201      	movs	r2, #1
 8001abe:	4252      	negs	r2, r2
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	1ac9      	subs	r1, r1, r3
 8001ac4:	2938      	cmp	r1, #56	@ 0x38
 8001ac6:	dd00      	ble.n	8001aca <__aeabi_ddiv+0x3ea>
 8001ac8:	e666      	b.n	8001798 <__aeabi_ddiv+0xb8>
 8001aca:	291f      	cmp	r1, #31
 8001acc:	dc00      	bgt.n	8001ad0 <__aeabi_ddiv+0x3f0>
 8001ace:	e0ab      	b.n	8001c28 <__aeabi_ddiv+0x548>
 8001ad0:	201f      	movs	r0, #31
 8001ad2:	4240      	negs	r0, r0
 8001ad4:	1ac3      	subs	r3, r0, r3
 8001ad6:	4658      	mov	r0, fp
 8001ad8:	40d8      	lsrs	r0, r3
 8001ada:	0003      	movs	r3, r0
 8001adc:	2920      	cmp	r1, #32
 8001ade:	d004      	beq.n	8001aea <__aeabi_ddiv+0x40a>
 8001ae0:	4658      	mov	r0, fp
 8001ae2:	4988      	ldr	r1, [pc, #544]	@ (8001d04 <__aeabi_ddiv+0x624>)
 8001ae4:	4451      	add	r1, sl
 8001ae6:	4088      	lsls	r0, r1
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	1e51      	subs	r1, r2, #1
 8001aec:	418a      	sbcs	r2, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	2307      	movs	r3, #7
 8001af2:	0019      	movs	r1, r3
 8001af4:	2400      	movs	r4, #0
 8001af6:	4011      	ands	r1, r2
 8001af8:	4213      	tst	r3, r2
 8001afa:	d00c      	beq.n	8001b16 <__aeabi_ddiv+0x436>
 8001afc:	230f      	movs	r3, #15
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x426>
 8001b04:	e0f9      	b.n	8001cfa <__aeabi_ddiv+0x61a>
 8001b06:	1d11      	adds	r1, r2, #4
 8001b08:	4291      	cmp	r1, r2
 8001b0a:	419b      	sbcs	r3, r3
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	425b      	negs	r3, r3
 8001b10:	0759      	lsls	r1, r3, #29
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	0b1c      	lsrs	r4, r3, #12
 8001b16:	08d2      	lsrs	r2, r2, #3
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e63f      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001b20:	2480      	movs	r4, #128	@ 0x80
 8001b22:	464b      	mov	r3, r9
 8001b24:	0324      	lsls	r4, r4, #12
 8001b26:	4223      	tst	r3, r4
 8001b28:	d009      	beq.n	8001b3e <__aeabi_ddiv+0x45e>
 8001b2a:	465b      	mov	r3, fp
 8001b2c:	4223      	tst	r3, r4
 8001b2e:	d106      	bne.n	8001b3e <__aeabi_ddiv+0x45e>
 8001b30:	431c      	orrs	r4, r3
 8001b32:	0324      	lsls	r4, r4, #12
 8001b34:	002e      	movs	r6, r5
 8001b36:	4690      	mov	r8, r2
 8001b38:	4b71      	ldr	r3, [pc, #452]	@ (8001d00 <__aeabi_ddiv+0x620>)
 8001b3a:	0b24      	lsrs	r4, r4, #12
 8001b3c:	e630      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001b3e:	2480      	movs	r4, #128	@ 0x80
 8001b40:	464b      	mov	r3, r9
 8001b42:	0324      	lsls	r4, r4, #12
 8001b44:	431c      	orrs	r4, r3
 8001b46:	0324      	lsls	r4, r4, #12
 8001b48:	9e02      	ldr	r6, [sp, #8]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d00 <__aeabi_ddiv+0x620>)
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	e627      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x476>
 8001b54:	e700      	b.n	8001958 <__aeabi_ddiv+0x278>
 8001b56:	9800      	ldr	r0, [sp, #0]
 8001b58:	1e51      	subs	r1, r2, #1
 8001b5a:	4684      	mov	ip, r0
 8001b5c:	4464      	add	r4, ip
 8001b5e:	4284      	cmp	r4, r0
 8001b60:	d200      	bcs.n	8001b64 <__aeabi_ddiv+0x484>
 8001b62:	e084      	b.n	8001c6e <__aeabi_ddiv+0x58e>
 8001b64:	42bc      	cmp	r4, r7
 8001b66:	d200      	bcs.n	8001b6a <__aeabi_ddiv+0x48a>
 8001b68:	e0ae      	b.n	8001cc8 <__aeabi_ddiv+0x5e8>
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0x48e>
 8001b6c:	e0c1      	b.n	8001cf2 <__aeabi_ddiv+0x612>
 8001b6e:	000a      	movs	r2, r1
 8001b70:	e6f0      	b.n	8001954 <__aeabi_ddiv+0x274>
 8001b72:	4542      	cmp	r2, r8
 8001b74:	d900      	bls.n	8001b78 <__aeabi_ddiv+0x498>
 8001b76:	e62c      	b.n	80017d2 <__aeabi_ddiv+0xf2>
 8001b78:	464b      	mov	r3, r9
 8001b7a:	07dc      	lsls	r4, r3, #31
 8001b7c:	0858      	lsrs	r0, r3, #1
 8001b7e:	4643      	mov	r3, r8
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	431c      	orrs	r4, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	07df      	lsls	r7, r3, #31
 8001b88:	e62a      	b.n	80017e0 <__aeabi_ddiv+0x100>
 8001b8a:	f001 f991 	bl	8002eb0 <__clzsi2>
 8001b8e:	2315      	movs	r3, #21
 8001b90:	469c      	mov	ip, r3
 8001b92:	4484      	add	ip, r0
 8001b94:	0002      	movs	r2, r0
 8001b96:	4663      	mov	r3, ip
 8001b98:	3220      	adds	r2, #32
 8001b9a:	2b1c      	cmp	r3, #28
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_ddiv+0x4c0>
 8001b9e:	e72e      	b.n	80019fe <__aeabi_ddiv+0x31e>
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	3808      	subs	r0, #8
 8001ba4:	4083      	lsls	r3, r0
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4698      	mov	r8, r3
 8001bac:	e736      	b.n	8001a1c <__aeabi_ddiv+0x33c>
 8001bae:	f001 f97f 	bl	8002eb0 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	3215      	adds	r2, #21
 8001bb8:	3320      	adds	r3, #32
 8001bba:	2a1c      	cmp	r2, #28
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_ddiv+0x4e0>
 8001bbe:	e6fb      	b.n	80019b8 <__aeabi_ddiv+0x2d8>
 8001bc0:	9900      	ldr	r1, [sp, #0]
 8001bc2:	3808      	subs	r0, #8
 8001bc4:	4081      	lsls	r1, r0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	468b      	mov	fp, r1
 8001bca:	e702      	b.n	80019d2 <__aeabi_ddiv+0x2f2>
 8001bcc:	9900      	ldr	r1, [sp, #0]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4464      	add	r4, ip
 8001bd4:	42a1      	cmp	r1, r4
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4fa>
 8001bd8:	e69a      	b.n	8001910 <__aeabi_ddiv+0x230>
 8001bda:	42a2      	cmp	r2, r4
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x500>
 8001bde:	e697      	b.n	8001910 <__aeabi_ddiv+0x230>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	4464      	add	r4, ip
 8001be4:	e694      	b.n	8001910 <__aeabi_ddiv+0x230>
 8001be6:	46ac      	mov	ip, r5
 8001be8:	4461      	add	r1, ip
 8001bea:	3f01      	subs	r7, #1
 8001bec:	428d      	cmp	r5, r1
 8001bee:	d900      	bls.n	8001bf2 <__aeabi_ddiv+0x512>
 8001bf0:	e680      	b.n	80018f4 <__aeabi_ddiv+0x214>
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d800      	bhi.n	8001bf8 <__aeabi_ddiv+0x518>
 8001bf6:	e67d      	b.n	80018f4 <__aeabi_ddiv+0x214>
 8001bf8:	1e87      	subs	r7, r0, #2
 8001bfa:	4461      	add	r1, ip
 8001bfc:	e67a      	b.n	80018f4 <__aeabi_ddiv+0x214>
 8001bfe:	4285      	cmp	r5, r0
 8001c00:	d000      	beq.n	8001c04 <__aeabi_ddiv+0x524>
 8001c02:	e65f      	b.n	80018c4 <__aeabi_ddiv+0x1e4>
 8001c04:	45b9      	cmp	r9, r7
 8001c06:	d900      	bls.n	8001c0a <__aeabi_ddiv+0x52a>
 8001c08:	e65c      	b.n	80018c4 <__aeabi_ddiv+0x1e4>
 8001c0a:	e656      	b.n	80018ba <__aeabi_ddiv+0x1da>
 8001c0c:	42a2      	cmp	r2, r4
 8001c0e:	d800      	bhi.n	8001c12 <__aeabi_ddiv+0x532>
 8001c10:	e61a      	b.n	8001848 <__aeabi_ddiv+0x168>
 8001c12:	1e83      	subs	r3, r0, #2
 8001c14:	4464      	add	r4, ip
 8001c16:	e617      	b.n	8001848 <__aeabi_ddiv+0x168>
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d800      	bhi.n	8001c1e <__aeabi_ddiv+0x53e>
 8001c1c:	e600      	b.n	8001820 <__aeabi_ddiv+0x140>
 8001c1e:	46ac      	mov	ip, r5
 8001c20:	1e83      	subs	r3, r0, #2
 8001c22:	4698      	mov	r8, r3
 8001c24:	4461      	add	r1, ip
 8001c26:	e5fb      	b.n	8001820 <__aeabi_ddiv+0x140>
 8001c28:	4837      	ldr	r0, [pc, #220]	@ (8001d08 <__aeabi_ddiv+0x628>)
 8001c2a:	0014      	movs	r4, r2
 8001c2c:	4450      	add	r0, sl
 8001c2e:	4082      	lsls	r2, r0
 8001c30:	465b      	mov	r3, fp
 8001c32:	0017      	movs	r7, r2
 8001c34:	4083      	lsls	r3, r0
 8001c36:	40cc      	lsrs	r4, r1
 8001c38:	1e7a      	subs	r2, r7, #1
 8001c3a:	4197      	sbcs	r7, r2
 8001c3c:	4323      	orrs	r3, r4
 8001c3e:	433b      	orrs	r3, r7
 8001c40:	001a      	movs	r2, r3
 8001c42:	465b      	mov	r3, fp
 8001c44:	40cb      	lsrs	r3, r1
 8001c46:	0751      	lsls	r1, r2, #29
 8001c48:	d009      	beq.n	8001c5e <__aeabi_ddiv+0x57e>
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	4011      	ands	r1, r2
 8001c4e:	2904      	cmp	r1, #4
 8001c50:	d005      	beq.n	8001c5e <__aeabi_ddiv+0x57e>
 8001c52:	1d11      	adds	r1, r2, #4
 8001c54:	4291      	cmp	r1, r2
 8001c56:	4192      	sbcs	r2, r2
 8001c58:	4252      	negs	r2, r2
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	0219      	lsls	r1, r3, #8
 8001c60:	d400      	bmi.n	8001c64 <__aeabi_ddiv+0x584>
 8001c62:	e755      	b.n	8001b10 <__aeabi_ddiv+0x430>
 8001c64:	2200      	movs	r2, #0
 8001c66:	2301      	movs	r3, #1
 8001c68:	2400      	movs	r4, #0
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	e598      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001c6e:	000a      	movs	r2, r1
 8001c70:	42bc      	cmp	r4, r7
 8001c72:	d000      	beq.n	8001c76 <__aeabi_ddiv+0x596>
 8001c74:	e66e      	b.n	8001954 <__aeabi_ddiv+0x274>
 8001c76:	454b      	cmp	r3, r9
 8001c78:	d000      	beq.n	8001c7c <__aeabi_ddiv+0x59c>
 8001c7a:	e66b      	b.n	8001954 <__aeabi_ddiv+0x274>
 8001c7c:	e66c      	b.n	8001958 <__aeabi_ddiv+0x278>
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <__aeabi_ddiv+0x62c>)
 8001c80:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <__aeabi_ddiv+0x630>)
 8001c82:	4453      	add	r3, sl
 8001c84:	4592      	cmp	sl, r2
 8001c86:	da00      	bge.n	8001c8a <__aeabi_ddiv+0x5aa>
 8001c88:	e718      	b.n	8001abc <__aeabi_ddiv+0x3dc>
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4249      	negs	r1, r1
 8001c8e:	1d0a      	adds	r2, r1, #4
 8001c90:	428a      	cmp	r2, r1
 8001c92:	4189      	sbcs	r1, r1
 8001c94:	4249      	negs	r1, r1
 8001c96:	448b      	add	fp, r1
 8001c98:	e666      	b.n	8001968 <__aeabi_ddiv+0x288>
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	4011      	ands	r1, r2
 8001c9e:	2904      	cmp	r1, #4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x5c4>
 8001ca2:	e661      	b.n	8001968 <__aeabi_ddiv+0x288>
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	e7f2      	b.n	8001c8e <__aeabi_ddiv+0x5ae>
 8001ca8:	42bc      	cmp	r4, r7
 8001caa:	d800      	bhi.n	8001cae <__aeabi_ddiv+0x5ce>
 8001cac:	e60a      	b.n	80018c4 <__aeabi_ddiv+0x1e4>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	469c      	mov	ip, r3
 8001cb4:	9900      	ldr	r1, [sp, #0]
 8001cb6:	444f      	add	r7, r9
 8001cb8:	454f      	cmp	r7, r9
 8001cba:	419b      	sbcs	r3, r3
 8001cbc:	44e3      	add	fp, ip
 8001cbe:	468c      	mov	ip, r1
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	4463      	add	r3, ip
 8001cc4:	18c0      	adds	r0, r0, r3
 8001cc6:	e5ff      	b.n	80018c8 <__aeabi_ddiv+0x1e8>
 8001cc8:	4649      	mov	r1, r9
 8001cca:	9d00      	ldr	r5, [sp, #0]
 8001ccc:	0048      	lsls	r0, r1, #1
 8001cce:	4548      	cmp	r0, r9
 8001cd0:	4189      	sbcs	r1, r1
 8001cd2:	46ac      	mov	ip, r5
 8001cd4:	4249      	negs	r1, r1
 8001cd6:	4461      	add	r1, ip
 8001cd8:	4681      	mov	r9, r0
 8001cda:	3a02      	subs	r2, #2
 8001cdc:	1864      	adds	r4, r4, r1
 8001cde:	e7c7      	b.n	8001c70 <__aeabi_ddiv+0x590>
 8001ce0:	2480      	movs	r4, #128	@ 0x80
 8001ce2:	465b      	mov	r3, fp
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	431c      	orrs	r4, r3
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	4690      	mov	r8, r2
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__aeabi_ddiv+0x620>)
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	e556      	b.n	80017a0 <__aeabi_ddiv+0xc0>
 8001cf2:	4599      	cmp	r9, r3
 8001cf4:	d3e8      	bcc.n	8001cc8 <__aeabi_ddiv+0x5e8>
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	e7bd      	b.n	8001c76 <__aeabi_ddiv+0x596>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e708      	b.n	8001b10 <__aeabi_ddiv+0x430>
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	000007ff 	.word	0x000007ff
 8001d04:	0000043e 	.word	0x0000043e
 8001d08:	0000041e 	.word	0x0000041e
 8001d0c:	000003ff 	.word	0x000003ff
 8001d10:	fffffc02 	.word	0xfffffc02

08001d14 <__eqdf2>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	4657      	mov	r7, sl
 8001d18:	46de      	mov	lr, fp
 8001d1a:	464e      	mov	r6, r9
 8001d1c:	4645      	mov	r5, r8
 8001d1e:	b5e0      	push	{r5, r6, r7, lr}
 8001d20:	000d      	movs	r5, r1
 8001d22:	0004      	movs	r4, r0
 8001d24:	0fe8      	lsrs	r0, r5, #31
 8001d26:	4683      	mov	fp, r0
 8001d28:	0309      	lsls	r1, r1, #12
 8001d2a:	0fd8      	lsrs	r0, r3, #31
 8001d2c:	0b09      	lsrs	r1, r1, #12
 8001d2e:	4682      	mov	sl, r0
 8001d30:	4819      	ldr	r0, [pc, #100]	@ (8001d98 <__eqdf2+0x84>)
 8001d32:	468c      	mov	ip, r1
 8001d34:	031f      	lsls	r7, r3, #12
 8001d36:	0069      	lsls	r1, r5, #1
 8001d38:	005e      	lsls	r6, r3, #1
 8001d3a:	0d49      	lsrs	r1, r1, #21
 8001d3c:	0b3f      	lsrs	r7, r7, #12
 8001d3e:	0d76      	lsrs	r6, r6, #21
 8001d40:	4281      	cmp	r1, r0
 8001d42:	d018      	beq.n	8001d76 <__eqdf2+0x62>
 8001d44:	4286      	cmp	r6, r0
 8001d46:	d00f      	beq.n	8001d68 <__eqdf2+0x54>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	42b1      	cmp	r1, r6
 8001d4c:	d10d      	bne.n	8001d6a <__eqdf2+0x56>
 8001d4e:	45bc      	cmp	ip, r7
 8001d50:	d10b      	bne.n	8001d6a <__eqdf2+0x56>
 8001d52:	4294      	cmp	r4, r2
 8001d54:	d109      	bne.n	8001d6a <__eqdf2+0x56>
 8001d56:	45d3      	cmp	fp, sl
 8001d58:	d01c      	beq.n	8001d94 <__eqdf2+0x80>
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	d105      	bne.n	8001d6a <__eqdf2+0x56>
 8001d5e:	4660      	mov	r0, ip
 8001d60:	4320      	orrs	r0, r4
 8001d62:	1e43      	subs	r3, r0, #1
 8001d64:	4198      	sbcs	r0, r3
 8001d66:	e000      	b.n	8001d6a <__eqdf2+0x56>
 8001d68:	2001      	movs	r0, #1
 8001d6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d6c:	46bb      	mov	fp, r7
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	46a9      	mov	r9, r5
 8001d72:	46a0      	mov	r8, r4
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	2001      	movs	r0, #1
 8001d78:	428e      	cmp	r6, r1
 8001d7a:	d1f6      	bne.n	8001d6a <__eqdf2+0x56>
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	4339      	orrs	r1, r7
 8001d80:	000f      	movs	r7, r1
 8001d82:	4317      	orrs	r7, r2
 8001d84:	4327      	orrs	r7, r4
 8001d86:	d1f0      	bne.n	8001d6a <__eqdf2+0x56>
 8001d88:	465b      	mov	r3, fp
 8001d8a:	4652      	mov	r2, sl
 8001d8c:	1a98      	subs	r0, r3, r2
 8001d8e:	1e43      	subs	r3, r0, #1
 8001d90:	4198      	sbcs	r0, r3
 8001d92:	e7ea      	b.n	8001d6a <__eqdf2+0x56>
 8001d94:	2000      	movs	r0, #0
 8001d96:	e7e8      	b.n	8001d6a <__eqdf2+0x56>
 8001d98:	000007ff 	.word	0x000007ff

08001d9c <__gedf2>:
 8001d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9e:	4657      	mov	r7, sl
 8001da0:	464e      	mov	r6, r9
 8001da2:	4645      	mov	r5, r8
 8001da4:	46de      	mov	lr, fp
 8001da6:	b5e0      	push	{r5, r6, r7, lr}
 8001da8:	000d      	movs	r5, r1
 8001daa:	030f      	lsls	r7, r1, #12
 8001dac:	0b39      	lsrs	r1, r7, #12
 8001dae:	b083      	sub	sp, #12
 8001db0:	0004      	movs	r4, r0
 8001db2:	4680      	mov	r8, r0
 8001db4:	9101      	str	r1, [sp, #4]
 8001db6:	0058      	lsls	r0, r3, #1
 8001db8:	0fe9      	lsrs	r1, r5, #31
 8001dba:	4f31      	ldr	r7, [pc, #196]	@ (8001e80 <__gedf2+0xe4>)
 8001dbc:	0d40      	lsrs	r0, r0, #21
 8001dbe:	468c      	mov	ip, r1
 8001dc0:	006e      	lsls	r6, r5, #1
 8001dc2:	0319      	lsls	r1, r3, #12
 8001dc4:	4682      	mov	sl, r0
 8001dc6:	4691      	mov	r9, r2
 8001dc8:	0d76      	lsrs	r6, r6, #21
 8001dca:	0b09      	lsrs	r1, r1, #12
 8001dcc:	0fd8      	lsrs	r0, r3, #31
 8001dce:	42be      	cmp	r6, r7
 8001dd0:	d01f      	beq.n	8001e12 <__gedf2+0x76>
 8001dd2:	45ba      	cmp	sl, r7
 8001dd4:	d00f      	beq.n	8001df6 <__gedf2+0x5a>
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	d12f      	bne.n	8001e3a <__gedf2+0x9e>
 8001dda:	4655      	mov	r5, sl
 8001ddc:	9e01      	ldr	r6, [sp, #4]
 8001dde:	4334      	orrs	r4, r6
 8001de0:	2d00      	cmp	r5, #0
 8001de2:	d127      	bne.n	8001e34 <__gedf2+0x98>
 8001de4:	430a      	orrs	r2, r1
 8001de6:	d03a      	beq.n	8001e5e <__gedf2+0xc2>
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d145      	bne.n	8001e78 <__gedf2+0xdc>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d11a      	bne.n	8001e26 <__gedf2+0x8a>
 8001df0:	2001      	movs	r0, #1
 8001df2:	4240      	negs	r0, r0
 8001df4:	e017      	b.n	8001e26 <__gedf2+0x8a>
 8001df6:	4311      	orrs	r1, r2
 8001df8:	d13b      	bne.n	8001e72 <__gedf2+0xd6>
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d102      	bne.n	8001e04 <__gedf2+0x68>
 8001dfe:	9f01      	ldr	r7, [sp, #4]
 8001e00:	4327      	orrs	r7, r4
 8001e02:	d0f3      	beq.n	8001dec <__gedf2+0x50>
 8001e04:	4584      	cmp	ip, r0
 8001e06:	d109      	bne.n	8001e1c <__gedf2+0x80>
 8001e08:	4663      	mov	r3, ip
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <__gedf2+0x54>
 8001e0e:	4660      	mov	r0, ip
 8001e10:	e009      	b.n	8001e26 <__gedf2+0x8a>
 8001e12:	9f01      	ldr	r7, [sp, #4]
 8001e14:	4327      	orrs	r7, r4
 8001e16:	d12c      	bne.n	8001e72 <__gedf2+0xd6>
 8001e18:	45b2      	cmp	sl, r6
 8001e1a:	d024      	beq.n	8001e66 <__gedf2+0xca>
 8001e1c:	4663      	mov	r3, ip
 8001e1e:	2002      	movs	r0, #2
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4018      	ands	r0, r3
 8001e24:	3801      	subs	r0, #1
 8001e26:	b003      	add	sp, #12
 8001e28:	bcf0      	pop	{r4, r5, r6, r7}
 8001e2a:	46bb      	mov	fp, r7
 8001e2c:	46b2      	mov	sl, r6
 8001e2e:	46a9      	mov	r9, r5
 8001e30:	46a0      	mov	r8, r4
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d0d9      	beq.n	8001dec <__gedf2+0x50>
 8001e38:	e7e4      	b.n	8001e04 <__gedf2+0x68>
 8001e3a:	4654      	mov	r4, sl
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d0ed      	beq.n	8001e1c <__gedf2+0x80>
 8001e40:	4584      	cmp	ip, r0
 8001e42:	d1eb      	bne.n	8001e1c <__gedf2+0x80>
 8001e44:	4556      	cmp	r6, sl
 8001e46:	dce9      	bgt.n	8001e1c <__gedf2+0x80>
 8001e48:	dbde      	blt.n	8001e08 <__gedf2+0x6c>
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d8e5      	bhi.n	8001e1c <__gedf2+0x80>
 8001e50:	d1da      	bne.n	8001e08 <__gedf2+0x6c>
 8001e52:	45c8      	cmp	r8, r9
 8001e54:	d8e2      	bhi.n	8001e1c <__gedf2+0x80>
 8001e56:	2000      	movs	r0, #0
 8001e58:	45c8      	cmp	r8, r9
 8001e5a:	d2e4      	bcs.n	8001e26 <__gedf2+0x8a>
 8001e5c:	e7d4      	b.n	8001e08 <__gedf2+0x6c>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d0e0      	beq.n	8001e26 <__gedf2+0x8a>
 8001e64:	e7da      	b.n	8001e1c <__gedf2+0x80>
 8001e66:	4311      	orrs	r1, r2
 8001e68:	d103      	bne.n	8001e72 <__gedf2+0xd6>
 8001e6a:	4584      	cmp	ip, r0
 8001e6c:	d1d6      	bne.n	8001e1c <__gedf2+0x80>
 8001e6e:	2000      	movs	r0, #0
 8001e70:	e7d9      	b.n	8001e26 <__gedf2+0x8a>
 8001e72:	2002      	movs	r0, #2
 8001e74:	4240      	negs	r0, r0
 8001e76:	e7d6      	b.n	8001e26 <__gedf2+0x8a>
 8001e78:	4584      	cmp	ip, r0
 8001e7a:	d0e6      	beq.n	8001e4a <__gedf2+0xae>
 8001e7c:	e7ce      	b.n	8001e1c <__gedf2+0x80>
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	000007ff 	.word	0x000007ff

08001e84 <__ledf2>:
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	4657      	mov	r7, sl
 8001e88:	464e      	mov	r6, r9
 8001e8a:	4645      	mov	r5, r8
 8001e8c:	46de      	mov	lr, fp
 8001e8e:	b5e0      	push	{r5, r6, r7, lr}
 8001e90:	000d      	movs	r5, r1
 8001e92:	030f      	lsls	r7, r1, #12
 8001e94:	0004      	movs	r4, r0
 8001e96:	4680      	mov	r8, r0
 8001e98:	0fe8      	lsrs	r0, r5, #31
 8001e9a:	0b39      	lsrs	r1, r7, #12
 8001e9c:	4684      	mov	ip, r0
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	0058      	lsls	r0, r3, #1
 8001ea2:	4f30      	ldr	r7, [pc, #192]	@ (8001f64 <__ledf2+0xe0>)
 8001ea4:	0d40      	lsrs	r0, r0, #21
 8001ea6:	9101      	str	r1, [sp, #4]
 8001ea8:	031e      	lsls	r6, r3, #12
 8001eaa:	0069      	lsls	r1, r5, #1
 8001eac:	4682      	mov	sl, r0
 8001eae:	4691      	mov	r9, r2
 8001eb0:	0d49      	lsrs	r1, r1, #21
 8001eb2:	0b36      	lsrs	r6, r6, #12
 8001eb4:	0fd8      	lsrs	r0, r3, #31
 8001eb6:	42b9      	cmp	r1, r7
 8001eb8:	d020      	beq.n	8001efc <__ledf2+0x78>
 8001eba:	45ba      	cmp	sl, r7
 8001ebc:	d00f      	beq.n	8001ede <__ledf2+0x5a>
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d12b      	bne.n	8001f1a <__ledf2+0x96>
 8001ec2:	9901      	ldr	r1, [sp, #4]
 8001ec4:	430c      	orrs	r4, r1
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d137      	bne.n	8001f3c <__ledf2+0xb8>
 8001ecc:	4332      	orrs	r2, r6
 8001ece:	d038      	beq.n	8001f42 <__ledf2+0xbe>
 8001ed0:	2c00      	cmp	r4, #0
 8001ed2:	d144      	bne.n	8001f5e <__ledf2+0xda>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d119      	bne.n	8001f0c <__ledf2+0x88>
 8001ed8:	2001      	movs	r0, #1
 8001eda:	4240      	negs	r0, r0
 8001edc:	e016      	b.n	8001f0c <__ledf2+0x88>
 8001ede:	4316      	orrs	r6, r2
 8001ee0:	d113      	bne.n	8001f0a <__ledf2+0x86>
 8001ee2:	2900      	cmp	r1, #0
 8001ee4:	d102      	bne.n	8001eec <__ledf2+0x68>
 8001ee6:	9f01      	ldr	r7, [sp, #4]
 8001ee8:	4327      	orrs	r7, r4
 8001eea:	d0f3      	beq.n	8001ed4 <__ledf2+0x50>
 8001eec:	4584      	cmp	ip, r0
 8001eee:	d020      	beq.n	8001f32 <__ledf2+0xae>
 8001ef0:	4663      	mov	r3, ip
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	4018      	ands	r0, r3
 8001ef8:	3801      	subs	r0, #1
 8001efa:	e007      	b.n	8001f0c <__ledf2+0x88>
 8001efc:	9f01      	ldr	r7, [sp, #4]
 8001efe:	4327      	orrs	r7, r4
 8001f00:	d103      	bne.n	8001f0a <__ledf2+0x86>
 8001f02:	458a      	cmp	sl, r1
 8001f04:	d1f4      	bne.n	8001ef0 <__ledf2+0x6c>
 8001f06:	4316      	orrs	r6, r2
 8001f08:	d01f      	beq.n	8001f4a <__ledf2+0xc6>
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	b003      	add	sp, #12
 8001f0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f10:	46bb      	mov	fp, r7
 8001f12:	46b2      	mov	sl, r6
 8001f14:	46a9      	mov	r9, r5
 8001f16:	46a0      	mov	r8, r4
 8001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1a:	4654      	mov	r4, sl
 8001f1c:	2c00      	cmp	r4, #0
 8001f1e:	d0e7      	beq.n	8001ef0 <__ledf2+0x6c>
 8001f20:	4584      	cmp	ip, r0
 8001f22:	d1e5      	bne.n	8001ef0 <__ledf2+0x6c>
 8001f24:	4551      	cmp	r1, sl
 8001f26:	dce3      	bgt.n	8001ef0 <__ledf2+0x6c>
 8001f28:	db03      	blt.n	8001f32 <__ledf2+0xae>
 8001f2a:	9b01      	ldr	r3, [sp, #4]
 8001f2c:	42b3      	cmp	r3, r6
 8001f2e:	d8df      	bhi.n	8001ef0 <__ledf2+0x6c>
 8001f30:	d00f      	beq.n	8001f52 <__ledf2+0xce>
 8001f32:	4663      	mov	r3, ip
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0cf      	beq.n	8001ed8 <__ledf2+0x54>
 8001f38:	4660      	mov	r0, ip
 8001f3a:	e7e7      	b.n	8001f0c <__ledf2+0x88>
 8001f3c:	2c00      	cmp	r4, #0
 8001f3e:	d0c9      	beq.n	8001ed4 <__ledf2+0x50>
 8001f40:	e7d4      	b.n	8001eec <__ledf2+0x68>
 8001f42:	2000      	movs	r0, #0
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d0e1      	beq.n	8001f0c <__ledf2+0x88>
 8001f48:	e7d2      	b.n	8001ef0 <__ledf2+0x6c>
 8001f4a:	4584      	cmp	ip, r0
 8001f4c:	d1d0      	bne.n	8001ef0 <__ledf2+0x6c>
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e7dc      	b.n	8001f0c <__ledf2+0x88>
 8001f52:	45c8      	cmp	r8, r9
 8001f54:	d8cc      	bhi.n	8001ef0 <__ledf2+0x6c>
 8001f56:	2000      	movs	r0, #0
 8001f58:	45c8      	cmp	r8, r9
 8001f5a:	d2d7      	bcs.n	8001f0c <__ledf2+0x88>
 8001f5c:	e7e9      	b.n	8001f32 <__ledf2+0xae>
 8001f5e:	4584      	cmp	ip, r0
 8001f60:	d0e3      	beq.n	8001f2a <__ledf2+0xa6>
 8001f62:	e7c5      	b.n	8001ef0 <__ledf2+0x6c>
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__aeabi_dmul>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	4657      	mov	r7, sl
 8001f6c:	46de      	mov	lr, fp
 8001f6e:	464e      	mov	r6, r9
 8001f70:	4645      	mov	r5, r8
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	001f      	movs	r7, r3
 8001f76:	030b      	lsls	r3, r1, #12
 8001f78:	0b1b      	lsrs	r3, r3, #12
 8001f7a:	0016      	movs	r6, r2
 8001f7c:	469a      	mov	sl, r3
 8001f7e:	0fca      	lsrs	r2, r1, #31
 8001f80:	004b      	lsls	r3, r1, #1
 8001f82:	0004      	movs	r4, r0
 8001f84:	4693      	mov	fp, r2
 8001f86:	b087      	sub	sp, #28
 8001f88:	0d5b      	lsrs	r3, r3, #21
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dmul+0x26>
 8001f8c:	e0d5      	b.n	800213a <__aeabi_dmul+0x1d2>
 8001f8e:	4abb      	ldr	r2, [pc, #748]	@ (800227c <__aeabi_dmul+0x314>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dmul+0x2e>
 8001f94:	e0f8      	b.n	8002188 <__aeabi_dmul+0x220>
 8001f96:	4651      	mov	r1, sl
 8001f98:	0f42      	lsrs	r2, r0, #29
 8001f9a:	00c9      	lsls	r1, r1, #3
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	2180      	movs	r1, #128	@ 0x80
 8001fa0:	0409      	lsls	r1, r1, #16
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	00c2      	lsls	r2, r0, #3
 8001fa6:	4691      	mov	r9, r2
 8001fa8:	4ab5      	ldr	r2, [pc, #724]	@ (8002280 <__aeabi_dmul+0x318>)
 8001faa:	468a      	mov	sl, r1
 8001fac:	189d      	adds	r5, r3, r2
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	033c      	lsls	r4, r7, #12
 8001fb6:	007b      	lsls	r3, r7, #1
 8001fb8:	0ffa      	lsrs	r2, r7, #31
 8001fba:	0030      	movs	r0, r6
 8001fbc:	0b24      	lsrs	r4, r4, #12
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	9200      	str	r2, [sp, #0]
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dmul+0x5e>
 8001fc4:	e096      	b.n	80020f4 <__aeabi_dmul+0x18c>
 8001fc6:	4aad      	ldr	r2, [pc, #692]	@ (800227c <__aeabi_dmul+0x314>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <__aeabi_dmul+0xc8>
 8001fcc:	0f72      	lsrs	r2, r6, #29
 8001fce:	00e4      	lsls	r4, r4, #3
 8001fd0:	4322      	orrs	r2, r4
 8001fd2:	2480      	movs	r4, #128	@ 0x80
 8001fd4:	0424      	lsls	r4, r4, #16
 8001fd6:	4314      	orrs	r4, r2
 8001fd8:	4aa9      	ldr	r2, [pc, #676]	@ (8002280 <__aeabi_dmul+0x318>)
 8001fda:	00f0      	lsls	r0, r6, #3
 8001fdc:	4694      	mov	ip, r2
 8001fde:	4463      	add	r3, ip
 8001fe0:	195b      	adds	r3, r3, r5
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	9201      	str	r2, [sp, #4]
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	2600      	movs	r6, #0
 8001fea:	2a0a      	cmp	r2, #10
 8001fec:	dc42      	bgt.n	8002074 <__aeabi_dmul+0x10c>
 8001fee:	465a      	mov	r2, fp
 8001ff0:	9900      	ldr	r1, [sp, #0]
 8001ff2:	404a      	eors	r2, r1
 8001ff4:	4693      	mov	fp, r2
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	2a02      	cmp	r2, #2
 8001ffa:	dc32      	bgt.n	8002062 <__aeabi_dmul+0xfa>
 8001ffc:	3a01      	subs	r2, #1
 8001ffe:	2a01      	cmp	r2, #1
 8002000:	d900      	bls.n	8002004 <__aeabi_dmul+0x9c>
 8002002:	e149      	b.n	8002298 <__aeabi_dmul+0x330>
 8002004:	2e02      	cmp	r6, #2
 8002006:	d100      	bne.n	800200a <__aeabi_dmul+0xa2>
 8002008:	e0ca      	b.n	80021a0 <__aeabi_dmul+0x238>
 800200a:	2e01      	cmp	r6, #1
 800200c:	d13d      	bne.n	800208a <__aeabi_dmul+0x122>
 800200e:	2300      	movs	r3, #0
 8002010:	2400      	movs	r4, #0
 8002012:	2200      	movs	r2, #0
 8002014:	0010      	movs	r0, r2
 8002016:	465a      	mov	r2, fp
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	4323      	orrs	r3, r4
 800201c:	07d2      	lsls	r2, r2, #31
 800201e:	4313      	orrs	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	b007      	add	sp, #28
 8002024:	bcf0      	pop	{r4, r5, r6, r7}
 8002026:	46bb      	mov	fp, r7
 8002028:	46b2      	mov	sl, r6
 800202a:	46a9      	mov	r9, r5
 800202c:	46a0      	mov	r8, r4
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002030:	4b92      	ldr	r3, [pc, #584]	@ (800227c <__aeabi_dmul+0x314>)
 8002032:	4326      	orrs	r6, r4
 8002034:	18eb      	adds	r3, r5, r3
 8002036:	2e00      	cmp	r6, #0
 8002038:	d100      	bne.n	800203c <__aeabi_dmul+0xd4>
 800203a:	e0bb      	b.n	80021b4 <__aeabi_dmul+0x24c>
 800203c:	2203      	movs	r2, #3
 800203e:	4641      	mov	r1, r8
 8002040:	4311      	orrs	r1, r2
 8002042:	465a      	mov	r2, fp
 8002044:	4688      	mov	r8, r1
 8002046:	9900      	ldr	r1, [sp, #0]
 8002048:	404a      	eors	r2, r1
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	0109      	lsls	r1, r1, #4
 800204e:	468c      	mov	ip, r1
 8002050:	0029      	movs	r1, r5
 8002052:	4461      	add	r1, ip
 8002054:	9101      	str	r1, [sp, #4]
 8002056:	4641      	mov	r1, r8
 8002058:	290a      	cmp	r1, #10
 800205a:	dd00      	ble.n	800205e <__aeabi_dmul+0xf6>
 800205c:	e233      	b.n	80024c6 <__aeabi_dmul+0x55e>
 800205e:	4693      	mov	fp, r2
 8002060:	2603      	movs	r6, #3
 8002062:	4642      	mov	r2, r8
 8002064:	2701      	movs	r7, #1
 8002066:	4097      	lsls	r7, r2
 8002068:	21a6      	movs	r1, #166	@ 0xa6
 800206a:	003a      	movs	r2, r7
 800206c:	00c9      	lsls	r1, r1, #3
 800206e:	400a      	ands	r2, r1
 8002070:	420f      	tst	r7, r1
 8002072:	d031      	beq.n	80020d8 <__aeabi_dmul+0x170>
 8002074:	9e02      	ldr	r6, [sp, #8]
 8002076:	2e02      	cmp	r6, #2
 8002078:	d100      	bne.n	800207c <__aeabi_dmul+0x114>
 800207a:	e235      	b.n	80024e8 <__aeabi_dmul+0x580>
 800207c:	2e03      	cmp	r6, #3
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x11a>
 8002080:	e1d2      	b.n	8002428 <__aeabi_dmul+0x4c0>
 8002082:	4654      	mov	r4, sl
 8002084:	4648      	mov	r0, r9
 8002086:	2e01      	cmp	r6, #1
 8002088:	d0c1      	beq.n	800200e <__aeabi_dmul+0xa6>
 800208a:	9a01      	ldr	r2, [sp, #4]
 800208c:	4b7d      	ldr	r3, [pc, #500]	@ (8002284 <__aeabi_dmul+0x31c>)
 800208e:	4694      	mov	ip, r2
 8002090:	4463      	add	r3, ip
 8002092:	2b00      	cmp	r3, #0
 8002094:	dc00      	bgt.n	8002098 <__aeabi_dmul+0x130>
 8002096:	e0c0      	b.n	800221a <__aeabi_dmul+0x2b2>
 8002098:	0742      	lsls	r2, r0, #29
 800209a:	d009      	beq.n	80020b0 <__aeabi_dmul+0x148>
 800209c:	220f      	movs	r2, #15
 800209e:	4002      	ands	r2, r0
 80020a0:	2a04      	cmp	r2, #4
 80020a2:	d005      	beq.n	80020b0 <__aeabi_dmul+0x148>
 80020a4:	1d02      	adds	r2, r0, #4
 80020a6:	4282      	cmp	r2, r0
 80020a8:	4180      	sbcs	r0, r0
 80020aa:	4240      	negs	r0, r0
 80020ac:	1824      	adds	r4, r4, r0
 80020ae:	0010      	movs	r0, r2
 80020b0:	01e2      	lsls	r2, r4, #7
 80020b2:	d506      	bpl.n	80020c2 <__aeabi_dmul+0x15a>
 80020b4:	4b74      	ldr	r3, [pc, #464]	@ (8002288 <__aeabi_dmul+0x320>)
 80020b6:	9a01      	ldr	r2, [sp, #4]
 80020b8:	401c      	ands	r4, r3
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	4694      	mov	ip, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4463      	add	r3, ip
 80020c2:	4a72      	ldr	r2, [pc, #456]	@ (800228c <__aeabi_dmul+0x324>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	dc6b      	bgt.n	80021a0 <__aeabi_dmul+0x238>
 80020c8:	0762      	lsls	r2, r4, #29
 80020ca:	08c0      	lsrs	r0, r0, #3
 80020cc:	0264      	lsls	r4, r4, #9
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	4302      	orrs	r2, r0
 80020d2:	0b24      	lsrs	r4, r4, #12
 80020d4:	0d5b      	lsrs	r3, r3, #21
 80020d6:	e79d      	b.n	8002014 <__aeabi_dmul+0xac>
 80020d8:	2190      	movs	r1, #144	@ 0x90
 80020da:	0089      	lsls	r1, r1, #2
 80020dc:	420f      	tst	r7, r1
 80020de:	d163      	bne.n	80021a8 <__aeabi_dmul+0x240>
 80020e0:	2288      	movs	r2, #136	@ 0x88
 80020e2:	423a      	tst	r2, r7
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dmul+0x180>
 80020e6:	e0d7      	b.n	8002298 <__aeabi_dmul+0x330>
 80020e8:	9b00      	ldr	r3, [sp, #0]
 80020ea:	46a2      	mov	sl, r4
 80020ec:	469b      	mov	fp, r3
 80020ee:	4681      	mov	r9, r0
 80020f0:	9602      	str	r6, [sp, #8]
 80020f2:	e7bf      	b.n	8002074 <__aeabi_dmul+0x10c>
 80020f4:	0023      	movs	r3, r4
 80020f6:	4333      	orrs	r3, r6
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x194>
 80020fa:	e07f      	b.n	80021fc <__aeabi_dmul+0x294>
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dmul+0x19a>
 8002100:	e1ad      	b.n	800245e <__aeabi_dmul+0x4f6>
 8002102:	0020      	movs	r0, r4
 8002104:	f000 fed4 	bl	8002eb0 <__clzsi2>
 8002108:	0002      	movs	r2, r0
 800210a:	0003      	movs	r3, r0
 800210c:	3a0b      	subs	r2, #11
 800210e:	201d      	movs	r0, #29
 8002110:	0019      	movs	r1, r3
 8002112:	1a82      	subs	r2, r0, r2
 8002114:	0030      	movs	r0, r6
 8002116:	3908      	subs	r1, #8
 8002118:	40d0      	lsrs	r0, r2
 800211a:	408c      	lsls	r4, r1
 800211c:	4304      	orrs	r4, r0
 800211e:	0030      	movs	r0, r6
 8002120:	4088      	lsls	r0, r1
 8002122:	4a5b      	ldr	r2, [pc, #364]	@ (8002290 <__aeabi_dmul+0x328>)
 8002124:	1aeb      	subs	r3, r5, r3
 8002126:	4694      	mov	ip, r2
 8002128:	4463      	add	r3, ip
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	9201      	str	r2, [sp, #4]
 800212e:	4642      	mov	r2, r8
 8002130:	2600      	movs	r6, #0
 8002132:	2a0a      	cmp	r2, #10
 8002134:	dc00      	bgt.n	8002138 <__aeabi_dmul+0x1d0>
 8002136:	e75a      	b.n	8001fee <__aeabi_dmul+0x86>
 8002138:	e79c      	b.n	8002074 <__aeabi_dmul+0x10c>
 800213a:	4653      	mov	r3, sl
 800213c:	4303      	orrs	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	d054      	beq.n	80021ec <__aeabi_dmul+0x284>
 8002142:	4653      	mov	r3, sl
 8002144:	2b00      	cmp	r3, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x1e2>
 8002148:	e177      	b.n	800243a <__aeabi_dmul+0x4d2>
 800214a:	4650      	mov	r0, sl
 800214c:	f000 feb0 	bl	8002eb0 <__clzsi2>
 8002150:	230b      	movs	r3, #11
 8002152:	425b      	negs	r3, r3
 8002154:	469c      	mov	ip, r3
 8002156:	0002      	movs	r2, r0
 8002158:	4484      	add	ip, r0
 800215a:	0011      	movs	r1, r2
 800215c:	4650      	mov	r0, sl
 800215e:	3908      	subs	r1, #8
 8002160:	4088      	lsls	r0, r1
 8002162:	231d      	movs	r3, #29
 8002164:	4680      	mov	r8, r0
 8002166:	4660      	mov	r0, ip
 8002168:	1a1b      	subs	r3, r3, r0
 800216a:	0020      	movs	r0, r4
 800216c:	40d8      	lsrs	r0, r3
 800216e:	0003      	movs	r3, r0
 8002170:	4640      	mov	r0, r8
 8002172:	4303      	orrs	r3, r0
 8002174:	469a      	mov	sl, r3
 8002176:	0023      	movs	r3, r4
 8002178:	408b      	lsls	r3, r1
 800217a:	4699      	mov	r9, r3
 800217c:	2300      	movs	r3, #0
 800217e:	4d44      	ldr	r5, [pc, #272]	@ (8002290 <__aeabi_dmul+0x328>)
 8002180:	4698      	mov	r8, r3
 8002182:	1aad      	subs	r5, r5, r2
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	e715      	b.n	8001fb4 <__aeabi_dmul+0x4c>
 8002188:	4652      	mov	r2, sl
 800218a:	4302      	orrs	r2, r0
 800218c:	4691      	mov	r9, r2
 800218e:	d126      	bne.n	80021de <__aeabi_dmul+0x276>
 8002190:	2200      	movs	r2, #0
 8002192:	001d      	movs	r5, r3
 8002194:	2302      	movs	r3, #2
 8002196:	4692      	mov	sl, r2
 8002198:	3208      	adds	r2, #8
 800219a:	4690      	mov	r8, r2
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	e709      	b.n	8001fb4 <__aeabi_dmul+0x4c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <__aeabi_dmul+0x314>)
 80021a6:	e735      	b.n	8002014 <__aeabi_dmul+0xac>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2480      	movs	r4, #128	@ 0x80
 80021ac:	469b      	mov	fp, r3
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	4b32      	ldr	r3, [pc, #200]	@ (800227c <__aeabi_dmul+0x314>)
 80021b2:	e72f      	b.n	8002014 <__aeabi_dmul+0xac>
 80021b4:	2202      	movs	r2, #2
 80021b6:	4641      	mov	r1, r8
 80021b8:	4311      	orrs	r1, r2
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	4694      	mov	ip, r2
 80021c0:	002a      	movs	r2, r5
 80021c2:	4462      	add	r2, ip
 80021c4:	4688      	mov	r8, r1
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	290a      	cmp	r1, #10
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dmul+0x266>
 80021cc:	e752      	b.n	8002074 <__aeabi_dmul+0x10c>
 80021ce:	465a      	mov	r2, fp
 80021d0:	2000      	movs	r0, #0
 80021d2:	9900      	ldr	r1, [sp, #0]
 80021d4:	0004      	movs	r4, r0
 80021d6:	404a      	eors	r2, r1
 80021d8:	4693      	mov	fp, r2
 80021da:	2602      	movs	r6, #2
 80021dc:	e70b      	b.n	8001ff6 <__aeabi_dmul+0x8e>
 80021de:	220c      	movs	r2, #12
 80021e0:	001d      	movs	r5, r3
 80021e2:	2303      	movs	r3, #3
 80021e4:	4681      	mov	r9, r0
 80021e6:	4690      	mov	r8, r2
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	e6e3      	b.n	8001fb4 <__aeabi_dmul+0x4c>
 80021ec:	2300      	movs	r3, #0
 80021ee:	469a      	mov	sl, r3
 80021f0:	3304      	adds	r3, #4
 80021f2:	4698      	mov	r8, r3
 80021f4:	3b03      	subs	r3, #3
 80021f6:	2500      	movs	r5, #0
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	e6db      	b.n	8001fb4 <__aeabi_dmul+0x4c>
 80021fc:	4642      	mov	r2, r8
 80021fe:	3301      	adds	r3, #1
 8002200:	431a      	orrs	r2, r3
 8002202:	002b      	movs	r3, r5
 8002204:	4690      	mov	r8, r2
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	4642      	mov	r2, r8
 800220c:	2400      	movs	r4, #0
 800220e:	2000      	movs	r0, #0
 8002210:	2601      	movs	r6, #1
 8002212:	2a0a      	cmp	r2, #10
 8002214:	dc00      	bgt.n	8002218 <__aeabi_dmul+0x2b0>
 8002216:	e6ea      	b.n	8001fee <__aeabi_dmul+0x86>
 8002218:	e72c      	b.n	8002074 <__aeabi_dmul+0x10c>
 800221a:	2201      	movs	r2, #1
 800221c:	1ad2      	subs	r2, r2, r3
 800221e:	2a38      	cmp	r2, #56	@ 0x38
 8002220:	dd00      	ble.n	8002224 <__aeabi_dmul+0x2bc>
 8002222:	e6f4      	b.n	800200e <__aeabi_dmul+0xa6>
 8002224:	2a1f      	cmp	r2, #31
 8002226:	dc00      	bgt.n	800222a <__aeabi_dmul+0x2c2>
 8002228:	e12a      	b.n	8002480 <__aeabi_dmul+0x518>
 800222a:	211f      	movs	r1, #31
 800222c:	4249      	negs	r1, r1
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	0021      	movs	r1, r4
 8002232:	40d9      	lsrs	r1, r3
 8002234:	000b      	movs	r3, r1
 8002236:	2a20      	cmp	r2, #32
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x2de>
 800223a:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <__aeabi_dmul+0x32c>)
 800223c:	9d01      	ldr	r5, [sp, #4]
 800223e:	4694      	mov	ip, r2
 8002240:	4465      	add	r5, ip
 8002242:	40ac      	lsls	r4, r5
 8002244:	4320      	orrs	r0, r4
 8002246:	1e42      	subs	r2, r0, #1
 8002248:	4190      	sbcs	r0, r2
 800224a:	4318      	orrs	r0, r3
 800224c:	2307      	movs	r3, #7
 800224e:	0019      	movs	r1, r3
 8002250:	2400      	movs	r4, #0
 8002252:	4001      	ands	r1, r0
 8002254:	4203      	tst	r3, r0
 8002256:	d00c      	beq.n	8002272 <__aeabi_dmul+0x30a>
 8002258:	230f      	movs	r3, #15
 800225a:	4003      	ands	r3, r0
 800225c:	2b04      	cmp	r3, #4
 800225e:	d100      	bne.n	8002262 <__aeabi_dmul+0x2fa>
 8002260:	e140      	b.n	80024e4 <__aeabi_dmul+0x57c>
 8002262:	1d03      	adds	r3, r0, #4
 8002264:	4283      	cmp	r3, r0
 8002266:	41a4      	sbcs	r4, r4
 8002268:	0018      	movs	r0, r3
 800226a:	4264      	negs	r4, r4
 800226c:	0761      	lsls	r1, r4, #29
 800226e:	0264      	lsls	r4, r4, #9
 8002270:	0b24      	lsrs	r4, r4, #12
 8002272:	08c2      	lsrs	r2, r0, #3
 8002274:	2300      	movs	r3, #0
 8002276:	430a      	orrs	r2, r1
 8002278:	e6cc      	b.n	8002014 <__aeabi_dmul+0xac>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff
 8002280:	fffffc01 	.word	0xfffffc01
 8002284:	000003ff 	.word	0x000003ff
 8002288:	feffffff 	.word	0xfeffffff
 800228c:	000007fe 	.word	0x000007fe
 8002290:	fffffc0d 	.word	0xfffffc0d
 8002294:	0000043e 	.word	0x0000043e
 8002298:	4649      	mov	r1, r9
 800229a:	464a      	mov	r2, r9
 800229c:	0409      	lsls	r1, r1, #16
 800229e:	0c09      	lsrs	r1, r1, #16
 80022a0:	000d      	movs	r5, r1
 80022a2:	0c16      	lsrs	r6, r2, #16
 80022a4:	0c02      	lsrs	r2, r0, #16
 80022a6:	0400      	lsls	r0, r0, #16
 80022a8:	0c00      	lsrs	r0, r0, #16
 80022aa:	4345      	muls	r5, r0
 80022ac:	46ac      	mov	ip, r5
 80022ae:	0005      	movs	r5, r0
 80022b0:	4375      	muls	r5, r6
 80022b2:	46a8      	mov	r8, r5
 80022b4:	0015      	movs	r5, r2
 80022b6:	000f      	movs	r7, r1
 80022b8:	4375      	muls	r5, r6
 80022ba:	9200      	str	r2, [sp, #0]
 80022bc:	9502      	str	r5, [sp, #8]
 80022be:	002a      	movs	r2, r5
 80022c0:	9d00      	ldr	r5, [sp, #0]
 80022c2:	436f      	muls	r7, r5
 80022c4:	4665      	mov	r5, ip
 80022c6:	0c2d      	lsrs	r5, r5, #16
 80022c8:	46a9      	mov	r9, r5
 80022ca:	4447      	add	r7, r8
 80022cc:	444f      	add	r7, r9
 80022ce:	45b8      	cmp	r8, r7
 80022d0:	d905      	bls.n	80022de <__aeabi_dmul+0x376>
 80022d2:	0015      	movs	r5, r2
 80022d4:	2280      	movs	r2, #128	@ 0x80
 80022d6:	0252      	lsls	r2, r2, #9
 80022d8:	4690      	mov	r8, r2
 80022da:	4445      	add	r5, r8
 80022dc:	9502      	str	r5, [sp, #8]
 80022de:	0c3d      	lsrs	r5, r7, #16
 80022e0:	9503      	str	r5, [sp, #12]
 80022e2:	4665      	mov	r5, ip
 80022e4:	042d      	lsls	r5, r5, #16
 80022e6:	043f      	lsls	r7, r7, #16
 80022e8:	0c2d      	lsrs	r5, r5, #16
 80022ea:	46ac      	mov	ip, r5
 80022ec:	003d      	movs	r5, r7
 80022ee:	4465      	add	r5, ip
 80022f0:	9504      	str	r5, [sp, #16]
 80022f2:	0c25      	lsrs	r5, r4, #16
 80022f4:	0424      	lsls	r4, r4, #16
 80022f6:	0c24      	lsrs	r4, r4, #16
 80022f8:	46ac      	mov	ip, r5
 80022fa:	0025      	movs	r5, r4
 80022fc:	4375      	muls	r5, r6
 80022fe:	46a8      	mov	r8, r5
 8002300:	4665      	mov	r5, ip
 8002302:	000f      	movs	r7, r1
 8002304:	4369      	muls	r1, r5
 8002306:	4441      	add	r1, r8
 8002308:	4689      	mov	r9, r1
 800230a:	4367      	muls	r7, r4
 800230c:	0c39      	lsrs	r1, r7, #16
 800230e:	4449      	add	r1, r9
 8002310:	436e      	muls	r6, r5
 8002312:	4588      	cmp	r8, r1
 8002314:	d903      	bls.n	800231e <__aeabi_dmul+0x3b6>
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	0252      	lsls	r2, r2, #9
 800231a:	4690      	mov	r8, r2
 800231c:	4446      	add	r6, r8
 800231e:	0c0d      	lsrs	r5, r1, #16
 8002320:	46a8      	mov	r8, r5
 8002322:	0035      	movs	r5, r6
 8002324:	4445      	add	r5, r8
 8002326:	9505      	str	r5, [sp, #20]
 8002328:	9d03      	ldr	r5, [sp, #12]
 800232a:	043f      	lsls	r7, r7, #16
 800232c:	46a8      	mov	r8, r5
 800232e:	0c3f      	lsrs	r7, r7, #16
 8002330:	0409      	lsls	r1, r1, #16
 8002332:	19c9      	adds	r1, r1, r7
 8002334:	4488      	add	r8, r1
 8002336:	4645      	mov	r5, r8
 8002338:	9503      	str	r5, [sp, #12]
 800233a:	4655      	mov	r5, sl
 800233c:	042e      	lsls	r6, r5, #16
 800233e:	0c36      	lsrs	r6, r6, #16
 8002340:	0c2f      	lsrs	r7, r5, #16
 8002342:	0035      	movs	r5, r6
 8002344:	4345      	muls	r5, r0
 8002346:	4378      	muls	r0, r7
 8002348:	4681      	mov	r9, r0
 800234a:	0038      	movs	r0, r7
 800234c:	46a8      	mov	r8, r5
 800234e:	0c2d      	lsrs	r5, r5, #16
 8002350:	46aa      	mov	sl, r5
 8002352:	9a00      	ldr	r2, [sp, #0]
 8002354:	4350      	muls	r0, r2
 8002356:	4372      	muls	r2, r6
 8002358:	444a      	add	r2, r9
 800235a:	4452      	add	r2, sl
 800235c:	4591      	cmp	r9, r2
 800235e:	d903      	bls.n	8002368 <__aeabi_dmul+0x400>
 8002360:	2580      	movs	r5, #128	@ 0x80
 8002362:	026d      	lsls	r5, r5, #9
 8002364:	46a9      	mov	r9, r5
 8002366:	4448      	add	r0, r9
 8002368:	0c15      	lsrs	r5, r2, #16
 800236a:	46a9      	mov	r9, r5
 800236c:	4645      	mov	r5, r8
 800236e:	042d      	lsls	r5, r5, #16
 8002370:	0c2d      	lsrs	r5, r5, #16
 8002372:	46a8      	mov	r8, r5
 8002374:	4665      	mov	r5, ip
 8002376:	437d      	muls	r5, r7
 8002378:	0412      	lsls	r2, r2, #16
 800237a:	4448      	add	r0, r9
 800237c:	4490      	add	r8, r2
 800237e:	46a9      	mov	r9, r5
 8002380:	0032      	movs	r2, r6
 8002382:	4665      	mov	r5, ip
 8002384:	4362      	muls	r2, r4
 8002386:	436e      	muls	r6, r5
 8002388:	437c      	muls	r4, r7
 800238a:	0c17      	lsrs	r7, r2, #16
 800238c:	1936      	adds	r6, r6, r4
 800238e:	19bf      	adds	r7, r7, r6
 8002390:	42bc      	cmp	r4, r7
 8002392:	d903      	bls.n	800239c <__aeabi_dmul+0x434>
 8002394:	2480      	movs	r4, #128	@ 0x80
 8002396:	0264      	lsls	r4, r4, #9
 8002398:	46a4      	mov	ip, r4
 800239a:	44e1      	add	r9, ip
 800239c:	9c02      	ldr	r4, [sp, #8]
 800239e:	9e03      	ldr	r6, [sp, #12]
 80023a0:	46a4      	mov	ip, r4
 80023a2:	9d05      	ldr	r5, [sp, #20]
 80023a4:	4466      	add	r6, ip
 80023a6:	428e      	cmp	r6, r1
 80023a8:	4189      	sbcs	r1, r1
 80023aa:	46ac      	mov	ip, r5
 80023ac:	0412      	lsls	r2, r2, #16
 80023ae:	043c      	lsls	r4, r7, #16
 80023b0:	0c12      	lsrs	r2, r2, #16
 80023b2:	18a2      	adds	r2, r4, r2
 80023b4:	4462      	add	r2, ip
 80023b6:	4249      	negs	r1, r1
 80023b8:	1854      	adds	r4, r2, r1
 80023ba:	4446      	add	r6, r8
 80023bc:	46a4      	mov	ip, r4
 80023be:	4546      	cmp	r6, r8
 80023c0:	41a4      	sbcs	r4, r4
 80023c2:	4682      	mov	sl, r0
 80023c4:	4264      	negs	r4, r4
 80023c6:	46a0      	mov	r8, r4
 80023c8:	42aa      	cmp	r2, r5
 80023ca:	4192      	sbcs	r2, r2
 80023cc:	458c      	cmp	ip, r1
 80023ce:	4189      	sbcs	r1, r1
 80023d0:	44e2      	add	sl, ip
 80023d2:	44d0      	add	r8, sl
 80023d4:	4249      	negs	r1, r1
 80023d6:	4252      	negs	r2, r2
 80023d8:	430a      	orrs	r2, r1
 80023da:	45a0      	cmp	r8, r4
 80023dc:	41a4      	sbcs	r4, r4
 80023de:	4582      	cmp	sl, r0
 80023e0:	4189      	sbcs	r1, r1
 80023e2:	4264      	negs	r4, r4
 80023e4:	4249      	negs	r1, r1
 80023e6:	430c      	orrs	r4, r1
 80023e8:	4641      	mov	r1, r8
 80023ea:	0c3f      	lsrs	r7, r7, #16
 80023ec:	19d2      	adds	r2, r2, r7
 80023ee:	1912      	adds	r2, r2, r4
 80023f0:	0dcc      	lsrs	r4, r1, #23
 80023f2:	9904      	ldr	r1, [sp, #16]
 80023f4:	0270      	lsls	r0, r6, #9
 80023f6:	4308      	orrs	r0, r1
 80023f8:	1e41      	subs	r1, r0, #1
 80023fa:	4188      	sbcs	r0, r1
 80023fc:	4641      	mov	r1, r8
 80023fe:	444a      	add	r2, r9
 8002400:	0df6      	lsrs	r6, r6, #23
 8002402:	0252      	lsls	r2, r2, #9
 8002404:	4330      	orrs	r0, r6
 8002406:	0249      	lsls	r1, r1, #9
 8002408:	4314      	orrs	r4, r2
 800240a:	4308      	orrs	r0, r1
 800240c:	01d2      	lsls	r2, r2, #7
 800240e:	d535      	bpl.n	800247c <__aeabi_dmul+0x514>
 8002410:	2201      	movs	r2, #1
 8002412:	0843      	lsrs	r3, r0, #1
 8002414:	4002      	ands	r2, r0
 8002416:	4313      	orrs	r3, r2
 8002418:	07e0      	lsls	r0, r4, #31
 800241a:	4318      	orrs	r0, r3
 800241c:	0864      	lsrs	r4, r4, #1
 800241e:	e634      	b.n	800208a <__aeabi_dmul+0x122>
 8002420:	9b00      	ldr	r3, [sp, #0]
 8002422:	46a2      	mov	sl, r4
 8002424:	469b      	mov	fp, r3
 8002426:	4681      	mov	r9, r0
 8002428:	2480      	movs	r4, #128	@ 0x80
 800242a:	4653      	mov	r3, sl
 800242c:	0324      	lsls	r4, r4, #12
 800242e:	431c      	orrs	r4, r3
 8002430:	0324      	lsls	r4, r4, #12
 8002432:	464a      	mov	r2, r9
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <__aeabi_dmul+0x588>)
 8002436:	0b24      	lsrs	r4, r4, #12
 8002438:	e5ec      	b.n	8002014 <__aeabi_dmul+0xac>
 800243a:	f000 fd39 	bl	8002eb0 <__clzsi2>
 800243e:	2315      	movs	r3, #21
 8002440:	469c      	mov	ip, r3
 8002442:	4484      	add	ip, r0
 8002444:	0002      	movs	r2, r0
 8002446:	4663      	mov	r3, ip
 8002448:	3220      	adds	r2, #32
 800244a:	2b1c      	cmp	r3, #28
 800244c:	dc00      	bgt.n	8002450 <__aeabi_dmul+0x4e8>
 800244e:	e684      	b.n	800215a <__aeabi_dmul+0x1f2>
 8002450:	2300      	movs	r3, #0
 8002452:	4699      	mov	r9, r3
 8002454:	0023      	movs	r3, r4
 8002456:	3808      	subs	r0, #8
 8002458:	4083      	lsls	r3, r0
 800245a:	469a      	mov	sl, r3
 800245c:	e68e      	b.n	800217c <__aeabi_dmul+0x214>
 800245e:	f000 fd27 	bl	8002eb0 <__clzsi2>
 8002462:	0002      	movs	r2, r0
 8002464:	0003      	movs	r3, r0
 8002466:	3215      	adds	r2, #21
 8002468:	3320      	adds	r3, #32
 800246a:	2a1c      	cmp	r2, #28
 800246c:	dc00      	bgt.n	8002470 <__aeabi_dmul+0x508>
 800246e:	e64e      	b.n	800210e <__aeabi_dmul+0x1a6>
 8002470:	0002      	movs	r2, r0
 8002472:	0034      	movs	r4, r6
 8002474:	3a08      	subs	r2, #8
 8002476:	2000      	movs	r0, #0
 8002478:	4094      	lsls	r4, r2
 800247a:	e652      	b.n	8002122 <__aeabi_dmul+0x1ba>
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	e604      	b.n	800208a <__aeabi_dmul+0x122>
 8002480:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <__aeabi_dmul+0x58c>)
 8002482:	0021      	movs	r1, r4
 8002484:	469c      	mov	ip, r3
 8002486:	0003      	movs	r3, r0
 8002488:	9d01      	ldr	r5, [sp, #4]
 800248a:	40d3      	lsrs	r3, r2
 800248c:	4465      	add	r5, ip
 800248e:	40a9      	lsls	r1, r5
 8002490:	4319      	orrs	r1, r3
 8002492:	0003      	movs	r3, r0
 8002494:	40ab      	lsls	r3, r5
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	4183      	sbcs	r3, r0
 800249a:	4319      	orrs	r1, r3
 800249c:	0008      	movs	r0, r1
 800249e:	40d4      	lsrs	r4, r2
 80024a0:	074b      	lsls	r3, r1, #29
 80024a2:	d009      	beq.n	80024b8 <__aeabi_dmul+0x550>
 80024a4:	230f      	movs	r3, #15
 80024a6:	400b      	ands	r3, r1
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d005      	beq.n	80024b8 <__aeabi_dmul+0x550>
 80024ac:	1d0b      	adds	r3, r1, #4
 80024ae:	428b      	cmp	r3, r1
 80024b0:	4180      	sbcs	r0, r0
 80024b2:	4240      	negs	r0, r0
 80024b4:	1824      	adds	r4, r4, r0
 80024b6:	0018      	movs	r0, r3
 80024b8:	0223      	lsls	r3, r4, #8
 80024ba:	d400      	bmi.n	80024be <__aeabi_dmul+0x556>
 80024bc:	e6d6      	b.n	800226c <__aeabi_dmul+0x304>
 80024be:	2301      	movs	r3, #1
 80024c0:	2400      	movs	r4, #0
 80024c2:	2200      	movs	r2, #0
 80024c4:	e5a6      	b.n	8002014 <__aeabi_dmul+0xac>
 80024c6:	290f      	cmp	r1, #15
 80024c8:	d1aa      	bne.n	8002420 <__aeabi_dmul+0x4b8>
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	4652      	mov	r2, sl
 80024ce:	031b      	lsls	r3, r3, #12
 80024d0:	421a      	tst	r2, r3
 80024d2:	d0a9      	beq.n	8002428 <__aeabi_dmul+0x4c0>
 80024d4:	421c      	tst	r4, r3
 80024d6:	d1a7      	bne.n	8002428 <__aeabi_dmul+0x4c0>
 80024d8:	431c      	orrs	r4, r3
 80024da:	9b00      	ldr	r3, [sp, #0]
 80024dc:	0002      	movs	r2, r0
 80024de:	469b      	mov	fp, r3
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <__aeabi_dmul+0x588>)
 80024e2:	e597      	b.n	8002014 <__aeabi_dmul+0xac>
 80024e4:	2400      	movs	r4, #0
 80024e6:	e6c1      	b.n	800226c <__aeabi_dmul+0x304>
 80024e8:	2400      	movs	r4, #0
 80024ea:	4b01      	ldr	r3, [pc, #4]	@ (80024f0 <__aeabi_dmul+0x588>)
 80024ec:	0022      	movs	r2, r4
 80024ee:	e591      	b.n	8002014 <__aeabi_dmul+0xac>
 80024f0:	000007ff 	.word	0x000007ff
 80024f4:	0000041e 	.word	0x0000041e

080024f8 <__aeabi_dsub>:
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	464e      	mov	r6, r9
 80024fc:	4645      	mov	r5, r8
 80024fe:	46de      	mov	lr, fp
 8002500:	4657      	mov	r7, sl
 8002502:	b5e0      	push	{r5, r6, r7, lr}
 8002504:	b085      	sub	sp, #20
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	9101      	str	r1, [sp, #4]
 800250a:	030c      	lsls	r4, r1, #12
 800250c:	004f      	lsls	r7, r1, #1
 800250e:	0fce      	lsrs	r6, r1, #31
 8002510:	0a61      	lsrs	r1, r4, #9
 8002512:	9c00      	ldr	r4, [sp, #0]
 8002514:	46b0      	mov	r8, r6
 8002516:	0f64      	lsrs	r4, r4, #29
 8002518:	430c      	orrs	r4, r1
 800251a:	9900      	ldr	r1, [sp, #0]
 800251c:	0d7f      	lsrs	r7, r7, #21
 800251e:	00c8      	lsls	r0, r1, #3
 8002520:	0011      	movs	r1, r2
 8002522:	001a      	movs	r2, r3
 8002524:	031b      	lsls	r3, r3, #12
 8002526:	469c      	mov	ip, r3
 8002528:	9100      	str	r1, [sp, #0]
 800252a:	9201      	str	r2, [sp, #4]
 800252c:	0051      	lsls	r1, r2, #1
 800252e:	0d4b      	lsrs	r3, r1, #21
 8002530:	4699      	mov	r9, r3
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	9d00      	ldr	r5, [sp, #0]
 8002536:	0fd9      	lsrs	r1, r3, #31
 8002538:	4663      	mov	r3, ip
 800253a:	0f6a      	lsrs	r2, r5, #29
 800253c:	0a5b      	lsrs	r3, r3, #9
 800253e:	4313      	orrs	r3, r2
 8002540:	00ea      	lsls	r2, r5, #3
 8002542:	4694      	mov	ip, r2
 8002544:	4693      	mov	fp, r2
 8002546:	4ac1      	ldr	r2, [pc, #772]	@ (800284c <__aeabi_dsub+0x354>)
 8002548:	9003      	str	r0, [sp, #12]
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	4591      	cmp	r9, r2
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x5a>
 8002550:	e0cd      	b.n	80026ee <__aeabi_dsub+0x1f6>
 8002552:	2501      	movs	r5, #1
 8002554:	4069      	eors	r1, r5
 8002556:	464d      	mov	r5, r9
 8002558:	1b7d      	subs	r5, r7, r5
 800255a:	46aa      	mov	sl, r5
 800255c:	428e      	cmp	r6, r1
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x6a>
 8002560:	e080      	b.n	8002664 <__aeabi_dsub+0x16c>
 8002562:	2d00      	cmp	r5, #0
 8002564:	dc00      	bgt.n	8002568 <__aeabi_dsub+0x70>
 8002566:	e335      	b.n	8002bd4 <__aeabi_dsub+0x6dc>
 8002568:	4649      	mov	r1, r9
 800256a:	2900      	cmp	r1, #0
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x78>
 800256e:	e0df      	b.n	8002730 <__aeabi_dsub+0x238>
 8002570:	4297      	cmp	r7, r2
 8002572:	d100      	bne.n	8002576 <__aeabi_dsub+0x7e>
 8002574:	e194      	b.n	80028a0 <__aeabi_dsub+0x3a8>
 8002576:	4652      	mov	r2, sl
 8002578:	2501      	movs	r5, #1
 800257a:	2a38      	cmp	r2, #56	@ 0x38
 800257c:	dc19      	bgt.n	80025b2 <__aeabi_dsub+0xba>
 800257e:	2280      	movs	r2, #128	@ 0x80
 8002580:	9b02      	ldr	r3, [sp, #8]
 8002582:	0412      	lsls	r2, r2, #16
 8002584:	4313      	orrs	r3, r2
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	4652      	mov	r2, sl
 800258a:	2a1f      	cmp	r2, #31
 800258c:	dd00      	ble.n	8002590 <__aeabi_dsub+0x98>
 800258e:	e1e3      	b.n	8002958 <__aeabi_dsub+0x460>
 8002590:	4653      	mov	r3, sl
 8002592:	2220      	movs	r2, #32
 8002594:	4661      	mov	r1, ip
 8002596:	9d02      	ldr	r5, [sp, #8]
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	4095      	lsls	r5, r2
 800259c:	40d9      	lsrs	r1, r3
 800259e:	430d      	orrs	r5, r1
 80025a0:	4661      	mov	r1, ip
 80025a2:	4091      	lsls	r1, r2
 80025a4:	000a      	movs	r2, r1
 80025a6:	1e51      	subs	r1, r2, #1
 80025a8:	418a      	sbcs	r2, r1
 80025aa:	4315      	orrs	r5, r2
 80025ac:	9a02      	ldr	r2, [sp, #8]
 80025ae:	40da      	lsrs	r2, r3
 80025b0:	1aa4      	subs	r4, r4, r2
 80025b2:	1b45      	subs	r5, r0, r5
 80025b4:	42a8      	cmp	r0, r5
 80025b6:	4180      	sbcs	r0, r0
 80025b8:	4240      	negs	r0, r0
 80025ba:	1a24      	subs	r4, r4, r0
 80025bc:	0223      	lsls	r3, r4, #8
 80025be:	d400      	bmi.n	80025c2 <__aeabi_dsub+0xca>
 80025c0:	e13d      	b.n	800283e <__aeabi_dsub+0x346>
 80025c2:	0264      	lsls	r4, r4, #9
 80025c4:	0a64      	lsrs	r4, r4, #9
 80025c6:	2c00      	cmp	r4, #0
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0xd4>
 80025ca:	e147      	b.n	800285c <__aeabi_dsub+0x364>
 80025cc:	0020      	movs	r0, r4
 80025ce:	f000 fc6f 	bl	8002eb0 <__clzsi2>
 80025d2:	0003      	movs	r3, r0
 80025d4:	3b08      	subs	r3, #8
 80025d6:	2120      	movs	r1, #32
 80025d8:	0028      	movs	r0, r5
 80025da:	1aca      	subs	r2, r1, r3
 80025dc:	40d0      	lsrs	r0, r2
 80025de:	409c      	lsls	r4, r3
 80025e0:	0002      	movs	r2, r0
 80025e2:	409d      	lsls	r5, r3
 80025e4:	4322      	orrs	r2, r4
 80025e6:	429f      	cmp	r7, r3
 80025e8:	dd00      	ble.n	80025ec <__aeabi_dsub+0xf4>
 80025ea:	e177      	b.n	80028dc <__aeabi_dsub+0x3e4>
 80025ec:	1bd8      	subs	r0, r3, r7
 80025ee:	3001      	adds	r0, #1
 80025f0:	1a09      	subs	r1, r1, r0
 80025f2:	002c      	movs	r4, r5
 80025f4:	408d      	lsls	r5, r1
 80025f6:	40c4      	lsrs	r4, r0
 80025f8:	1e6b      	subs	r3, r5, #1
 80025fa:	419d      	sbcs	r5, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	40c2      	lsrs	r2, r0
 8002600:	408b      	lsls	r3, r1
 8002602:	4325      	orrs	r5, r4
 8002604:	2700      	movs	r7, #0
 8002606:	0014      	movs	r4, r2
 8002608:	431d      	orrs	r5, r3
 800260a:	076b      	lsls	r3, r5, #29
 800260c:	d009      	beq.n	8002622 <__aeabi_dsub+0x12a>
 800260e:	230f      	movs	r3, #15
 8002610:	402b      	ands	r3, r5
 8002612:	2b04      	cmp	r3, #4
 8002614:	d005      	beq.n	8002622 <__aeabi_dsub+0x12a>
 8002616:	1d2b      	adds	r3, r5, #4
 8002618:	42ab      	cmp	r3, r5
 800261a:	41ad      	sbcs	r5, r5
 800261c:	426d      	negs	r5, r5
 800261e:	1964      	adds	r4, r4, r5
 8002620:	001d      	movs	r5, r3
 8002622:	0223      	lsls	r3, r4, #8
 8002624:	d400      	bmi.n	8002628 <__aeabi_dsub+0x130>
 8002626:	e140      	b.n	80028aa <__aeabi_dsub+0x3b2>
 8002628:	4a88      	ldr	r2, [pc, #544]	@ (800284c <__aeabi_dsub+0x354>)
 800262a:	3701      	adds	r7, #1
 800262c:	4297      	cmp	r7, r2
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x13a>
 8002630:	e101      	b.n	8002836 <__aeabi_dsub+0x33e>
 8002632:	2601      	movs	r6, #1
 8002634:	4643      	mov	r3, r8
 8002636:	4986      	ldr	r1, [pc, #536]	@ (8002850 <__aeabi_dsub+0x358>)
 8002638:	08ed      	lsrs	r5, r5, #3
 800263a:	4021      	ands	r1, r4
 800263c:	074a      	lsls	r2, r1, #29
 800263e:	432a      	orrs	r2, r5
 8002640:	057c      	lsls	r4, r7, #21
 8002642:	024d      	lsls	r5, r1, #9
 8002644:	0b2d      	lsrs	r5, r5, #12
 8002646:	0d64      	lsrs	r4, r4, #21
 8002648:	401e      	ands	r6, r3
 800264a:	0524      	lsls	r4, r4, #20
 800264c:	432c      	orrs	r4, r5
 800264e:	07f6      	lsls	r6, r6, #31
 8002650:	4334      	orrs	r4, r6
 8002652:	0010      	movs	r0, r2
 8002654:	0021      	movs	r1, r4
 8002656:	b005      	add	sp, #20
 8002658:	bcf0      	pop	{r4, r5, r6, r7}
 800265a:	46bb      	mov	fp, r7
 800265c:	46b2      	mov	sl, r6
 800265e:	46a9      	mov	r9, r5
 8002660:	46a0      	mov	r8, r4
 8002662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002664:	2d00      	cmp	r5, #0
 8002666:	dc00      	bgt.n	800266a <__aeabi_dsub+0x172>
 8002668:	e2d0      	b.n	8002c0c <__aeabi_dsub+0x714>
 800266a:	4649      	mov	r1, r9
 800266c:	2900      	cmp	r1, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x17a>
 8002670:	e0d4      	b.n	800281c <__aeabi_dsub+0x324>
 8002672:	4661      	mov	r1, ip
 8002674:	9b02      	ldr	r3, [sp, #8]
 8002676:	4319      	orrs	r1, r3
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x184>
 800267a:	e12b      	b.n	80028d4 <__aeabi_dsub+0x3dc>
 800267c:	1e69      	subs	r1, r5, #1
 800267e:	2d01      	cmp	r5, #1
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x18c>
 8002682:	e1d9      	b.n	8002a38 <__aeabi_dsub+0x540>
 8002684:	4295      	cmp	r5, r2
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x192>
 8002688:	e10a      	b.n	80028a0 <__aeabi_dsub+0x3a8>
 800268a:	2501      	movs	r5, #1
 800268c:	2938      	cmp	r1, #56	@ 0x38
 800268e:	dc17      	bgt.n	80026c0 <__aeabi_dsub+0x1c8>
 8002690:	468a      	mov	sl, r1
 8002692:	4653      	mov	r3, sl
 8002694:	2b1f      	cmp	r3, #31
 8002696:	dd00      	ble.n	800269a <__aeabi_dsub+0x1a2>
 8002698:	e1e7      	b.n	8002a6a <__aeabi_dsub+0x572>
 800269a:	2220      	movs	r2, #32
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	9b02      	ldr	r3, [sp, #8]
 80026a0:	4661      	mov	r1, ip
 80026a2:	4093      	lsls	r3, r2
 80026a4:	001d      	movs	r5, r3
 80026a6:	4653      	mov	r3, sl
 80026a8:	40d9      	lsrs	r1, r3
 80026aa:	4663      	mov	r3, ip
 80026ac:	4093      	lsls	r3, r2
 80026ae:	001a      	movs	r2, r3
 80026b0:	430d      	orrs	r5, r1
 80026b2:	1e51      	subs	r1, r2, #1
 80026b4:	418a      	sbcs	r2, r1
 80026b6:	4653      	mov	r3, sl
 80026b8:	4315      	orrs	r5, r2
 80026ba:	9a02      	ldr	r2, [sp, #8]
 80026bc:	40da      	lsrs	r2, r3
 80026be:	18a4      	adds	r4, r4, r2
 80026c0:	182d      	adds	r5, r5, r0
 80026c2:	4285      	cmp	r5, r0
 80026c4:	4180      	sbcs	r0, r0
 80026c6:	4240      	negs	r0, r0
 80026c8:	1824      	adds	r4, r4, r0
 80026ca:	0223      	lsls	r3, r4, #8
 80026cc:	d400      	bmi.n	80026d0 <__aeabi_dsub+0x1d8>
 80026ce:	e0b6      	b.n	800283e <__aeabi_dsub+0x346>
 80026d0:	4b5e      	ldr	r3, [pc, #376]	@ (800284c <__aeabi_dsub+0x354>)
 80026d2:	3701      	adds	r7, #1
 80026d4:	429f      	cmp	r7, r3
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x1e2>
 80026d8:	e0ad      	b.n	8002836 <__aeabi_dsub+0x33e>
 80026da:	2101      	movs	r1, #1
 80026dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002850 <__aeabi_dsub+0x358>)
 80026de:	086a      	lsrs	r2, r5, #1
 80026e0:	401c      	ands	r4, r3
 80026e2:	4029      	ands	r1, r5
 80026e4:	430a      	orrs	r2, r1
 80026e6:	07e5      	lsls	r5, r4, #31
 80026e8:	4315      	orrs	r5, r2
 80026ea:	0864      	lsrs	r4, r4, #1
 80026ec:	e78d      	b.n	800260a <__aeabi_dsub+0x112>
 80026ee:	4a59      	ldr	r2, [pc, #356]	@ (8002854 <__aeabi_dsub+0x35c>)
 80026f0:	9b02      	ldr	r3, [sp, #8]
 80026f2:	4692      	mov	sl, r2
 80026f4:	4662      	mov	r2, ip
 80026f6:	44ba      	add	sl, r7
 80026f8:	431a      	orrs	r2, r3
 80026fa:	d02c      	beq.n	8002756 <__aeabi_dsub+0x25e>
 80026fc:	428e      	cmp	r6, r1
 80026fe:	d02e      	beq.n	800275e <__aeabi_dsub+0x266>
 8002700:	4652      	mov	r2, sl
 8002702:	2a00      	cmp	r2, #0
 8002704:	d060      	beq.n	80027c8 <__aeabi_dsub+0x2d0>
 8002706:	2f00      	cmp	r7, #0
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x214>
 800270a:	e0db      	b.n	80028c4 <__aeabi_dsub+0x3cc>
 800270c:	4663      	mov	r3, ip
 800270e:	000e      	movs	r6, r1
 8002710:	9c02      	ldr	r4, [sp, #8]
 8002712:	08d8      	lsrs	r0, r3, #3
 8002714:	0762      	lsls	r2, r4, #29
 8002716:	4302      	orrs	r2, r0
 8002718:	08e4      	lsrs	r4, r4, #3
 800271a:	0013      	movs	r3, r2
 800271c:	4323      	orrs	r3, r4
 800271e:	d100      	bne.n	8002722 <__aeabi_dsub+0x22a>
 8002720:	e254      	b.n	8002bcc <__aeabi_dsub+0x6d4>
 8002722:	2580      	movs	r5, #128	@ 0x80
 8002724:	032d      	lsls	r5, r5, #12
 8002726:	4325      	orrs	r5, r4
 8002728:	032d      	lsls	r5, r5, #12
 800272a:	4c48      	ldr	r4, [pc, #288]	@ (800284c <__aeabi_dsub+0x354>)
 800272c:	0b2d      	lsrs	r5, r5, #12
 800272e:	e78c      	b.n	800264a <__aeabi_dsub+0x152>
 8002730:	4661      	mov	r1, ip
 8002732:	9b02      	ldr	r3, [sp, #8]
 8002734:	4319      	orrs	r1, r3
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x242>
 8002738:	e0cc      	b.n	80028d4 <__aeabi_dsub+0x3dc>
 800273a:	0029      	movs	r1, r5
 800273c:	3901      	subs	r1, #1
 800273e:	2d01      	cmp	r5, #1
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x24c>
 8002742:	e188      	b.n	8002a56 <__aeabi_dsub+0x55e>
 8002744:	4295      	cmp	r5, r2
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x252>
 8002748:	e0aa      	b.n	80028a0 <__aeabi_dsub+0x3a8>
 800274a:	2501      	movs	r5, #1
 800274c:	2938      	cmp	r1, #56	@ 0x38
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x25a>
 8002750:	e72f      	b.n	80025b2 <__aeabi_dsub+0xba>
 8002752:	468a      	mov	sl, r1
 8002754:	e718      	b.n	8002588 <__aeabi_dsub+0x90>
 8002756:	2201      	movs	r2, #1
 8002758:	4051      	eors	r1, r2
 800275a:	428e      	cmp	r6, r1
 800275c:	d1d0      	bne.n	8002700 <__aeabi_dsub+0x208>
 800275e:	4653      	mov	r3, sl
 8002760:	2b00      	cmp	r3, #0
 8002762:	d100      	bne.n	8002766 <__aeabi_dsub+0x26e>
 8002764:	e0be      	b.n	80028e4 <__aeabi_dsub+0x3ec>
 8002766:	2f00      	cmp	r7, #0
 8002768:	d000      	beq.n	800276c <__aeabi_dsub+0x274>
 800276a:	e138      	b.n	80029de <__aeabi_dsub+0x4e6>
 800276c:	46ca      	mov	sl, r9
 800276e:	0022      	movs	r2, r4
 8002770:	4302      	orrs	r2, r0
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x27e>
 8002774:	e1e2      	b.n	8002b3c <__aeabi_dsub+0x644>
 8002776:	4653      	mov	r3, sl
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x288>
 800277e:	e20d      	b.n	8002b9c <__aeabi_dsub+0x6a4>
 8002780:	4a32      	ldr	r2, [pc, #200]	@ (800284c <__aeabi_dsub+0x354>)
 8002782:	4592      	cmp	sl, r2
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x290>
 8002786:	e1d2      	b.n	8002b2e <__aeabi_dsub+0x636>
 8002788:	2701      	movs	r7, #1
 800278a:	2938      	cmp	r1, #56	@ 0x38
 800278c:	dc13      	bgt.n	80027b6 <__aeabi_dsub+0x2be>
 800278e:	291f      	cmp	r1, #31
 8002790:	dd00      	ble.n	8002794 <__aeabi_dsub+0x29c>
 8002792:	e1ee      	b.n	8002b72 <__aeabi_dsub+0x67a>
 8002794:	2220      	movs	r2, #32
 8002796:	9b02      	ldr	r3, [sp, #8]
 8002798:	1a52      	subs	r2, r2, r1
 800279a:	0025      	movs	r5, r4
 800279c:	0007      	movs	r7, r0
 800279e:	469a      	mov	sl, r3
 80027a0:	40cc      	lsrs	r4, r1
 80027a2:	4090      	lsls	r0, r2
 80027a4:	4095      	lsls	r5, r2
 80027a6:	40cf      	lsrs	r7, r1
 80027a8:	44a2      	add	sl, r4
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4653      	mov	r3, sl
 80027b0:	432f      	orrs	r7, r5
 80027b2:	4307      	orrs	r7, r0
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	003d      	movs	r5, r7
 80027b8:	4465      	add	r5, ip
 80027ba:	4565      	cmp	r5, ip
 80027bc:	4192      	sbcs	r2, r2
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	4252      	negs	r2, r2
 80027c2:	464f      	mov	r7, r9
 80027c4:	18d4      	adds	r4, r2, r3
 80027c6:	e780      	b.n	80026ca <__aeabi_dsub+0x1d2>
 80027c8:	4a23      	ldr	r2, [pc, #140]	@ (8002858 <__aeabi_dsub+0x360>)
 80027ca:	1c7d      	adds	r5, r7, #1
 80027cc:	4215      	tst	r5, r2
 80027ce:	d000      	beq.n	80027d2 <__aeabi_dsub+0x2da>
 80027d0:	e0aa      	b.n	8002928 <__aeabi_dsub+0x430>
 80027d2:	4662      	mov	r2, ip
 80027d4:	0025      	movs	r5, r4
 80027d6:	9b02      	ldr	r3, [sp, #8]
 80027d8:	4305      	orrs	r5, r0
 80027da:	431a      	orrs	r2, r3
 80027dc:	2f00      	cmp	r7, #0
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x2ea>
 80027e0:	e0f5      	b.n	80029ce <__aeabi_dsub+0x4d6>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x2f0>
 80027e6:	e16b      	b.n	8002ac0 <__aeabi_dsub+0x5c8>
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0x2f6>
 80027ec:	e152      	b.n	8002a94 <__aeabi_dsub+0x59c>
 80027ee:	4663      	mov	r3, ip
 80027f0:	1ac5      	subs	r5, r0, r3
 80027f2:	9b02      	ldr	r3, [sp, #8]
 80027f4:	1ae2      	subs	r2, r4, r3
 80027f6:	42a8      	cmp	r0, r5
 80027f8:	419b      	sbcs	r3, r3
 80027fa:	425b      	negs	r3, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	021a      	lsls	r2, r3, #8
 8002800:	d400      	bmi.n	8002804 <__aeabi_dsub+0x30c>
 8002802:	e1d5      	b.n	8002bb0 <__aeabi_dsub+0x6b8>
 8002804:	4663      	mov	r3, ip
 8002806:	1a1d      	subs	r5, r3, r0
 8002808:	45ac      	cmp	ip, r5
 800280a:	4192      	sbcs	r2, r2
 800280c:	2601      	movs	r6, #1
 800280e:	9b02      	ldr	r3, [sp, #8]
 8002810:	4252      	negs	r2, r2
 8002812:	1b1c      	subs	r4, r3, r4
 8002814:	4688      	mov	r8, r1
 8002816:	1aa4      	subs	r4, r4, r2
 8002818:	400e      	ands	r6, r1
 800281a:	e6f6      	b.n	800260a <__aeabi_dsub+0x112>
 800281c:	4297      	cmp	r7, r2
 800281e:	d03f      	beq.n	80028a0 <__aeabi_dsub+0x3a8>
 8002820:	4652      	mov	r2, sl
 8002822:	2501      	movs	r5, #1
 8002824:	2a38      	cmp	r2, #56	@ 0x38
 8002826:	dd00      	ble.n	800282a <__aeabi_dsub+0x332>
 8002828:	e74a      	b.n	80026c0 <__aeabi_dsub+0x1c8>
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	9b02      	ldr	r3, [sp, #8]
 800282e:	0412      	lsls	r2, r2, #16
 8002830:	4313      	orrs	r3, r2
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	e72d      	b.n	8002692 <__aeabi_dsub+0x19a>
 8002836:	003c      	movs	r4, r7
 8002838:	2500      	movs	r5, #0
 800283a:	2200      	movs	r2, #0
 800283c:	e705      	b.n	800264a <__aeabi_dsub+0x152>
 800283e:	2307      	movs	r3, #7
 8002840:	402b      	ands	r3, r5
 8002842:	2b00      	cmp	r3, #0
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x350>
 8002846:	e6e2      	b.n	800260e <__aeabi_dsub+0x116>
 8002848:	e06b      	b.n	8002922 <__aeabi_dsub+0x42a>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	ff7fffff 	.word	0xff7fffff
 8002854:	fffff801 	.word	0xfffff801
 8002858:	000007fe 	.word	0x000007fe
 800285c:	0028      	movs	r0, r5
 800285e:	f000 fb27 	bl	8002eb0 <__clzsi2>
 8002862:	0003      	movs	r3, r0
 8002864:	3318      	adds	r3, #24
 8002866:	2b1f      	cmp	r3, #31
 8002868:	dc00      	bgt.n	800286c <__aeabi_dsub+0x374>
 800286a:	e6b4      	b.n	80025d6 <__aeabi_dsub+0xde>
 800286c:	002a      	movs	r2, r5
 800286e:	3808      	subs	r0, #8
 8002870:	4082      	lsls	r2, r0
 8002872:	429f      	cmp	r7, r3
 8002874:	dd00      	ble.n	8002878 <__aeabi_dsub+0x380>
 8002876:	e0b9      	b.n	80029ec <__aeabi_dsub+0x4f4>
 8002878:	1bdb      	subs	r3, r3, r7
 800287a:	1c58      	adds	r0, r3, #1
 800287c:	281f      	cmp	r0, #31
 800287e:	dc00      	bgt.n	8002882 <__aeabi_dsub+0x38a>
 8002880:	e1a0      	b.n	8002bc4 <__aeabi_dsub+0x6cc>
 8002882:	0015      	movs	r5, r2
 8002884:	3b1f      	subs	r3, #31
 8002886:	40dd      	lsrs	r5, r3
 8002888:	2820      	cmp	r0, #32
 800288a:	d005      	beq.n	8002898 <__aeabi_dsub+0x3a0>
 800288c:	2340      	movs	r3, #64	@ 0x40
 800288e:	1a1b      	subs	r3, r3, r0
 8002890:	409a      	lsls	r2, r3
 8002892:	1e53      	subs	r3, r2, #1
 8002894:	419a      	sbcs	r2, r3
 8002896:	4315      	orrs	r5, r2
 8002898:	2307      	movs	r3, #7
 800289a:	2700      	movs	r7, #0
 800289c:	402b      	ands	r3, r5
 800289e:	e7d0      	b.n	8002842 <__aeabi_dsub+0x34a>
 80028a0:	08c0      	lsrs	r0, r0, #3
 80028a2:	0762      	lsls	r2, r4, #29
 80028a4:	4302      	orrs	r2, r0
 80028a6:	08e4      	lsrs	r4, r4, #3
 80028a8:	e737      	b.n	800271a <__aeabi_dsub+0x222>
 80028aa:	08ea      	lsrs	r2, r5, #3
 80028ac:	0763      	lsls	r3, r4, #29
 80028ae:	431a      	orrs	r2, r3
 80028b0:	4bd3      	ldr	r3, [pc, #844]	@ (8002c00 <__aeabi_dsub+0x708>)
 80028b2:	08e4      	lsrs	r4, r4, #3
 80028b4:	429f      	cmp	r7, r3
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x3c2>
 80028b8:	e72f      	b.n	800271a <__aeabi_dsub+0x222>
 80028ba:	0324      	lsls	r4, r4, #12
 80028bc:	0b25      	lsrs	r5, r4, #12
 80028be:	057c      	lsls	r4, r7, #21
 80028c0:	0d64      	lsrs	r4, r4, #21
 80028c2:	e6c2      	b.n	800264a <__aeabi_dsub+0x152>
 80028c4:	46ca      	mov	sl, r9
 80028c6:	0022      	movs	r2, r4
 80028c8:	4302      	orrs	r2, r0
 80028ca:	d158      	bne.n	800297e <__aeabi_dsub+0x486>
 80028cc:	4663      	mov	r3, ip
 80028ce:	000e      	movs	r6, r1
 80028d0:	9c02      	ldr	r4, [sp, #8]
 80028d2:	9303      	str	r3, [sp, #12]
 80028d4:	9b03      	ldr	r3, [sp, #12]
 80028d6:	4657      	mov	r7, sl
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	e7e7      	b.n	80028ac <__aeabi_dsub+0x3b4>
 80028dc:	4cc9      	ldr	r4, [pc, #804]	@ (8002c04 <__aeabi_dsub+0x70c>)
 80028de:	1aff      	subs	r7, r7, r3
 80028e0:	4014      	ands	r4, r2
 80028e2:	e692      	b.n	800260a <__aeabi_dsub+0x112>
 80028e4:	4dc8      	ldr	r5, [pc, #800]	@ (8002c08 <__aeabi_dsub+0x710>)
 80028e6:	1c7a      	adds	r2, r7, #1
 80028e8:	422a      	tst	r2, r5
 80028ea:	d000      	beq.n	80028ee <__aeabi_dsub+0x3f6>
 80028ec:	e084      	b.n	80029f8 <__aeabi_dsub+0x500>
 80028ee:	0022      	movs	r2, r4
 80028f0:	4302      	orrs	r2, r0
 80028f2:	2f00      	cmp	r7, #0
 80028f4:	d000      	beq.n	80028f8 <__aeabi_dsub+0x400>
 80028f6:	e0ef      	b.n	8002ad8 <__aeabi_dsub+0x5e0>
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x406>
 80028fc:	e0e5      	b.n	8002aca <__aeabi_dsub+0x5d2>
 80028fe:	4662      	mov	r2, ip
 8002900:	9902      	ldr	r1, [sp, #8]
 8002902:	430a      	orrs	r2, r1
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x410>
 8002906:	e0c5      	b.n	8002a94 <__aeabi_dsub+0x59c>
 8002908:	4663      	mov	r3, ip
 800290a:	18c5      	adds	r5, r0, r3
 800290c:	468c      	mov	ip, r1
 800290e:	4285      	cmp	r5, r0
 8002910:	4180      	sbcs	r0, r0
 8002912:	4464      	add	r4, ip
 8002914:	4240      	negs	r0, r0
 8002916:	1824      	adds	r4, r4, r0
 8002918:	0223      	lsls	r3, r4, #8
 800291a:	d502      	bpl.n	8002922 <__aeabi_dsub+0x42a>
 800291c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c04 <__aeabi_dsub+0x70c>)
 800291e:	3701      	adds	r7, #1
 8002920:	401c      	ands	r4, r3
 8002922:	46ba      	mov	sl, r7
 8002924:	9503      	str	r5, [sp, #12]
 8002926:	e7d5      	b.n	80028d4 <__aeabi_dsub+0x3dc>
 8002928:	4662      	mov	r2, ip
 800292a:	1a85      	subs	r5, r0, r2
 800292c:	42a8      	cmp	r0, r5
 800292e:	4192      	sbcs	r2, r2
 8002930:	4252      	negs	r2, r2
 8002932:	4691      	mov	r9, r2
 8002934:	9b02      	ldr	r3, [sp, #8]
 8002936:	1ae3      	subs	r3, r4, r3
 8002938:	001a      	movs	r2, r3
 800293a:	464b      	mov	r3, r9
 800293c:	1ad2      	subs	r2, r2, r3
 800293e:	0013      	movs	r3, r2
 8002940:	4691      	mov	r9, r2
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	d46c      	bmi.n	8002a20 <__aeabi_dsub+0x528>
 8002946:	464a      	mov	r2, r9
 8002948:	464c      	mov	r4, r9
 800294a:	432a      	orrs	r2, r5
 800294c:	d000      	beq.n	8002950 <__aeabi_dsub+0x458>
 800294e:	e63a      	b.n	80025c6 <__aeabi_dsub+0xce>
 8002950:	2600      	movs	r6, #0
 8002952:	2400      	movs	r4, #0
 8002954:	2500      	movs	r5, #0
 8002956:	e678      	b.n	800264a <__aeabi_dsub+0x152>
 8002958:	9902      	ldr	r1, [sp, #8]
 800295a:	4653      	mov	r3, sl
 800295c:	000d      	movs	r5, r1
 800295e:	3a20      	subs	r2, #32
 8002960:	40d5      	lsrs	r5, r2
 8002962:	2b20      	cmp	r3, #32
 8002964:	d006      	beq.n	8002974 <__aeabi_dsub+0x47c>
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	000b      	movs	r3, r1
 800296c:	4093      	lsls	r3, r2
 800296e:	4662      	mov	r2, ip
 8002970:	431a      	orrs	r2, r3
 8002972:	4693      	mov	fp, r2
 8002974:	465b      	mov	r3, fp
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	4193      	sbcs	r3, r2
 800297a:	431d      	orrs	r5, r3
 800297c:	e619      	b.n	80025b2 <__aeabi_dsub+0xba>
 800297e:	4653      	mov	r3, sl
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x490>
 8002986:	e0c6      	b.n	8002b16 <__aeabi_dsub+0x61e>
 8002988:	4e9d      	ldr	r6, [pc, #628]	@ (8002c00 <__aeabi_dsub+0x708>)
 800298a:	45b2      	cmp	sl, r6
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x498>
 800298e:	e6bd      	b.n	800270c <__aeabi_dsub+0x214>
 8002990:	4688      	mov	r8, r1
 8002992:	000e      	movs	r6, r1
 8002994:	2501      	movs	r5, #1
 8002996:	2a38      	cmp	r2, #56	@ 0x38
 8002998:	dc10      	bgt.n	80029bc <__aeabi_dsub+0x4c4>
 800299a:	2a1f      	cmp	r2, #31
 800299c:	dc7f      	bgt.n	8002a9e <__aeabi_dsub+0x5a6>
 800299e:	2120      	movs	r1, #32
 80029a0:	0025      	movs	r5, r4
 80029a2:	1a89      	subs	r1, r1, r2
 80029a4:	0007      	movs	r7, r0
 80029a6:	4088      	lsls	r0, r1
 80029a8:	408d      	lsls	r5, r1
 80029aa:	40d7      	lsrs	r7, r2
 80029ac:	40d4      	lsrs	r4, r2
 80029ae:	1e41      	subs	r1, r0, #1
 80029b0:	4188      	sbcs	r0, r1
 80029b2:	9b02      	ldr	r3, [sp, #8]
 80029b4:	433d      	orrs	r5, r7
 80029b6:	1b1b      	subs	r3, r3, r4
 80029b8:	4305      	orrs	r5, r0
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	4662      	mov	r2, ip
 80029be:	1b55      	subs	r5, r2, r5
 80029c0:	45ac      	cmp	ip, r5
 80029c2:	4192      	sbcs	r2, r2
 80029c4:	9b02      	ldr	r3, [sp, #8]
 80029c6:	4252      	negs	r2, r2
 80029c8:	464f      	mov	r7, r9
 80029ca:	1a9c      	subs	r4, r3, r2
 80029cc:	e5f6      	b.n	80025bc <__aeabi_dsub+0xc4>
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d000      	beq.n	80029d4 <__aeabi_dsub+0x4dc>
 80029d2:	e0b7      	b.n	8002b44 <__aeabi_dsub+0x64c>
 80029d4:	2a00      	cmp	r2, #0
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x4e2>
 80029d8:	e0f0      	b.n	8002bbc <__aeabi_dsub+0x6c4>
 80029da:	2601      	movs	r6, #1
 80029dc:	400e      	ands	r6, r1
 80029de:	4663      	mov	r3, ip
 80029e0:	9802      	ldr	r0, [sp, #8]
 80029e2:	08d9      	lsrs	r1, r3, #3
 80029e4:	0742      	lsls	r2, r0, #29
 80029e6:	430a      	orrs	r2, r1
 80029e8:	08c4      	lsrs	r4, r0, #3
 80029ea:	e696      	b.n	800271a <__aeabi_dsub+0x222>
 80029ec:	4c85      	ldr	r4, [pc, #532]	@ (8002c04 <__aeabi_dsub+0x70c>)
 80029ee:	1aff      	subs	r7, r7, r3
 80029f0:	4014      	ands	r4, r2
 80029f2:	0762      	lsls	r2, r4, #29
 80029f4:	08e4      	lsrs	r4, r4, #3
 80029f6:	e760      	b.n	80028ba <__aeabi_dsub+0x3c2>
 80029f8:	4981      	ldr	r1, [pc, #516]	@ (8002c00 <__aeabi_dsub+0x708>)
 80029fa:	428a      	cmp	r2, r1
 80029fc:	d100      	bne.n	8002a00 <__aeabi_dsub+0x508>
 80029fe:	e0c9      	b.n	8002b94 <__aeabi_dsub+0x69c>
 8002a00:	4663      	mov	r3, ip
 8002a02:	18c1      	adds	r1, r0, r3
 8002a04:	4281      	cmp	r1, r0
 8002a06:	4180      	sbcs	r0, r0
 8002a08:	9b02      	ldr	r3, [sp, #8]
 8002a0a:	4240      	negs	r0, r0
 8002a0c:	18e3      	adds	r3, r4, r3
 8002a0e:	181b      	adds	r3, r3, r0
 8002a10:	07dd      	lsls	r5, r3, #31
 8002a12:	085c      	lsrs	r4, r3, #1
 8002a14:	2307      	movs	r3, #7
 8002a16:	0849      	lsrs	r1, r1, #1
 8002a18:	430d      	orrs	r5, r1
 8002a1a:	0017      	movs	r7, r2
 8002a1c:	402b      	ands	r3, r5
 8002a1e:	e710      	b.n	8002842 <__aeabi_dsub+0x34a>
 8002a20:	4663      	mov	r3, ip
 8002a22:	1a1d      	subs	r5, r3, r0
 8002a24:	45ac      	cmp	ip, r5
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	2601      	movs	r6, #1
 8002a2a:	9b02      	ldr	r3, [sp, #8]
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	1b1c      	subs	r4, r3, r4
 8002a30:	4688      	mov	r8, r1
 8002a32:	1aa4      	subs	r4, r4, r2
 8002a34:	400e      	ands	r6, r1
 8002a36:	e5c6      	b.n	80025c6 <__aeabi_dsub+0xce>
 8002a38:	4663      	mov	r3, ip
 8002a3a:	18c5      	adds	r5, r0, r3
 8002a3c:	9b02      	ldr	r3, [sp, #8]
 8002a3e:	4285      	cmp	r5, r0
 8002a40:	4180      	sbcs	r0, r0
 8002a42:	469c      	mov	ip, r3
 8002a44:	4240      	negs	r0, r0
 8002a46:	4464      	add	r4, ip
 8002a48:	1824      	adds	r4, r4, r0
 8002a4a:	2701      	movs	r7, #1
 8002a4c:	0223      	lsls	r3, r4, #8
 8002a4e:	d400      	bmi.n	8002a52 <__aeabi_dsub+0x55a>
 8002a50:	e6f5      	b.n	800283e <__aeabi_dsub+0x346>
 8002a52:	2702      	movs	r7, #2
 8002a54:	e641      	b.n	80026da <__aeabi_dsub+0x1e2>
 8002a56:	4663      	mov	r3, ip
 8002a58:	1ac5      	subs	r5, r0, r3
 8002a5a:	42a8      	cmp	r0, r5
 8002a5c:	4180      	sbcs	r0, r0
 8002a5e:	9b02      	ldr	r3, [sp, #8]
 8002a60:	4240      	negs	r0, r0
 8002a62:	1ae4      	subs	r4, r4, r3
 8002a64:	2701      	movs	r7, #1
 8002a66:	1a24      	subs	r4, r4, r0
 8002a68:	e5a8      	b.n	80025bc <__aeabi_dsub+0xc4>
 8002a6a:	9d02      	ldr	r5, [sp, #8]
 8002a6c:	4652      	mov	r2, sl
 8002a6e:	002b      	movs	r3, r5
 8002a70:	3a20      	subs	r2, #32
 8002a72:	40d3      	lsrs	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d006      	beq.n	8002a8a <__aeabi_dsub+0x592>
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	1ad2      	subs	r2, r2, r3
 8002a80:	002b      	movs	r3, r5
 8002a82:	4093      	lsls	r3, r2
 8002a84:	4662      	mov	r2, ip
 8002a86:	431a      	orrs	r2, r3
 8002a88:	4693      	mov	fp, r2
 8002a8a:	465d      	mov	r5, fp
 8002a8c:	1e6b      	subs	r3, r5, #1
 8002a8e:	419d      	sbcs	r5, r3
 8002a90:	430d      	orrs	r5, r1
 8002a92:	e615      	b.n	80026c0 <__aeabi_dsub+0x1c8>
 8002a94:	0762      	lsls	r2, r4, #29
 8002a96:	08c0      	lsrs	r0, r0, #3
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	08e4      	lsrs	r4, r4, #3
 8002a9c:	e70d      	b.n	80028ba <__aeabi_dsub+0x3c2>
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0027      	movs	r7, r4
 8002aa2:	3920      	subs	r1, #32
 8002aa4:	40cf      	lsrs	r7, r1
 8002aa6:	2a20      	cmp	r2, #32
 8002aa8:	d005      	beq.n	8002ab6 <__aeabi_dsub+0x5be>
 8002aaa:	2140      	movs	r1, #64	@ 0x40
 8002aac:	1a8a      	subs	r2, r1, r2
 8002aae:	4094      	lsls	r4, r2
 8002ab0:	0025      	movs	r5, r4
 8002ab2:	4305      	orrs	r5, r0
 8002ab4:	9503      	str	r5, [sp, #12]
 8002ab6:	9d03      	ldr	r5, [sp, #12]
 8002ab8:	1e6a      	subs	r2, r5, #1
 8002aba:	4195      	sbcs	r5, r2
 8002abc:	433d      	orrs	r5, r7
 8002abe:	e77d      	b.n	80029bc <__aeabi_dsub+0x4c4>
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x5ce>
 8002ac4:	e744      	b.n	8002950 <__aeabi_dsub+0x458>
 8002ac6:	2601      	movs	r6, #1
 8002ac8:	400e      	ands	r6, r1
 8002aca:	4663      	mov	r3, ip
 8002acc:	08d9      	lsrs	r1, r3, #3
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	075a      	lsls	r2, r3, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	08dc      	lsrs	r4, r3, #3
 8002ad6:	e6f0      	b.n	80028ba <__aeabi_dsub+0x3c2>
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d028      	beq.n	8002b2e <__aeabi_dsub+0x636>
 8002adc:	4662      	mov	r2, ip
 8002ade:	9f02      	ldr	r7, [sp, #8]
 8002ae0:	08c0      	lsrs	r0, r0, #3
 8002ae2:	433a      	orrs	r2, r7
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x5f0>
 8002ae6:	e6dc      	b.n	80028a2 <__aeabi_dsub+0x3aa>
 8002ae8:	0762      	lsls	r2, r4, #29
 8002aea:	4310      	orrs	r0, r2
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	08e4      	lsrs	r4, r4, #3
 8002af0:	0312      	lsls	r2, r2, #12
 8002af2:	4214      	tst	r4, r2
 8002af4:	d009      	beq.n	8002b0a <__aeabi_dsub+0x612>
 8002af6:	08fd      	lsrs	r5, r7, #3
 8002af8:	4215      	tst	r5, r2
 8002afa:	d106      	bne.n	8002b0a <__aeabi_dsub+0x612>
 8002afc:	4663      	mov	r3, ip
 8002afe:	2601      	movs	r6, #1
 8002b00:	002c      	movs	r4, r5
 8002b02:	08d8      	lsrs	r0, r3, #3
 8002b04:	077b      	lsls	r3, r7, #29
 8002b06:	4318      	orrs	r0, r3
 8002b08:	400e      	ands	r6, r1
 8002b0a:	0f42      	lsrs	r2, r0, #29
 8002b0c:	00c0      	lsls	r0, r0, #3
 8002b0e:	08c0      	lsrs	r0, r0, #3
 8002b10:	0752      	lsls	r2, r2, #29
 8002b12:	4302      	orrs	r2, r0
 8002b14:	e601      	b.n	800271a <__aeabi_dsub+0x222>
 8002b16:	4663      	mov	r3, ip
 8002b18:	1a1d      	subs	r5, r3, r0
 8002b1a:	45ac      	cmp	ip, r5
 8002b1c:	4192      	sbcs	r2, r2
 8002b1e:	9b02      	ldr	r3, [sp, #8]
 8002b20:	4252      	negs	r2, r2
 8002b22:	1b1c      	subs	r4, r3, r4
 8002b24:	000e      	movs	r6, r1
 8002b26:	4688      	mov	r8, r1
 8002b28:	2701      	movs	r7, #1
 8002b2a:	1aa4      	subs	r4, r4, r2
 8002b2c:	e546      	b.n	80025bc <__aeabi_dsub+0xc4>
 8002b2e:	4663      	mov	r3, ip
 8002b30:	08d9      	lsrs	r1, r3, #3
 8002b32:	9b02      	ldr	r3, [sp, #8]
 8002b34:	075a      	lsls	r2, r3, #29
 8002b36:	430a      	orrs	r2, r1
 8002b38:	08dc      	lsrs	r4, r3, #3
 8002b3a:	e5ee      	b.n	800271a <__aeabi_dsub+0x222>
 8002b3c:	4663      	mov	r3, ip
 8002b3e:	9c02      	ldr	r4, [sp, #8]
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	e6c7      	b.n	80028d4 <__aeabi_dsub+0x3dc>
 8002b44:	08c0      	lsrs	r0, r0, #3
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x654>
 8002b4a:	e6aa      	b.n	80028a2 <__aeabi_dsub+0x3aa>
 8002b4c:	0762      	lsls	r2, r4, #29
 8002b4e:	4310      	orrs	r0, r2
 8002b50:	2280      	movs	r2, #128	@ 0x80
 8002b52:	08e4      	lsrs	r4, r4, #3
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	4214      	tst	r4, r2
 8002b58:	d0d7      	beq.n	8002b0a <__aeabi_dsub+0x612>
 8002b5a:	9f02      	ldr	r7, [sp, #8]
 8002b5c:	08fd      	lsrs	r5, r7, #3
 8002b5e:	4215      	tst	r5, r2
 8002b60:	d1d3      	bne.n	8002b0a <__aeabi_dsub+0x612>
 8002b62:	4663      	mov	r3, ip
 8002b64:	2601      	movs	r6, #1
 8002b66:	08d8      	lsrs	r0, r3, #3
 8002b68:	077b      	lsls	r3, r7, #29
 8002b6a:	002c      	movs	r4, r5
 8002b6c:	4318      	orrs	r0, r3
 8002b6e:	400e      	ands	r6, r1
 8002b70:	e7cb      	b.n	8002b0a <__aeabi_dsub+0x612>
 8002b72:	000a      	movs	r2, r1
 8002b74:	0027      	movs	r7, r4
 8002b76:	3a20      	subs	r2, #32
 8002b78:	40d7      	lsrs	r7, r2
 8002b7a:	2920      	cmp	r1, #32
 8002b7c:	d005      	beq.n	8002b8a <__aeabi_dsub+0x692>
 8002b7e:	2240      	movs	r2, #64	@ 0x40
 8002b80:	1a52      	subs	r2, r2, r1
 8002b82:	4094      	lsls	r4, r2
 8002b84:	0025      	movs	r5, r4
 8002b86:	4305      	orrs	r5, r0
 8002b88:	9503      	str	r5, [sp, #12]
 8002b8a:	9d03      	ldr	r5, [sp, #12]
 8002b8c:	1e6a      	subs	r2, r5, #1
 8002b8e:	4195      	sbcs	r5, r2
 8002b90:	432f      	orrs	r7, r5
 8002b92:	e610      	b.n	80027b6 <__aeabi_dsub+0x2be>
 8002b94:	0014      	movs	r4, r2
 8002b96:	2500      	movs	r5, #0
 8002b98:	2200      	movs	r2, #0
 8002b9a:	e556      	b.n	800264a <__aeabi_dsub+0x152>
 8002b9c:	9b02      	ldr	r3, [sp, #8]
 8002b9e:	4460      	add	r0, ip
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4560      	cmp	r0, ip
 8002ba4:	4192      	sbcs	r2, r2
 8002ba6:	444c      	add	r4, r9
 8002ba8:	4252      	negs	r2, r2
 8002baa:	0005      	movs	r5, r0
 8002bac:	18a4      	adds	r4, r4, r2
 8002bae:	e74c      	b.n	8002a4a <__aeabi_dsub+0x552>
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	001c      	movs	r4, r3
 8002bb4:	432a      	orrs	r2, r5
 8002bb6:	d000      	beq.n	8002bba <__aeabi_dsub+0x6c2>
 8002bb8:	e6b3      	b.n	8002922 <__aeabi_dsub+0x42a>
 8002bba:	e6c9      	b.n	8002950 <__aeabi_dsub+0x458>
 8002bbc:	2480      	movs	r4, #128	@ 0x80
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	0324      	lsls	r4, r4, #12
 8002bc2:	e5ae      	b.n	8002722 <__aeabi_dsub+0x22a>
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	1a09      	subs	r1, r1, r0
 8002bca:	e517      	b.n	80025fc <__aeabi_dsub+0x104>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2500      	movs	r5, #0
 8002bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8002c00 <__aeabi_dsub+0x708>)
 8002bd2:	e53a      	b.n	800264a <__aeabi_dsub+0x152>
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x6e2>
 8002bd8:	e5f6      	b.n	80027c8 <__aeabi_dsub+0x2d0>
 8002bda:	464b      	mov	r3, r9
 8002bdc:	1bda      	subs	r2, r3, r7
 8002bde:	4692      	mov	sl, r2
 8002be0:	2f00      	cmp	r7, #0
 8002be2:	d100      	bne.n	8002be6 <__aeabi_dsub+0x6ee>
 8002be4:	e66f      	b.n	80028c6 <__aeabi_dsub+0x3ce>
 8002be6:	2a38      	cmp	r2, #56	@ 0x38
 8002be8:	dc05      	bgt.n	8002bf6 <__aeabi_dsub+0x6fe>
 8002bea:	2680      	movs	r6, #128	@ 0x80
 8002bec:	0436      	lsls	r6, r6, #16
 8002bee:	4334      	orrs	r4, r6
 8002bf0:	4688      	mov	r8, r1
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	e6d1      	b.n	800299a <__aeabi_dsub+0x4a2>
 8002bf6:	4688      	mov	r8, r1
 8002bf8:	000e      	movs	r6, r1
 8002bfa:	2501      	movs	r5, #1
 8002bfc:	e6de      	b.n	80029bc <__aeabi_dsub+0x4c4>
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	000007ff 	.word	0x000007ff
 8002c04:	ff7fffff 	.word	0xff7fffff
 8002c08:	000007fe 	.word	0x000007fe
 8002c0c:	2d00      	cmp	r5, #0
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x71a>
 8002c10:	e668      	b.n	80028e4 <__aeabi_dsub+0x3ec>
 8002c12:	464b      	mov	r3, r9
 8002c14:	1bd9      	subs	r1, r3, r7
 8002c16:	2f00      	cmp	r7, #0
 8002c18:	d101      	bne.n	8002c1e <__aeabi_dsub+0x726>
 8002c1a:	468a      	mov	sl, r1
 8002c1c:	e5a7      	b.n	800276e <__aeabi_dsub+0x276>
 8002c1e:	2701      	movs	r7, #1
 8002c20:	2938      	cmp	r1, #56	@ 0x38
 8002c22:	dd00      	ble.n	8002c26 <__aeabi_dsub+0x72e>
 8002c24:	e5c7      	b.n	80027b6 <__aeabi_dsub+0x2be>
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	0412      	lsls	r2, r2, #16
 8002c2a:	4314      	orrs	r4, r2
 8002c2c:	e5af      	b.n	800278e <__aeabi_dsub+0x296>
 8002c2e:	46c0      	nop			@ (mov r8, r8)

08002c30 <__aeabi_dcmpun>:
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	46c6      	mov	lr, r8
 8002c34:	031e      	lsls	r6, r3, #12
 8002c36:	0b36      	lsrs	r6, r6, #12
 8002c38:	46b0      	mov	r8, r6
 8002c3a:	4e0d      	ldr	r6, [pc, #52]	@ (8002c70 <__aeabi_dcmpun+0x40>)
 8002c3c:	030c      	lsls	r4, r1, #12
 8002c3e:	004d      	lsls	r5, r1, #1
 8002c40:	005f      	lsls	r7, r3, #1
 8002c42:	b500      	push	{lr}
 8002c44:	0b24      	lsrs	r4, r4, #12
 8002c46:	0d6d      	lsrs	r5, r5, #21
 8002c48:	0d7f      	lsrs	r7, r7, #21
 8002c4a:	42b5      	cmp	r5, r6
 8002c4c:	d00b      	beq.n	8002c66 <__aeabi_dcmpun+0x36>
 8002c4e:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <__aeabi_dcmpun+0x40>)
 8002c50:	2000      	movs	r0, #0
 8002c52:	428f      	cmp	r7, r1
 8002c54:	d104      	bne.n	8002c60 <__aeabi_dcmpun+0x30>
 8002c56:	4646      	mov	r6, r8
 8002c58:	4316      	orrs	r6, r2
 8002c5a:	0030      	movs	r0, r6
 8002c5c:	1e43      	subs	r3, r0, #1
 8002c5e:	4198      	sbcs	r0, r3
 8002c60:	bc80      	pop	{r7}
 8002c62:	46b8      	mov	r8, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	4304      	orrs	r4, r0
 8002c68:	2001      	movs	r0, #1
 8002c6a:	2c00      	cmp	r4, #0
 8002c6c:	d1f8      	bne.n	8002c60 <__aeabi_dcmpun+0x30>
 8002c6e:	e7ee      	b.n	8002c4e <__aeabi_dcmpun+0x1e>
 8002c70:	000007ff 	.word	0x000007ff

08002c74 <__aeabi_i2d>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d016      	beq.n	8002ca8 <__aeabi_i2d+0x34>
 8002c7a:	17c3      	asrs	r3, r0, #31
 8002c7c:	18c5      	adds	r5, r0, r3
 8002c7e:	405d      	eors	r5, r3
 8002c80:	0fc4      	lsrs	r4, r0, #31
 8002c82:	0028      	movs	r0, r5
 8002c84:	f000 f914 	bl	8002eb0 <__clzsi2>
 8002c88:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <__aeabi_i2d+0x58>)
 8002c8a:	1a1b      	subs	r3, r3, r0
 8002c8c:	055b      	lsls	r3, r3, #21
 8002c8e:	0d5b      	lsrs	r3, r3, #21
 8002c90:	280a      	cmp	r0, #10
 8002c92:	dc14      	bgt.n	8002cbe <__aeabi_i2d+0x4a>
 8002c94:	0002      	movs	r2, r0
 8002c96:	002e      	movs	r6, r5
 8002c98:	3215      	adds	r2, #21
 8002c9a:	4096      	lsls	r6, r2
 8002c9c:	220b      	movs	r2, #11
 8002c9e:	1a12      	subs	r2, r2, r0
 8002ca0:	40d5      	lsrs	r5, r2
 8002ca2:	032d      	lsls	r5, r5, #12
 8002ca4:	0b2d      	lsrs	r5, r5, #12
 8002ca6:	e003      	b.n	8002cb0 <__aeabi_i2d+0x3c>
 8002ca8:	2400      	movs	r4, #0
 8002caa:	2300      	movs	r3, #0
 8002cac:	2500      	movs	r5, #0
 8002cae:	2600      	movs	r6, #0
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	432b      	orrs	r3, r5
 8002cb4:	07e4      	lsls	r4, r4, #31
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	0030      	movs	r0, r6
 8002cba:	0019      	movs	r1, r3
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	380b      	subs	r0, #11
 8002cc0:	4085      	lsls	r5, r0
 8002cc2:	032d      	lsls	r5, r5, #12
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	0b2d      	lsrs	r5, r5, #12
 8002cc8:	e7f2      	b.n	8002cb0 <__aeabi_i2d+0x3c>
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	0000041e 	.word	0x0000041e

08002cd0 <__aeabi_ui2d>:
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	1e04      	subs	r4, r0, #0
 8002cd4:	d010      	beq.n	8002cf8 <__aeabi_ui2d+0x28>
 8002cd6:	f000 f8eb 	bl	8002eb0 <__clzsi2>
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <__aeabi_ui2d+0x44>)
 8002cdc:	1a1b      	subs	r3, r3, r0
 8002cde:	055b      	lsls	r3, r3, #21
 8002ce0:	0d5b      	lsrs	r3, r3, #21
 8002ce2:	280a      	cmp	r0, #10
 8002ce4:	dc0f      	bgt.n	8002d06 <__aeabi_ui2d+0x36>
 8002ce6:	220b      	movs	r2, #11
 8002ce8:	0021      	movs	r1, r4
 8002cea:	1a12      	subs	r2, r2, r0
 8002cec:	40d1      	lsrs	r1, r2
 8002cee:	3015      	adds	r0, #21
 8002cf0:	030a      	lsls	r2, r1, #12
 8002cf2:	4084      	lsls	r4, r0
 8002cf4:	0b12      	lsrs	r2, r2, #12
 8002cf6:	e001      	b.n	8002cfc <__aeabi_ui2d+0x2c>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	051b      	lsls	r3, r3, #20
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	0020      	movs	r0, r4
 8002d02:	0019      	movs	r1, r3
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	0022      	movs	r2, r4
 8002d08:	380b      	subs	r0, #11
 8002d0a:	4082      	lsls	r2, r0
 8002d0c:	0312      	lsls	r2, r2, #12
 8002d0e:	2400      	movs	r4, #0
 8002d10:	0b12      	lsrs	r2, r2, #12
 8002d12:	e7f3      	b.n	8002cfc <__aeabi_ui2d+0x2c>
 8002d14:	0000041e 	.word	0x0000041e

08002d18 <__aeabi_f2d>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	0242      	lsls	r2, r0, #9
 8002d1c:	0043      	lsls	r3, r0, #1
 8002d1e:	0fc4      	lsrs	r4, r0, #31
 8002d20:	20fe      	movs	r0, #254	@ 0xfe
 8002d22:	0e1b      	lsrs	r3, r3, #24
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	0a55      	lsrs	r5, r2, #9
 8002d28:	4208      	tst	r0, r1
 8002d2a:	d00c      	beq.n	8002d46 <__aeabi_f2d+0x2e>
 8002d2c:	21e0      	movs	r1, #224	@ 0xe0
 8002d2e:	0089      	lsls	r1, r1, #2
 8002d30:	468c      	mov	ip, r1
 8002d32:	076d      	lsls	r5, r5, #29
 8002d34:	0b12      	lsrs	r2, r2, #12
 8002d36:	4463      	add	r3, ip
 8002d38:	051b      	lsls	r3, r3, #20
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	07e4      	lsls	r4, r4, #31
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	0028      	movs	r0, r5
 8002d42:	0019      	movs	r1, r3
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d114      	bne.n	8002d74 <__aeabi_f2d+0x5c>
 8002d4a:	2d00      	cmp	r5, #0
 8002d4c:	d01b      	beq.n	8002d86 <__aeabi_f2d+0x6e>
 8002d4e:	0028      	movs	r0, r5
 8002d50:	f000 f8ae 	bl	8002eb0 <__clzsi2>
 8002d54:	280a      	cmp	r0, #10
 8002d56:	dc1c      	bgt.n	8002d92 <__aeabi_f2d+0x7a>
 8002d58:	230b      	movs	r3, #11
 8002d5a:	002a      	movs	r2, r5
 8002d5c:	1a1b      	subs	r3, r3, r0
 8002d5e:	40da      	lsrs	r2, r3
 8002d60:	0003      	movs	r3, r0
 8002d62:	3315      	adds	r3, #21
 8002d64:	409d      	lsls	r5, r3
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <__aeabi_f2d+0x88>)
 8002d68:	0312      	lsls	r2, r2, #12
 8002d6a:	1a1b      	subs	r3, r3, r0
 8002d6c:	055b      	lsls	r3, r3, #21
 8002d6e:	0b12      	lsrs	r2, r2, #12
 8002d70:	0d5b      	lsrs	r3, r3, #21
 8002d72:	e7e1      	b.n	8002d38 <__aeabi_f2d+0x20>
 8002d74:	2d00      	cmp	r5, #0
 8002d76:	d009      	beq.n	8002d8c <__aeabi_f2d+0x74>
 8002d78:	0b13      	lsrs	r3, r2, #12
 8002d7a:	2280      	movs	r2, #128	@ 0x80
 8002d7c:	0312      	lsls	r2, r2, #12
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	076d      	lsls	r5, r5, #29
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <__aeabi_f2d+0x8c>)
 8002d84:	e7d8      	b.n	8002d38 <__aeabi_f2d+0x20>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2200      	movs	r2, #0
 8002d8a:	e7d5      	b.n	8002d38 <__aeabi_f2d+0x20>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <__aeabi_f2d+0x8c>)
 8002d90:	e7d2      	b.n	8002d38 <__aeabi_f2d+0x20>
 8002d92:	0003      	movs	r3, r0
 8002d94:	002a      	movs	r2, r5
 8002d96:	3b0b      	subs	r3, #11
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	e7e3      	b.n	8002d66 <__aeabi_f2d+0x4e>
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	00000389 	.word	0x00000389
 8002da4:	000007ff 	.word	0x000007ff

08002da8 <__aeabi_d2f>:
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	004b      	lsls	r3, r1, #1
 8002dac:	030f      	lsls	r7, r1, #12
 8002dae:	0d5b      	lsrs	r3, r3, #21
 8002db0:	4c3b      	ldr	r4, [pc, #236]	@ (8002ea0 <__aeabi_d2f+0xf8>)
 8002db2:	0f45      	lsrs	r5, r0, #29
 8002db4:	b083      	sub	sp, #12
 8002db6:	0a7f      	lsrs	r7, r7, #9
 8002db8:	1c5e      	adds	r6, r3, #1
 8002dba:	432f      	orrs	r7, r5
 8002dbc:	9000      	str	r0, [sp, #0]
 8002dbe:	9101      	str	r1, [sp, #4]
 8002dc0:	0fca      	lsrs	r2, r1, #31
 8002dc2:	00c5      	lsls	r5, r0, #3
 8002dc4:	4226      	tst	r6, r4
 8002dc6:	d00b      	beq.n	8002de0 <__aeabi_d2f+0x38>
 8002dc8:	4936      	ldr	r1, [pc, #216]	@ (8002ea4 <__aeabi_d2f+0xfc>)
 8002dca:	185c      	adds	r4, r3, r1
 8002dcc:	2cfe      	cmp	r4, #254	@ 0xfe
 8002dce:	dd13      	ble.n	8002df8 <__aeabi_d2f+0x50>
 8002dd0:	20ff      	movs	r0, #255	@ 0xff
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	05c0      	lsls	r0, r0, #23
 8002dd6:	4318      	orrs	r0, r3
 8002dd8:	07d2      	lsls	r2, r2, #31
 8002dda:	4310      	orrs	r0, r2
 8002ddc:	b003      	add	sp, #12
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <__aeabi_d2f+0x42>
 8002de4:	2000      	movs	r0, #0
 8002de6:	2300      	movs	r3, #0
 8002de8:	e7f4      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002dea:	433d      	orrs	r5, r7
 8002dec:	d0f0      	beq.n	8002dd0 <__aeabi_d2f+0x28>
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	03db      	lsls	r3, r3, #15
 8002df2:	20ff      	movs	r0, #255	@ 0xff
 8002df4:	433b      	orrs	r3, r7
 8002df6:	e7ed      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002df8:	2c00      	cmp	r4, #0
 8002dfa:	dd14      	ble.n	8002e26 <__aeabi_d2f+0x7e>
 8002dfc:	9b00      	ldr	r3, [sp, #0]
 8002dfe:	00ff      	lsls	r7, r7, #3
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	4183      	sbcs	r3, r0
 8002e06:	0f69      	lsrs	r1, r5, #29
 8002e08:	433b      	orrs	r3, r7
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	0759      	lsls	r1, r3, #29
 8002e0e:	d041      	beq.n	8002e94 <__aeabi_d2f+0xec>
 8002e10:	210f      	movs	r1, #15
 8002e12:	4019      	ands	r1, r3
 8002e14:	2904      	cmp	r1, #4
 8002e16:	d028      	beq.n	8002e6a <__aeabi_d2f+0xc2>
 8002e18:	3304      	adds	r3, #4
 8002e1a:	0159      	lsls	r1, r3, #5
 8002e1c:	d525      	bpl.n	8002e6a <__aeabi_d2f+0xc2>
 8002e1e:	3401      	adds	r4, #1
 8002e20:	2300      	movs	r3, #0
 8002e22:	b2e0      	uxtb	r0, r4
 8002e24:	e7d6      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002e26:	0021      	movs	r1, r4
 8002e28:	3117      	adds	r1, #23
 8002e2a:	dbdb      	blt.n	8002de4 <__aeabi_d2f+0x3c>
 8002e2c:	2180      	movs	r1, #128	@ 0x80
 8002e2e:	201e      	movs	r0, #30
 8002e30:	0409      	lsls	r1, r1, #16
 8002e32:	4339      	orrs	r1, r7
 8002e34:	1b00      	subs	r0, r0, r4
 8002e36:	281f      	cmp	r0, #31
 8002e38:	dd1b      	ble.n	8002e72 <__aeabi_d2f+0xca>
 8002e3a:	2602      	movs	r6, #2
 8002e3c:	4276      	negs	r6, r6
 8002e3e:	1b34      	subs	r4, r6, r4
 8002e40:	000e      	movs	r6, r1
 8002e42:	40e6      	lsrs	r6, r4
 8002e44:	0034      	movs	r4, r6
 8002e46:	2820      	cmp	r0, #32
 8002e48:	d004      	beq.n	8002e54 <__aeabi_d2f+0xac>
 8002e4a:	4817      	ldr	r0, [pc, #92]	@ (8002ea8 <__aeabi_d2f+0x100>)
 8002e4c:	4684      	mov	ip, r0
 8002e4e:	4463      	add	r3, ip
 8002e50:	4099      	lsls	r1, r3
 8002e52:	430d      	orrs	r5, r1
 8002e54:	002b      	movs	r3, r5
 8002e56:	1e59      	subs	r1, r3, #1
 8002e58:	418b      	sbcs	r3, r1
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	0759      	lsls	r1, r3, #29
 8002e5e:	d015      	beq.n	8002e8c <__aeabi_d2f+0xe4>
 8002e60:	210f      	movs	r1, #15
 8002e62:	2400      	movs	r4, #0
 8002e64:	4019      	ands	r1, r3
 8002e66:	2904      	cmp	r1, #4
 8002e68:	d117      	bne.n	8002e9a <__aeabi_d2f+0xf2>
 8002e6a:	019b      	lsls	r3, r3, #6
 8002e6c:	0a5b      	lsrs	r3, r3, #9
 8002e6e:	b2e0      	uxtb	r0, r4
 8002e70:	e7b0      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002e72:	4c0e      	ldr	r4, [pc, #56]	@ (8002eac <__aeabi_d2f+0x104>)
 8002e74:	191c      	adds	r4, r3, r4
 8002e76:	002b      	movs	r3, r5
 8002e78:	40a5      	lsls	r5, r4
 8002e7a:	40c3      	lsrs	r3, r0
 8002e7c:	40a1      	lsls	r1, r4
 8002e7e:	1e68      	subs	r0, r5, #1
 8002e80:	4185      	sbcs	r5, r0
 8002e82:	4329      	orrs	r1, r5
 8002e84:	430b      	orrs	r3, r1
 8002e86:	2400      	movs	r4, #0
 8002e88:	0759      	lsls	r1, r3, #29
 8002e8a:	d1c1      	bne.n	8002e10 <__aeabi_d2f+0x68>
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	2000      	movs	r0, #0
 8002e90:	0a5b      	lsrs	r3, r3, #9
 8002e92:	e79f      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	b2e0      	uxtb	r0, r4
 8002e98:	e79c      	b.n	8002dd4 <__aeabi_d2f+0x2c>
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	e7e5      	b.n	8002e6a <__aeabi_d2f+0xc2>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	000007fe 	.word	0x000007fe
 8002ea4:	fffffc80 	.word	0xfffffc80
 8002ea8:	fffffca2 	.word	0xfffffca2
 8002eac:	fffffc82 	.word	0xfffffc82

08002eb0 <__clzsi2>:
 8002eb0:	211c      	movs	r1, #28
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	4298      	cmp	r0, r3
 8002eb8:	d301      	bcc.n	8002ebe <__clzsi2+0xe>
 8002eba:	0c00      	lsrs	r0, r0, #16
 8002ebc:	3910      	subs	r1, #16
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	4298      	cmp	r0, r3
 8002ec2:	d301      	bcc.n	8002ec8 <__clzsi2+0x18>
 8002ec4:	0a00      	lsrs	r0, r0, #8
 8002ec6:	3908      	subs	r1, #8
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d301      	bcc.n	8002ed2 <__clzsi2+0x22>
 8002ece:	0900      	lsrs	r0, r0, #4
 8002ed0:	3904      	subs	r1, #4
 8002ed2:	a202      	add	r2, pc, #8	@ (adr r2, 8002edc <__clzsi2+0x2c>)
 8002ed4:	5c10      	ldrb	r0, [r2, r0]
 8002ed6:	1840      	adds	r0, r0, r1
 8002ed8:	4770      	bx	lr
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	02020304 	.word	0x02020304
 8002ee0:	01010101 	.word	0x01010101
	...

08002eec <reset_screen>:
 * @note While the pin is "LOW" no write functions will be accepted
 *
 * @retval None
 */
void reset_screen()
{
 8002eec:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(_RST_GPIO_Port, _RST_Pin, GPIO_PIN_RESET);
 8002eee:	24a0      	movs	r4, #160	@ 0xa0
 8002ef0:	05e4      	lsls	r4, r4, #23
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	f001 f9a0 	bl	800423c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002efc:	2064      	movs	r0, #100	@ 0x64
 8002efe:	f000 fc8b 	bl	8003818 <HAL_Delay>
	HAL_GPIO_WritePin(_RST_GPIO_Port, _RST_Pin, GPIO_PIN_SET);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2102      	movs	r1, #2
 8002f06:	0020      	movs	r0, r4
 8002f08:	f001 f998 	bl	800423c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f0c:	2064      	movs	r0, #100	@ 0x64
 8002f0e:	f000 fc83 	bl	8003818 <HAL_Delay>
}
 8002f12:	bd10      	pop	{r4, pc}

08002f14 <cmd_write>:
 * @param c: instruction for LCD module
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t cmd_write(uint8_t c)
{
 8002f14:	b513      	push	{r0, r1, r4, lr}
 8002f16:	466b      	mov	r3, sp
	HAL_StatusTypeDef errorcode;

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002f18:	2200      	movs	r2, #0
{
 8002f1a:	71d8      	strb	r0, [r3, #7]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002f1c:	2108      	movs	r1, #8
 8002f1e:	4810      	ldr	r0, [pc, #64]	@ (8002f60 <cmd_write+0x4c>)
{
 8002f20:	1ddc      	adds	r4, r3, #7
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002f22:	f001 f98b 	bl	800423c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);	//Set message type to command
 8002f26:	20a0      	movs	r0, #160	@ 0xa0
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	05c0      	lsls	r0, r0, #23
 8002f2e:	f001 f985 	bl	800423c <HAL_GPIO_WritePin>

	errorcode = HAL_SPI_Transmit(&SPI_HANDLE, &c, 1, 100); 		// transmit command
 8002f32:	0021      	movs	r1, r4
 8002f34:	2201      	movs	r2, #1
 8002f36:	2364      	movs	r3, #100	@ 0x64
 8002f38:	480a      	ldr	r0, [pc, #40]	@ (8002f64 <cmd_write+0x50>)
 8002f3a:	f001 fe23 	bl	8004b84 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 8002f3e:	2201      	movs	r2, #1
	errorcode = HAL_SPI_Transmit(&SPI_HANDLE, &c, 1, 100); 		// transmit command
 8002f40:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 8002f42:	2108      	movs	r1, #8
 8002f44:	4806      	ldr	r0, [pc, #24]	@ (8002f60 <cmd_write+0x4c>)
 8002f46:	f001 f979 	bl	800423c <HAL_GPIO_WritePin>

	if(errorcode != HAL_OK) //transmit data
 8002f4a:	2c00      	cmp	r4, #0
 8002f4c:	d006      	beq.n	8002f5c <cmd_write+0x48>
	{
		switch(errorcode)
 8002f4e:	3c01      	subs	r4, #1
 8002f50:	b2e3      	uxtb	r3, r4
	if(errorcode != HAL_OK) //transmit data
 8002f52:	2402      	movs	r4, #2
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	d801      	bhi.n	8002f5c <cmd_write+0x48>
 8002f58:	4a03      	ldr	r2, [pc, #12]	@ (8002f68 <cmd_write+0x54>)
 8002f5a:	5cd4      	ldrb	r4, [r2, r3]
			return NHD_SPI_PARAM_ERROR;
		}
	}
	return NHD_SPI_OK;

}
 8002f5c:	0020      	movs	r0, r4
 8002f5e:	bd16      	pop	{r1, r2, r4, pc}
 8002f60:	50000400 	.word	0x50000400
 8002f64:	200000e0 	.word	0x200000e0
 8002f68:	080065a4 	.word	0x080065a4

08002f6c <init_screen>:
{
 8002f6c:	b510      	push	{r4, lr}
	if((errorCode = cmd_write(SET_COLSD_LF)) != NHD_SPI_OK) //Set SEG (column) direction - left to right
 8002f6e:	20a0      	movs	r0, #160	@ 0xa0
 8002f70:	f7ff ffd0 	bl	8002f14 <cmd_write>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d125      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(TURN_OFF)) != NHD_SPI_OK) //Turn the display off
 8002f78:	30ae      	adds	r0, #174	@ 0xae
 8002f7a:	f7ff ffcb 	bl	8002f14 <cmd_write>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d120      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_ROWD_TP)) != NHD_SPI_OK) //Set COM (row) direction - top to bottom
 8002f82:	30c8      	adds	r0, #200	@ 0xc8
 8002f84:	f7ff ffc6 	bl	8002f14 <cmd_write>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d11b      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_LCD_BIAS)) != NHD_SPI_OK) //Set LCD bias
 8002f8c:	30a2      	adds	r0, #162	@ 0xa2
 8002f8e:	f7ff ffc1 	bl	8002f14 <cmd_write>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d116      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_PWR_CTRL)) != NHD_SPI_OK) //Power Control Set - Boost, Regulator and Follower are all on
 8002f96:	302f      	adds	r0, #47	@ 0x2f
 8002f98:	f7ff ffbc 	bl	8002f14 <cmd_write>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d111      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_RES_RTO)) != NHD_SPI_OK) //Set Resistor Ratio - 0x001 -> 3.5
 8002fa0:	3021      	adds	r0, #33	@ 0x21
 8002fa2:	f7ff ffb7 	bl	8002f14 <cmd_write>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d10c      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_EVM_CMD)) != NHD_SPI_OK) //Electronic Volume Command (set contrast) Double Byte: 1 of 2
 8002faa:	3081      	adds	r0, #129	@ 0x81
 8002fac:	f7ff ffb2 	bl	8002f14 <cmd_write>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d107      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(SET_EVM_VAL)) != NHD_SPI_OK) //Electronic Volume value (contrast value) Double Byte: 2 of 2
 8002fb4:	3020      	adds	r0, #32
 8002fb6:	f7ff ffad 	bl	8002f14 <cmd_write>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d102      	bne.n	8002fc4 <init_screen+0x58>
	if((errorCode = cmd_write(TURN_ON)) != NHD_SPI_OK) //Display ON
 8002fbe:	30af      	adds	r0, #175	@ 0xaf
 8002fc0:	f7ff ffa8 	bl	8002f14 <cmd_write>
}
 8002fc4:	bd10      	pop	{r4, pc}
	...

08002fc8 <data_write>:
 * @param c: One fifth of character data to be sent to DDRAM of LCD module
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t data_write(uint8_t d)
{
 8002fc8:	b513      	push	{r0, r1, r4, lr}
 8002fca:	466b      	mov	r3, sp
	HAL_StatusTypeDef errorcode;

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002fcc:	2200      	movs	r2, #0
{
 8002fce:	71d8      	strb	r0, [r3, #7]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	4810      	ldr	r0, [pc, #64]	@ (8003014 <data_write+0x4c>)
{
 8002fd4:	1ddc      	adds	r4, r3, #7
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 8002fd6:	f001 f931 	bl	800423c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET);		//Set message type to data
 8002fda:	20a0      	movs	r0, #160	@ 0xa0
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2104      	movs	r1, #4
 8002fe0:	05c0      	lsls	r0, r0, #23
 8002fe2:	f001 f92b 	bl	800423c <HAL_GPIO_WritePin>

	errorcode = HAL_SPI_Transmit(&SPI_HANDLE, &d, 1, 100); 		// transmit data
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2364      	movs	r3, #100	@ 0x64
 8002fec:	480a      	ldr	r0, [pc, #40]	@ (8003018 <data_write+0x50>)
 8002fee:	f001 fdc9 	bl	8004b84 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 8002ff2:	2201      	movs	r2, #1
	errorcode = HAL_SPI_Transmit(&SPI_HANDLE, &d, 1, 100); 		// transmit data
 8002ff4:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	4806      	ldr	r0, [pc, #24]	@ (8003014 <data_write+0x4c>)
 8002ffa:	f001 f91f 	bl	800423c <HAL_GPIO_WritePin>

	if(errorcode != HAL_OK) //transmit data
 8002ffe:	2c00      	cmp	r4, #0
 8003000:	d006      	beq.n	8003010 <data_write+0x48>
	{
		switch(errorcode)
 8003002:	3c01      	subs	r4, #1
 8003004:	b2e3      	uxtb	r3, r4
	if(errorcode != HAL_OK) //transmit data
 8003006:	2402      	movs	r4, #2
 8003008:	42a3      	cmp	r3, r4
 800300a:	d801      	bhi.n	8003010 <data_write+0x48>
 800300c:	4a03      	ldr	r2, [pc, #12]	@ (800301c <data_write+0x54>)
 800300e:	5cd4      	ldrb	r4, [r2, r3]
		default:
			return NHD_SPI_PARAM_ERROR;
		}
	}
	return NHD_SPI_OK;
}
 8003010:	0020      	movs	r0, r4
 8003012:	bd16      	pop	{r1, r2, r4, pc}
 8003014:	50000400 	.word	0x50000400
 8003018:	200000e0 	.word	0x200000e0
 800301c:	080065a4 	.word	0x080065a4

08003020 <clear_screen>:
{
 8003020:	b570      	push	{r4, r5, r6, lr}
	if((errorCode = cmd_write(TURN_OFF)) != NHD_SPI_OK)
 8003022:	20ae      	movs	r0, #174	@ 0xae
 8003024:	f7ff ff76 	bl	8002f14 <cmd_write>
 8003028:	2800      	cmp	r0, #0
 800302a:	d124      	bne.n	8003076 <clear_screen+0x56>
	if((errorCode = cmd_write(SET_SRT_ROW)) != NHD_SPI_OK)
 800302c:	3040      	adds	r0, #64	@ 0x40
 800302e:	f7ff ff71 	bl	8002f14 <cmd_write>
 8003032:	2800      	cmp	r0, #0
 8003034:	d11f      	bne.n	8003076 <clear_screen+0x56>
	uint8_t page = SET_PG_ADDR;
 8003036:	24b0      	movs	r4, #176	@ 0xb0
		if((errorCode = cmd_write(page)) != NHD_SPI_OK)	// send page address
 8003038:	0020      	movs	r0, r4
 800303a:	f7ff ff6b 	bl	8002f14 <cmd_write>
 800303e:	2800      	cmp	r0, #0
 8003040:	d119      	bne.n	8003076 <clear_screen+0x56>
		if((errorCode = cmd_write(SET_COL_ADRU)) != NHD_SPI_OK)
 8003042:	3010      	adds	r0, #16
 8003044:	f7ff ff66 	bl	8002f14 <cmd_write>
 8003048:	2800      	cmp	r0, #0
 800304a:	d114      	bne.n	8003076 <clear_screen+0x56>
		if((errorCode = cmd_write(SET_COL_ADRL)) != NHD_SPI_OK)
 800304c:	f7ff ff62 	bl	8002f14 <cmd_write>
 8003050:	2800      	cmp	r0, #0
 8003052:	d110      	bne.n	8003076 <clear_screen+0x56>
 8003054:	2580      	movs	r5, #128	@ 0x80
			if((errorCode = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff ffb6 	bl	8002fc8 <data_write>
 800305c:	2800      	cmp	r0, #0
 800305e:	d10a      	bne.n	8003076 <clear_screen+0x56>
		for(uint8_t j = 0; j < 128; j++)
 8003060:	3d01      	subs	r5, #1
 8003062:	b2ed      	uxtb	r5, r5
 8003064:	2d00      	cmp	r5, #0
 8003066:	d1f6      	bne.n	8003056 <clear_screen+0x36>
		page++;//After 128 columns, go to the next page
 8003068:	3401      	adds	r4, #1
 800306a:	b2e4      	uxtb	r4, r4
	for(uint8_t i = 0; i < 4; i++)
 800306c:	2cb4      	cmp	r4, #180	@ 0xb4
 800306e:	d1e3      	bne.n	8003038 <clear_screen+0x18>
	if((errorCode = cmd_write(TURN_ON)) != NHD_SPI_OK)//Turn the display back on
 8003070:	30af      	adds	r0, #175	@ 0xaf
 8003072:	f7ff ff4f 	bl	8002f14 <cmd_write>
}
 8003076:	bd70      	pop	{r4, r5, r6, pc}

08003078 <erase_trails>:
 * @param rowIndex: page that the text is displayed on; 0, 1, 2, 3 from top to bottom
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t erase_trails(const char* text, uint8_t rowIndex)
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	0006      	movs	r6, r0
	NHD_LCDstatus_t errorCode = NHD_SPI_OK;
	if((errorCode = cmd_write(SET_PG_ADDR + rowIndex)) != NHD_SPI_OK) // send page address
 800307c:	0008      	movs	r0, r1
 800307e:	3850      	subs	r0, #80	@ 0x50
{
 8003080:	b085      	sub	sp, #20
	if((errorCode = cmd_write(SET_PG_ADDR + rowIndex)) != NHD_SPI_OK) // send page address
 8003082:	b2c0      	uxtb	r0, r0
{
 8003084:	000d      	movs	r5, r1
	if((errorCode = cmd_write(SET_PG_ADDR + rowIndex)) != NHD_SPI_OK) // send page address
 8003086:	f7ff ff45 	bl	8002f14 <cmd_write>
 800308a:	1e04      	subs	r4, r0, #0
 800308c:	d10c      	bne.n	80030a8 <erase_trails+0x30>
		return errorCode;

	//Get length of the current text
	size_t len = strlen(text);
 800308e:	0030      	movs	r0, r6
 8003090:	f7fd f836 	bl	8000100 <strlen>
	if(last_len[rowIndex] > len) // There are characters in that were not overwritten and need to be cleared
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <erase_trails+0x64>)
	{
		uint8_t trails = last_len[rowIndex] - len;
 8003096:	b2c2      	uxtb	r2, r0
	if(last_len[rowIndex] > len) // There are characters in that were not overwritten and need to be cleared
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	5d5b      	ldrb	r3, [r3, r5]
		uint8_t trails = last_len[rowIndex] - len;
 800309c:	9201      	str	r2, [sp, #4]
	if(last_len[rowIndex] > len) // There are characters in that were not overwritten and need to be cleared
 800309e:	4298      	cmp	r0, r3
 80030a0:	d305      	bcc.n	80030ae <erase_trails+0x36>
				if((errorCode = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
					return errorCode;
			}
		}
	}
	last_len[rowIndex] = len;
 80030a2:	9b02      	ldr	r3, [sp, #8]
 80030a4:	9a01      	ldr	r2, [sp, #4]
 80030a6:	555a      	strb	r2, [r3, r5]

	return errorCode;
}
 80030a8:	0020      	movs	r0, r4
 80030aa:	b005      	add	sp, #20
 80030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t i = 0; i < trails; i++)
 80030ae:	0026      	movs	r6, r4
		uint8_t trails = last_len[rowIndex] - len;
 80030b0:	9a01      	ldr	r2, [sp, #4]
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	9303      	str	r3, [sp, #12]
		for(uint8_t i = 0; i < trails; i++)
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	42b3      	cmp	r3, r6
 80030bc:	d0f1      	beq.n	80030a2 <erase_trails+0x2a>
 80030be:	2705      	movs	r7, #5
				if((errorCode = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff ff81 	bl	8002fc8 <data_write>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d106      	bne.n	80030d8 <erase_trails+0x60>
			for(uint8_t j = 0; j < 5; j++)
 80030ca:	3f01      	subs	r7, #1
 80030cc:	b2ff      	uxtb	r7, r7
 80030ce:	2f00      	cmp	r7, #0
 80030d0:	d1f6      	bne.n	80030c0 <erase_trails+0x48>
		for(uint8_t i = 0; i < trails; i++)
 80030d2:	3601      	adds	r6, #1
 80030d4:	b2f6      	uxtb	r6, r6
 80030d6:	e7ef      	b.n	80030b8 <erase_trails+0x40>
				if((errorCode = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
 80030d8:	0004      	movs	r4, r0
 80030da:	e7e5      	b.n	80030a8 <erase_trails+0x30>
 80030dc:	2000008c 	.word	0x2000008c

080030e0 <print_data>:
{
 80030e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e2:	0005      	movs	r5, r0
	if((errorCode = cmd_write(SET_PG_ADDR + rowIndex)) != NHD_SPI_OK) // send page address
 80030e4:	0008      	movs	r0, r1
 80030e6:	3850      	subs	r0, #80	@ 0x50
 80030e8:	b2c0      	uxtb	r0, r0
{
 80030ea:	000e      	movs	r6, r1
	if((errorCode = cmd_write(SET_PG_ADDR + rowIndex)) != NHD_SPI_OK) // send page address
 80030ec:	f7ff ff12 	bl	8002f14 <cmd_write>
 80030f0:	1e04      	subs	r4, r0, #0
 80030f2:	d110      	bne.n	8003116 <print_data+0x36>
	if((errorCode = cmd_write(SET_COL_ADRU)) != NHD_SPI_OK)
 80030f4:	2010      	movs	r0, #16
 80030f6:	f7ff ff0d 	bl	8002f14 <cmd_write>
 80030fa:	1e04      	subs	r4, r0, #0
 80030fc:	d10b      	bne.n	8003116 <print_data+0x36>
	if((errorCode = cmd_write(SET_COL_ADRL)) != NHD_SPI_OK)
 80030fe:	f7ff ff09 	bl	8002f14 <cmd_write>
 8003102:	1e04      	subs	r4, r0, #0
 8003104:	d107      	bne.n	8003116 <print_data+0x36>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 8003106:	5d2b      	ldrb	r3, [r5, r4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <print_data+0x3a>
	if((errorCode = erase_trails(text, rowIndex)) != NHD_SPI_OK)
 800310c:	0031      	movs	r1, r6
 800310e:	0028      	movs	r0, r5
 8003110:	f7ff ffb2 	bl	8003078 <erase_trails>
			if((errorCode = data_write(val)) != NHD_SPI_OK)
 8003114:	0004      	movs	r4, r0
}
 8003116:	0020      	movs	r0, r4
 8003118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for(uint8_t j = 0; j < 5; j++)
 800311a:	2205      	movs	r2, #5
		uint8_t c = (uint8_t)text[i] - 32;
 800311c:	2700      	movs	r7, #0
 800311e:	3b20      	subs	r3, #32
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4353      	muls	r3, r2
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <print_data+0x64>)
 8003126:	189b      	adds	r3, r3, r2
 8003128:	9301      	str	r3, [sp, #4]
			if((errorCode = data_write(val)) != NHD_SPI_OK)
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	5dd8      	ldrb	r0, [r3, r7]
 800312e:	f7ff ff4b 	bl	8002fc8 <data_write>
 8003132:	2800      	cmp	r0, #0
 8003134:	d1ee      	bne.n	8003114 <print_data+0x34>
		for(uint8_t j = 0; j < 5; j++)
 8003136:	3701      	adds	r7, #1
 8003138:	2f05      	cmp	r7, #5
 800313a:	d1f6      	bne.n	800312a <print_data+0x4a>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 800313c:	3401      	adds	r4, #1
 800313e:	b2e4      	uxtb	r4, r4
 8003140:	e7e1      	b.n	8003106 <print_data+0x26>
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	080065af 	.word	0x080065af

08003148 <reverse>:
 *
 * @retval None
 */
void reverse(char* str, uint8_t len)
{
	uint8_t i = 0, j = len - 1, temp;
 8003148:	2300      	movs	r3, #0
{
 800314a:	b510      	push	{r4, lr}
	uint8_t i = 0, j = len - 1, temp;
 800314c:	3901      	subs	r1, #1
 800314e:	b2c9      	uxtb	r1, r1
    while (i < j) {
 8003150:	428b      	cmp	r3, r1
 8003152:	d300      	bcc.n	8003156 <reverse+0xe>
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
 8003154:	bd10      	pop	{r4, pc}
        temp = str[i];
 8003156:	5cc2      	ldrb	r2, [r0, r3]
        str[i] = str[j];
 8003158:	5c44      	ldrb	r4, [r0, r1]
 800315a:	54c4      	strb	r4, [r0, r3]
        str[j] = temp;
 800315c:	5442      	strb	r2, [r0, r1]
        i++;
 800315e:	3301      	adds	r3, #1
        j--;
 8003160:	3901      	subs	r1, #1
        i++;
 8003162:	b2db      	uxtb	r3, r3
        j--;
 8003164:	b2c9      	uxtb	r1, r1
 8003166:	e7f3      	b.n	8003150 <reverse+0x8>

08003168 <intToStr>:
 * @param d: number of digits to place after the decimal
 *
 * @retval The number of characters in the string
 */
int intToStr(int32_t x, char str[], uint8_t d)
{
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800316a:	0005      	movs	r5, r0
 800316c:	000e      	movs	r6, r1
 800316e:	0017      	movs	r7, r2
	int32_t i = 0;
    while (x) {
 8003170:	2400      	movs	r4, #0
 8003172:	2d00      	cmp	r5, #0
 8003174:	d118      	bne.n	80031a8 <intToStr+0x40>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
 8003176:	1b3b      	subs	r3, r7, r4
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	42bc      	cmp	r4, r7
 800317c:	dc00      	bgt.n	8003180 <intToStr+0x18>
 800317e:	001d      	movs	r5, r3
 8003180:	002a      	movs	r2, r5
 8003182:	2130      	movs	r1, #48	@ 0x30
 8003184:	1930      	adds	r0, r6, r4
 8003186:	f001 fdf3 	bl	8004d70 <memset>
 800318a:	2300      	movs	r3, #0
 800318c:	42bc      	cmp	r4, r7
 800318e:	dc00      	bgt.n	8003192 <intToStr+0x2a>
 8003190:	9b01      	ldr	r3, [sp, #4]
 8003192:	191f      	adds	r7, r3, r4

    reverse(str, i);
 8003194:	0030      	movs	r0, r6
 8003196:	b2f9      	uxtb	r1, r7
 8003198:	f7ff ffd6 	bl	8003148 <reverse>
    str[i] = '\0';
 800319c:	2300      	movs	r3, #0
        str[i++] = '0';
 800319e:	1964      	adds	r4, r4, r5
 80031a0:	1934      	adds	r4, r6, r4
    return i;
}
 80031a2:	0038      	movs	r0, r7
    str[i] = '\0';
 80031a4:	7023      	strb	r3, [r4, #0]
}
 80031a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        str[i++] = (x % 10) + '0';
 80031a8:	0028      	movs	r0, r5
 80031aa:	210a      	movs	r1, #10
 80031ac:	f7fd f92a 	bl	8000404 <__aeabi_idivmod>
 80031b0:	3130      	adds	r1, #48	@ 0x30
 80031b2:	5531      	strb	r1, [r6, r4]
        x = x / 10;
 80031b4:	0028      	movs	r0, r5
 80031b6:	210a      	movs	r1, #10
 80031b8:	f7fd f83e 	bl	8000238 <__divsi3>
 80031bc:	3401      	adds	r4, #1
 80031be:	0005      	movs	r5, r0
 80031c0:	e7d7      	b.n	8003172 <intToStr+0xa>
	...

080031c4 <ftoa>:
 *
 * @retval None
 *
 */
void ftoa(float n, char* res, uint8_t afterpoint)
{
 80031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c6:	b085      	sub	sp, #20
 80031c8:	000c      	movs	r4, r1
 80031ca:	1c05      	adds	r5, r0, #0
 80031cc:	9200      	str	r2, [sp, #0]
	// Check validity of the input number 'n'
	if(res == NULL) return;
 80031ce:	2900      	cmp	r1, #0
 80031d0:	d017      	beq.n	8003202 <ftoa+0x3e>
	if(isnan(n)){strcpy(res,"nan"); return;}
 80031d2:	1c01      	adds	r1, r0, #0
 80031d4:	f7fd fe5c 	bl	8000e90 <__aeabi_fcmpun>
 80031d8:	493f      	ldr	r1, [pc, #252]	@ (80032d8 <ftoa+0x114>)
 80031da:	2800      	cmp	r0, #0
 80031dc:	d10e      	bne.n	80031fc <ftoa+0x38>
	if(isinf(n)){strcpy(res,"inf"); return;}
 80031de:	006e      	lsls	r6, r5, #1
 80031e0:	0876      	lsrs	r6, r6, #1
 80031e2:	493e      	ldr	r1, [pc, #248]	@ (80032dc <ftoa+0x118>)
 80031e4:	1c30      	adds	r0, r6, #0
 80031e6:	f7fd fe53 	bl	8000e90 <__aeabi_fcmpun>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d10b      	bne.n	8003206 <ftoa+0x42>
 80031ee:	493b      	ldr	r1, [pc, #236]	@ (80032dc <ftoa+0x118>)
 80031f0:	1c30      	adds	r0, r6, #0
 80031f2:	f7fd f967 	bl	80004c4 <__aeabi_fcmple>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d105      	bne.n	8003206 <ftoa+0x42>
 80031fa:	4939      	ldr	r1, [pc, #228]	@ (80032e0 <ftoa+0x11c>)
 80031fc:	0020      	movs	r0, r4
 80031fe:	f001 fdeb 	bl	8004dd8 <strcpy>
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);

        intToStr((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
    }
}
 8003202:	b005      	add	sp, #20
 8003204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(n == 0.0f)
 8003206:	2100      	movs	r1, #0
 8003208:	1c28      	adds	r0, r5, #0
 800320a:	f7fd f94b 	bl	80004a4 <__aeabi_fcmpeq>
 800320e:	2800      	cmp	r0, #0
 8003210:	d010      	beq.n	8003234 <ftoa+0x70>
		res[0] = '0'; res[1] = '.';
 8003212:	232e      	movs	r3, #46	@ 0x2e
 8003214:	2230      	movs	r2, #48	@ 0x30
 8003216:	7063      	strb	r3, [r4, #1]
 8003218:	7022      	strb	r2, [r4, #0]
		for(uint8_t  i= 1; i <= afterpoint; i++)
 800321a:	3b2d      	subs	r3, #45	@ 0x2d
 800321c:	9900      	ldr	r1, [sp, #0]
 800321e:	428b      	cmp	r3, r1
 8003220:	d903      	bls.n	800322a <ftoa+0x66>
		res[afterpoint + 2] = '\0';
 8003222:	2300      	movs	r3, #0
 8003224:	1864      	adds	r4, r4, r1
 8003226:	70a3      	strb	r3, [r4, #2]
		return;
 8003228:	e7eb      	b.n	8003202 <ftoa+0x3e>
			res[i + 1] = '0';
 800322a:	18e1      	adds	r1, r4, r3
		for(uint8_t  i= 1; i <= afterpoint; i++)
 800322c:	3301      	adds	r3, #1
			res[i + 1] = '0';
 800322e:	704a      	strb	r2, [r1, #1]
		for(uint8_t  i= 1; i <= afterpoint; i++)
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e7f3      	b.n	800321c <ftoa+0x58>
	if(n < 0.0f)
 8003234:	2100      	movs	r1, #0
 8003236:	1c28      	adds	r0, r5, #0
 8003238:	f7fd f93a 	bl	80004b0 <__aeabi_fcmplt>
	uint8_t startIndex = 0;
 800323c:	1e07      	subs	r7, r0, #0
	if(n < 0.0f)
 800323e:	d005      	beq.n	800324c <ftoa+0x88>
		res[startIndex] = '-';
 8003240:	232d      	movs	r3, #45	@ 0x2d
 8003242:	7023      	strb	r3, [r4, #0]
		n = -n;
 8003244:	2380      	movs	r3, #128	@ 0x80
		startIndex++;
 8003246:	2701      	movs	r7, #1
		n = -n;
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	18ed      	adds	r5, r5, r3
	int32_t ipart = (int32_t)n;
 800324c:	1c28      	adds	r0, r5, #0
 800324e:	f7fd fe35 	bl	8000ebc <__aeabi_f2iz>
	if((float)abs(n) < 1.0f)
 8003252:	17c3      	asrs	r3, r0, #31
	int32_t ipart = (int32_t)n;
 8003254:	9001      	str	r0, [sp, #4]
	if((float)abs(n) < 1.0f)
 8003256:	18c0      	adds	r0, r0, r3
 8003258:	4058      	eors	r0, r3
 800325a:	f7fd fe4f 	bl	8000efc <__aeabi_i2f>
 800325e:	21fe      	movs	r1, #254	@ 0xfe
 8003260:	0589      	lsls	r1, r1, #22
 8003262:	f7fd f925 	bl	80004b0 <__aeabi_fcmplt>
		res[startIndex] = '0';
 8003266:	19e6      	adds	r6, r4, r7
	if((float)abs(n) < 1.0f)
 8003268:	1e02      	subs	r2, r0, #0
 800326a:	d02e      	beq.n	80032ca <ftoa+0x106>
		res[startIndex] = '0';
 800326c:	2330      	movs	r3, #48	@ 0x30
 800326e:	7033      	strb	r3, [r6, #0]
	int32_t i = 0; // i is the number of digits before the decimal
 8003270:	2600      	movs	r6, #0
		startIndex++;
 8003272:	3701      	adds	r7, #1
 8003274:	b2ff      	uxtb	r7, r7
    if (afterpoint != 0) {
 8003276:	9b00      	ldr	r3, [sp, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0c2      	beq.n	8003202 <ftoa+0x3e>
        res[i + startIndex] = '.'; // add dot
 800327c:	222e      	movs	r2, #46	@ 0x2e
 800327e:	19e3      	adds	r3, r4, r7
 8003280:	559a      	strb	r2, [r3, r6]
        fpart = fpart * pow(10, afterpoint);
 8003282:	9800      	ldr	r0, [sp, #0]
 8003284:	f7ff fd24 	bl	8002cd0 <__aeabi_ui2d>
 8003288:	0002      	movs	r2, r0
 800328a:	000b      	movs	r3, r1
 800328c:	2000      	movs	r0, #0
 800328e:	4915      	ldr	r1, [pc, #84]	@ (80032e4 <ftoa+0x120>)
 8003290:	f002 f9f4 	bl	800567c <pow>
 8003294:	9002      	str	r0, [sp, #8]
 8003296:	9103      	str	r1, [sp, #12]
    float fpart = n - (float)ipart;
 8003298:	9801      	ldr	r0, [sp, #4]
 800329a:	f7fd fe2f 	bl	8000efc <__aeabi_i2f>
 800329e:	1c01      	adds	r1, r0, #0
 80032a0:	1c28      	adds	r0, r5, #0
 80032a2:	f7fd fc51 	bl	8000b48 <__aeabi_fsub>
        fpart = fpart * pow(10, afterpoint);
 80032a6:	f7ff fd37 	bl	8002d18 <__aeabi_f2d>
 80032aa:	9a02      	ldr	r2, [sp, #8]
 80032ac:	9b03      	ldr	r3, [sp, #12]
 80032ae:	f7fe fe5b 	bl	8001f68 <__aeabi_dmul>
        intToStr((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
 80032b2:	19bb      	adds	r3, r7, r6
 80032b4:	3301      	adds	r3, #1
 80032b6:	18e4      	adds	r4, r4, r3
        fpart = fpart * pow(10, afterpoint);
 80032b8:	f7ff fd76 	bl	8002da8 <__aeabi_d2f>
        intToStr((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
 80032bc:	f7fd fdfe 	bl	8000ebc <__aeabi_f2iz>
 80032c0:	0021      	movs	r1, r4
 80032c2:	9a00      	ldr	r2, [sp, #0]
 80032c4:	f7ff ff50 	bl	8003168 <intToStr>
 80032c8:	e79b      	b.n	8003202 <ftoa+0x3e>
		i = intToStr(ipart, res + startIndex, 0);
 80032ca:	0031      	movs	r1, r6
 80032cc:	9801      	ldr	r0, [sp, #4]
 80032ce:	f7ff ff4b 	bl	8003168 <intToStr>
 80032d2:	0006      	movs	r6, r0
 80032d4:	e7cf      	b.n	8003276 <ftoa+0xb2>
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	080065a7 	.word	0x080065a7
 80032dc:	7f7fffff 	.word	0x7f7fffff
 80032e0:	080065ab 	.word	0x080065ab
 80032e4:	40240000 	.word	0x40240000

080032e8 <print_power_value.isra.0>:
 * @brief This function print the value of the voltage/current on the LCD screen
 *
 * @param index: The character row that the value whould be displayed on
 * @retval NHD_LCD status
 */
static NHD_LCDstatus_t print_power_value(uint8_t index)
 80032e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	uint8_t decimals = 0;
	if(index == v_input || index == v_output)
		decimals = 2;
	else // if(index == i_input || i_output)
		decimals = 3;
 80032ea:	2501      	movs	r5, #1
static NHD_LCDstatus_t print_power_value(uint8_t index)
 80032ec:	0004      	movs	r4, r0
		decimals = 3;
 80032ee:	4285      	cmp	r5, r0
 80032f0:	41ad      	sbcs	r5, r5

	ftoa((float)ADC_buffer[index]*scales[index]/adc_res, numText, decimals);
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <print_power_value.isra.0+0x58>)
 80032f4:	0042      	lsls	r2, r0, #1
 80032f6:	5ad0      	ldrh	r0, [r2, r3]
 80032f8:	f7fd fe4c 	bl	8000f94 <__aeabi_ui2f>
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <print_power_value.isra.0+0x5c>)
 80032fe:	00a7      	lsls	r7, r4, #2
 8003300:	58f9      	ldr	r1, [r7, r3]
 8003302:	4e11      	ldr	r6, [pc, #68]	@ (8003348 <print_power_value.isra.0+0x60>)
		decimals = 3;
 8003304:	426d      	negs	r5, r5
	ftoa((float)ADC_buffer[index]*scales[index]/adc_res, numText, decimals);
 8003306:	f7fd fae1 	bl	80008cc <__aeabi_fmul>
		decimals = 3;
 800330a:	3502      	adds	r5, #2
	ftoa((float)ADC_buffer[index]*scales[index]/adc_res, numText, decimals);
 800330c:	490f      	ldr	r1, [pc, #60]	@ (800334c <print_power_value.isra.0+0x64>)
 800330e:	f7fd f8f7 	bl	8000500 <__aeabi_fdiv>
 8003312:	0031      	movs	r1, r6
 8003314:	002a      	movs	r2, r5
 8003316:	f7ff ff55 	bl	80031c4 <ftoa>
	/*Needed to set MCU/MPU GCC Compiler -> Optimization -> Optimization level to "Optimize for size (-Os) to prevent
	snprintf from pulling in floating-point formatting code, such code is very large which bloats the .rodata
	and .text sections which caused the FLASH to overflow by 624 bytes
	*/
	snprintf(desText, sizeof(desText), "%s%s %s", headers[index], numText, (index ==v_input || index==v_output) ? "V" : "A");
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <print_power_value.isra.0+0x68>)
 800331c:	490d      	ldr	r1, [pc, #52]	@ (8003354 <print_power_value.isra.0+0x6c>)
 800331e:	58fb      	ldr	r3, [r7, r3]
 8003320:	2c01      	cmp	r4, #1
 8003322:	d900      	bls.n	8003326 <print_power_value.isra.0+0x3e>
 8003324:	490c      	ldr	r1, [pc, #48]	@ (8003358 <print_power_value.isra.0+0x70>)
 8003326:	4d0d      	ldr	r5, [pc, #52]	@ (800335c <print_power_value.isra.0+0x74>)
 8003328:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <print_power_value.isra.0+0x78>)
 800332a:	0028      	movs	r0, r5
 800332c:	9101      	str	r1, [sp, #4]
 800332e:	9600      	str	r6, [sp, #0]
 8003330:	2132      	movs	r1, #50	@ 0x32
 8003332:	f001 fce9 	bl	8004d08 <sniprintf>
	else
		strcat(desText, " A");
	*/

	NHD_LCDstatus_t errorCode = NHD_SPI_OK;
	if((errorCode = print_data(desText, index)) != NHD_SPI_OK)
 8003336:	0028      	movs	r0, r5
 8003338:	0021      	movs	r1, r4
 800333a:	f7ff fed1 	bl	80030e0 <print_data>
		return errorCode;

	return errorCode;
}
 800333e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003340:	200000d6 	.word	0x200000d6
 8003344:	080067f4 	.word	0x080067f4
 8003348:	200000c2 	.word	0x200000c2
 800334c:	457ff000 	.word	0x457ff000
 8003350:	080067a0 	.word	0x080067a0
 8003354:	08006794 	.word	0x08006794
 8003358:	08006796 	.word	0x08006796
 800335c:	20000090 	.word	0x20000090
 8003360:	08006798 	.word	0x08006798

08003364 <SystemClock_Config>:
{
 8003364:	b500      	push	{lr}
 8003366:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003368:	2234      	movs	r2, #52	@ 0x34
 800336a:	2100      	movs	r1, #0
 800336c:	a805      	add	r0, sp, #20
 800336e:	f001 fcff 	bl	8004d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003372:	2100      	movs	r1, #0
 8003374:	2210      	movs	r2, #16
 8003376:	a801      	add	r0, sp, #4
 8003378:	f001 fcfa 	bl	8004d70 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800337c:	2080      	movs	r0, #128	@ 0x80
 800337e:	0080      	lsls	r0, r0, #2
 8003380:	f000 ff62 	bl	8004248 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003384:	2302      	movs	r3, #2
 8003386:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003388:	33fe      	adds	r3, #254	@ 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800338a:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800338c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800338e:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003390:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003392:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003394:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003396:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003398:	f000 ff82 	bl	80042a0 <HAL_RCC_OscConfig>
 800339c:	1e01      	subs	r1, r0, #0
 800339e:	d001      	beq.n	80033a4 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80033a6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033aa:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ae:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033b0:	f001 f9d6 	bl	8004760 <HAL_RCC_ClockConfig>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d001      	beq.n	80033bc <SystemClock_Config+0x58>
 80033b8:	b672      	cpsid	i
  while (1)
 80033ba:	e7fe      	b.n	80033ba <SystemClock_Config+0x56>
}
 80033bc:	b013      	add	sp, #76	@ 0x4c
 80033be:	bd00      	pop	{pc}

080033c0 <main>:
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80033c4:	f000 fa02 	bl	80037cc <HAL_Init>
  SystemClock_Config();
 80033c8:	f7ff ffcc 	bl	8003364 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	2214      	movs	r2, #20
 80033ce:	2100      	movs	r1, #0
 80033d0:	a803      	add	r0, sp, #12
 80033d2:	f001 fccd 	bl	8004d70 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 80033da:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <main+0x1c8>)
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 80033de:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e4:	430a      	orrs	r2, r1
 80033e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033ea:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	400a      	ands	r2, r1
 80033ee:	9201      	str	r2, [sp, #4]
 80033f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 80033f4:	3104      	adds	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4332      	orrs	r2, r6
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	4033      	ands	r3, r6
 8003400:	9302      	str	r3, [sp, #8]
 8003402:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 8003404:	f000 ff1a 	bl	800423c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 8003408:	2200      	movs	r2, #0
 800340a:	2108      	movs	r1, #8
 800340c:	485f      	ldr	r0, [pc, #380]	@ (800358c <main+0x1cc>)
 800340e:	f000 ff15 	bl	800423c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 8003414:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	a903      	add	r1, sp, #12
 8003418:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 800341a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	f000 fe59 	bl	80040d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = _CS_Pin;
 8003426:	2308      	movs	r3, #8
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8003428:	4858      	ldr	r0, [pc, #352]	@ (800358c <main+0x1cc>)
 800342a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = _CS_Pin;
 800342c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8003434:	f000 fe50 	bl	80040d8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003438:	220c      	movs	r2, #12
 800343a:	0029      	movs	r1, r5
 800343c:	a803      	add	r0, sp, #12
 800343e:	f001 fc97 	bl	8004d70 <memset>
  hadc1.Instance = ADC1;
 8003442:	4c53      	ldr	r4, [pc, #332]	@ (8003590 <main+0x1d0>)
 8003444:	4b53      	ldr	r3, [pc, #332]	@ (8003594 <main+0x1d4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003446:	0020      	movs	r0, r4
  hadc1.Instance = ADC1;
 8003448:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	6063      	str	r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	039b      	lsls	r3, r3, #14
 8003454:	6123      	str	r3, [r4, #16]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003456:	19a3      	adds	r3, r4, r6
 8003458:	77de      	strb	r6, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800345a:	0023      	movs	r3, r4
 800345c:	332c      	adds	r3, #44	@ 0x2c
 800345e:	701d      	strb	r5, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8003460:	2307      	movs	r3, #7
 8003462:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8003464:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003466:	0023      	movs	r3, r4
 8003468:	333c      	adds	r3, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800346a:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800346c:	60e5      	str	r5, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800346e:	6167      	str	r7, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003470:	8325      	strh	r5, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003472:	76a5      	strb	r5, [r4, #26]
  hadc1.Init.NbrOfConversion = 4;
 8003474:	61e7      	str	r7, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003476:	6265      	str	r5, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003478:	62a5      	str	r5, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800347a:	6325      	str	r5, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 800347c:	701d      	strb	r5, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800347e:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003480:	f000 f9e0 	bl	8003844 <HAL_ADC_Init>
 8003484:	42a8      	cmp	r0, r5
 8003486:	d001      	beq.n	800348c <main+0xcc>
 8003488:	b672      	cpsid	i
  while (1)
 800348a:	e7fe      	b.n	800348a <main+0xca>
  sConfig.Channel = ADC_CHANNEL_11;
 800348c:	4b42      	ldr	r3, [pc, #264]	@ (8003598 <main+0x1d8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800348e:	9004      	str	r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003490:	9005      	str	r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003492:	a903      	add	r1, sp, #12
 8003494:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 8003496:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003498:	f000 fb4c 	bl	8003b34 <HAL_ADC_ConfigChannel>
 800349c:	2800      	cmp	r0, #0
 800349e:	d001      	beq.n	80034a4 <main+0xe4>
 80034a0:	b672      	cpsid	i
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <main+0xe2>
  sConfig.Channel = ADC_CHANNEL_8;
 80034a4:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <main+0x1dc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034a6:	0020      	movs	r0, r4
 80034a8:	a903      	add	r1, sp, #12
  sConfig.Channel = ADC_CHANNEL_8;
 80034aa:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034ac:	9704      	str	r7, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034ae:	f000 fb41 	bl	8003b34 <HAL_ADC_ConfigChannel>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d001      	beq.n	80034ba <main+0xfa>
 80034b6:	b672      	cpsid	i
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <main+0xf8>
  sConfig.Channel = ADC_CHANNEL_6;
 80034ba:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <main+0x1e0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034bc:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 80034be:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80034c0:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034c2:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80034c4:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034c6:	f000 fb35 	bl	8003b34 <HAL_ADC_ConfigChannel>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d001      	beq.n	80034d2 <main+0x112>
 80034ce:	b672      	cpsid	i
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <main+0x110>
  sConfig.Channel = ADC_CHANNEL_7;
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <main+0x1e4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 80034d6:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80034d8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034da:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80034dc:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034de:	f000 fb29 	bl	8003b34 <HAL_ADC_ConfigChannel>
 80034e2:	1e05      	subs	r5, r0, #0
 80034e4:	d001      	beq.n	80034ea <main+0x12a>
 80034e6:	b672      	cpsid	i
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <main+0x128>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80034ea:	0020      	movs	r0, r4
 80034ec:	f000 fcfe 	bl	8003eec <HAL_ADCEx_Calibration_Start>
  hspi2.Instance = SPI2;
 80034f0:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <main+0x1e8>)
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <main+0x1ec>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	6105      	str	r5, [r0, #16]
  hspi2.Instance = SPI2;
 80034f6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034f8:	2382      	movs	r3, #130	@ 0x82
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003504:	23e0      	movs	r3, #224	@ 0xe0
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003510:	3bfa      	subs	r3, #250	@ 0xfa
 8003512:	3bff      	subs	r3, #255	@ 0xff
 8003514:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003516:	3301      	adds	r3, #1
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003518:	6145      	str	r5, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800351a:	61c5      	str	r5, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351c:	6205      	str	r5, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800351e:	6245      	str	r5, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	6285      	str	r5, [r0, #40]	@ 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003522:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003524:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003526:	f001 fab5 	bl	8004a94 <HAL_SPI_Init>
 800352a:	2800      	cmp	r0, #0
 800352c:	d001      	beq.n	8003532 <main+0x172>
 800352e:	b672      	cpsid	i
  while (1)
 8003530:	e7fe      	b.n	8003530 <main+0x170>
  reset_screen();
 8003532:	f7ff fcdb 	bl	8002eec <reset_screen>
  errorCode = init_screen();
 8003536:	f7ff fd19 	bl	8002f6c <init_screen>
  errorCode = clear_screen();
 800353a:	f7ff fd71 	bl	8003020 <clear_screen>
  errorCode = cmd_write(SET_SRT_ROW); // To first line
 800353e:	2040      	movs	r0, #64	@ 0x40
 8003540:	f7ff fce8 	bl	8002f14 <cmd_write>
	  for(int i = 0; i < 4; i++)
 8003544:	2500      	movs	r5, #0
		  HAL_ADC_Start(&hadc1);
 8003546:	0020      	movs	r0, r4
 8003548:	f000 fc66 	bl	8003e18 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 800354c:	0031      	movs	r1, r6
 800354e:	0020      	movs	r0, r4
 8003550:	f000 fa88 	bl	8003a64 <HAL_ADC_PollForConversion>
		  ADC_buffer[i] = HAL_ADC_GetValue(&hadc1);
 8003554:	0020      	movs	r0, r4
 8003556:	f000 fae9 	bl	8003b2c <HAL_ADC_GetValue>
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <main+0x1f0>)
 800355c:	006b      	lsls	r3, r5, #1
	  for(int i = 0; i < 4; i++)
 800355e:	3501      	adds	r5, #1
		  ADC_buffer[i] = HAL_ADC_GetValue(&hadc1);
 8003560:	52d0      	strh	r0, [r2, r3]
	  for(int i = 0; i < 4; i++)
 8003562:	2d04      	cmp	r5, #4
 8003564:	d1ef      	bne.n	8003546 <main+0x186>
	  errorCode = print_power_value(v_input);
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff febe 	bl	80032e8 <print_power_value.isra.0>
	  errorCode = print_power_value(v_output);
 800356c:	0030      	movs	r0, r6
 800356e:	f7ff febb 	bl	80032e8 <print_power_value.isra.0>
	  errorCode = print_power_value(i_input);
 8003572:	2002      	movs	r0, #2
 8003574:	f7ff feb8 	bl	80032e8 <print_power_value.isra.0>
	  errorCode = print_power_value(i_output);
 8003578:	2003      	movs	r0, #3
 800357a:	f7ff feb5 	bl	80032e8 <print_power_value.isra.0>
	  HAL_Delay(100);
 800357e:	2064      	movs	r0, #100	@ 0x64
 8003580:	f000 f94a 	bl	8003818 <HAL_Delay>
	  for(int i = 0; i < 4; i++)
 8003584:	e7de      	b.n	8003544 <main+0x184>
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	40021000 	.word	0x40021000
 800358c:	50000400 	.word	0x50000400
 8003590:	20000144 	.word	0x20000144
 8003594:	40012400 	.word	0x40012400
 8003598:	2c000800 	.word	0x2c000800
 800359c:	20000100 	.word	0x20000100
 80035a0:	18000040 	.word	0x18000040
 80035a4:	1c000080 	.word	0x1c000080
 80035a8:	200000e0 	.word	0x200000e0
 80035ac:	40003800 	.word	0x40003800
 80035b0:	200000d6 	.word	0x200000d6

080035b4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b4:	2101      	movs	r1, #1
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_MspInit+0x2c>)
{
 80035b8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035bc:	430a      	orrs	r2, r1
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40
 80035c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	9200      	str	r2, [sp, #0]
 80035c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035cc:	0549      	lsls	r1, r1, #21
 80035ce:	430a      	orrs	r2, r1
 80035d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	400b      	ands	r3, r1
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035da:	b002      	add	sp, #8
 80035dc:	4770      	bx	lr
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e4:	b510      	push	{r4, lr}
 80035e6:	0004      	movs	r4, r0
 80035e8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ea:	2214      	movs	r2, #20
 80035ec:	2100      	movs	r1, #0
 80035ee:	a803      	add	r0, sp, #12
 80035f0:	f001 fbbe 	bl	8004d70 <memset>
  if(hadc->Instance==ADC1)
 80035f4:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <HAL_ADC_MspInit+0x74>)
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d12b      	bne.n	8003654 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035fc:	2180      	movs	r1, #128	@ 0x80
 80035fe:	4b17      	ldr	r3, [pc, #92]	@ (800365c <HAL_ADC_MspInit+0x78>)
 8003600:	0349      	lsls	r1, r1, #13
 8003602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003604:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8003606:	430a      	orrs	r2, r1
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
 800360a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	4814      	ldr	r0, [pc, #80]	@ (8003660 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800360e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003610:	2102      	movs	r1, #2
    __HAL_RCC_ADC_CLK_ENABLE();
 8003612:	9200      	str	r2, [sp, #0]
 8003614:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003618:	430a      	orrs	r2, r1
 800361a:	635a      	str	r2, [r3, #52]	@ 0x34
 800361c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800361e:	400a      	ands	r2, r1
 8003620:	9201      	str	r2, [sp, #4]
 8003622:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003626:	3901      	subs	r1, #1
 8003628:	430a      	orrs	r2, r1
 800362a:	635a      	str	r2, [r3, #52]	@ 0x34
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800362e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003630:	400b      	ands	r3, r1
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
 8003636:	2381      	movs	r3, #129	@ 0x81
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
 800363a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363c:	f000 fd4c 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_Input_Current_Pin|S_Output_Current_Pin;
 8003640:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = S_Input_Current_Pin|S_Output_Current_Pin;
 8003644:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	a903      	add	r1, sp, #12
 800364a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f000 fd42 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003654:	b008      	add	sp, #32
 8003656:	bd10      	pop	{r4, pc}
 8003658:	40012400 	.word	0x40012400
 800365c:	40021000 	.word	0x40021000
 8003660:	50000400 	.word	0x50000400

08003664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003664:	b530      	push	{r4, r5, lr}
 8003666:	0004      	movs	r4, r0
 8003668:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366a:	2214      	movs	r2, #20
 800366c:	2100      	movs	r1, #0
 800366e:	a803      	add	r0, sp, #12
 8003670:	f001 fb7e 	bl	8004d70 <memset>
  if(hspi->Instance==SPI2)
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <HAL_SPI_MspInit+0x68>)
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d125      	bne.n	80036c8 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800367c:	2180      	movs	r1, #128	@ 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367e:	2401      	movs	r4, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003680:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003684:	4b12      	ldr	r3, [pc, #72]	@ (80036d0 <HAL_SPI_MspInit+0x6c>)
 8003686:	01c9      	lsls	r1, r1, #7
 8003688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI2_CLK_ENABLE();
 800368c:	430a      	orrs	r2, r1
 800368e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003692:	400a      	ands	r2, r1
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4322      	orrs	r2, r4
 800369e:	635a      	str	r2, [r3, #52]	@ 0x34
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036a2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4023      	ands	r3, r4
 80036a6:	9302      	str	r3, [sp, #8]
 80036a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f000 fd14 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036b0:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b8:	a903      	add	r1, sp, #12
 80036ba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80036c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	f000 fd08 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80036c8:	b009      	add	sp, #36	@ 0x24
 80036ca:	bd30      	pop	{r4, r5, pc}
 80036cc:	40003800 	.word	0x40003800
 80036d0:	40021000 	.word	0x40021000

080036d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036d4:	e7fe      	b.n	80036d4 <NMI_Handler>

080036d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d6:	e7fe      	b.n	80036d6 <HardFault_Handler>

080036d8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036d8:	4770      	bx	lr

080036da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80036da:	4770      	bx	lr

080036dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036de:	f000 f889 	bl	80037f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e4:	490b      	ldr	r1, [pc, #44]	@ (8003714 <_sbrk+0x30>)
 80036e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003718 <_sbrk+0x34>)
{
 80036e8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ea:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ec:	490b      	ldr	r1, [pc, #44]	@ (800371c <_sbrk+0x38>)
{
 80036ee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d101      	bne.n	80036fa <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80036f6:	480a      	ldr	r0, [pc, #40]	@ (8003720 <_sbrk+0x3c>)
 80036f8:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fa:	6808      	ldr	r0, [r1, #0]
 80036fc:	18c3      	adds	r3, r0, r3
 80036fe:	4293      	cmp	r3, r2
 8003700:	d906      	bls.n	8003710 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003702:	f001 fb3d 	bl	8004d80 <__errno>
 8003706:	230c      	movs	r3, #12
 8003708:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800370a:	2001      	movs	r0, #1
 800370c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800370e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003710:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8003712:	e7fc      	b.n	800370e <_sbrk+0x2a>
 8003714:	00000400 	.word	0x00000400
 8003718:	20002000 	.word	0x20002000
 800371c:	200001a8 	.word	0x200001a8
 8003720:	200002f8 	.word	0x200002f8

08003724 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003724:	4770      	bx	lr
	...

08003728 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003728:	480d      	ldr	r0, [pc, #52]	@ (8003760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800372a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800372c:	f7ff fffa 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003730:	480c      	ldr	r0, [pc, #48]	@ (8003764 <LoopForever+0x6>)
  ldr r1, =_edata
 8003732:	490d      	ldr	r1, [pc, #52]	@ (8003768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003734:	4a0d      	ldr	r2, [pc, #52]	@ (800376c <LoopForever+0xe>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003738:	e002      	b.n	8003740 <LoopCopyDataInit>

0800373a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800373c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373e:	3304      	adds	r3, #4

08003740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003744:	d3f9      	bcc.n	800373a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003748:	4c0a      	ldr	r4, [pc, #40]	@ (8003774 <LoopForever+0x16>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800374c:	e001      	b.n	8003752 <LoopFillZerobss>

0800374e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003750:	3204      	adds	r2, #4

08003752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003754:	d3fb      	bcc.n	800374e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003756:	f001 fb19 	bl	8004d8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800375a:	f7ff fe31 	bl	80033c0 <main>

0800375e <LoopForever>:

LoopForever:
  b LoopForever
 800375e:	e7fe      	b.n	800375e <LoopForever>
  ldr   r0, =_estack
 8003760:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800376c:	080068b0 	.word	0x080068b0
  ldr r2, =_sbss
 8003770:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003774:	200002f8 	.word	0x200002f8

08003778 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_IRQHandler>
	...

0800377c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800377c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_InitTick+0x44>)
{
 8003780:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	2900      	cmp	r1, #0
 8003786:	d101      	bne.n	800378c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003788:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800378a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800378c:	20fa      	movs	r0, #250	@ 0xfa
 800378e:	0080      	lsls	r0, r0, #2
 8003790:	f7fc fcc8 	bl	8000124 <__udivsi3>
 8003794:	4c0b      	ldr	r4, [pc, #44]	@ (80037c4 <HAL_InitTick+0x48>)
 8003796:	0001      	movs	r1, r0
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	f7fc fcc3 	bl	8000124 <__udivsi3>
 800379e:	f000 fc81 	bl	80040a4 <HAL_SYSTICK_Config>
 80037a2:	1e04      	subs	r4, r0, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	2d03      	cmp	r5, #3
 80037a8:	d8ee      	bhi.n	8003788 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037aa:	0002      	movs	r2, r0
 80037ac:	2001      	movs	r0, #1
 80037ae:	0029      	movs	r1, r5
 80037b0:	4240      	negs	r0, r0
 80037b2:	f000 fc4d 	bl	8004050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037b6:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <HAL_InitTick+0x4c>)
 80037b8:	0020      	movs	r0, r4
 80037ba:	601d      	str	r5, [r3, #0]
  return status;
 80037bc:	e7e5      	b.n	800378a <HAL_InitTick+0xe>
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	20000004 	.word	0x20000004
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000008 	.word	0x20000008

080037cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <HAL_Init+0x24>)
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	6811      	ldr	r1, [r2, #0]
{
 80037d4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037da:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037dc:	f7ff ffce 	bl	800377c <HAL_InitTick>
 80037e0:	1e04      	subs	r4, r0, #0
 80037e2:	d103      	bne.n	80037ec <HAL_Init+0x20>
  HAL_MspInit();
 80037e4:	f7ff fee6 	bl	80035b4 <HAL_MspInit>
}
 80037e8:	0020      	movs	r0, r4
 80037ea:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80037ec:	2401      	movs	r4, #1
 80037ee:	e7fb      	b.n	80037e8 <HAL_Init+0x1c>
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037f4:	4a03      	ldr	r2, [pc, #12]	@ (8003804 <HAL_IncTick+0x10>)
 80037f6:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <HAL_IncTick+0x14>)
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	185b      	adds	r3, r3, r1
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	4770      	bx	lr
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	200001ac 	.word	0x200001ac
 8003808:	20000004 	.word	0x20000004

0800380c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800380c:	4b01      	ldr	r3, [pc, #4]	@ (8003814 <HAL_GetTick+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
}
 8003810:	4770      	bx	lr
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	200001ac 	.word	0x200001ac

08003818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7ff fff6 	bl	800380c <HAL_GetTick>
 8003820:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	1c63      	adds	r3, r4, #1
 8003824:	d002      	beq.n	800382c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <HAL_Delay+0x20>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800382c:	f7ff ffee 	bl	800380c <HAL_GetTick>
 8003830:	1b40      	subs	r0, r0, r5
 8003832:	42a0      	cmp	r0, r4
 8003834:	d3fa      	bcc.n	800382c <HAL_Delay+0x14>
  {
  }
}
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	20000004 	.word	0x20000004

0800383c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800383c:	6880      	ldr	r0, [r0, #8]
 800383e:	0740      	lsls	r0, r0, #29
 8003840:	0fc0      	lsrs	r0, r0, #31
}
 8003842:	4770      	bx	lr

08003844 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003844:	2300      	movs	r3, #0
{
 8003846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003848:	b085      	sub	sp, #20
 800384a:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800384c:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800384e:	4298      	cmp	r0, r3
 8003850:	d100      	bne.n	8003854 <HAL_ADC_Init+0x10>
 8003852:	e0f0      	b.n	8003a36 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003854:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003856:	429d      	cmp	r5, r3
 8003858:	d105      	bne.n	8003866 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800385a:	f7ff fec3 	bl	80035e4 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800385e:	0023      	movs	r3, r4
 8003860:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8003862:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003864:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003866:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003868:	6825      	ldr	r5, [r4, #0]
 800386a:	055b      	lsls	r3, r3, #21
 800386c:	68aa      	ldr	r2, [r5, #8]
 800386e:	421a      	tst	r2, r3
 8003870:	d100      	bne.n	8003874 <HAL_ADC_Init+0x30>
 8003872:	e0a7      	b.n	80039c4 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003874:	2200      	movs	r2, #0
 8003876:	68ab      	ldr	r3, [r5, #8]
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	d408      	bmi.n	8003890 <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003880:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003882:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003884:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	4313      	orrs	r3, r2
 8003888:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800388c:	4333      	orrs	r3, r6
 800388e:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003890:	0028      	movs	r0, r5
 8003892:	f7ff ffd3 	bl	800383c <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003896:	2210      	movs	r2, #16
 8003898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800389a:	4013      	ands	r3, r2
 800389c:	4303      	orrs	r3, r0
 800389e:	d000      	beq.n	80038a2 <HAL_ADC_Init+0x5e>
 80038a0:	e0cc      	b.n	8003a3c <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80038a4:	4b67      	ldr	r3, [pc, #412]	@ (8003a44 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038a6:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 80038a8:	401a      	ands	r2, r3
 80038aa:	3306      	adds	r3, #6
 80038ac:	33ff      	adds	r3, #255	@ 0xff
 80038ae:	4313      	orrs	r3, r2
 80038b0:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b2:	68ab      	ldr	r3, [r5, #8]
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d461      	bmi.n	800397c <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80038b8:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 80038ba:	68e1      	ldr	r1, [r4, #12]
 80038bc:	1e7b      	subs	r3, r7, #1
 80038be:	419f      	sbcs	r7, r3
 80038c0:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038c2:	7ea2      	ldrb	r2, [r4, #26]
 80038c4:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80038c6:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80038c8:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80038ca:	0389      	lsls	r1, r1, #14
 80038cc:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80038ce:	7e61      	ldrb	r1, [r4, #25]
 80038d0:	03c9      	lsls	r1, r1, #15
 80038d2:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038d4:	0351      	lsls	r1, r2, #13
 80038d6:	430b      	orrs	r3, r1
 80038d8:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038da:	2800      	cmp	r0, #0
 80038dc:	db00      	blt.n	80038e0 <HAL_ADC_Init+0x9c>
 80038de:	e086      	b.n	80039ee <HAL_ADC_Init+0x1aa>
 80038e0:	0041      	lsls	r1, r0, #1
 80038e2:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038e4:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038e6:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038e8:	332c      	adds	r3, #44	@ 0x2c
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038ee:	4333      	orrs	r3, r6
 80038f0:	433b      	orrs	r3, r7
 80038f2:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038f4:	1c61      	adds	r1, r4, #1
 80038f6:	7fc9      	ldrb	r1, [r1, #31]
 80038f8:	2901      	cmp	r1, #1
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d000      	beq.n	8003902 <HAL_ADC_Init+0xbe>
 8003900:	e078      	b.n	80039f4 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003902:	2280      	movs	r2, #128	@ 0x80
 8003904:	0252      	lsls	r2, r2, #9
 8003906:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003908:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800390a:	2a00      	cmp	r2, #0
 800390c:	d005      	beq.n	800391a <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800390e:	21e0      	movs	r1, #224	@ 0xe0
 8003910:	0049      	lsls	r1, r1, #1
 8003912:	400a      	ands	r2, r1
 8003914:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003916:	430a      	orrs	r2, r1
 8003918:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800391a:	68ea      	ldr	r2, [r5, #12]
 800391c:	494a      	ldr	r1, [pc, #296]	@ (8003a48 <HAL_ADC_Init+0x204>)
 800391e:	400a      	ands	r2, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003924:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003926:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003928:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800392a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800392c:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800392e:	0f97      	lsrs	r7, r2, #30
 8003930:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8003932:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003934:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8003936:	2b01      	cmp	r3, #1
 8003938:	d108      	bne.n	800394c <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800393a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800393c:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800393e:	4333      	orrs	r3, r6
 8003940:	430b      	orrs	r3, r1
 8003942:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003944:	430b      	orrs	r3, r1
 8003946:	4661      	mov	r1, ip
 8003948:	433b      	orrs	r3, r7
 800394a:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800394c:	692b      	ldr	r3, [r5, #16]
 800394e:	4f3f      	ldr	r7, [pc, #252]	@ (8003a4c <HAL_ADC_Init+0x208>)
 8003950:	403b      	ands	r3, r7
 8003952:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003954:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8003956:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003958:	0053      	lsls	r3, r2, #1
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	05c9      	lsls	r1, r1, #23
 800395e:	428b      	cmp	r3, r1
 8003960:	d00c      	beq.n	800397c <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	429a      	cmp	r2, r3
 8003968:	d008      	beq.n	800397c <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800396a:	4939      	ldr	r1, [pc, #228]	@ (8003a50 <HAL_ADC_Init+0x20c>)
 800396c:	4f39      	ldr	r7, [pc, #228]	@ (8003a54 <HAL_ADC_Init+0x210>)
 800396e:	680b      	ldr	r3, [r1, #0]
 8003970:	403b      	ands	r3, r7
 8003972:	27f0      	movs	r7, #240	@ 0xf0
 8003974:	03bf      	lsls	r7, r7, #14
 8003976:	403a      	ands	r2, r7
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 800397c:	2107      	movs	r1, #7
 800397e:	2770      	movs	r7, #112	@ 0x70
 8003980:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003982:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003984:	438b      	bics	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	616b      	str	r3, [r5, #20]
 800398a:	6969      	ldr	r1, [r5, #20]
 800398c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800398e:	43b9      	bics	r1, r7
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	430b      	orrs	r3, r1
 8003994:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003996:	2800      	cmp	r0, #0
 8003998:	d134      	bne.n	8003a04 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800399a:	2310      	movs	r3, #16
 800399c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800399e:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80039a0:	430b      	orrs	r3, r1
 80039a2:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80039a4:	2107      	movs	r1, #7
 80039a6:	696b      	ldr	r3, [r5, #20]
 80039a8:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d139      	bne.n	8003a22 <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ae:	2300      	movs	r3, #0
 80039b0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80039b4:	3303      	adds	r3, #3
 80039b6:	439a      	bics	r2, r3
 80039b8:	3b02      	subs	r3, #2
 80039ba:	4313      	orrs	r3, r2
 80039bc:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80039be:	9801      	ldr	r0, [sp, #4]
 80039c0:	b005      	add	sp, #20
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 80039c4:	68aa      	ldr	r2, [r5, #8]
 80039c6:	4924      	ldr	r1, [pc, #144]	@ (8003a58 <HAL_ADC_Init+0x214>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <HAL_ADC_Init+0x218>)
 80039d0:	4923      	ldr	r1, [pc, #140]	@ (8003a60 <HAL_ADC_Init+0x21c>)
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	f7fc fba6 	bl	8000124 <__udivsi3>
 80039d8:	3001      	adds	r0, #1
 80039da:	0040      	lsls	r0, r0, #1
 80039dc:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d100      	bne.n	80039e6 <HAL_ADC_Init+0x1a2>
 80039e4:	e746      	b.n	8003874 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	e7f7      	b.n	80039de <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039ee:	2180      	movs	r1, #128	@ 0x80
 80039f0:	0389      	lsls	r1, r1, #14
 80039f2:	e777      	b.n	80038e4 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f4:	2220      	movs	r2, #32
 80039f6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80039f8:	433a      	orrs	r2, r7
 80039fa:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80039fe:	4311      	orrs	r1, r2
 8003a00:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8003a02:	e781      	b.n	8003908 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a04:	2380      	movs	r3, #128	@ 0x80
 8003a06:	039b      	lsls	r3, r3, #14
 8003a08:	4298      	cmp	r0, r3
 8003a0a:	d1cb      	bne.n	80039a4 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003a0c:	211c      	movs	r1, #28
 8003a0e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003a10:	69e3      	ldr	r3, [r4, #28]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	400b      	ands	r3, r1
 8003a18:	392c      	subs	r1, #44	@ 0x2c
 8003a1a:	4099      	lsls	r1, r3
 8003a1c:	000b      	movs	r3, r1
 8003a1e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003a20:	e7be      	b.n	80039a0 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8003a22:	2312      	movs	r3, #18
 8003a24:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003a26:	439a      	bics	r2, r3
 8003a28:	3b02      	subs	r3, #2
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	2301      	movs	r3, #1
 8003a30:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003a32:	4313      	orrs	r3, r2
 8003a34:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	e7c0      	b.n	80039be <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003a42:	e7f8      	b.n	8003a36 <HAL_ADC_Init+0x1f2>
 8003a44:	fffffefd 	.word	0xfffffefd
 8003a48:	ffde0201 	.word	0xffde0201
 8003a4c:	1ffffc02 	.word	0x1ffffc02
 8003a50:	40012708 	.word	0x40012708
 8003a54:	ffc3ffff 	.word	0xffc3ffff
 8003a58:	6fffffe8 	.word	0x6fffffe8
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	00030d40 	.word	0x00030d40

08003a64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a66:	6946      	ldr	r6, [r0, #20]
{
 8003a68:	0004      	movs	r4, r0
 8003a6a:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a6c:	2e08      	cmp	r6, #8
 8003a6e:	d00a      	beq.n	8003a86 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a70:	6803      	ldr	r3, [r0, #0]
 8003a72:	2001      	movs	r0, #1
 8003a74:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a76:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a78:	4203      	tst	r3, r0
 8003a7a:	d004      	beq.n	8003a86 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003a80:	4313      	orrs	r3, r2
 8003a82:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 8003a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003a86:	f7ff fec1 	bl	800380c <HAL_GetTick>
 8003a8a:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a8c:	6825      	ldr	r5, [r4, #0]
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	421e      	tst	r6, r3
 8003a92:	d024      	beq.n	8003ade <HAL_ADC_PollForConversion+0x7a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a9e:	23c0      	movs	r3, #192	@ 0xc0
 8003aa0:	68ea      	ldr	r2, [r5, #12]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	421a      	tst	r2, r3
 8003aa6:	d115      	bne.n	8003ad4 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003aa8:	7ea3      	ldrb	r3, [r4, #26]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d112      	bne.n	8003ad4 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	d50f      	bpl.n	8003ad4 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab4:	0028      	movs	r0, r5
 8003ab6:	f7ff fec1 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d127      	bne.n	8003b0e <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003abe:	220c      	movs	r2, #12
 8003ac0:	686b      	ldr	r3, [r5, #4]
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003ac6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ac8:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <HAL_ADC_PollForConversion+0xc4>)
 8003aca:	401a      	ands	r2, r3
 8003acc:	3304      	adds	r3, #4
 8003ace:	33ff      	adds	r3, #255	@ 0xff
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ad4:	7e23      	ldrb	r3, [r4, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d022      	beq.n	8003b20 <HAL_ADC_PollForConversion+0xbc>
  return HAL_OK;
 8003ada:	2000      	movs	r0, #0
 8003adc:	e7d2      	b.n	8003a84 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	1c7b      	adds	r3, r7, #1
 8003ae0:	d0d5      	beq.n	8003a8e <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ae2:	f7ff fe93 	bl	800380c <HAL_GetTick>
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	1ac0      	subs	r0, r0, r3
 8003aea:	42b8      	cmp	r0, r7
 8003aec:	d801      	bhi.n	8003af2 <HAL_ADC_PollForConversion+0x8e>
 8003aee:	2f00      	cmp	r7, #0
 8003af0:	d1cc      	bne.n	8003a8c <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003af2:	0032      	movs	r2, r6
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	401a      	ands	r2, r3
 8003afa:	421e      	tst	r6, r3
 8003afc:	d1c6      	bne.n	8003a8c <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003afe:	2304      	movs	r3, #4
 8003b00:	6da1      	ldr	r1, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8003b02:	3454      	adds	r4, #84	@ 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 8003b08:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8003b0a:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 8003b0c:	e7ba      	b.n	8003a84 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b0e:	2320      	movs	r3, #32
 8003b10:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b12:	4313      	orrs	r3, r2
 8003b14:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b16:	2301      	movs	r3, #1
 8003b18:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003b1e:	e7d9      	b.n	8003ad4 <HAL_ADC_PollForConversion+0x70>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b20:	230c      	movs	r3, #12
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	e7d9      	b.n	8003ada <HAL_ADC_PollForConversion+0x76>
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	fffffefe 	.word	0xfffffefe

08003b2c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b34:	2300      	movs	r3, #0
{
 8003b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b38:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8003b3a:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b3c:	0003      	movs	r3, r0
{
 8003b3e:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 8003b40:	3354      	adds	r3, #84	@ 0x54
 8003b42:	781a      	ldrb	r2, [r3, #0]
{
 8003b44:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003b46:	2002      	movs	r0, #2
 8003b48:	2a01      	cmp	r2, #1
 8003b4a:	d04c      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0xb2>
 8003b4c:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b4e:	6927      	ldr	r7, [r4, #16]
  __HAL_LOCK(hadc);
 8003b50:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	0028      	movs	r0, r5
 8003b56:	f7ff fe71 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d000      	beq.n	8003b60 <HAL_ADC_ConfigChannel+0x2c>
 8003b5e:	e0e9      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x200>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b60:	9b00      	ldr	r3, [sp, #0]
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b62:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2180      	movs	r1, #128	@ 0x80
 8003b68:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b6a:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b6c:	4662      	mov	r2, ip
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	0609      	lsls	r1, r1, #24
 8003b72:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8003b74:	2a02      	cmp	r2, #2
 8003b76:	d100      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x46>
 8003b78:	e0b0      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x1a8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b7a:	035a      	lsls	r2, r3, #13
 8003b7c:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b7e:	428f      	cmp	r7, r1
 8003b80:	d133      	bne.n	8003bea <HAL_ADC_ConfigChannel+0xb6>
 8003b82:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 8003b84:	430a      	orrs	r2, r1
 8003b86:	62aa      	str	r2, [r5, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8003b88:	9a00      	ldr	r2, [sp, #0]
 8003b8a:	6968      	ldr	r0, [r5, #20]
 8003b8c:	6892      	ldr	r2, [r2, #8]
 8003b8e:	0219      	lsls	r1, r3, #8
 8003b90:	4e6b      	ldr	r6, [pc, #428]	@ (8003d40 <HAL_ADC_ConfigChannel+0x20c>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	4032      	ands	r2, r6
 8003b96:	4388      	bics	r0, r1
 8003b98:	4302      	orrs	r2, r0
 8003b9a:	616a      	str	r2, [r5, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da1e      	bge.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ba0:	21e0      	movs	r1, #224	@ 0xe0
 8003ba2:	4a68      	ldr	r2, [pc, #416]	@ (8003d44 <HAL_ADC_ConfigChannel+0x210>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ba4:	4868      	ldr	r0, [pc, #416]	@ (8003d48 <HAL_ADC_ConfigChannel+0x214>)
 8003ba6:	6815      	ldr	r5, [r2, #0]
 8003ba8:	0449      	lsls	r1, r1, #17
 8003baa:	4029      	ands	r1, r5
 8003bac:	4283      	cmp	r3, r0
 8003bae:	d000      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x7e>
 8003bb0:	e07e      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bb2:	2080      	movs	r0, #128	@ 0x80
 8003bb4:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bb6:	4205      	tst	r5, r0
 8003bb8:	d111      	bne.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	4d63      	ldr	r5, [pc, #396]	@ (8003d4c <HAL_ADC_ConfigChannel+0x218>)
 8003bbe:	402b      	ands	r3, r5
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	4318      	orrs	r0, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc4:	4b62      	ldr	r3, [pc, #392]	@ (8003d50 <HAL_ADC_ConfigChannel+0x21c>)
 8003bc6:	6010      	str	r0, [r2, #0]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	4962      	ldr	r1, [pc, #392]	@ (8003d54 <HAL_ADC_ConfigChannel+0x220>)
 8003bcc:	f7fc faaa 	bl	8000124 <__udivsi3>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	200c      	movs	r0, #12
 8003bd4:	4358      	muls	r0, r3
 8003bd6:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 8003bd8:	9b03      	ldr	r3, [sp, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d164      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x174>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8003be0:	2300      	movs	r3, #0
 8003be2:	3454      	adds	r4, #84	@ 0x54
 8003be4:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 8003be6:	b005      	add	sp, #20
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003bea:	211f      	movs	r1, #31
 8003bec:	4667      	mov	r7, ip
 8003bee:	400f      	ands	r7, r1
 8003bf0:	3910      	subs	r1, #16
 8003bf2:	40b9      	lsls	r1, r7
 8003bf4:	43ce      	mvns	r6, r1
 8003bf6:	9601      	str	r6, [sp, #4]
 8003bf8:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8003bfa:	438e      	bics	r6, r1
 8003bfc:	0031      	movs	r1, r6
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	d112      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0xf4>
 8003c02:	0e98      	lsrs	r0, r3, #26
 8003c04:	321f      	adds	r2, #31
 8003c06:	4010      	ands	r0, r2
 8003c08:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c0a:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c0c:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c0e:	0892      	lsrs	r2, r2, #2
 8003c10:	69e1      	ldr	r1, [r4, #28]
 8003c12:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c14:	6620      	str	r0, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c16:	428a      	cmp	r2, r1
 8003c18:	d8b6      	bhi.n	8003b88 <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 8003c1a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003c1c:	9801      	ldr	r0, [sp, #4]
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	0f12      	lsrs	r2, r2, #28
 8003c22:	40ba      	lsls	r2, r7
 8003c24:	4001      	ands	r1, r0
 8003c26:	e7ad      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x50>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4213      	tst	r3, r2
 8003c2c:	d1ec      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c2e:	1892      	adds	r2, r2, r2
 8003c30:	2001      	movs	r0, #1
 8003c32:	4213      	tst	r3, r2
 8003c34:	d1e8      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c36:	0010      	movs	r0, r2
 8003c38:	3202      	adds	r2, #2
 8003c3a:	4213      	tst	r3, r2
 8003c3c:	d1e4      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	071a      	lsls	r2, r3, #28
 8003c42:	d4e1      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c44:	3001      	adds	r0, #1
 8003c46:	06da      	lsls	r2, r3, #27
 8003c48:	d4de      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	069a      	lsls	r2, r3, #26
 8003c4e:	d4db      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c50:	3001      	adds	r0, #1
 8003c52:	065a      	lsls	r2, r3, #25
 8003c54:	d4d8      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c56:	3001      	adds	r0, #1
 8003c58:	061a      	lsls	r2, r3, #24
 8003c5a:	d4d5      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	05da      	lsls	r2, r3, #23
 8003c60:	d4d2      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c62:	3001      	adds	r0, #1
 8003c64:	059a      	lsls	r2, r3, #22
 8003c66:	d4cf      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	055a      	lsls	r2, r3, #21
 8003c6c:	d4cc      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c6e:	3001      	adds	r0, #1
 8003c70:	051a      	lsls	r2, r3, #20
 8003c72:	d4c9      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c74:	3001      	adds	r0, #1
 8003c76:	04da      	lsls	r2, r3, #19
 8003c78:	d4c6      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	049a      	lsls	r2, r3, #18
 8003c7e:	d4c3      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c80:	3001      	adds	r0, #1
 8003c82:	045a      	lsls	r2, r3, #17
 8003c84:	d4c0      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c86:	3001      	adds	r0, #1
 8003c88:	041a      	lsls	r2, r3, #16
 8003c8a:	d4bd      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	03da      	lsls	r2, r3, #15
 8003c90:	d4ba      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c92:	3001      	adds	r0, #1
 8003c94:	039a      	lsls	r2, r3, #14
 8003c96:	d4b7      	bmi.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003c98:	2280      	movs	r2, #128	@ 0x80
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	02d2      	lsls	r2, r2, #11
 8003c9e:	4010      	ands	r0, r2
 8003ca0:	4213      	tst	r3, r2
 8003ca2:	d0b1      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	e7af      	b.n	8003c08 <HAL_ADC_ConfigChannel+0xd4>
            wait_loop_index--;
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	e793      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0xa4>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cb0:	4829      	ldr	r0, [pc, #164]	@ (8003d58 <HAL_ADC_ConfigChannel+0x224>)
 8003cb2:	4283      	cmp	r3, r0
 8003cb4:	d10b      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x19a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cb6:	2080      	movs	r0, #128	@ 0x80
 8003cb8:	0440      	lsls	r0, r0, #17
 8003cba:	4205      	tst	r5, r0
 8003cbc:	d000      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0x18c>
 8003cbe:	e78e      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	4d22      	ldr	r5, [pc, #136]	@ (8003d4c <HAL_ADC_ConfigChannel+0x218>)
 8003cc4:	402b      	ands	r3, r5
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	4318      	orrs	r0, r3
 8003cca:	6010      	str	r0, [r2, #0]
}
 8003ccc:	e787      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003cce:	4823      	ldr	r0, [pc, #140]	@ (8003d5c <HAL_ADC_ConfigChannel+0x228>)
 8003cd0:	4283      	cmp	r3, r0
 8003cd2:	d000      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x1a2>
 8003cd4:	e783      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd6:	2080      	movs	r0, #128	@ 0x80
 8003cd8:	03c0      	lsls	r0, r0, #15
 8003cda:	e7ee      	b.n	8003cba <HAL_ADC_ConfigChannel+0x186>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cdc:	428f      	cmp	r7, r1
 8003cde:	d104      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x1b6>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ce0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003ce2:	0359      	lsls	r1, r3, #13
 8003ce4:	0b49      	lsrs	r1, r1, #13
 8003ce6:	438a      	bics	r2, r1
 8003ce8:	62aa      	str	r2, [r5, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db00      	blt.n	8003cf0 <HAL_ADC_ConfigChannel+0x1bc>
 8003cee:	e776      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cf0:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <HAL_ADC_ConfigChannel+0x210>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cf2:	4815      	ldr	r0, [pc, #84]	@ (8003d48 <HAL_ADC_ConfigChannel+0x214>)
 8003cf4:	6811      	ldr	r1, [r2, #0]
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	d108      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x1d8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfa:	23a0      	movs	r3, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cfc:	6810      	ldr	r0, [r2, #0]
 8003cfe:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d00:	400b      	ands	r3, r1
 8003d02:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_ADC_ConfigChannel+0x218>)
 8003d04:	4001      	ands	r1, r0
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6013      	str	r3, [r2, #0]
}
 8003d0a:	e768      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d0c:	4812      	ldr	r0, [pc, #72]	@ (8003d58 <HAL_ADC_ConfigChannel+0x224>)
 8003d0e:	4283      	cmp	r3, r0
 8003d10:	d103      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x1e6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d12:	23c0      	movs	r3, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d14:	6810      	ldr	r0, [r2, #0]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	e7f2      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x1cc>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d1a:	4810      	ldr	r0, [pc, #64]	@ (8003d5c <HAL_ADC_ConfigChannel+0x228>)
 8003d1c:	4283      	cmp	r3, r0
 8003d1e:	d000      	beq.n	8003d22 <HAL_ADC_ConfigChannel+0x1ee>
 8003d20:	e75d      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d22:	20c0      	movs	r0, #192	@ 0xc0
 8003d24:	0440      	lsls	r0, r0, #17
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	4001      	ands	r1, r0
 8003d2a:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <HAL_ADC_ConfigChannel+0x218>)
 8003d2c:	4003      	ands	r3, r0
 8003d2e:	4319      	orrs	r1, r3
 8003d30:	6011      	str	r1, [r2, #0]
}
 8003d32:	e754      	b.n	8003bde <HAL_ADC_ConfigChannel+0xaa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d34:	2320      	movs	r3, #32
 8003d36:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003d38:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003d3e:	e74f      	b.n	8003be0 <HAL_ADC_ConfigChannel+0xac>
 8003d40:	07ffff00 	.word	0x07ffff00
 8003d44:	40012708 	.word	0x40012708
 8003d48:	b0001000 	.word	0xb0001000
 8003d4c:	fe3fffff 	.word	0xfe3fffff
 8003d50:	20000000 	.word	0x20000000
 8003d54:	00030d40 	.word	0x00030d40
 8003d58:	b8004000 	.word	0xb8004000
 8003d5c:	b4002000 	.word	0xb4002000

08003d60 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d60:	2300      	movs	r3, #0
{
 8003d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8003d66:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d68:	6891      	ldr	r1, [r2, #8]
 8003d6a:	3301      	adds	r3, #1
{
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	4219      	tst	r1, r3
 8003d70:	d001      	beq.n	8003d76 <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d72:	2000      	movs	r0, #0
}
 8003d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d76:	6890      	ldr	r0, [r2, #8]
 8003d78:	4922      	ldr	r1, [pc, #136]	@ (8003e04 <ADC_Enable+0xa4>)
 8003d7a:	4208      	tst	r0, r1
 8003d7c:	d008      	beq.n	8003d90 <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7e:	2210      	movs	r2, #16
 8003d80:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003d82:	430a      	orrs	r2, r1
 8003d84:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d86:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003d88:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8003d8a:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003d8e:	e7f1      	b.n	8003d74 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8003d90:	6891      	ldr	r1, [r2, #8]
 8003d92:	4f1d      	ldr	r7, [pc, #116]	@ (8003e08 <ADC_Enable+0xa8>)
 8003d94:	4039      	ands	r1, r7
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <ADC_Enable+0xac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	d421      	bmi.n	8003de6 <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003da2:	7e63      	ldrb	r3, [r4, #25]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d0e4      	beq.n	8003d72 <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 8003da8:	f7ff fd30 	bl	800380c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dac:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8003dae:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	422b      	tst	r3, r5
 8003db6:	d1dc      	bne.n	8003d72 <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db8:	6893      	ldr	r3, [r2, #8]
 8003dba:	422b      	tst	r3, r5
 8003dbc:	d103      	bne.n	8003dc6 <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 8003dbe:	6893      	ldr	r3, [r2, #8]
 8003dc0:	403b      	ands	r3, r7
 8003dc2:	432b      	orrs	r3, r5
 8003dc4:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc6:	f7ff fd21 	bl	800380c <HAL_GetTick>
 8003dca:	1b80      	subs	r0, r0, r6
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d9ef      	bls.n	8003db0 <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	422b      	tst	r3, r5
 8003dd6:	d1eb      	bne.n	8003db0 <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd8:	2310      	movs	r3, #16
 8003dda:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003de2:	432b      	orrs	r3, r5
 8003de4:	e7d1      	b.n	8003d8a <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <ADC_Enable+0xb0>)
 8003de8:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <ADC_Enable+0xb4>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f7fc f99a 	bl	8000124 <__udivsi3>
 8003df0:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003df2:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0d3      	beq.n	8003da2 <ADC_Enable+0x42>
        wait_loop_index--;
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	e7f8      	b.n	8003df4 <ADC_Enable+0x94>
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	80000017 	.word	0x80000017
 8003e08:	7fffffe8 	.word	0x7fffffe8
 8003e0c:	40012708 	.word	0x40012708
 8003e10:	20000000 	.word	0x20000000
 8003e14:	00030d40 	.word	0x00030d40

08003e18 <HAL_ADC_Start>:
{
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f7ff fd0d 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003e22:	0006      	movs	r6, r0
    __HAL_LOCK(hadc);
 8003e24:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	d11d      	bne.n	8003e66 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 8003e2a:	0025      	movs	r5, r4
 8003e2c:	3554      	adds	r5, #84	@ 0x54
 8003e2e:	782b      	ldrb	r3, [r5, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d018      	beq.n	8003e66 <HAL_ADC_Start+0x4e>
 8003e34:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8003e36:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8003e38:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 8003e3a:	f7ff ff91 	bl	8003d60 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d112      	bne.n	8003e68 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 8003e42:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <HAL_ADC_Start+0x54>)
 8003e46:	401a      	ands	r2, r3
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e4e:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8003e50:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e52:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8003e54:	65e0      	str	r0, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e56:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003e58:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8003e5a:	6899      	ldr	r1, [r3, #8]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <HAL_ADC_Start+0x58>)
 8003e5e:	4011      	ands	r1, r2
 8003e60:	2204      	movs	r2, #4
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
}
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003e68:	702e      	strb	r6, [r5, #0]
 8003e6a:	e7fc      	b.n	8003e66 <HAL_ADC_Start+0x4e>
 8003e6c:	fffff0fe 	.word	0xfffff0fe
 8003e70:	7fffffe8 	.word	0x7fffffe8

08003e74 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e74:	2201      	movs	r2, #1
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e76:	6803      	ldr	r3, [r0, #0]
{
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e7c:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	4211      	tst	r1, r2
 8003e82:	d101      	bne.n	8003e88 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e84:	2000      	movs	r0, #0
}
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e88:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e8a:	4208      	tst	r0, r1
 8003e8c:	d1fa      	bne.n	8003e84 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e8e:	2005      	movs	r0, #5
 8003e90:	689d      	ldr	r5, [r3, #8]
 8003e92:	4005      	ands	r5, r0
 8003e94:	2d01      	cmp	r5, #1
 8003e96:	d11e      	bne.n	8003ed6 <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	4813      	ldr	r0, [pc, #76]	@ (8003ee8 <ADC_Disable+0x74>)
 8003e9c:	4002      	ands	r2, r0
 8003e9e:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	6099      	str	r1, [r3, #8]
 8003ea4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ea6:	f7ff fcb1 	bl	800380c <HAL_GetTick>
 8003eaa:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	422b      	tst	r3, r5
 8003eb2:	d0e7      	beq.n	8003e84 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb4:	f7ff fcaa 	bl	800380c <HAL_GetTick>
 8003eb8:	1b80      	subs	r0, r0, r6
 8003eba:	2802      	cmp	r0, #2
 8003ebc:	d9f6      	bls.n	8003eac <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	422b      	tst	r3, r5
 8003ec4:	d0f2      	beq.n	8003eac <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ed0:	432b      	orrs	r3, r5
 8003ed2:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003ed4:	e006      	b.n	8003ee4 <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003eda:	430b      	orrs	r3, r1
 8003edc:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	e7ce      	b.n	8003e86 <ADC_Disable+0x12>
 8003ee8:	7fffffe8 	.word	0x7fffffe8

08003eec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003eee:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ef0:	0005      	movs	r5, r0
 8003ef2:	2202      	movs	r2, #2
{
 8003ef4:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8003ef6:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 8003ef8:	3554      	adds	r5, #84	@ 0x54
 8003efa:	782b      	ldrb	r3, [r5, #0]
{
 8003efc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003efe:	9200      	str	r2, [sp, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d03e      	beq.n	8003f82 <HAL_ADCEx_Calibration_Start+0x96>
 8003f04:	2601      	movs	r6, #1
 8003f06:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f08:	f7ff ffb4 	bl	8003e74 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f0c:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 8003f0e:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	000a      	movs	r2, r1
 8003f14:	4032      	ands	r2, r6
 8003f16:	4231      	tst	r1, r6
 8003f18:	d006      	beq.n	8003f28 <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003f1e:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 8003f20:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f22:	2300      	movs	r3, #0
 8003f24:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 8003f26:	e02c      	b.n	8003f82 <HAL_ADCEx_Calibration_Start+0x96>
  MODIFY_REG(ADCx->CR,
 8003f28:	2680      	movs	r6, #128	@ 0x80
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2c:	4942      	ldr	r1, [pc, #264]	@ (8004038 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003f2e:	0636      	lsls	r6, r6, #24
 8003f30:	4008      	ands	r0, r1
 8003f32:	3106      	adds	r1, #6
 8003f34:	31ff      	adds	r1, #255	@ 0xff
 8003f36:	4301      	orrs	r1, r0
 8003f38:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f3a:	68d8      	ldr	r0, [r3, #12]
 8003f3c:	493f      	ldr	r1, [pc, #252]	@ (800403c <HAL_ADCEx_Calibration_Start+0x150>)
 8003f3e:	46b4      	mov	ip, r6
 8003f40:	4008      	ands	r0, r1
 8003f42:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	483e      	ldr	r0, [pc, #248]	@ (8004040 <HAL_ADCEx_Calibration_Start+0x154>)
 8003f48:	4001      	ands	r1, r0
 8003f4a:	2008      	movs	r0, #8
 8003f4c:	60d9      	str	r1, [r3, #12]
 8003f4e:	493d      	ldr	r1, [pc, #244]	@ (8004044 <HAL_ADCEx_Calibration_Start+0x158>)
 8003f50:	4667      	mov	r7, ip
 8003f52:	689e      	ldr	r6, [r3, #8]
 8003f54:	400e      	ands	r6, r1
 8003f56:	433e      	orrs	r6, r7
 8003f58:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f5a:	689e      	ldr	r6, [r3, #8]
 8003f5c:	2e00      	cmp	r6, #0
 8003f5e:	da13      	bge.n	8003f88 <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 8003f60:	9e02      	ldr	r6, [sp, #8]
 8003f62:	3601      	adds	r6, #1
 8003f64:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f66:	9f02      	ldr	r7, [sp, #8]
 8003f68:	4e37      	ldr	r6, [pc, #220]	@ (8004048 <HAL_ADCEx_Calibration_Start+0x15c>)
 8003f6a:	42b7      	cmp	r7, r6
 8003f6c:	d9f5      	bls.n	8003f5a <HAL_ADCEx_Calibration_Start+0x6e>
          ADC_STATE_CLR_SET(hadc->State,
 8003f6e:	2312      	movs	r3, #18
 8003f70:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003f72:	439a      	bics	r2, r3
 8003f74:	3b02      	subs	r3, #2
 8003f76:	4313      	orrs	r3, r2
 8003f78:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	9300      	str	r3, [sp, #0]
}
 8003f82:	9800      	ldr	r0, [sp, #0]
 8003f84:	b005      	add	sp, #20
 8003f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003f88:	001e      	movs	r6, r3
 8003f8a:	277f      	movs	r7, #127	@ 0x7f
 8003f8c:	36b4      	adds	r6, #180	@ 0xb4
 8003f8e:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003f90:	3801      	subs	r0, #1
 8003f92:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003f94:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d1da      	bne.n	8003f50 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 8003f9a:	2601      	movs	r6, #1
 8003f9c:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 8003f9e:	08d2      	lsrs	r2, r2, #3
 8003fa0:	4008      	ands	r0, r1
 8003fa2:	4330      	orrs	r0, r6
 8003fa4:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003fa6:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003fa8:	691f      	ldr	r7, [r3, #16]
 8003faa:	05c0      	lsls	r0, r0, #23
 8003fac:	4287      	cmp	r7, r0
 8003fae:	d31c      	bcc.n	8003fea <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 8003fb0:	001e      	movs	r6, r3
 8003fb2:	277f      	movs	r7, #127	@ 0x7f
 8003fb4:	36b4      	adds	r6, #180	@ 0xb4
 8003fb6:	6830      	ldr	r0, [r6, #0]
 8003fb8:	43b8      	bics	r0, r7
 8003fba:	4310      	orrs	r0, r2
 8003fbc:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 8003fbe:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fc0:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 8003fc2:	4011      	ands	r1, r2
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003fca:	f7ff fc1f 	bl	800380c <HAL_GetTick>
 8003fce:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fd0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4232      	tst	r2, r6
 8003fd6:	d11e      	bne.n	8004016 <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	9901      	ldr	r1, [sp, #4]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	4333      	orrs	r3, r6
 8003fe8:	e79a      	b.n	8003f20 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003fea:	4818      	ldr	r0, [pc, #96]	@ (800404c <HAL_ADCEx_Calibration_Start+0x160>)
 8003fec:	6807      	ldr	r7, [r0, #0]
 8003fee:	20f0      	movs	r0, #240	@ 0xf0
 8003ff0:	0380      	lsls	r0, r0, #14
 8003ff2:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003ff4:	27e0      	movs	r7, #224	@ 0xe0
 8003ff6:	037f      	lsls	r7, r7, #13
 8003ff8:	42b8      	cmp	r0, r7
 8003ffa:	d3d9      	bcc.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003ffc:	0c80      	lsrs	r0, r0, #18
 8003ffe:	3803      	subs	r0, #3
 8004000:	4086      	lsls	r6, r0
 8004002:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 8004004:	9803      	ldr	r0, [sp, #12]
 8004006:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 8004008:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800400a:	9803      	ldr	r0, [sp, #12]
 800400c:	2800      	cmp	r0, #0
 800400e:	d0cf      	beq.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 8004010:	9803      	ldr	r0, [sp, #12]
 8004012:	3801      	subs	r0, #1
 8004014:	e7f8      	b.n	8004008 <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004016:	f7ff fbf9 	bl	800380c <HAL_GetTick>
 800401a:	1bc0      	subs	r0, r0, r7
 800401c:	2802      	cmp	r0, #2
 800401e:	d9d7      	bls.n	8003fd0 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004020:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4233      	tst	r3, r6
 8004026:	d0d3      	beq.n	8003fd0 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	2310      	movs	r3, #16
 800402a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800402c:	4313      	orrs	r3, r2
 800402e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004030:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004032:	4333      	orrs	r3, r6
 8004034:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8004036:	e7a2      	b.n	8003f7e <HAL_ADCEx_Calibration_Start+0x92>
 8004038:	fffffefd 	.word	0xfffffefd
 800403c:	00008003 	.word	0x00008003
 8004040:	ffff7ffc 	.word	0xffff7ffc
 8004044:	7fffffe8 	.word	0x7fffffe8
 8004048:	0002f1ff 	.word	0x0002f1ff
 800404c:	40012708 	.word	0x40012708

08004050 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004050:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004052:	24ff      	movs	r4, #255	@ 0xff
 8004054:	2203      	movs	r2, #3
 8004056:	000b      	movs	r3, r1
 8004058:	0021      	movs	r1, r4
 800405a:	4002      	ands	r2, r0
 800405c:	00d2      	lsls	r2, r2, #3
 800405e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004064:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004066:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004068:	2800      	cmp	r0, #0
 800406a:	db0a      	blt.n	8004082 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800406c:	24c0      	movs	r4, #192	@ 0xc0
 800406e:	4a0b      	ldr	r2, [pc, #44]	@ (800409c <HAL_NVIC_SetPriority+0x4c>)
 8004070:	0880      	lsrs	r0, r0, #2
 8004072:	0080      	lsls	r0, r0, #2
 8004074:	1880      	adds	r0, r0, r2
 8004076:	00a4      	lsls	r4, r4, #2
 8004078:	5902      	ldr	r2, [r0, r4]
 800407a:	400a      	ands	r2, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8004080:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004082:	220f      	movs	r2, #15
 8004084:	4010      	ands	r0, r2
 8004086:	3808      	subs	r0, #8
 8004088:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <HAL_NVIC_SetPriority+0x50>)
 800408a:	0880      	lsrs	r0, r0, #2
 800408c:	0080      	lsls	r0, r0, #2
 800408e:	1880      	adds	r0, r0, r2
 8004090:	69c2      	ldr	r2, [r0, #28]
 8004092:	4011      	ands	r1, r2
 8004094:	4319      	orrs	r1, r3
 8004096:	61c1      	str	r1, [r0, #28]
 8004098:	e7f2      	b.n	8004080 <HAL_NVIC_SetPriority+0x30>
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	e000e100 	.word	0xe000e100
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a4:	2280      	movs	r2, #128	@ 0x80
 80040a6:	1e43      	subs	r3, r0, #1
 80040a8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80040aa:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d20d      	bcs.n	80040cc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b2:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b4:	4807      	ldr	r0, [pc, #28]	@ (80040d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b8:	6a03      	ldr	r3, [r0, #32]
 80040ba:	0609      	lsls	r1, r1, #24
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ca:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80040cc:	4770      	bx	lr
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	e000e010 	.word	0xe000e010
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80040d8:	2300      	movs	r3, #0
{
 80040da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040dc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040de:	680a      	ldr	r2, [r1, #0]
 80040e0:	0014      	movs	r4, r2
 80040e2:	40dc      	lsrs	r4, r3
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 80040e6:	b005      	add	sp, #20
 80040e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040ea:	2501      	movs	r5, #1
 80040ec:	0014      	movs	r4, r2
 80040ee:	409d      	lsls	r5, r3
 80040f0:	402c      	ands	r4, r5
 80040f2:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80040f4:	422a      	tst	r2, r5
 80040f6:	d100      	bne.n	80040fa <HAL_GPIO_Init+0x22>
 80040f8:	e091      	b.n	800421e <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040fa:	684a      	ldr	r2, [r1, #4]
 80040fc:	005f      	lsls	r7, r3, #1
 80040fe:	4694      	mov	ip, r2
 8004100:	2203      	movs	r2, #3
 8004102:	4664      	mov	r4, ip
 8004104:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004106:	2403      	movs	r4, #3
 8004108:	40bc      	lsls	r4, r7
 800410a:	43e4      	mvns	r4, r4
 800410c:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800410e:	1e54      	subs	r4, r2, #1
 8004110:	2c01      	cmp	r4, #1
 8004112:	d82e      	bhi.n	8004172 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8004114:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004116:	9c01      	ldr	r4, [sp, #4]
 8004118:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800411a:	68cc      	ldr	r4, [r1, #12]
 800411c:	40bc      	lsls	r4, r7
 800411e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004120:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004122:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004124:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004126:	43ac      	bics	r4, r5
 8004128:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	4664      	mov	r4, ip
 800412c:	0924      	lsrs	r4, r4, #4
 800412e:	4034      	ands	r4, r6
 8004130:	409c      	lsls	r4, r3
 8004132:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004134:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8004136:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004138:	9c01      	ldr	r4, [sp, #4]
 800413a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800413c:	688c      	ldr	r4, [r1, #8]
 800413e:	40bc      	lsls	r4, r7
 8004140:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8004142:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004144:	2a02      	cmp	r2, #2
 8004146:	d116      	bne.n	8004176 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004148:	2507      	movs	r5, #7
 800414a:	260f      	movs	r6, #15
 800414c:	401d      	ands	r5, r3
 800414e:	00ad      	lsls	r5, r5, #2
 8004150:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8004152:	08dc      	lsrs	r4, r3, #3
 8004154:	00a4      	lsls	r4, r4, #2
 8004156:	1904      	adds	r4, r0, r4
 8004158:	9402      	str	r4, [sp, #8]
 800415a:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800415c:	9603      	str	r6, [sp, #12]
 800415e:	0026      	movs	r6, r4
 8004160:	9c03      	ldr	r4, [sp, #12]
 8004162:	43a6      	bics	r6, r4
 8004164:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004166:	690e      	ldr	r6, [r1, #16]
 8004168:	40ae      	lsls	r6, r5
 800416a:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 800416c:	9c02      	ldr	r4, [sp, #8]
 800416e:	6226      	str	r6, [r4, #32]
 8004170:	e001      	b.n	8004176 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004172:	2a03      	cmp	r2, #3
 8004174:	d1df      	bne.n	8004136 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004176:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8004178:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800417a:	9d01      	ldr	r5, [sp, #4]
 800417c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800417e:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004180:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8004182:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004184:	4662      	mov	r2, ip
 8004186:	02a4      	lsls	r4, r4, #10
 8004188:	4222      	tst	r2, r4
 800418a:	d048      	beq.n	800421e <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 800418c:	4a25      	ldr	r2, [pc, #148]	@ (8004224 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800418e:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8004190:	089c      	lsrs	r4, r3, #2
 8004192:	00a4      	lsls	r4, r4, #2
 8004194:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004196:	220f      	movs	r2, #15
 8004198:	401d      	ands	r5, r3
 800419a:	00ed      	lsls	r5, r5, #3
 800419c:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800419e:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80041a0:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80041a2:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80041a4:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80041a6:	2200      	movs	r2, #0
 80041a8:	42b8      	cmp	r0, r7
 80041aa:	d00c      	beq.n	80041c6 <HAL_GPIO_Init+0xee>
 80041ac:	4f1e      	ldr	r7, [pc, #120]	@ (8004228 <HAL_GPIO_Init+0x150>)
 80041ae:	3201      	adds	r2, #1
 80041b0:	42b8      	cmp	r0, r7
 80041b2:	d008      	beq.n	80041c6 <HAL_GPIO_Init+0xee>
 80041b4:	4f1d      	ldr	r7, [pc, #116]	@ (800422c <HAL_GPIO_Init+0x154>)
 80041b6:	3201      	adds	r2, #1
 80041b8:	42b8      	cmp	r0, r7
 80041ba:	d004      	beq.n	80041c6 <HAL_GPIO_Init+0xee>
 80041bc:	4f1c      	ldr	r7, [pc, #112]	@ (8004230 <HAL_GPIO_Init+0x158>)
 80041be:	3203      	adds	r2, #3
 80041c0:	42b8      	cmp	r0, r7
 80041c2:	d100      	bne.n	80041c6 <HAL_GPIO_Init+0xee>
 80041c4:	3a02      	subs	r2, #2
 80041c6:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041c8:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80041ca:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 80041cc:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 80041ce:	4c15      	ldr	r4, [pc, #84]	@ (8004224 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 80041d0:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 80041d2:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 80041d4:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80041d6:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 80041d8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041da:	02ff      	lsls	r7, r7, #11
 80041dc:	d401      	bmi.n	80041e2 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 80041de:	0035      	movs	r5, r6
 80041e0:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041e2:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 80041e4:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80041e6:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 80041e8:	9d00      	ldr	r5, [sp, #0]
 80041ea:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ec:	02bf      	lsls	r7, r7, #10
 80041ee:	d401      	bmi.n	80041f4 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 80041f0:	0035      	movs	r5, r6
 80041f2:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041f4:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 80041f6:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 80041f8:	4c0e      	ldr	r4, [pc, #56]	@ (8004234 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 80041fa:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 80041fc:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 80041fe:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004200:	03bf      	lsls	r7, r7, #14
 8004202:	d401      	bmi.n	8004208 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8004204:	0035      	movs	r5, r6
 8004206:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004208:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800420a:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 800420c:	4c0a      	ldr	r4, [pc, #40]	@ (8004238 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 800420e:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8004210:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8004212:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004214:	03ff      	lsls	r7, r7, #15
 8004216:	d401      	bmi.n	800421c <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8004218:	4015      	ands	r5, r2
 800421a:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800421c:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800421e:	3301      	adds	r3, #1
 8004220:	e75d      	b.n	80040de <HAL_GPIO_Init+0x6>
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	40021800 	.word	0x40021800
 8004228:	50000400 	.word	0x50000400
 800422c:	50000800 	.word	0x50000800
 8004230:	50000c00 	.word	0x50000c00
 8004234:	40021808 	.word	0x40021808
 8004238:	40021804 	.word	0x40021804

0800423c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800423c:	2a00      	cmp	r2, #0
 800423e:	d001      	beq.n	8004244 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004240:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004242:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004244:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004246:	e7fc      	b.n	8004242 <HAL_GPIO_WritePin+0x6>

08004248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004248:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800424a:	4c11      	ldr	r4, [pc, #68]	@ (8004290 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800424c:	4911      	ldr	r1, [pc, #68]	@ (8004294 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800424e:	6823      	ldr	r3, [r4, #0]
{
 8004250:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004252:	400b      	ands	r3, r1
 8004254:	4303      	orrs	r3, r0
 8004256:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004258:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800425a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	429a      	cmp	r2, r3
 8004260:	d10e      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004264:	490d      	ldr	r1, [pc, #52]	@ (800429c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	2306      	movs	r3, #6
 800426a:	4358      	muls	r0, r3
 800426c:	f7fb ff5a 	bl	8000124 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004270:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004272:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004274:	00d2      	lsls	r2, r2, #3
 8004276:	6961      	ldr	r1, [r4, #20]
 8004278:	0008      	movs	r0, r1
 800427a:	4010      	ands	r0, r2
 800427c:	4211      	tst	r1, r2
 800427e:	d100      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8004280:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8004286:	3b01      	subs	r3, #1
 8004288:	e7f5      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800428a:	2003      	movs	r0, #3
 800428c:	e7f8      	b.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x38>
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	40007000 	.word	0x40007000
 8004294:	fffff9ff 	.word	0xfffff9ff
 8004298:	20000000 	.word	0x20000000
 800429c:	000f4240 	.word	0x000f4240

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	0004      	movs	r4, r0
 80042a4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80042aa:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80042ac:	b005      	add	sp, #20
 80042ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b0:	6803      	ldr	r3, [r0, #0]
 80042b2:	07db      	lsls	r3, r3, #31
 80042b4:	d410      	bmi.n	80042d8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	079b      	lsls	r3, r3, #30
 80042ba:	d45c      	bmi.n	8004376 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	071b      	lsls	r3, r3, #28
 80042c0:	d500      	bpl.n	80042c4 <HAL_RCC_OscConfig+0x24>
 80042c2:	e0c1      	b.n	8004448 <HAL_RCC_OscConfig+0x1a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	075b      	lsls	r3, r3, #29
 80042c8:	d500      	bpl.n	80042cc <HAL_RCC_OscConfig+0x2c>
 80042ca:	e0f2      	b.n	80044b2 <HAL_RCC_OscConfig+0x212>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042cc:	69e3      	ldr	r3, [r4, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d000      	beq.n	80042d4 <HAL_RCC_OscConfig+0x34>
 80042d2:	e179      	b.n	80045c8 <HAL_RCC_OscConfig+0x328>
  return HAL_OK;
 80042d4:	2000      	movs	r0, #0
 80042d6:	e7e9      	b.n	80042ac <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d8:	2238      	movs	r2, #56	@ 0x38
 80042da:	4daf      	ldr	r5, [pc, #700]	@ (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80042dc:	68ab      	ldr	r3, [r5, #8]
 80042de:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e6:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80042e8:	079b      	lsls	r3, r3, #30
 80042ea:	d108      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	039b      	lsls	r3, r3, #14
 80042f0:	d5e1      	bpl.n	80042b6 <HAL_RCC_OscConfig+0x16>
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1de      	bne.n	80042b6 <HAL_RCC_OscConfig+0x16>
 80042f8:	e7d7      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d0f6      	beq.n	80042ec <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fe:	2280      	movs	r2, #128	@ 0x80
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	0252      	lsls	r2, r2, #9
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x8c>
 8004308:	682a      	ldr	r2, [r5, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800430e:	f7ff fa7d 	bl	800380c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004312:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004314:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	02bf      	lsls	r7, r7, #10
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	423b      	tst	r3, r7
 800431c:	d1cb      	bne.n	80042b6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431e:	f7ff fa75 	bl	800380c <HAL_GetTick>
 8004322:	1b80      	subs	r0, r0, r6
 8004324:	2864      	cmp	r0, #100	@ 0x64
 8004326:	d9f7      	bls.n	8004318 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8004328:	2003      	movs	r0, #3
 800432a:	e7bf      	b.n	80042ac <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	21a0      	movs	r1, #160	@ 0xa0
 800432e:	02c9      	lsls	r1, r1, #11
 8004330:	428b      	cmp	r3, r1
 8004332:	d108      	bne.n	8004346 <HAL_RCC_OscConfig+0xa6>
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	6829      	ldr	r1, [r5, #0]
 8004338:	02db      	lsls	r3, r3, #11
 800433a:	430b      	orrs	r3, r1
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	682b      	ldr	r3, [r5, #0]
 8004340:	431a      	orrs	r2, r3
 8004342:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	e7e3      	b.n	800430e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004346:	682a      	ldr	r2, [r5, #0]
 8004348:	4994      	ldr	r1, [pc, #592]	@ (800459c <HAL_RCC_OscConfig+0x2fc>)
 800434a:	400a      	ands	r2, r1
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	682a      	ldr	r2, [r5, #0]
 8004350:	4993      	ldr	r1, [pc, #588]	@ (80045a0 <HAL_RCC_OscConfig+0x300>)
 8004352:	400a      	ands	r2, r1
 8004354:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1d9      	bne.n	800430e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800435a:	f7ff fa57 	bl	800380c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004360:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004362:	02bf      	lsls	r7, r7, #10
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	423b      	tst	r3, r7
 8004368:	d0a5      	beq.n	80042b6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436a:	f7ff fa4f 	bl	800380c <HAL_GetTick>
 800436e:	1b80      	subs	r0, r0, r6
 8004370:	2864      	cmp	r0, #100	@ 0x64
 8004372:	d9f7      	bls.n	8004364 <HAL_RCC_OscConfig+0xc4>
 8004374:	e7d8      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004376:	2238      	movs	r2, #56	@ 0x38
 8004378:	4d87      	ldr	r5, [pc, #540]	@ (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800437a:	68ab      	ldr	r3, [r5, #8]
 800437c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004380:	2b10      	cmp	r3, #16
 8004382:	d128      	bne.n	80043d6 <HAL_RCC_OscConfig+0x136>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	2103      	movs	r1, #3
 8004386:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004388:	2a02      	cmp	r2, #2
 800438a:	d126      	bne.n	80043da <HAL_RCC_OscConfig+0x13a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438c:	682a      	ldr	r2, [r5, #0]
 800438e:	0552      	lsls	r2, r2, #21
 8004390:	d503      	bpl.n	800439a <HAL_RCC_OscConfig+0xfa>
 8004392:	68e2      	ldr	r2, [r4, #12]
 8004394:	2a00      	cmp	r2, #0
 8004396:	d100      	bne.n	800439a <HAL_RCC_OscConfig+0xfa>
 8004398:	e787      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	6869      	ldr	r1, [r5, #4]
 800439c:	6962      	ldr	r2, [r4, #20]
 800439e:	4881      	ldr	r0, [pc, #516]	@ (80045a4 <HAL_RCC_OscConfig+0x304>)
 80043a0:	0212      	lsls	r2, r2, #8
 80043a2:	4001      	ands	r1, r0
 80043a4:	430a      	orrs	r2, r1
 80043a6:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x126>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	4a7e      	ldr	r2, [pc, #504]	@ (80045a8 <HAL_RCC_OscConfig+0x308>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043b0:	497e      	ldr	r1, [pc, #504]	@ (80045ac <HAL_RCC_OscConfig+0x30c>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043b2:	4013      	ands	r3, r2
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043ba:	682b      	ldr	r3, [r5, #0]
 80043bc:	4a7c      	ldr	r2, [pc, #496]	@ (80045b0 <HAL_RCC_OscConfig+0x310>)
 80043be:	049b      	lsls	r3, r3, #18
 80043c0:	0f5b      	lsrs	r3, r3, #29
 80043c2:	40da      	lsrs	r2, r3
 80043c4:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c6:	4b7b      	ldr	r3, [pc, #492]	@ (80045b4 <HAL_RCC_OscConfig+0x314>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	f7ff f9d7 	bl	800377c <HAL_InitTick>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d100      	bne.n	80043d4 <HAL_RCC_OscConfig+0x134>
 80043d2:	e773      	b.n	80042bc <HAL_RCC_OscConfig+0x1c>
 80043d4:	e769      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0d8      	beq.n	800438c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	4a71      	ldr	r2, [pc, #452]	@ (80045a8 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043e6:	4013      	ands	r3, r2
 80043e8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ea:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043ec:	4313      	orrs	r3, r2
 80043ee:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	682a      	ldr	r2, [r5, #0]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043fa:	f7ff fa07 	bl	800380c <HAL_GetTick>
 80043fe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	423b      	tst	r3, r7
 8004404:	d007      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	686a      	ldr	r2, [r5, #4]
 8004408:	6963      	ldr	r3, [r4, #20]
 800440a:	4966      	ldr	r1, [pc, #408]	@ (80045a4 <HAL_RCC_OscConfig+0x304>)
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	400a      	ands	r2, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	606b      	str	r3, [r5, #4]
 8004414:	e752      	b.n	80042bc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7ff f9f9 	bl	800380c <HAL_GetTick>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	2802      	cmp	r0, #2
 800441e:	d9ef      	bls.n	8004400 <HAL_RCC_OscConfig+0x160>
 8004420:	e782      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	4a64      	ldr	r2, [pc, #400]	@ (80045b8 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004426:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8004428:	4013      	ands	r3, r2
 800442a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800442c:	f7ff f9ee 	bl	800380c <HAL_GetTick>
 8004430:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004432:	00ff      	lsls	r7, r7, #3
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	423b      	tst	r3, r7
 8004438:	d100      	bne.n	800443c <HAL_RCC_OscConfig+0x19c>
 800443a:	e73f      	b.n	80042bc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7ff f9e6 	bl	800380c <HAL_GetTick>
 8004440:	1b80      	subs	r0, r0, r6
 8004442:	2802      	cmp	r0, #2
 8004444:	d9f6      	bls.n	8004434 <HAL_RCC_OscConfig+0x194>
 8004446:	e76f      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004448:	2238      	movs	r2, #56	@ 0x38
 800444a:	4d53      	ldr	r5, [pc, #332]	@ (8004598 <HAL_RCC_OscConfig+0x2f8>)
 800444c:	68ab      	ldr	r3, [r5, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	2b18      	cmp	r3, #24
 8004452:	d108      	bne.n	8004466 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004454:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004456:	079b      	lsls	r3, r3, #30
 8004458:	d400      	bmi.n	800445c <HAL_RCC_OscConfig+0x1bc>
 800445a:	e733      	b.n	80042c4 <HAL_RCC_OscConfig+0x24>
 800445c:	69a3      	ldr	r3, [r4, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <HAL_RCC_OscConfig+0x1c4>
 8004462:	e72f      	b.n	80042c4 <HAL_RCC_OscConfig+0x24>
 8004464:	e721      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004466:	69a2      	ldr	r2, [r4, #24]
 8004468:	2301      	movs	r3, #1
 800446a:	2a00      	cmp	r2, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 800446e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004470:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8004472:	4313      	orrs	r3, r2
 8004474:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004476:	f7ff f9c9 	bl	800380c <HAL_GetTick>
 800447a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800447c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800447e:	423b      	tst	r3, r7
 8004480:	d000      	beq.n	8004484 <HAL_RCC_OscConfig+0x1e4>
 8004482:	e71f      	b.n	80042c4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7ff f9c2 	bl	800380c <HAL_GetTick>
 8004488:	1b80      	subs	r0, r0, r6
 800448a:	2802      	cmp	r0, #2
 800448c:	d9f6      	bls.n	800447c <HAL_RCC_OscConfig+0x1dc>
 800448e:	e74b      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8004490:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004492:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8004494:	439a      	bics	r2, r3
 8004496:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004498:	f7ff f9b8 	bl	800380c <HAL_GetTick>
 800449c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800449e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80044a0:	423b      	tst	r3, r7
 80044a2:	d100      	bne.n	80044a6 <HAL_RCC_OscConfig+0x206>
 80044a4:	e70e      	b.n	80042c4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a6:	f7ff f9b1 	bl	800380c <HAL_GetTick>
 80044aa:	1b80      	subs	r0, r0, r6
 80044ac:	2802      	cmp	r0, #2
 80044ae:	d9f6      	bls.n	800449e <HAL_RCC_OscConfig+0x1fe>
 80044b0:	e73a      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044b2:	2238      	movs	r2, #56	@ 0x38
 80044b4:	4d38      	ldr	r5, [pc, #224]	@ (8004598 <HAL_RCC_OscConfig+0x2f8>)
 80044b6:	68ab      	ldr	r3, [r5, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_OscConfig+0x230>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044be:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80044c0:	079b      	lsls	r3, r3, #30
 80044c2:	d400      	bmi.n	80044c6 <HAL_RCC_OscConfig+0x226>
 80044c4:	e702      	b.n	80042cc <HAL_RCC_OscConfig+0x2c>
 80044c6:	68a3      	ldr	r3, [r4, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d000      	beq.n	80044ce <HAL_RCC_OscConfig+0x22e>
 80044cc:	e6fe      	b.n	80042cc <HAL_RCC_OscConfig+0x2c>
 80044ce:	e6ec      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d0:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80044d2:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80044d6:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80044d8:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044da:	4213      	tst	r3, r2
 80044dc:	d108      	bne.n	80044f0 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80044e0:	4313      	orrs	r3, r2
 80044e2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80044e4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80044e6:	4013      	ands	r3, r2
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80044ec:	2301      	movs	r3, #1
 80044ee:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f0:	2780      	movs	r7, #128	@ 0x80
 80044f2:	4e32      	ldr	r6, [pc, #200]	@ (80045bc <HAL_RCC_OscConfig+0x31c>)
 80044f4:	007f      	lsls	r7, r7, #1
 80044f6:	6833      	ldr	r3, [r6, #0]
 80044f8:	423b      	tst	r3, r7
 80044fa:	d015      	beq.n	8004528 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fc:	68a3      	ldr	r3, [r4, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d122      	bne.n	8004548 <HAL_RCC_OscConfig+0x2a8>
 8004502:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004504:	4313      	orrs	r3, r2
 8004506:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8004508:	f7ff f980 	bl	800380c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800450e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004510:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004512:	423b      	tst	r3, r7
 8004514:	d038      	beq.n	8004588 <HAL_RCC_OscConfig+0x2e8>
      if (pwrclkchanged == SET)
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d000      	beq.n	800451e <HAL_RCC_OscConfig+0x27e>
 800451c:	e6d6      	b.n	80042cc <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8004520:	4a27      	ldr	r2, [pc, #156]	@ (80045c0 <HAL_RCC_OscConfig+0x320>)
 8004522:	4013      	ands	r3, r2
 8004524:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8004526:	e6d1      	b.n	80042cc <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	433b      	orrs	r3, r7
 800452c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800452e:	f7ff f96d 	bl	800380c <HAL_GetTick>
 8004532:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004534:	6833      	ldr	r3, [r6, #0]
 8004536:	423b      	tst	r3, r7
 8004538:	d1e0      	bne.n	80044fc <HAL_RCC_OscConfig+0x25c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7ff f967 	bl	800380c <HAL_GetTick>
 800453e:	9b01      	ldr	r3, [sp, #4]
 8004540:	1ac0      	subs	r0, r0, r3
 8004542:	2802      	cmp	r0, #2
 8004544:	d9f6      	bls.n	8004534 <HAL_RCC_OscConfig+0x294>
 8004546:	e6ef      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800454a:	2b05      	cmp	r3, #5
 800454c:	d105      	bne.n	800455a <HAL_RCC_OscConfig+0x2ba>
 800454e:	3b01      	subs	r3, #1
 8004550:	4313      	orrs	r3, r2
 8004552:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8004554:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004556:	2301      	movs	r3, #1
 8004558:	e7d4      	b.n	8004504 <HAL_RCC_OscConfig+0x264>
 800455a:	2101      	movs	r1, #1
 800455c:	438a      	bics	r2, r1
 800455e:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8004560:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004562:	3103      	adds	r1, #3
 8004564:	438a      	bics	r2, r1
 8004566:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1cd      	bne.n	8004508 <HAL_RCC_OscConfig+0x268>
        tickstart = HAL_GetTick();
 800456c:	f7ff f94e 	bl	800380c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004570:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004572:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004576:	423b      	tst	r3, r7
 8004578:	d0cd      	beq.n	8004516 <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7ff f947 	bl	800380c <HAL_GetTick>
 800457e:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_RCC_OscConfig+0x324>)
 8004580:	1b80      	subs	r0, r0, r6
 8004582:	4298      	cmp	r0, r3
 8004584:	d9f6      	bls.n	8004574 <HAL_RCC_OscConfig+0x2d4>
 8004586:	e6cf      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7ff f940 	bl	800380c <HAL_GetTick>
 800458c:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <HAL_RCC_OscConfig+0x324>)
 800458e:	1b80      	subs	r0, r0, r6
 8004590:	4298      	cmp	r0, r3
 8004592:	d9bd      	bls.n	8004510 <HAL_RCC_OscConfig+0x270>
 8004594:	e6c8      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	40021000 	.word	0x40021000
 800459c:	fffeffff 	.word	0xfffeffff
 80045a0:	fffbffff 	.word	0xfffbffff
 80045a4:	ffff80ff 	.word	0xffff80ff
 80045a8:	ffffc7ff 	.word	0xffffc7ff
 80045ac:	20000000 	.word	0x20000000
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	20000008 	.word	0x20000008
 80045b8:	fffffeff 	.word	0xfffffeff
 80045bc:	40007000 	.word	0x40007000
 80045c0:	efffffff 	.word	0xefffffff
 80045c4:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c8:	2138      	movs	r1, #56	@ 0x38
 80045ca:	4d3f      	ldr	r5, [pc, #252]	@ (80046c8 <HAL_RCC_OscConfig+0x428>)
 80045cc:	68aa      	ldr	r2, [r5, #8]
 80045ce:	400a      	ands	r2, r1
 80045d0:	2a10      	cmp	r2, #16
 80045d2:	d051      	beq.n	8004678 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045d4:	4a3d      	ldr	r2, [pc, #244]	@ (80046cc <HAL_RCC_OscConfig+0x42c>)
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d138      	bne.n	800464c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_DISABLE();
 80045da:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80045de:	4013      	ands	r3, r2
 80045e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045e2:	f7ff f913 	bl	800380c <HAL_GetTick>
 80045e6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e8:	04bf      	lsls	r7, r7, #18
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	423b      	tst	r3, r7
 80045ee:	d127      	bne.n	8004640 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80045f2:	6a23      	ldr	r3, [r4, #32]
 80045f4:	68ea      	ldr	r2, [r5, #12]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	4935      	ldr	r1, [pc, #212]	@ (80046d0 <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045fc:	400a      	ands	r2, r1
 80045fe:	4313      	orrs	r3, r2
 8004600:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004602:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004604:	4313      	orrs	r3, r2
 8004606:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004608:	4313      	orrs	r3, r2
 800460a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800460c:	0212      	lsls	r2, r2, #8
 800460e:	4313      	orrs	r3, r2
 8004610:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	682a      	ldr	r2, [r5, #0]
 8004616:	045b      	lsls	r3, r3, #17
 8004618:	4313      	orrs	r3, r2
 800461a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800461c:	2380      	movs	r3, #128	@ 0x80
 800461e:	68ea      	ldr	r2, [r5, #12]
 8004620:	055b      	lsls	r3, r3, #21
 8004622:	4313      	orrs	r3, r2
 8004624:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004626:	f7ff f8f1 	bl	800380c <HAL_GetTick>
 800462a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	4233      	tst	r3, r6
 8004630:	d000      	beq.n	8004634 <HAL_RCC_OscConfig+0x394>
 8004632:	e64f      	b.n	80042d4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7ff f8ea 	bl	800380c <HAL_GetTick>
 8004638:	1b00      	subs	r0, r0, r4
 800463a:	2802      	cmp	r0, #2
 800463c:	d9f6      	bls.n	800462c <HAL_RCC_OscConfig+0x38c>
 800463e:	e673      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7ff f8e4 	bl	800380c <HAL_GetTick>
 8004644:	1b80      	subs	r0, r0, r6
 8004646:	2802      	cmp	r0, #2
 8004648:	d9cf      	bls.n	80045ea <HAL_RCC_OscConfig+0x34a>
 800464a:	e66d      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800464c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004650:	4013      	ands	r3, r2
 8004652:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004654:	f7ff f8da 	bl	800380c <HAL_GetTick>
 8004658:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465a:	04b6      	lsls	r6, r6, #18
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	4233      	tst	r3, r6
 8004660:	d104      	bne.n	800466c <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004662:	68eb      	ldr	r3, [r5, #12]
 8004664:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <HAL_RCC_OscConfig+0x434>)
 8004666:	4013      	ands	r3, r2
 8004668:	60eb      	str	r3, [r5, #12]
 800466a:	e633      	b.n	80042d4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7ff f8ce 	bl	800380c <HAL_GetTick>
 8004670:	1b00      	subs	r0, r0, r4
 8004672:	2802      	cmp	r0, #2
 8004674:	d9f2      	bls.n	800465c <HAL_RCC_OscConfig+0x3bc>
 8004676:	e657      	b.n	8004328 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004678:	2b01      	cmp	r3, #1
 800467a:	d100      	bne.n	800467e <HAL_RCC_OscConfig+0x3de>
 800467c:	e615      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8004680:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	6a21      	ldr	r1, [r4, #32]
 8004684:	4002      	ands	r2, r0
 8004686:	428a      	cmp	r2, r1
 8004688:	d000      	beq.n	800468c <HAL_RCC_OscConfig+0x3ec>
 800468a:	e60e      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800468c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004690:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	428a      	cmp	r2, r1
 8004694:	d000      	beq.n	8004698 <HAL_RCC_OscConfig+0x3f8>
 8004696:	e608      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004698:	21fe      	movs	r1, #254	@ 0xfe
 800469a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800469c:	01c9      	lsls	r1, r1, #7
 800469e:	4001      	ands	r1, r0
 80046a0:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a2:	4291      	cmp	r1, r2
 80046a4:	d000      	beq.n	80046a8 <HAL_RCC_OscConfig+0x408>
 80046a6:	e600      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046a8:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046ac:	0392      	lsls	r2, r2, #14
 80046ae:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b0:	428a      	cmp	r2, r1
 80046b2:	d000      	beq.n	80046b6 <HAL_RCC_OscConfig+0x416>
 80046b4:	e5f9      	b.n	80042aa <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046b8:	0f40      	lsrs	r0, r0, #29
 80046ba:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046bc:	1ac0      	subs	r0, r0, r3
 80046be:	1e43      	subs	r3, r0, #1
 80046c0:	4198      	sbcs	r0, r3
 80046c2:	b2c0      	uxtb	r0, r0
 80046c4:	e5f2      	b.n	80042ac <HAL_RCC_OscConfig+0xc>
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	40021000 	.word	0x40021000
 80046cc:	feffffff 	.word	0xfeffffff
 80046d0:	1fc1808c 	.word	0x1fc1808c
 80046d4:	effefffc 	.word	0xeffefffc

080046d8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d8:	2338      	movs	r3, #56	@ 0x38
{
 80046da:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046dc:	4c1d      	ldr	r4, [pc, #116]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x7c>)
 80046de:	68a2      	ldr	r2, [r4, #8]
 80046e0:	421a      	tst	r2, r3
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046e4:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046e6:	481c      	ldr	r0, [pc, #112]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046e8:	049b      	lsls	r3, r3, #18
 80046ea:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046ec:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	68a2      	ldr	r2, [r4, #8]
 80046f2:	401a      	ands	r2, r3
 80046f4:	2a08      	cmp	r2, #8
 80046f6:	d027      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f8:	68a2      	ldr	r2, [r4, #8]
 80046fa:	401a      	ands	r2, r3
 80046fc:	2a10      	cmp	r2, #16
 80046fe:	d117      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004700:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004702:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004704:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004706:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004708:	0649      	lsls	r1, r1, #25
 800470a:	0f49      	lsrs	r1, r1, #29
 800470c:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800470e:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004710:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004712:	4015      	ands	r5, r2
    switch (pllsource)
 8004714:	079b      	lsls	r3, r3, #30
 8004716:	d109      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004718:	4810      	ldr	r0, [pc, #64]	@ (800475c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800471a:	f7fb fd03 	bl	8000124 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800471e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004720:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004722:	0f49      	lsrs	r1, r1, #29
 8004724:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004726:	f7fb fcfd 	bl	8000124 <__udivsi3>
 800472a:	e7e0      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800472c:	480a      	ldr	r0, [pc, #40]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x80>)
 800472e:	e7f4      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004730:	68a2      	ldr	r2, [r4, #8]
 8004732:	401a      	ands	r2, r3
 8004734:	2a20      	cmp	r2, #32
 8004736:	d009      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004738:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800473a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800473c:	4013      	ands	r3, r2
 800473e:	2b18      	cmp	r3, #24
 8004740:	d1d5      	bne.n	80046ee <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8004742:	20fa      	movs	r0, #250	@ 0xfa
 8004744:	01c0      	lsls	r0, r0, #7
 8004746:	e7d2      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8004748:	4804      	ldr	r0, [pc, #16]	@ (800475c <HAL_RCC_GetSysClockFreq+0x84>)
 800474a:	e7d0      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800474c:	2080      	movs	r0, #128	@ 0x80
 800474e:	0200      	lsls	r0, r0, #8
 8004750:	e7cd      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x16>
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	40021000 	.word	0x40021000
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCC_ClockConfig>:
{
 8004760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004762:	0004      	movs	r4, r0
 8004764:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004766:	2800      	cmp	r0, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
}
 800476c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800476e:	2707      	movs	r7, #7
 8004770:	4e4a      	ldr	r6, [pc, #296]	@ (800489c <HAL_RCC_ClockConfig+0x13c>)
 8004772:	6833      	ldr	r3, [r6, #0]
 8004774:	403b      	ands	r3, r7
 8004776:	428b      	cmp	r3, r1
 8004778:	d32a      	bcc.n	80047d0 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	0793      	lsls	r3, r2, #30
 800477e:	d43b      	bmi.n	80047f8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004780:	07d2      	lsls	r2, r2, #31
 8004782:	d448      	bmi.n	8004816 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	2707      	movs	r7, #7
 8004786:	6833      	ldr	r3, [r6, #0]
 8004788:	403b      	ands	r3, r7
 800478a:	42ab      	cmp	r3, r5
 800478c:	d90a      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	6833      	ldr	r3, [r6, #0]
 8004790:	43bb      	bics	r3, r7
 8004792:	432b      	orrs	r3, r5
 8004794:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004796:	f7ff f839 	bl	800380c <HAL_GetTick>
 800479a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	403b      	ands	r3, r7
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	d16b      	bne.n	800487c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	4d3e      	ldr	r5, [pc, #248]	@ (80048a0 <HAL_RCC_ClockConfig+0x140>)
 80047a8:	075b      	lsls	r3, r3, #29
 80047aa:	d46f      	bmi.n	800488c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047ac:	f7ff ff94 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 80047b0:	68ab      	ldr	r3, [r5, #8]
 80047b2:	493c      	ldr	r1, [pc, #240]	@ (80048a4 <HAL_RCC_ClockConfig+0x144>)
 80047b4:	051b      	lsls	r3, r3, #20
 80047b6:	0f1b      	lsrs	r3, r3, #28
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	585b      	ldr	r3, [r3, r1]
 80047bc:	211f      	movs	r1, #31
 80047be:	400b      	ands	r3, r1
 80047c0:	40d8      	lsrs	r0, r3
 80047c2:	4a39      	ldr	r2, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047c6:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	f7fe ffd7 	bl	800377c <HAL_InitTick>
 80047ce:	e7cd      	b.n	800476c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	43bb      	bics	r3, r7
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80047d8:	f7ff f818 	bl	800380c <HAL_GetTick>
 80047dc:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047de:	6833      	ldr	r3, [r6, #0]
 80047e0:	403b      	ands	r3, r7
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	d0c9      	beq.n	800477a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e6:	f7ff f811 	bl	800380c <HAL_GetTick>
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	1ac0      	subs	r0, r0, r3
 80047ee:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_RCC_ClockConfig+0x150>)
 80047f0:	4298      	cmp	r0, r3
 80047f2:	d9f4      	bls.n	80047de <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80047f4:	2003      	movs	r0, #3
 80047f6:	e7b9      	b.n	800476c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	4929      	ldr	r1, [pc, #164]	@ (80048a0 <HAL_RCC_ClockConfig+0x140>)
 80047fa:	0753      	lsls	r3, r2, #29
 80047fc:	d504      	bpl.n	8004808 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047fe:	23e0      	movs	r3, #224	@ 0xe0
 8004800:	6888      	ldr	r0, [r1, #8]
 8004802:	01db      	lsls	r3, r3, #7
 8004804:	4303      	orrs	r3, r0
 8004806:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	688b      	ldr	r3, [r1, #8]
 800480a:	482a      	ldr	r0, [pc, #168]	@ (80048b4 <HAL_RCC_ClockConfig+0x154>)
 800480c:	4003      	ands	r3, r0
 800480e:	68a0      	ldr	r0, [r4, #8]
 8004810:	4303      	orrs	r3, r0
 8004812:	608b      	str	r3, [r1, #8]
 8004814:	e7b4      	b.n	8004780 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	4f21      	ldr	r7, [pc, #132]	@ (80048a0 <HAL_RCC_ClockConfig+0x140>)
 800481a:	2a01      	cmp	r2, #1
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	039b      	lsls	r3, r3, #14
 8004822:	d5a2      	bpl.n	800476a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004824:	2107      	movs	r1, #7
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	438b      	bics	r3, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800482e:	f7fe ffed 	bl	800380c <HAL_GetTick>
 8004832:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004834:	2338      	movs	r3, #56	@ 0x38
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	401a      	ands	r2, r3
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	429a      	cmp	r2, r3
 8004840:	d0a0      	beq.n	8004784 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004842:	f7fe ffe3 	bl	800380c <HAL_GetTick>
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	1ac0      	subs	r0, r0, r3
 800484a:	4b19      	ldr	r3, [pc, #100]	@ (80048b0 <HAL_RCC_ClockConfig+0x150>)
 800484c:	4298      	cmp	r0, r3
 800484e:	d9f1      	bls.n	8004834 <HAL_RCC_ClockConfig+0xd4>
 8004850:	e7d0      	b.n	80047f4 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	2a02      	cmp	r2, #2
 8004854:	d103      	bne.n	800485e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	d4e3      	bmi.n	8004824 <HAL_RCC_ClockConfig+0xc4>
 800485c:	e785      	b.n	800476a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800485e:	2a00      	cmp	r2, #0
 8004860:	d103      	bne.n	800486a <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	055b      	lsls	r3, r3, #21
 8004866:	d4dd      	bmi.n	8004824 <HAL_RCC_ClockConfig+0xc4>
 8004868:	e77f      	b.n	800476a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800486a:	2302      	movs	r3, #2
 800486c:	2a03      	cmp	r2, #3
 800486e:	d103      	bne.n	8004878 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004870:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	4219      	tst	r1, r3
 8004874:	d1d6      	bne.n	8004824 <HAL_RCC_ClockConfig+0xc4>
 8004876:	e778      	b.n	800476a <HAL_RCC_ClockConfig+0xa>
 8004878:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800487a:	e7fa      	b.n	8004872 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fe ffc6 	bl	800380c <HAL_GetTick>
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	1ac0      	subs	r0, r0, r3
 8004884:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <HAL_RCC_ClockConfig+0x150>)
 8004886:	4298      	cmp	r0, r3
 8004888:	d988      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
 800488a:	e7b3      	b.n	80047f4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	68ab      	ldr	r3, [r5, #8]
 800488e:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x158>)
 8004890:	4013      	ands	r3, r2
 8004892:	68e2      	ldr	r2, [r4, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60ab      	str	r3, [r5, #8]
 8004898:	e788      	b.n	80047ac <HAL_RCC_ClockConfig+0x4c>
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	40022000 	.word	0x40022000
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08006804 	.word	0x08006804
 80048a8:	20000000 	.word	0x20000000
 80048ac:	20000008 	.word	0x20000008
 80048b0:	00001388 	.word	0x00001388
 80048b4:	fffff0ff 	.word	0xfffff0ff
 80048b8:	ffff8fff 	.word	0xffff8fff

080048bc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	000e      	movs	r6, r1
 80048c0:	b085      	sub	sp, #20
 80048c2:	0015      	movs	r5, r2
 80048c4:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048c6:	f7fe ffa1 	bl	800380c <HAL_GetTick>
 80048ca:	19ad      	adds	r5, r5, r6
 80048cc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80048ce:	f7fe ff9d 	bl	800380c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d2:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048d4:	4b25      	ldr	r3, [pc, #148]	@ (800496c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80048d6:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	0d1b      	lsrs	r3, r3, #20
 80048de:	436b      	muls	r3, r5
 80048e0:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	6893      	ldr	r3, [r2, #8]
 80048e6:	0018      	movs	r0, r3
 80048e8:	4038      	ands	r0, r7
 80048ea:	423b      	tst	r3, r7
 80048ec:	d032      	beq.n	8004954 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	1c73      	adds	r3, r6, #1
 80048f0:	d0f8      	beq.n	80048e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f2:	f7fe ff8b 	bl	800380c <HAL_GetTick>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	1ac0      	subs	r0, r0, r3
 80048fa:	42a8      	cmp	r0, r5
 80048fc:	d32c      	bcc.n	8004958 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048fe:	21e0      	movs	r1, #224	@ 0xe0
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	438a      	bics	r2, r1
 8004906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004908:	2282      	movs	r2, #130	@ 0x82
 800490a:	6861      	ldr	r1, [r4, #4]
 800490c:	0052      	lsls	r2, r2, #1
 800490e:	4291      	cmp	r1, r2
 8004910:	d10c      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8004912:	2180      	movs	r1, #128	@ 0x80
 8004914:	68a2      	ldr	r2, [r4, #8]
 8004916:	0209      	lsls	r1, r1, #8
 8004918:	428a      	cmp	r2, r1
 800491a:	d003      	beq.n	8004924 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800491c:	2180      	movs	r1, #128	@ 0x80
 800491e:	00c9      	lsls	r1, r1, #3
 8004920:	428a      	cmp	r2, r1
 8004922:	d103      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004924:	2140      	movs	r1, #64	@ 0x40
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	438a      	bics	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492c:	2180      	movs	r1, #128	@ 0x80
 800492e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004930:	0189      	lsls	r1, r1, #6
 8004932:	428a      	cmp	r2, r1
 8004934:	d106      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	480d      	ldr	r0, [pc, #52]	@ (8004970 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800493a:	4001      	ands	r1, r0
 800493c:	6019      	str	r1, [r3, #0]
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004944:	0023      	movs	r3, r4
 8004946:	2201      	movs	r2, #1
 8004948:	335d      	adds	r3, #93	@ 0x5d
 800494a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800494c:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 800494e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004950:	345c      	adds	r4, #92	@ 0x5c
 8004952:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8004954:	b005      	add	sp, #20
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d000      	beq.n	8004960 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 800495e:	002b      	movs	r3, r5
      count--;
 8004960:	9a03      	ldr	r2, [sp, #12]
 8004962:	001d      	movs	r5, r3
 8004964:	3a01      	subs	r2, #1
 8004966:	9203      	str	r2, [sp, #12]
 8004968:	e7bb      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	20000000 	.word	0x20000000
 8004970:	ffffdfff 	.word	0xffffdfff

08004974 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004976:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004978:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800497a:	b085      	sub	sp, #20
 800497c:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 800497e:	ab02      	add	r3, sp, #8
 8004980:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004982:	0004      	movs	r4, r0
 8004984:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004986:	f7fe ff41 	bl	800380c <HAL_GetTick>
 800498a:	19ed      	adds	r5, r5, r7
 800498c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800498e:	f7fe ff3d 	bl	800380c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004992:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004994:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8004996:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004998:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800499a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4353      	muls	r3, r2
 80049a0:	0d1b      	lsrs	r3, r3, #20
 80049a2:	436b      	muls	r3, r5
 80049a4:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049a6:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 80049a8:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 80049aa:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80049ac:	688b      	ldr	r3, [r1, #8]
 80049ae:	0018      	movs	r0, r3
 80049b0:	4030      	ands	r0, r6
 80049b2:	4233      	tst	r3, r6
 80049b4:	d03b      	beq.n	8004a2e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049b6:	23c0      	movs	r3, #192	@ 0xc0
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	429e      	cmp	r6, r3
 80049bc:	d104      	bne.n	80049c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	7b1b      	ldrb	r3, [r3, #12]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049c6:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049c8:	1c7b      	adds	r3, r7, #1
 80049ca:	d0ef      	beq.n	80049ac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049cc:	f7fe ff1e 	bl	800380c <HAL_GetTick>
 80049d0:	9b00      	ldr	r3, [sp, #0]
 80049d2:	1ac0      	subs	r0, r0, r3
 80049d4:	42a8      	cmp	r0, r5
 80049d6:	d32c      	bcc.n	8004a32 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d8:	21e0      	movs	r1, #224	@ 0xe0
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	438a      	bics	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e2:	2282      	movs	r2, #130	@ 0x82
 80049e4:	6861      	ldr	r1, [r4, #4]
 80049e6:	0052      	lsls	r2, r2, #1
 80049e8:	4291      	cmp	r1, r2
 80049ea:	d10c      	bne.n	8004a06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80049ec:	2180      	movs	r1, #128	@ 0x80
 80049ee:	68a2      	ldr	r2, [r4, #8]
 80049f0:	0209      	lsls	r1, r1, #8
 80049f2:	428a      	cmp	r2, r1
 80049f4:	d003      	beq.n	80049fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	00c9      	lsls	r1, r1, #3
 80049fa:	428a      	cmp	r2, r1
 80049fc:	d103      	bne.n	8004a06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fe:	2140      	movs	r1, #64	@ 0x40
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	438a      	bics	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a06:	2180      	movs	r1, #128	@ 0x80
 8004a08:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004a0a:	0189      	lsls	r1, r1, #6
 8004a0c:	428a      	cmp	r2, r1
 8004a0e:	d106      	bne.n	8004a1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	480d      	ldr	r0, [pc, #52]	@ (8004a48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8004a14:	4001      	ands	r1, r0
 8004a16:	6019      	str	r1, [r3, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	0023      	movs	r3, r4
 8004a20:	2201      	movs	r2, #1
 8004a22:	335d      	adds	r3, #93	@ 0x5d
 8004a24:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a26:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8004a28:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004a2a:	345c      	adds	r4, #92	@ 0x5c
 8004a2c:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8004a2e:	b005      	add	sp, #20
 8004a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d000      	beq.n	8004a3a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8004a38:	002b      	movs	r3, r5
      count--;
 8004a3a:	9a03      	ldr	r2, [sp, #12]
 8004a3c:	001d      	movs	r5, r3
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	9203      	str	r2, [sp, #12]
 8004a42:	e7b0      	b.n	80049a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8004a44:	20000000 	.word	0x20000000
 8004a48:	ffffdfff 	.word	0xffffdfff

08004a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a4e:	0013      	movs	r3, r2
{
 8004a50:	000d      	movs	r5, r1
 8004a52:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a54:	000a      	movs	r2, r1
 8004a56:	21c0      	movs	r1, #192	@ 0xc0
 8004a58:	0149      	lsls	r1, r1, #5
{
 8004a5a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a5c:	f7ff ff8a 	bl	8004974 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d005      	beq.n	8004a70 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a64:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a68:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	0032      	movs	r2, r6
 8004a72:	0029      	movs	r1, r5
 8004a74:	0020      	movs	r0, r4
 8004a76:	f7ff ff21 	bl	80048bc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d1f2      	bne.n	8004a64 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a7e:	21c0      	movs	r1, #192	@ 0xc0
 8004a80:	0033      	movs	r3, r6
 8004a82:	002a      	movs	r2, r5
 8004a84:	0020      	movs	r0, r4
 8004a86:	00c9      	lsls	r1, r1, #3
 8004a88:	f7ff ff74 	bl	8004974 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0ee      	beq.n	8004a6e <SPI_EndRxTxTransaction+0x22>
 8004a90:	e7e8      	b.n	8004a64 <SPI_EndRxTxTransaction+0x18>
	...

08004a94 <HAL_SPI_Init>:
{
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004a9a:	2c00      	cmp	r4, #0
 8004a9c:	d067      	beq.n	8004b6e <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d165      	bne.n	8004b70 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa4:	2282      	movs	r2, #130	@ 0x82
 8004aa6:	6861      	ldr	r1, [r4, #4]
 8004aa8:	0052      	lsls	r2, r2, #1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	d000      	beq.n	8004ab0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aae:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab6:	355d      	adds	r5, #93	@ 0x5d
 8004ab8:	782b      	ldrb	r3, [r5, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004ac0:	0023      	movs	r3, r4
 8004ac2:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004ac4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004ac6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004ac8:	f7fe fdcc 	bl	8003664 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004acc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004ace:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004ad2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad4:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004ad6:	680b      	ldr	r3, [r1, #0]
 8004ad8:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ada:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8004adc:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ade:	00d2      	lsls	r2, r2, #3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4296      	cmp	r6, r2
 8004ae4:	d948      	bls.n	8004b78 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ae6:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ae8:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aea:	0112      	lsls	r2, r2, #4
 8004aec:	4296      	cmp	r6, r2
 8004aee:	d000      	beq.n	8004af2 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af0:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af2:	2282      	movs	r2, #130	@ 0x82
 8004af4:	2784      	movs	r7, #132	@ 0x84
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	0052      	lsls	r2, r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	68a2      	ldr	r2, [r4, #8]
 8004afe:	023f      	lsls	r7, r7, #8
 8004b00:	403a      	ands	r2, r7
 8004b02:	2702      	movs	r7, #2
 8004b04:	4313      	orrs	r3, r2
 8004b06:	6922      	ldr	r2, [r4, #16]
 8004b08:	69a5      	ldr	r5, [r4, #24]
 8004b0a:	403a      	ands	r2, r7
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	2201      	movs	r2, #1
 8004b10:	6967      	ldr	r7, [r4, #20]
 8004b12:	4017      	ands	r7, r2
 8004b14:	433b      	orrs	r3, r7
 8004b16:	2780      	movs	r7, #128	@ 0x80
 8004b18:	00bf      	lsls	r7, r7, #2
 8004b1a:	402f      	ands	r7, r5
 8004b1c:	433b      	orrs	r3, r7
 8004b1e:	69e7      	ldr	r7, [r4, #28]
 8004b20:	3237      	adds	r2, #55	@ 0x37
 8004b22:	4017      	ands	r7, r2
 8004b24:	433b      	orrs	r3, r7
 8004b26:	6a27      	ldr	r7, [r4, #32]
 8004b28:	3248      	adds	r2, #72	@ 0x48
 8004b2a:	4017      	ands	r7, r2
 8004b2c:	2280      	movs	r2, #128	@ 0x80
 8004b2e:	433b      	orrs	r3, r7
 8004b30:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8004b32:	0192      	lsls	r2, r2, #6
 8004b34:	4017      	ands	r7, r2
 8004b36:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b38:	2710      	movs	r7, #16
 8004b3a:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b3c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b40:	0c2d      	lsrs	r5, r5, #16
 8004b42:	403b      	ands	r3, r7
 8004b44:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8004b46:	4017      	ands	r7, r2
 8004b48:	433b      	orrs	r3, r7
 8004b4a:	27f0      	movs	r7, #240	@ 0xf0
 8004b4c:	013f      	lsls	r7, r7, #4
 8004b4e:	403e      	ands	r6, r7
 8004b50:	4333      	orrs	r3, r6
 8004b52:	2604      	movs	r6, #4
 8004b54:	4035      	ands	r5, r6
 8004b56:	432b      	orrs	r3, r5
 8004b58:	4303      	orrs	r3, r0
 8004b5a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5c:	69cb      	ldr	r3, [r1, #28]
 8004b5e:	4808      	ldr	r0, [pc, #32]	@ (8004b80 <HAL_SPI_Init+0xec>)
 8004b60:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b62:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b64:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004b66:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b68:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b6a:	345d      	adds	r4, #93	@ 0x5d
 8004b6c:	7023      	strb	r3, [r4, #0]
}
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b70:	2300      	movs	r3, #0
 8004b72:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b74:	6163      	str	r3, [r4, #20]
 8004b76:	e79b      	b.n	8004ab0 <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b78:	2080      	movs	r0, #128	@ 0x80
 8004b7a:	0140      	lsls	r0, r0, #5
 8004b7c:	e7b6      	b.n	8004aec <HAL_SPI_Init+0x58>
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	fffff7ff 	.word	0xfffff7ff

08004b84 <HAL_SPI_Transmit>:
{
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b085      	sub	sp, #20
 8004b88:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	335c      	adds	r3, #92	@ 0x5c
{
 8004b8e:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8004b90:	781a      	ldrb	r2, [r3, #0]
{
 8004b92:	0004      	movs	r4, r0
 8004b94:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8004b96:	2702      	movs	r7, #2
 8004b98:	2a01      	cmp	r2, #1
 8004b9a:	d100      	bne.n	8004b9e <HAL_SPI_Transmit+0x1a>
 8004b9c:	e082      	b.n	8004ca4 <HAL_SPI_Transmit+0x120>
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004ba2:	f7fe fe33 	bl	800380c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba6:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004ba8:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004baa:	335d      	adds	r3, #93	@ 0x5d
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	b2d7      	uxtb	r7, r2
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	d000      	beq.n	8004bb6 <HAL_SPI_Transmit+0x32>
 8004bb4:	e0a6      	b.n	8004d04 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	d071      	beq.n	8004c9e <HAL_SPI_Transmit+0x11a>
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	d06f      	beq.n	8004c9e <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bbe:	3202      	adds	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bc2:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8004bc4:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bc6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc8:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bca:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bcc:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bce:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8004bd0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8004bd2:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bd4:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd6:	2280      	movs	r2, #128	@ 0x80
 8004bd8:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8004bda:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004bdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bde:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8004be0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be2:	4291      	cmp	r1, r2
 8004be4:	d108      	bne.n	8004bf8 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8004be6:	2140      	movs	r1, #64	@ 0x40
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	438a      	bics	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	01d2      	lsls	r2, r2, #7
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf8:	2240      	movs	r2, #64	@ 0x40
 8004bfa:	6819      	ldr	r1, [r3, #0]
 8004bfc:	4211      	tst	r1, r2
 8004bfe:	d102      	bne.n	8004c06 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c06:	21e0      	movs	r1, #224	@ 0xe0
 8004c08:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0a:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c0c:	00c9      	lsls	r1, r1, #3
 8004c0e:	4288      	cmp	r0, r1
 8004c10:	d94b      	bls.n	8004caa <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_SPI_Transmit+0x96>
 8004c16:	2e01      	cmp	r6, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004c20:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c22:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2a:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8004c2c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d119      	bne.n	8004c66 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c32:	0020      	movs	r0, r4
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	9900      	ldr	r1, [sp, #0]
 8004c38:	f7ff ff08 	bl	8004a4c <SPI_EndRxTxTransaction>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d15e      	bne.n	8004cfe <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c40:	68a3      	ldr	r3, [r4, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c46:	9303      	str	r3, [sp, #12]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	9203      	str	r2, [sp, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	9303      	str	r3, [sp, #12]
 8004c52:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c54:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d121      	bne.n	8004c9e <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8004c5a:	0023      	movs	r3, r4
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c60:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8004c62:	7019      	strb	r1, [r3, #0]
 8004c64:	e01b      	b.n	8004c9e <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	6893      	ldr	r3, [r2, #8]
 8004c6a:	422b      	tst	r3, r5
 8004c6c:	d009      	beq.n	8004c82 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004c70:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c72:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c74:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c76:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c78:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004c80:	e7d4      	b.n	8004c2c <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fe fdc3 	bl	800380c <HAL_GetTick>
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	1ac0      	subs	r0, r0, r3
 8004c8a:	9b00      	ldr	r3, [sp, #0]
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	d3cd      	bcc.n	8004c2c <HAL_SPI_Transmit+0xa8>
 8004c90:	3301      	adds	r3, #1
 8004c92:	d0cb      	beq.n	8004c2c <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8004c94:	0023      	movs	r3, r4
 8004c96:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8004c98:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	335d      	adds	r3, #93	@ 0x5d
 8004c9c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	345c      	adds	r4, #92	@ 0x5c
 8004ca2:	7023      	strb	r3, [r4, #0]
}
 8004ca4:	0038      	movs	r0, r7
 8004ca6:	b005      	add	sp, #20
 8004ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_SPI_Transmit+0x12e>
 8004cae:	2e01      	cmp	r6, #1
 8004cb0:	d108      	bne.n	8004cc4 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb2:	782a      	ldrb	r2, [r5, #0]
 8004cb4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004cb8:	3301      	adds	r3, #1
 8004cba:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cbc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc4:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8004cc6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0b2      	beq.n	8004c32 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	422a      	tst	r2, r5
 8004cd2:	d00a      	beq.n	8004cea <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004cdc:	3301      	adds	r3, #1
 8004cde:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ce0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004ce8:	e7ed      	b.n	8004cc6 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cea:	f7fe fd8f 	bl	800380c <HAL_GetTick>
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	1ac0      	subs	r0, r0, r3
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	4298      	cmp	r0, r3
 8004cf6:	d3e6      	bcc.n	8004cc6 <HAL_SPI_Transmit+0x142>
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	d0e4      	beq.n	8004cc6 <HAL_SPI_Transmit+0x142>
 8004cfc:	e7ca      	b.n	8004c94 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfe:	2320      	movs	r3, #32
 8004d00:	6623      	str	r3, [r4, #96]	@ 0x60
 8004d02:	e79d      	b.n	8004c40 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8004d04:	2702      	movs	r7, #2
 8004d06:	e7ca      	b.n	8004c9e <HAL_SPI_Transmit+0x11a>

08004d08 <sniprintf>:
 8004d08:	b40c      	push	{r2, r3}
 8004d0a:	b530      	push	{r4, r5, lr}
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <sniprintf+0x64>)
 8004d0e:	000c      	movs	r4, r1
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	b09d      	sub	sp, #116	@ 0x74
 8004d14:	2900      	cmp	r1, #0
 8004d16:	da08      	bge.n	8004d2a <sniprintf+0x22>
 8004d18:	238b      	movs	r3, #139	@ 0x8b
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	4240      	negs	r0, r0
 8004d20:	b01d      	add	sp, #116	@ 0x74
 8004d22:	bc30      	pop	{r4, r5}
 8004d24:	bc08      	pop	{r3}
 8004d26:	b002      	add	sp, #8
 8004d28:	4718      	bx	r3
 8004d2a:	2382      	movs	r3, #130	@ 0x82
 8004d2c:	466a      	mov	r2, sp
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	8293      	strh	r3, [r2, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	d000      	beq.n	8004d3e <sniprintf+0x36>
 8004d3c:	1e4b      	subs	r3, r1, #1
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	2301      	movs	r3, #1
 8004d44:	466a      	mov	r2, sp
 8004d46:	425b      	negs	r3, r3
 8004d48:	82d3      	strh	r3, [r2, #22]
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	ab21      	add	r3, sp, #132	@ 0x84
 8004d4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d50:	a902      	add	r1, sp, #8
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	f000 f9a4 	bl	80050a0 <_svfiprintf_r>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	da01      	bge.n	8004d60 <sniprintf+0x58>
 8004d5c:	238b      	movs	r3, #139	@ 0x8b
 8004d5e:	602b      	str	r3, [r5, #0]
 8004d60:	2c00      	cmp	r4, #0
 8004d62:	d0dd      	beq.n	8004d20 <sniprintf+0x18>
 8004d64:	2200      	movs	r2, #0
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e7d9      	b.n	8004d20 <sniprintf+0x18>
 8004d6c:	2000000c 	.word	0x2000000c

08004d70 <memset>:
 8004d70:	0003      	movs	r3, r0
 8004d72:	1882      	adds	r2, r0, r2
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d100      	bne.n	8004d7a <memset+0xa>
 8004d78:	4770      	bx	lr
 8004d7a:	7019      	strb	r1, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	e7f9      	b.n	8004d74 <memset+0x4>

08004d80 <__errno>:
 8004d80:	4b01      	ldr	r3, [pc, #4]	@ (8004d88 <__errno+0x8>)
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <__libc_init_array>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2600      	movs	r6, #0
 8004d90:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc4 <__libc_init_array+0x38>)
 8004d92:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc8 <__libc_init_array+0x3c>)
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d109      	bne.n	8004db0 <__libc_init_array+0x24>
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	f001 fb95 	bl	80064cc <_init>
 8004da2:	4c0a      	ldr	r4, [pc, #40]	@ (8004dcc <__libc_init_array+0x40>)
 8004da4:	4d0a      	ldr	r5, [pc, #40]	@ (8004dd0 <__libc_init_array+0x44>)
 8004da6:	1b64      	subs	r4, r4, r5
 8004da8:	10a4      	asrs	r4, r4, #2
 8004daa:	42a6      	cmp	r6, r4
 8004dac:	d105      	bne.n	8004dba <__libc_init_array+0x2e>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	00b3      	lsls	r3, r6, #2
 8004db2:	58eb      	ldr	r3, [r5, r3]
 8004db4:	4798      	blx	r3
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7ee      	b.n	8004d98 <__libc_init_array+0xc>
 8004dba:	00b3      	lsls	r3, r6, #2
 8004dbc:	58eb      	ldr	r3, [r5, r3]
 8004dbe:	4798      	blx	r3
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	e7f2      	b.n	8004daa <__libc_init_array+0x1e>
 8004dc4:	080068a8 	.word	0x080068a8
 8004dc8:	080068a8 	.word	0x080068a8
 8004dcc:	080068ac 	.word	0x080068ac
 8004dd0:	080068a8 	.word	0x080068a8

08004dd4 <__retarget_lock_acquire_recursive>:
 8004dd4:	4770      	bx	lr

08004dd6 <__retarget_lock_release_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <strcpy>:
 8004dd8:	0003      	movs	r3, r0
 8004dda:	780a      	ldrb	r2, [r1, #0]
 8004ddc:	3101      	adds	r1, #1
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	d1f9      	bne.n	8004dda <strcpy+0x2>
 8004de6:	4770      	bx	lr

08004de8 <_free_r>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	0005      	movs	r5, r0
 8004dec:	1e0c      	subs	r4, r1, #0
 8004dee:	d010      	beq.n	8004e12 <_free_r+0x2a>
 8004df0:	3c04      	subs	r4, #4
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da00      	bge.n	8004dfa <_free_r+0x12>
 8004df8:	18e4      	adds	r4, r4, r3
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f000 f8e0 	bl	8004fc0 <__malloc_lock>
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <_free_r+0x90>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <_free_r+0x2c>
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6014      	str	r4, [r2, #0]
 8004e0c:	0028      	movs	r0, r5
 8004e0e:	f000 f8df 	bl	8004fd0 <__malloc_unlock>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d908      	bls.n	8004e2a <_free_r+0x42>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	1821      	adds	r1, r4, r0
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d1f3      	bne.n	8004e08 <_free_r+0x20>
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	1809      	adds	r1, r1, r0
 8004e26:	6021      	str	r1, [r4, #0]
 8004e28:	e7ee      	b.n	8004e08 <_free_r+0x20>
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <_free_r+0x4e>
 8004e32:	42a3      	cmp	r3, r4
 8004e34:	d9f9      	bls.n	8004e2a <_free_r+0x42>
 8004e36:	6811      	ldr	r1, [r2, #0]
 8004e38:	1850      	adds	r0, r2, r1
 8004e3a:	42a0      	cmp	r0, r4
 8004e3c:	d10b      	bne.n	8004e56 <_free_r+0x6e>
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1809      	adds	r1, r1, r0
 8004e42:	1850      	adds	r0, r2, r1
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	4283      	cmp	r3, r0
 8004e48:	d1e0      	bne.n	8004e0c <_free_r+0x24>
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	1841      	adds	r1, r0, r1
 8004e50:	6011      	str	r1, [r2, #0]
 8004e52:	6053      	str	r3, [r2, #4]
 8004e54:	e7da      	b.n	8004e0c <_free_r+0x24>
 8004e56:	42a0      	cmp	r0, r4
 8004e58:	d902      	bls.n	8004e60 <_free_r+0x78>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	e7d5      	b.n	8004e0c <_free_r+0x24>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428b      	cmp	r3, r1
 8004e66:	d103      	bne.n	8004e70 <_free_r+0x88>
 8004e68:	6819      	ldr	r1, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	1809      	adds	r1, r1, r0
 8004e6e:	6021      	str	r1, [r4, #0]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	6054      	str	r4, [r2, #4]
 8004e74:	e7ca      	b.n	8004e0c <_free_r+0x24>
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	200002f4 	.word	0x200002f4

08004e7c <sbrk_aligned>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8004ebc <sbrk_aligned+0x40>)
 8004e80:	000d      	movs	r5, r1
 8004e82:	6831      	ldr	r1, [r6, #0]
 8004e84:	0004      	movs	r4, r0
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d102      	bne.n	8004e90 <sbrk_aligned+0x14>
 8004e8a:	f000 fb99 	bl	80055c0 <_sbrk_r>
 8004e8e:	6030      	str	r0, [r6, #0]
 8004e90:	0029      	movs	r1, r5
 8004e92:	0020      	movs	r0, r4
 8004e94:	f000 fb94 	bl	80055c0 <_sbrk_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d103      	bne.n	8004ea4 <sbrk_aligned+0x28>
 8004e9c:	2501      	movs	r5, #1
 8004e9e:	426d      	negs	r5, r5
 8004ea0:	0028      	movs	r0, r5
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	1cc5      	adds	r5, r0, #3
 8004ea8:	439d      	bics	r5, r3
 8004eaa:	42a8      	cmp	r0, r5
 8004eac:	d0f8      	beq.n	8004ea0 <sbrk_aligned+0x24>
 8004eae:	1a29      	subs	r1, r5, r0
 8004eb0:	0020      	movs	r0, r4
 8004eb2:	f000 fb85 	bl	80055c0 <_sbrk_r>
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d1f2      	bne.n	8004ea0 <sbrk_aligned+0x24>
 8004eba:	e7ef      	b.n	8004e9c <sbrk_aligned+0x20>
 8004ebc:	200002f0 	.word	0x200002f0

08004ec0 <_malloc_r>:
 8004ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	1ccb      	adds	r3, r1, #3
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	3308      	adds	r3, #8
 8004eca:	0005      	movs	r5, r0
 8004ecc:	001f      	movs	r7, r3
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d234      	bcs.n	8004f3c <_malloc_r+0x7c>
 8004ed2:	270c      	movs	r7, #12
 8004ed4:	42b9      	cmp	r1, r7
 8004ed6:	d833      	bhi.n	8004f40 <_malloc_r+0x80>
 8004ed8:	0028      	movs	r0, r5
 8004eda:	f000 f871 	bl	8004fc0 <__malloc_lock>
 8004ede:	4e37      	ldr	r6, [pc, #220]	@ (8004fbc <_malloc_r+0xfc>)
 8004ee0:	6833      	ldr	r3, [r6, #0]
 8004ee2:	001c      	movs	r4, r3
 8004ee4:	2c00      	cmp	r4, #0
 8004ee6:	d12f      	bne.n	8004f48 <_malloc_r+0x88>
 8004ee8:	0039      	movs	r1, r7
 8004eea:	0028      	movs	r0, r5
 8004eec:	f7ff ffc6 	bl	8004e7c <sbrk_aligned>
 8004ef0:	0004      	movs	r4, r0
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d15f      	bne.n	8004fb6 <_malloc_r+0xf6>
 8004ef6:	6834      	ldr	r4, [r6, #0]
 8004ef8:	9400      	str	r4, [sp, #0]
 8004efa:	9b00      	ldr	r3, [sp, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d14a      	bne.n	8004f96 <_malloc_r+0xd6>
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d052      	beq.n	8004faa <_malloc_r+0xea>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	0028      	movs	r0, r5
 8004f08:	18e3      	adds	r3, r4, r3
 8004f0a:	9900      	ldr	r1, [sp, #0]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	f000 fb57 	bl	80055c0 <_sbrk_r>
 8004f12:	9b01      	ldr	r3, [sp, #4]
 8004f14:	4283      	cmp	r3, r0
 8004f16:	d148      	bne.n	8004faa <_malloc_r+0xea>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	0028      	movs	r0, r5
 8004f1c:	1aff      	subs	r7, r7, r3
 8004f1e:	0039      	movs	r1, r7
 8004f20:	f7ff ffac 	bl	8004e7c <sbrk_aligned>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d040      	beq.n	8004faa <_malloc_r+0xea>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	19db      	adds	r3, r3, r7
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	6833      	ldr	r3, [r6, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d133      	bne.n	8004f9e <_malloc_r+0xde>
 8004f36:	9b00      	ldr	r3, [sp, #0]
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	e019      	b.n	8004f70 <_malloc_r+0xb0>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	dac9      	bge.n	8004ed4 <_malloc_r+0x14>
 8004f40:	230c      	movs	r3, #12
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f48:	6821      	ldr	r1, [r4, #0]
 8004f4a:	1bc9      	subs	r1, r1, r7
 8004f4c:	d420      	bmi.n	8004f90 <_malloc_r+0xd0>
 8004f4e:	290b      	cmp	r1, #11
 8004f50:	d90a      	bls.n	8004f68 <_malloc_r+0xa8>
 8004f52:	19e2      	adds	r2, r4, r7
 8004f54:	6027      	str	r7, [r4, #0]
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	d104      	bne.n	8004f64 <_malloc_r+0xa4>
 8004f5a:	6032      	str	r2, [r6, #0]
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	6011      	str	r1, [r2, #0]
 8004f60:	6053      	str	r3, [r2, #4]
 8004f62:	e005      	b.n	8004f70 <_malloc_r+0xb0>
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	e7f9      	b.n	8004f5c <_malloc_r+0x9c>
 8004f68:	6862      	ldr	r2, [r4, #4]
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	d10e      	bne.n	8004f8c <_malloc_r+0xcc>
 8004f6e:	6032      	str	r2, [r6, #0]
 8004f70:	0028      	movs	r0, r5
 8004f72:	f000 f82d 	bl	8004fd0 <__malloc_unlock>
 8004f76:	0020      	movs	r0, r4
 8004f78:	2207      	movs	r2, #7
 8004f7a:	300b      	adds	r0, #11
 8004f7c:	1d23      	adds	r3, r4, #4
 8004f7e:	4390      	bics	r0, r2
 8004f80:	1ac2      	subs	r2, r0, r3
 8004f82:	4298      	cmp	r0, r3
 8004f84:	d0df      	beq.n	8004f46 <_malloc_r+0x86>
 8004f86:	1a1b      	subs	r3, r3, r0
 8004f88:	50a3      	str	r3, [r4, r2]
 8004f8a:	e7dc      	b.n	8004f46 <_malloc_r+0x86>
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	e7ef      	b.n	8004f70 <_malloc_r+0xb0>
 8004f90:	0023      	movs	r3, r4
 8004f92:	6864      	ldr	r4, [r4, #4]
 8004f94:	e7a6      	b.n	8004ee4 <_malloc_r+0x24>
 8004f96:	9c00      	ldr	r4, [sp, #0]
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	e7ad      	b.n	8004efa <_malloc_r+0x3a>
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	42a3      	cmp	r3, r4
 8004fa4:	d1fb      	bne.n	8004f9e <_malloc_r+0xde>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e7da      	b.n	8004f60 <_malloc_r+0xa0>
 8004faa:	230c      	movs	r3, #12
 8004fac:	0028      	movs	r0, r5
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f000 f80e 	bl	8004fd0 <__malloc_unlock>
 8004fb4:	e7c6      	b.n	8004f44 <_malloc_r+0x84>
 8004fb6:	6007      	str	r7, [r0, #0]
 8004fb8:	e7da      	b.n	8004f70 <_malloc_r+0xb0>
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	200002f4 	.word	0x200002f4

08004fc0 <__malloc_lock>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4802      	ldr	r0, [pc, #8]	@ (8004fcc <__malloc_lock+0xc>)
 8004fc4:	f7ff ff06 	bl	8004dd4 <__retarget_lock_acquire_recursive>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	200002ec 	.word	0x200002ec

08004fd0 <__malloc_unlock>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4802      	ldr	r0, [pc, #8]	@ (8004fdc <__malloc_unlock+0xc>)
 8004fd4:	f7ff feff 	bl	8004dd6 <__retarget_lock_release_recursive>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	200002ec 	.word	0x200002ec

08004fe0 <__ssputs_r>:
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	688e      	ldr	r6, [r1, #8]
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	001f      	movs	r7, r3
 8004fe8:	000c      	movs	r4, r1
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	9002      	str	r0, [sp, #8]
 8004fee:	9203      	str	r2, [sp, #12]
 8004ff0:	42be      	cmp	r6, r7
 8004ff2:	d830      	bhi.n	8005056 <__ssputs_r+0x76>
 8004ff4:	210c      	movs	r1, #12
 8004ff6:	5e62      	ldrsh	r2, [r4, r1]
 8004ff8:	2190      	movs	r1, #144	@ 0x90
 8004ffa:	00c9      	lsls	r1, r1, #3
 8004ffc:	420a      	tst	r2, r1
 8004ffe:	d028      	beq.n	8005052 <__ssputs_r+0x72>
 8005000:	2003      	movs	r0, #3
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	1a5b      	subs	r3, r3, r1
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	6963      	ldr	r3, [r4, #20]
 800500a:	4343      	muls	r3, r0
 800500c:	9801      	ldr	r0, [sp, #4]
 800500e:	0fdd      	lsrs	r5, r3, #31
 8005010:	18ed      	adds	r5, r5, r3
 8005012:	1c7b      	adds	r3, r7, #1
 8005014:	181b      	adds	r3, r3, r0
 8005016:	106d      	asrs	r5, r5, #1
 8005018:	42ab      	cmp	r3, r5
 800501a:	d900      	bls.n	800501e <__ssputs_r+0x3e>
 800501c:	001d      	movs	r5, r3
 800501e:	0552      	lsls	r2, r2, #21
 8005020:	d528      	bpl.n	8005074 <__ssputs_r+0x94>
 8005022:	0029      	movs	r1, r5
 8005024:	9802      	ldr	r0, [sp, #8]
 8005026:	f7ff ff4b 	bl	8004ec0 <_malloc_r>
 800502a:	1e06      	subs	r6, r0, #0
 800502c:	d02c      	beq.n	8005088 <__ssputs_r+0xa8>
 800502e:	9a01      	ldr	r2, [sp, #4]
 8005030:	6921      	ldr	r1, [r4, #16]
 8005032:	f000 fae2 	bl	80055fa <memcpy>
 8005036:	89a2      	ldrh	r2, [r4, #12]
 8005038:	4b18      	ldr	r3, [pc, #96]	@ (800509c <__ssputs_r+0xbc>)
 800503a:	401a      	ands	r2, r3
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	4313      	orrs	r3, r2
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	9b01      	ldr	r3, [sp, #4]
 8005044:	6126      	str	r6, [r4, #16]
 8005046:	18f6      	adds	r6, r6, r3
 8005048:	6026      	str	r6, [r4, #0]
 800504a:	003e      	movs	r6, r7
 800504c:	6165      	str	r5, [r4, #20]
 800504e:	1aed      	subs	r5, r5, r3
 8005050:	60a5      	str	r5, [r4, #8]
 8005052:	42be      	cmp	r6, r7
 8005054:	d900      	bls.n	8005058 <__ssputs_r+0x78>
 8005056:	003e      	movs	r6, r7
 8005058:	0032      	movs	r2, r6
 800505a:	9903      	ldr	r1, [sp, #12]
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	f000 fa9b 	bl	8005598 <memmove>
 8005062:	2000      	movs	r0, #0
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	1b9b      	subs	r3, r3, r6
 8005068:	60a3      	str	r3, [r4, #8]
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	199b      	adds	r3, r3, r6
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	b005      	add	sp, #20
 8005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005074:	002a      	movs	r2, r5
 8005076:	9802      	ldr	r0, [sp, #8]
 8005078:	f000 fac8 	bl	800560c <_realloc_r>
 800507c:	1e06      	subs	r6, r0, #0
 800507e:	d1e0      	bne.n	8005042 <__ssputs_r+0x62>
 8005080:	6921      	ldr	r1, [r4, #16]
 8005082:	9802      	ldr	r0, [sp, #8]
 8005084:	f7ff feb0 	bl	8004de8 <_free_r>
 8005088:	230c      	movs	r3, #12
 800508a:	2001      	movs	r0, #1
 800508c:	9a02      	ldr	r2, [sp, #8]
 800508e:	4240      	negs	r0, r0
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	89a2      	ldrh	r2, [r4, #12]
 8005094:	3334      	adds	r3, #52	@ 0x34
 8005096:	4313      	orrs	r3, r2
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	e7e9      	b.n	8005070 <__ssputs_r+0x90>
 800509c:	fffffb7f 	.word	0xfffffb7f

080050a0 <_svfiprintf_r>:
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	b0a1      	sub	sp, #132	@ 0x84
 80050a4:	9003      	str	r0, [sp, #12]
 80050a6:	001d      	movs	r5, r3
 80050a8:	898b      	ldrh	r3, [r1, #12]
 80050aa:	000f      	movs	r7, r1
 80050ac:	0016      	movs	r6, r2
 80050ae:	061b      	lsls	r3, r3, #24
 80050b0:	d511      	bpl.n	80050d6 <_svfiprintf_r+0x36>
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10e      	bne.n	80050d6 <_svfiprintf_r+0x36>
 80050b8:	2140      	movs	r1, #64	@ 0x40
 80050ba:	f7ff ff01 	bl	8004ec0 <_malloc_r>
 80050be:	6038      	str	r0, [r7, #0]
 80050c0:	6138      	str	r0, [r7, #16]
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d105      	bne.n	80050d2 <_svfiprintf_r+0x32>
 80050c6:	230c      	movs	r3, #12
 80050c8:	9a03      	ldr	r2, [sp, #12]
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	2001      	movs	r0, #1
 80050ce:	4240      	negs	r0, r0
 80050d0:	e0cf      	b.n	8005272 <_svfiprintf_r+0x1d2>
 80050d2:	2340      	movs	r3, #64	@ 0x40
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	2300      	movs	r3, #0
 80050d8:	ac08      	add	r4, sp, #32
 80050da:	6163      	str	r3, [r4, #20]
 80050dc:	3320      	adds	r3, #32
 80050de:	7663      	strb	r3, [r4, #25]
 80050e0:	3310      	adds	r3, #16
 80050e2:	76a3      	strb	r3, [r4, #26]
 80050e4:	9507      	str	r5, [sp, #28]
 80050e6:	0035      	movs	r5, r6
 80050e8:	782b      	ldrb	r3, [r5, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <_svfiprintf_r+0x52>
 80050ee:	2b25      	cmp	r3, #37	@ 0x25
 80050f0:	d148      	bne.n	8005184 <_svfiprintf_r+0xe4>
 80050f2:	1bab      	subs	r3, r5, r6
 80050f4:	9305      	str	r3, [sp, #20]
 80050f6:	42b5      	cmp	r5, r6
 80050f8:	d00b      	beq.n	8005112 <_svfiprintf_r+0x72>
 80050fa:	0032      	movs	r2, r6
 80050fc:	0039      	movs	r1, r7
 80050fe:	9803      	ldr	r0, [sp, #12]
 8005100:	f7ff ff6e 	bl	8004fe0 <__ssputs_r>
 8005104:	3001      	adds	r0, #1
 8005106:	d100      	bne.n	800510a <_svfiprintf_r+0x6a>
 8005108:	e0ae      	b.n	8005268 <_svfiprintf_r+0x1c8>
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	9a05      	ldr	r2, [sp, #20]
 800510e:	189b      	adds	r3, r3, r2
 8005110:	6163      	str	r3, [r4, #20]
 8005112:	782b      	ldrb	r3, [r5, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d100      	bne.n	800511a <_svfiprintf_r+0x7a>
 8005118:	e0a6      	b.n	8005268 <_svfiprintf_r+0x1c8>
 800511a:	2201      	movs	r2, #1
 800511c:	2300      	movs	r3, #0
 800511e:	4252      	negs	r2, r2
 8005120:	6062      	str	r2, [r4, #4]
 8005122:	a904      	add	r1, sp, #16
 8005124:	3254      	adds	r2, #84	@ 0x54
 8005126:	1852      	adds	r2, r2, r1
 8005128:	1c6e      	adds	r6, r5, #1
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	60e3      	str	r3, [r4, #12]
 800512e:	60a3      	str	r3, [r4, #8]
 8005130:	7013      	strb	r3, [r2, #0]
 8005132:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005134:	4b54      	ldr	r3, [pc, #336]	@ (8005288 <_svfiprintf_r+0x1e8>)
 8005136:	2205      	movs	r2, #5
 8005138:	0018      	movs	r0, r3
 800513a:	7831      	ldrb	r1, [r6, #0]
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	f000 fa51 	bl	80055e4 <memchr>
 8005142:	1c75      	adds	r5, r6, #1
 8005144:	2800      	cmp	r0, #0
 8005146:	d11f      	bne.n	8005188 <_svfiprintf_r+0xe8>
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	06d3      	lsls	r3, r2, #27
 800514c:	d504      	bpl.n	8005158 <_svfiprintf_r+0xb8>
 800514e:	2353      	movs	r3, #83	@ 0x53
 8005150:	a904      	add	r1, sp, #16
 8005152:	185b      	adds	r3, r3, r1
 8005154:	2120      	movs	r1, #32
 8005156:	7019      	strb	r1, [r3, #0]
 8005158:	0713      	lsls	r3, r2, #28
 800515a:	d504      	bpl.n	8005166 <_svfiprintf_r+0xc6>
 800515c:	2353      	movs	r3, #83	@ 0x53
 800515e:	a904      	add	r1, sp, #16
 8005160:	185b      	adds	r3, r3, r1
 8005162:	212b      	movs	r1, #43	@ 0x2b
 8005164:	7019      	strb	r1, [r3, #0]
 8005166:	7833      	ldrb	r3, [r6, #0]
 8005168:	2b2a      	cmp	r3, #42	@ 0x2a
 800516a:	d016      	beq.n	800519a <_svfiprintf_r+0xfa>
 800516c:	0035      	movs	r5, r6
 800516e:	2100      	movs	r1, #0
 8005170:	200a      	movs	r0, #10
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	782a      	ldrb	r2, [r5, #0]
 8005176:	1c6e      	adds	r6, r5, #1
 8005178:	3a30      	subs	r2, #48	@ 0x30
 800517a:	2a09      	cmp	r2, #9
 800517c:	d950      	bls.n	8005220 <_svfiprintf_r+0x180>
 800517e:	2900      	cmp	r1, #0
 8005180:	d111      	bne.n	80051a6 <_svfiprintf_r+0x106>
 8005182:	e017      	b.n	80051b4 <_svfiprintf_r+0x114>
 8005184:	3501      	adds	r5, #1
 8005186:	e7af      	b.n	80050e8 <_svfiprintf_r+0x48>
 8005188:	9b05      	ldr	r3, [sp, #20]
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	1ac0      	subs	r0, r0, r3
 800518e:	2301      	movs	r3, #1
 8005190:	4083      	lsls	r3, r0
 8005192:	4313      	orrs	r3, r2
 8005194:	002e      	movs	r6, r5
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	e7cc      	b.n	8005134 <_svfiprintf_r+0x94>
 800519a:	9b07      	ldr	r3, [sp, #28]
 800519c:	1d19      	adds	r1, r3, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	9107      	str	r1, [sp, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db01      	blt.n	80051aa <_svfiprintf_r+0x10a>
 80051a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051a8:	e004      	b.n	80051b4 <_svfiprintf_r+0x114>
 80051aa:	425b      	negs	r3, r3
 80051ac:	60e3      	str	r3, [r4, #12]
 80051ae:	2302      	movs	r3, #2
 80051b0:	4313      	orrs	r3, r2
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	782b      	ldrb	r3, [r5, #0]
 80051b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80051b8:	d10c      	bne.n	80051d4 <_svfiprintf_r+0x134>
 80051ba:	786b      	ldrb	r3, [r5, #1]
 80051bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051be:	d134      	bne.n	800522a <_svfiprintf_r+0x18a>
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	3502      	adds	r5, #2
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	9207      	str	r2, [sp, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da01      	bge.n	80051d2 <_svfiprintf_r+0x132>
 80051ce:	2301      	movs	r3, #1
 80051d0:	425b      	negs	r3, r3
 80051d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d4:	4e2d      	ldr	r6, [pc, #180]	@ (800528c <_svfiprintf_r+0x1ec>)
 80051d6:	2203      	movs	r2, #3
 80051d8:	0030      	movs	r0, r6
 80051da:	7829      	ldrb	r1, [r5, #0]
 80051dc:	f000 fa02 	bl	80055e4 <memchr>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d006      	beq.n	80051f2 <_svfiprintf_r+0x152>
 80051e4:	2340      	movs	r3, #64	@ 0x40
 80051e6:	1b80      	subs	r0, r0, r6
 80051e8:	4083      	lsls	r3, r0
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	3501      	adds	r5, #1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	7829      	ldrb	r1, [r5, #0]
 80051f4:	2206      	movs	r2, #6
 80051f6:	4826      	ldr	r0, [pc, #152]	@ (8005290 <_svfiprintf_r+0x1f0>)
 80051f8:	1c6e      	adds	r6, r5, #1
 80051fa:	7621      	strb	r1, [r4, #24]
 80051fc:	f000 f9f2 	bl	80055e4 <memchr>
 8005200:	2800      	cmp	r0, #0
 8005202:	d038      	beq.n	8005276 <_svfiprintf_r+0x1d6>
 8005204:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <_svfiprintf_r+0x1f4>)
 8005206:	2b00      	cmp	r3, #0
 8005208:	d122      	bne.n	8005250 <_svfiprintf_r+0x1b0>
 800520a:	2207      	movs	r2, #7
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	3307      	adds	r3, #7
 8005210:	4393      	bics	r3, r2
 8005212:	3308      	adds	r3, #8
 8005214:	9307      	str	r3, [sp, #28]
 8005216:	6963      	ldr	r3, [r4, #20]
 8005218:	9a04      	ldr	r2, [sp, #16]
 800521a:	189b      	adds	r3, r3, r2
 800521c:	6163      	str	r3, [r4, #20]
 800521e:	e762      	b.n	80050e6 <_svfiprintf_r+0x46>
 8005220:	4343      	muls	r3, r0
 8005222:	0035      	movs	r5, r6
 8005224:	2101      	movs	r1, #1
 8005226:	189b      	adds	r3, r3, r2
 8005228:	e7a4      	b.n	8005174 <_svfiprintf_r+0xd4>
 800522a:	2300      	movs	r3, #0
 800522c:	200a      	movs	r0, #10
 800522e:	0019      	movs	r1, r3
 8005230:	3501      	adds	r5, #1
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	782a      	ldrb	r2, [r5, #0]
 8005236:	1c6e      	adds	r6, r5, #1
 8005238:	3a30      	subs	r2, #48	@ 0x30
 800523a:	2a09      	cmp	r2, #9
 800523c:	d903      	bls.n	8005246 <_svfiprintf_r+0x1a6>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0c8      	beq.n	80051d4 <_svfiprintf_r+0x134>
 8005242:	9109      	str	r1, [sp, #36]	@ 0x24
 8005244:	e7c6      	b.n	80051d4 <_svfiprintf_r+0x134>
 8005246:	4341      	muls	r1, r0
 8005248:	0035      	movs	r5, r6
 800524a:	2301      	movs	r3, #1
 800524c:	1889      	adds	r1, r1, r2
 800524e:	e7f1      	b.n	8005234 <_svfiprintf_r+0x194>
 8005250:	aa07      	add	r2, sp, #28
 8005252:	9200      	str	r2, [sp, #0]
 8005254:	0021      	movs	r1, r4
 8005256:	003a      	movs	r2, r7
 8005258:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <_svfiprintf_r+0x1f8>)
 800525a:	9803      	ldr	r0, [sp, #12]
 800525c:	e000      	b.n	8005260 <_svfiprintf_r+0x1c0>
 800525e:	bf00      	nop
 8005260:	9004      	str	r0, [sp, #16]
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	d1d6      	bne.n	8005216 <_svfiprintf_r+0x176>
 8005268:	89bb      	ldrh	r3, [r7, #12]
 800526a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800526c:	065b      	lsls	r3, r3, #25
 800526e:	d500      	bpl.n	8005272 <_svfiprintf_r+0x1d2>
 8005270:	e72c      	b.n	80050cc <_svfiprintf_r+0x2c>
 8005272:	b021      	add	sp, #132	@ 0x84
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005276:	aa07      	add	r2, sp, #28
 8005278:	9200      	str	r2, [sp, #0]
 800527a:	0021      	movs	r1, r4
 800527c:	003a      	movs	r2, r7
 800527e:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <_svfiprintf_r+0x1f8>)
 8005280:	9803      	ldr	r0, [sp, #12]
 8005282:	f000 f87b 	bl	800537c <_printf_i>
 8005286:	e7eb      	b.n	8005260 <_svfiprintf_r+0x1c0>
 8005288:	08006844 	.word	0x08006844
 800528c:	0800684a 	.word	0x0800684a
 8005290:	0800684e 	.word	0x0800684e
 8005294:	00000000 	.word	0x00000000
 8005298:	08004fe1 	.word	0x08004fe1

0800529c <_printf_common>:
 800529c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800529e:	0016      	movs	r6, r2
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	688a      	ldr	r2, [r1, #8]
 80052a4:	690b      	ldr	r3, [r1, #16]
 80052a6:	000c      	movs	r4, r1
 80052a8:	9000      	str	r0, [sp, #0]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	da00      	bge.n	80052b0 <_printf_common+0x14>
 80052ae:	0013      	movs	r3, r2
 80052b0:	0022      	movs	r2, r4
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	3243      	adds	r2, #67	@ 0x43
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	d001      	beq.n	80052c0 <_printf_common+0x24>
 80052bc:	3301      	adds	r3, #1
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	069b      	lsls	r3, r3, #26
 80052c4:	d502      	bpl.n	80052cc <_printf_common+0x30>
 80052c6:	6833      	ldr	r3, [r6, #0]
 80052c8:	3302      	adds	r3, #2
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	2306      	movs	r3, #6
 80052d0:	0015      	movs	r5, r2
 80052d2:	401d      	ands	r5, r3
 80052d4:	421a      	tst	r2, r3
 80052d6:	d027      	beq.n	8005328 <_printf_common+0x8c>
 80052d8:	0023      	movs	r3, r4
 80052da:	3343      	adds	r3, #67	@ 0x43
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	4193      	sbcs	r3, r2
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	0692      	lsls	r2, r2, #26
 80052e6:	d430      	bmi.n	800534a <_printf_common+0xae>
 80052e8:	0022      	movs	r2, r4
 80052ea:	9901      	ldr	r1, [sp, #4]
 80052ec:	9800      	ldr	r0, [sp, #0]
 80052ee:	9d08      	ldr	r5, [sp, #32]
 80052f0:	3243      	adds	r2, #67	@ 0x43
 80052f2:	47a8      	blx	r5
 80052f4:	3001      	adds	r0, #1
 80052f6:	d025      	beq.n	8005344 <_printf_common+0xa8>
 80052f8:	2206      	movs	r2, #6
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	2500      	movs	r5, #0
 80052fe:	4013      	ands	r3, r2
 8005300:	2b04      	cmp	r3, #4
 8005302:	d105      	bne.n	8005310 <_printf_common+0x74>
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	68e5      	ldr	r5, [r4, #12]
 8005308:	1aed      	subs	r5, r5, r3
 800530a:	43eb      	mvns	r3, r5
 800530c:	17db      	asrs	r3, r3, #31
 800530e:	401d      	ands	r5, r3
 8005310:	68a3      	ldr	r3, [r4, #8]
 8005312:	6922      	ldr	r2, [r4, #16]
 8005314:	4293      	cmp	r3, r2
 8005316:	dd01      	ble.n	800531c <_printf_common+0x80>
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	18ed      	adds	r5, r5, r3
 800531c:	2600      	movs	r6, #0
 800531e:	42b5      	cmp	r5, r6
 8005320:	d120      	bne.n	8005364 <_printf_common+0xc8>
 8005322:	2000      	movs	r0, #0
 8005324:	e010      	b.n	8005348 <_printf_common+0xac>
 8005326:	3501      	adds	r5, #1
 8005328:	68e3      	ldr	r3, [r4, #12]
 800532a:	6832      	ldr	r2, [r6, #0]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	42ab      	cmp	r3, r5
 8005330:	ddd2      	ble.n	80052d8 <_printf_common+0x3c>
 8005332:	0022      	movs	r2, r4
 8005334:	2301      	movs	r3, #1
 8005336:	9901      	ldr	r1, [sp, #4]
 8005338:	9800      	ldr	r0, [sp, #0]
 800533a:	9f08      	ldr	r7, [sp, #32]
 800533c:	3219      	adds	r2, #25
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	d1f0      	bne.n	8005326 <_printf_common+0x8a>
 8005344:	2001      	movs	r0, #1
 8005346:	4240      	negs	r0, r0
 8005348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800534a:	2030      	movs	r0, #48	@ 0x30
 800534c:	18e1      	adds	r1, r4, r3
 800534e:	3143      	adds	r1, #67	@ 0x43
 8005350:	7008      	strb	r0, [r1, #0]
 8005352:	0021      	movs	r1, r4
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	3145      	adds	r1, #69	@ 0x45
 8005358:	7809      	ldrb	r1, [r1, #0]
 800535a:	18a2      	adds	r2, r4, r2
 800535c:	3243      	adds	r2, #67	@ 0x43
 800535e:	3302      	adds	r3, #2
 8005360:	7011      	strb	r1, [r2, #0]
 8005362:	e7c1      	b.n	80052e8 <_printf_common+0x4c>
 8005364:	0022      	movs	r2, r4
 8005366:	2301      	movs	r3, #1
 8005368:	9901      	ldr	r1, [sp, #4]
 800536a:	9800      	ldr	r0, [sp, #0]
 800536c:	9f08      	ldr	r7, [sp, #32]
 800536e:	321a      	adds	r2, #26
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	d0e6      	beq.n	8005344 <_printf_common+0xa8>
 8005376:	3601      	adds	r6, #1
 8005378:	e7d1      	b.n	800531e <_printf_common+0x82>
	...

0800537c <_printf_i>:
 800537c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537e:	b08b      	sub	sp, #44	@ 0x2c
 8005380:	9206      	str	r2, [sp, #24]
 8005382:	000a      	movs	r2, r1
 8005384:	3243      	adds	r2, #67	@ 0x43
 8005386:	9307      	str	r3, [sp, #28]
 8005388:	9005      	str	r0, [sp, #20]
 800538a:	9203      	str	r2, [sp, #12]
 800538c:	7e0a      	ldrb	r2, [r1, #24]
 800538e:	000c      	movs	r4, r1
 8005390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005392:	2a78      	cmp	r2, #120	@ 0x78
 8005394:	d809      	bhi.n	80053aa <_printf_i+0x2e>
 8005396:	2a62      	cmp	r2, #98	@ 0x62
 8005398:	d80b      	bhi.n	80053b2 <_printf_i+0x36>
 800539a:	2a00      	cmp	r2, #0
 800539c:	d100      	bne.n	80053a0 <_printf_i+0x24>
 800539e:	e0bc      	b.n	800551a <_printf_i+0x19e>
 80053a0:	497b      	ldr	r1, [pc, #492]	@ (8005590 <_printf_i+0x214>)
 80053a2:	9104      	str	r1, [sp, #16]
 80053a4:	2a58      	cmp	r2, #88	@ 0x58
 80053a6:	d100      	bne.n	80053aa <_printf_i+0x2e>
 80053a8:	e090      	b.n	80054cc <_printf_i+0x150>
 80053aa:	0025      	movs	r5, r4
 80053ac:	3542      	adds	r5, #66	@ 0x42
 80053ae:	702a      	strb	r2, [r5, #0]
 80053b0:	e022      	b.n	80053f8 <_printf_i+0x7c>
 80053b2:	0010      	movs	r0, r2
 80053b4:	3863      	subs	r0, #99	@ 0x63
 80053b6:	2815      	cmp	r0, #21
 80053b8:	d8f7      	bhi.n	80053aa <_printf_i+0x2e>
 80053ba:	f7fa fea9 	bl	8000110 <__gnu_thumb1_case_shi>
 80053be:	0016      	.short	0x0016
 80053c0:	fff6001f 	.word	0xfff6001f
 80053c4:	fff6fff6 	.word	0xfff6fff6
 80053c8:	001ffff6 	.word	0x001ffff6
 80053cc:	fff6fff6 	.word	0xfff6fff6
 80053d0:	fff6fff6 	.word	0xfff6fff6
 80053d4:	003600a1 	.word	0x003600a1
 80053d8:	fff60080 	.word	0xfff60080
 80053dc:	00b2fff6 	.word	0x00b2fff6
 80053e0:	0036fff6 	.word	0x0036fff6
 80053e4:	fff6fff6 	.word	0xfff6fff6
 80053e8:	0084      	.short	0x0084
 80053ea:	0025      	movs	r5, r4
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	3542      	adds	r5, #66	@ 0x42
 80053f0:	1d11      	adds	r1, r2, #4
 80053f2:	6019      	str	r1, [r3, #0]
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	702b      	strb	r3, [r5, #0]
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0a0      	b.n	800553e <_printf_i+0x1c2>
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	1d02      	adds	r2, r0, #4
 8005402:	060d      	lsls	r5, r1, #24
 8005404:	d50b      	bpl.n	800541e <_printf_i+0xa2>
 8005406:	6806      	ldr	r6, [r0, #0]
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	2e00      	cmp	r6, #0
 800540c:	da03      	bge.n	8005416 <_printf_i+0x9a>
 800540e:	232d      	movs	r3, #45	@ 0x2d
 8005410:	9a03      	ldr	r2, [sp, #12]
 8005412:	4276      	negs	r6, r6
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	4b5e      	ldr	r3, [pc, #376]	@ (8005590 <_printf_i+0x214>)
 8005418:	270a      	movs	r7, #10
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	e018      	b.n	8005450 <_printf_i+0xd4>
 800541e:	6806      	ldr	r6, [r0, #0]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	0649      	lsls	r1, r1, #25
 8005424:	d5f1      	bpl.n	800540a <_printf_i+0x8e>
 8005426:	b236      	sxth	r6, r6
 8005428:	e7ef      	b.n	800540a <_printf_i+0x8e>
 800542a:	6808      	ldr	r0, [r1, #0]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	c940      	ldmia	r1!, {r6}
 8005430:	0605      	lsls	r5, r0, #24
 8005432:	d402      	bmi.n	800543a <_printf_i+0xbe>
 8005434:	0640      	lsls	r0, r0, #25
 8005436:	d500      	bpl.n	800543a <_printf_i+0xbe>
 8005438:	b2b6      	uxth	r6, r6
 800543a:	6019      	str	r1, [r3, #0]
 800543c:	4b54      	ldr	r3, [pc, #336]	@ (8005590 <_printf_i+0x214>)
 800543e:	270a      	movs	r7, #10
 8005440:	9304      	str	r3, [sp, #16]
 8005442:	2a6f      	cmp	r2, #111	@ 0x6f
 8005444:	d100      	bne.n	8005448 <_printf_i+0xcc>
 8005446:	3f02      	subs	r7, #2
 8005448:	0023      	movs	r3, r4
 800544a:	2200      	movs	r2, #0
 800544c:	3343      	adds	r3, #67	@ 0x43
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db03      	blt.n	8005460 <_printf_i+0xe4>
 8005458:	2104      	movs	r1, #4
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	438a      	bics	r2, r1
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	2e00      	cmp	r6, #0
 8005462:	d102      	bne.n	800546a <_printf_i+0xee>
 8005464:	9d03      	ldr	r5, [sp, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <_printf_i+0x108>
 800546a:	9d03      	ldr	r5, [sp, #12]
 800546c:	0030      	movs	r0, r6
 800546e:	0039      	movs	r1, r7
 8005470:	f7fa fede 	bl	8000230 <__aeabi_uidivmod>
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	3d01      	subs	r5, #1
 8005478:	5c5b      	ldrb	r3, [r3, r1]
 800547a:	702b      	strb	r3, [r5, #0]
 800547c:	0033      	movs	r3, r6
 800547e:	0006      	movs	r6, r0
 8005480:	429f      	cmp	r7, r3
 8005482:	d9f3      	bls.n	800546c <_printf_i+0xf0>
 8005484:	2f08      	cmp	r7, #8
 8005486:	d109      	bne.n	800549c <_printf_i+0x120>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d506      	bpl.n	800549c <_printf_i+0x120>
 800548e:	6862      	ldr	r2, [r4, #4]
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	dc02      	bgt.n	800549c <_printf_i+0x120>
 8005496:	2330      	movs	r3, #48	@ 0x30
 8005498:	3d01      	subs	r5, #1
 800549a:	702b      	strb	r3, [r5, #0]
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	1b5b      	subs	r3, r3, r5
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	9b07      	ldr	r3, [sp, #28]
 80054a4:	0021      	movs	r1, r4
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	9805      	ldr	r0, [sp, #20]
 80054aa:	9b06      	ldr	r3, [sp, #24]
 80054ac:	aa09      	add	r2, sp, #36	@ 0x24
 80054ae:	f7ff fef5 	bl	800529c <_printf_common>
 80054b2:	3001      	adds	r0, #1
 80054b4:	d148      	bne.n	8005548 <_printf_i+0x1cc>
 80054b6:	2001      	movs	r0, #1
 80054b8:	4240      	negs	r0, r0
 80054ba:	b00b      	add	sp, #44	@ 0x2c
 80054bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054be:	2220      	movs	r2, #32
 80054c0:	6809      	ldr	r1, [r1, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	2278      	movs	r2, #120	@ 0x78
 80054c8:	4932      	ldr	r1, [pc, #200]	@ (8005594 <_printf_i+0x218>)
 80054ca:	9104      	str	r1, [sp, #16]
 80054cc:	0021      	movs	r1, r4
 80054ce:	3145      	adds	r1, #69	@ 0x45
 80054d0:	700a      	strb	r2, [r1, #0]
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	c940      	ldmia	r1!, {r6}
 80054d8:	0610      	lsls	r0, r2, #24
 80054da:	d402      	bmi.n	80054e2 <_printf_i+0x166>
 80054dc:	0650      	lsls	r0, r2, #25
 80054de:	d500      	bpl.n	80054e2 <_printf_i+0x166>
 80054e0:	b2b6      	uxth	r6, r6
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	07d3      	lsls	r3, r2, #31
 80054e6:	d502      	bpl.n	80054ee <_printf_i+0x172>
 80054e8:	2320      	movs	r3, #32
 80054ea:	4313      	orrs	r3, r2
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d001      	beq.n	80054f6 <_printf_i+0x17a>
 80054f2:	2710      	movs	r7, #16
 80054f4:	e7a8      	b.n	8005448 <_printf_i+0xcc>
 80054f6:	2220      	movs	r2, #32
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	4393      	bics	r3, r2
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	e7f8      	b.n	80054f2 <_printf_i+0x176>
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	680d      	ldr	r5, [r1, #0]
 8005504:	1d10      	adds	r0, r2, #4
 8005506:	6949      	ldr	r1, [r1, #20]
 8005508:	6018      	str	r0, [r3, #0]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	062e      	lsls	r6, r5, #24
 800550e:	d501      	bpl.n	8005514 <_printf_i+0x198>
 8005510:	6019      	str	r1, [r3, #0]
 8005512:	e002      	b.n	800551a <_printf_i+0x19e>
 8005514:	066d      	lsls	r5, r5, #25
 8005516:	d5fb      	bpl.n	8005510 <_printf_i+0x194>
 8005518:	8019      	strh	r1, [r3, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	9d03      	ldr	r5, [sp, #12]
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	e7bf      	b.n	80054a2 <_printf_i+0x126>
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	1d11      	adds	r1, r2, #4
 8005526:	6019      	str	r1, [r3, #0]
 8005528:	6815      	ldr	r5, [r2, #0]
 800552a:	2100      	movs	r1, #0
 800552c:	0028      	movs	r0, r5
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	f000 f858 	bl	80055e4 <memchr>
 8005534:	2800      	cmp	r0, #0
 8005536:	d001      	beq.n	800553c <_printf_i+0x1c0>
 8005538:	1b40      	subs	r0, r0, r5
 800553a:	6060      	str	r0, [r4, #4]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	2300      	movs	r3, #0
 8005542:	9a03      	ldr	r2, [sp, #12]
 8005544:	7013      	strb	r3, [r2, #0]
 8005546:	e7ac      	b.n	80054a2 <_printf_i+0x126>
 8005548:	002a      	movs	r2, r5
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	9906      	ldr	r1, [sp, #24]
 800554e:	9805      	ldr	r0, [sp, #20]
 8005550:	9d07      	ldr	r5, [sp, #28]
 8005552:	47a8      	blx	r5
 8005554:	3001      	adds	r0, #1
 8005556:	d0ae      	beq.n	80054b6 <_printf_i+0x13a>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	079b      	lsls	r3, r3, #30
 800555c:	d415      	bmi.n	800558a <_printf_i+0x20e>
 800555e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005560:	68e0      	ldr	r0, [r4, #12]
 8005562:	4298      	cmp	r0, r3
 8005564:	daa9      	bge.n	80054ba <_printf_i+0x13e>
 8005566:	0018      	movs	r0, r3
 8005568:	e7a7      	b.n	80054ba <_printf_i+0x13e>
 800556a:	0022      	movs	r2, r4
 800556c:	2301      	movs	r3, #1
 800556e:	9906      	ldr	r1, [sp, #24]
 8005570:	9805      	ldr	r0, [sp, #20]
 8005572:	9e07      	ldr	r6, [sp, #28]
 8005574:	3219      	adds	r2, #25
 8005576:	47b0      	blx	r6
 8005578:	3001      	adds	r0, #1
 800557a:	d09c      	beq.n	80054b6 <_printf_i+0x13a>
 800557c:	3501      	adds	r5, #1
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dcf0      	bgt.n	800556a <_printf_i+0x1ee>
 8005588:	e7e9      	b.n	800555e <_printf_i+0x1e2>
 800558a:	2500      	movs	r5, #0
 800558c:	e7f7      	b.n	800557e <_printf_i+0x202>
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	08006855 	.word	0x08006855
 8005594:	08006866 	.word	0x08006866

08005598 <memmove>:
 8005598:	b510      	push	{r4, lr}
 800559a:	4288      	cmp	r0, r1
 800559c:	d806      	bhi.n	80055ac <memmove+0x14>
 800559e:	2300      	movs	r3, #0
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d008      	beq.n	80055b6 <memmove+0x1e>
 80055a4:	5ccc      	ldrb	r4, [r1, r3]
 80055a6:	54c4      	strb	r4, [r0, r3]
 80055a8:	3301      	adds	r3, #1
 80055aa:	e7f9      	b.n	80055a0 <memmove+0x8>
 80055ac:	188b      	adds	r3, r1, r2
 80055ae:	4298      	cmp	r0, r3
 80055b0:	d2f5      	bcs.n	800559e <memmove+0x6>
 80055b2:	3a01      	subs	r2, #1
 80055b4:	d200      	bcs.n	80055b8 <memmove+0x20>
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	5c8b      	ldrb	r3, [r1, r2]
 80055ba:	5483      	strb	r3, [r0, r2]
 80055bc:	e7f9      	b.n	80055b2 <memmove+0x1a>
	...

080055c0 <_sbrk_r>:
 80055c0:	2300      	movs	r3, #0
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	4d06      	ldr	r5, [pc, #24]	@ (80055e0 <_sbrk_r+0x20>)
 80055c6:	0004      	movs	r4, r0
 80055c8:	0008      	movs	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fe f88a 	bl	80036e4 <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d103      	bne.n	80055dc <_sbrk_r+0x1c>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d000      	beq.n	80055dc <_sbrk_r+0x1c>
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	200002e8 	.word	0x200002e8

080055e4 <memchr>:
 80055e4:	b2c9      	uxtb	r1, r1
 80055e6:	1882      	adds	r2, r0, r2
 80055e8:	4290      	cmp	r0, r2
 80055ea:	d101      	bne.n	80055f0 <memchr+0xc>
 80055ec:	2000      	movs	r0, #0
 80055ee:	4770      	bx	lr
 80055f0:	7803      	ldrb	r3, [r0, #0]
 80055f2:	428b      	cmp	r3, r1
 80055f4:	d0fb      	beq.n	80055ee <memchr+0xa>
 80055f6:	3001      	adds	r0, #1
 80055f8:	e7f6      	b.n	80055e8 <memchr+0x4>

080055fa <memcpy>:
 80055fa:	2300      	movs	r3, #0
 80055fc:	b510      	push	{r4, lr}
 80055fe:	429a      	cmp	r2, r3
 8005600:	d100      	bne.n	8005604 <memcpy+0xa>
 8005602:	bd10      	pop	{r4, pc}
 8005604:	5ccc      	ldrb	r4, [r1, r3]
 8005606:	54c4      	strb	r4, [r0, r3]
 8005608:	3301      	adds	r3, #1
 800560a:	e7f8      	b.n	80055fe <memcpy+0x4>

0800560c <_realloc_r>:
 800560c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800560e:	0006      	movs	r6, r0
 8005610:	000c      	movs	r4, r1
 8005612:	0015      	movs	r5, r2
 8005614:	2900      	cmp	r1, #0
 8005616:	d105      	bne.n	8005624 <_realloc_r+0x18>
 8005618:	0011      	movs	r1, r2
 800561a:	f7ff fc51 	bl	8004ec0 <_malloc_r>
 800561e:	0004      	movs	r4, r0
 8005620:	0020      	movs	r0, r4
 8005622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005624:	2a00      	cmp	r2, #0
 8005626:	d103      	bne.n	8005630 <_realloc_r+0x24>
 8005628:	f7ff fbde 	bl	8004de8 <_free_r>
 800562c:	2400      	movs	r4, #0
 800562e:	e7f7      	b.n	8005620 <_realloc_r+0x14>
 8005630:	f000 f81b 	bl	800566a <_malloc_usable_size_r>
 8005634:	0007      	movs	r7, r0
 8005636:	4285      	cmp	r5, r0
 8005638:	d802      	bhi.n	8005640 <_realloc_r+0x34>
 800563a:	0843      	lsrs	r3, r0, #1
 800563c:	42ab      	cmp	r3, r5
 800563e:	d3ef      	bcc.n	8005620 <_realloc_r+0x14>
 8005640:	0029      	movs	r1, r5
 8005642:	0030      	movs	r0, r6
 8005644:	f7ff fc3c 	bl	8004ec0 <_malloc_r>
 8005648:	9001      	str	r0, [sp, #4]
 800564a:	2800      	cmp	r0, #0
 800564c:	d0ee      	beq.n	800562c <_realloc_r+0x20>
 800564e:	002a      	movs	r2, r5
 8005650:	42bd      	cmp	r5, r7
 8005652:	d900      	bls.n	8005656 <_realloc_r+0x4a>
 8005654:	003a      	movs	r2, r7
 8005656:	0021      	movs	r1, r4
 8005658:	9801      	ldr	r0, [sp, #4]
 800565a:	f7ff ffce 	bl	80055fa <memcpy>
 800565e:	0021      	movs	r1, r4
 8005660:	0030      	movs	r0, r6
 8005662:	f7ff fbc1 	bl	8004de8 <_free_r>
 8005666:	9c01      	ldr	r4, [sp, #4]
 8005668:	e7da      	b.n	8005620 <_realloc_r+0x14>

0800566a <_malloc_usable_size_r>:
 800566a:	1f0b      	subs	r3, r1, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1f18      	subs	r0, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	da01      	bge.n	8005678 <_malloc_usable_size_r+0xe>
 8005674:	580b      	ldr	r3, [r1, r0]
 8005676:	18c0      	adds	r0, r0, r3
 8005678:	4770      	bx	lr
	...

0800567c <pow>:
 800567c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567e:	0014      	movs	r4, r2
 8005680:	001d      	movs	r5, r3
 8005682:	9000      	str	r0, [sp, #0]
 8005684:	9101      	str	r1, [sp, #4]
 8005686:	f000 f86f 	bl	8005768 <__ieee754_pow>
 800568a:	0022      	movs	r2, r4
 800568c:	0006      	movs	r6, r0
 800568e:	000f      	movs	r7, r1
 8005690:	002b      	movs	r3, r5
 8005692:	0020      	movs	r0, r4
 8005694:	0029      	movs	r1, r5
 8005696:	f7fd facb 	bl	8002c30 <__aeabi_dcmpun>
 800569a:	2800      	cmp	r0, #0
 800569c:	d13f      	bne.n	800571e <pow+0xa2>
 800569e:	9800      	ldr	r0, [sp, #0]
 80056a0:	9901      	ldr	r1, [sp, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	f7fa fec3 	bl	8000430 <__aeabi_dcmpeq>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d019      	beq.n	80056e2 <pow+0x66>
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	0020      	movs	r0, r4
 80056b4:	0029      	movs	r1, r5
 80056b6:	f7fa febb 	bl	8000430 <__aeabi_dcmpeq>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d146      	bne.n	800574c <pow+0xd0>
 80056be:	0020      	movs	r0, r4
 80056c0:	0029      	movs	r1, r5
 80056c2:	f000 f849 	bl	8005758 <finite>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d029      	beq.n	800571e <pow+0xa2>
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	0020      	movs	r0, r4
 80056d0:	0029      	movs	r1, r5
 80056d2:	f7fa feb3 	bl	800043c <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d021      	beq.n	800571e <pow+0xa2>
 80056da:	f7ff fb51 	bl	8004d80 <__errno>
 80056de:	2322      	movs	r3, #34	@ 0x22
 80056e0:	e01c      	b.n	800571c <pow+0xa0>
 80056e2:	0030      	movs	r0, r6
 80056e4:	0039      	movs	r1, r7
 80056e6:	f000 f837 	bl	8005758 <finite>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d11b      	bne.n	8005726 <pow+0xaa>
 80056ee:	9800      	ldr	r0, [sp, #0]
 80056f0:	9901      	ldr	r1, [sp, #4]
 80056f2:	f000 f831 	bl	8005758 <finite>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d015      	beq.n	8005726 <pow+0xaa>
 80056fa:	0020      	movs	r0, r4
 80056fc:	0029      	movs	r1, r5
 80056fe:	f000 f82b 	bl	8005758 <finite>
 8005702:	2800      	cmp	r0, #0
 8005704:	d00f      	beq.n	8005726 <pow+0xaa>
 8005706:	0032      	movs	r2, r6
 8005708:	003b      	movs	r3, r7
 800570a:	0030      	movs	r0, r6
 800570c:	0039      	movs	r1, r7
 800570e:	f7fd fa8f 	bl	8002c30 <__aeabi_dcmpun>
 8005712:	2800      	cmp	r0, #0
 8005714:	d0e1      	beq.n	80056da <pow+0x5e>
 8005716:	f7ff fb33 	bl	8004d80 <__errno>
 800571a:	2321      	movs	r3, #33	@ 0x21
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	0030      	movs	r0, r6
 8005720:	0039      	movs	r1, r7
 8005722:	b003      	add	sp, #12
 8005724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	0030      	movs	r0, r6
 800572c:	0039      	movs	r1, r7
 800572e:	f7fa fe7f 	bl	8000430 <__aeabi_dcmpeq>
 8005732:	2800      	cmp	r0, #0
 8005734:	d0f3      	beq.n	800571e <pow+0xa2>
 8005736:	9800      	ldr	r0, [sp, #0]
 8005738:	9901      	ldr	r1, [sp, #4]
 800573a:	f000 f80d 	bl	8005758 <finite>
 800573e:	2800      	cmp	r0, #0
 8005740:	d0ed      	beq.n	800571e <pow+0xa2>
 8005742:	0020      	movs	r0, r4
 8005744:	0029      	movs	r1, r5
 8005746:	f000 f807 	bl	8005758 <finite>
 800574a:	e7c4      	b.n	80056d6 <pow+0x5a>
 800574c:	2600      	movs	r6, #0
 800574e:	4f01      	ldr	r7, [pc, #4]	@ (8005754 <pow+0xd8>)
 8005750:	e7e5      	b.n	800571e <pow+0xa2>
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	3ff00000 	.word	0x3ff00000

08005758 <finite>:
 8005758:	4b02      	ldr	r3, [pc, #8]	@ (8005764 <finite+0xc>)
 800575a:	0048      	lsls	r0, r1, #1
 800575c:	0840      	lsrs	r0, r0, #1
 800575e:	18c0      	adds	r0, r0, r3
 8005760:	0fc0      	lsrs	r0, r0, #31
 8005762:	4770      	bx	lr
 8005764:	80100000 	.word	0x80100000

08005768 <__ieee754_pow>:
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576a:	b095      	sub	sp, #84	@ 0x54
 800576c:	9202      	str	r2, [sp, #8]
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	9a03      	ldr	r2, [sp, #12]
 8005774:	9306      	str	r3, [sp, #24]
 8005776:	0052      	lsls	r2, r2, #1
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	9204      	str	r2, [sp, #16]
 800577e:	001a      	movs	r2, r3
 8005780:	000f      	movs	r7, r1
 8005782:	9904      	ldr	r1, [sp, #16]
 8005784:	0006      	movs	r6, r0
 8005786:	430a      	orrs	r2, r1
 8005788:	d119      	bne.n	80057be <__ieee754_pow+0x56>
 800578a:	2180      	movs	r1, #128	@ 0x80
 800578c:	0309      	lsls	r1, r1, #12
 800578e:	4079      	eors	r1, r7
 8005790:	0002      	movs	r2, r0
 8005792:	000b      	movs	r3, r1
 8005794:	1892      	adds	r2, r2, r2
 8005796:	415b      	adcs	r3, r3
 8005798:	499b      	ldr	r1, [pc, #620]	@ (8005a08 <__ieee754_pow+0x2a0>)
 800579a:	428b      	cmp	r3, r1
 800579c:	d806      	bhi.n	80057ac <__ieee754_pow+0x44>
 800579e:	d001      	beq.n	80057a4 <__ieee754_pow+0x3c>
 80057a0:	f000 fcde 	bl	8006160 <__ieee754_pow+0x9f8>
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d101      	bne.n	80057ac <__ieee754_pow+0x44>
 80057a8:	f000 fcda 	bl	8006160 <__ieee754_pow+0x9f8>
 80057ac:	9a02      	ldr	r2, [sp, #8]
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	0030      	movs	r0, r6
 80057b2:	0039      	movs	r1, r7
 80057b4:	f7fb fc30 	bl	8001018 <__aeabi_dadd>
 80057b8:	9000      	str	r0, [sp, #0]
 80057ba:	9101      	str	r1, [sp, #4]
 80057bc:	e0af      	b.n	800591e <__ieee754_pow+0x1b6>
 80057be:	4a93      	ldr	r2, [pc, #588]	@ (8005a0c <__ieee754_pow+0x2a4>)
 80057c0:	007c      	lsls	r4, r7, #1
 80057c2:	9708      	str	r7, [sp, #32]
 80057c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80057c6:	0864      	lsrs	r4, r4, #1
 80057c8:	4294      	cmp	r4, r2
 80057ca:	d809      	bhi.n	80057e0 <__ieee754_pow+0x78>
 80057cc:	d101      	bne.n	80057d2 <__ieee754_pow+0x6a>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d1ec      	bne.n	80057ac <__ieee754_pow+0x44>
 80057d2:	9904      	ldr	r1, [sp, #16]
 80057d4:	4a8d      	ldr	r2, [pc, #564]	@ (8005a0c <__ieee754_pow+0x2a4>)
 80057d6:	4291      	cmp	r1, r2
 80057d8:	d802      	bhi.n	80057e0 <__ieee754_pow+0x78>
 80057da:	d10c      	bne.n	80057f6 <__ieee754_pow+0x8e>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <__ieee754_pow+0x8e>
 80057e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005a10 <__ieee754_pow+0x2a8>)
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	4333      	orrs	r3, r6
 80057e6:	d1e1      	bne.n	80057ac <__ieee754_pow+0x44>
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	9803      	ldr	r0, [sp, #12]
 80057ec:	0309      	lsls	r1, r1, #12
 80057ee:	4048      	eors	r0, r1
 80057f0:	0003      	movs	r3, r0
 80057f2:	9a02      	ldr	r2, [sp, #8]
 80057f4:	e7ce      	b.n	8005794 <__ieee754_pow+0x2c>
 80057f6:	2500      	movs	r5, #0
 80057f8:	9a08      	ldr	r2, [sp, #32]
 80057fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80057fc:	42aa      	cmp	r2, r5
 80057fe:	da68      	bge.n	80058d2 <__ieee754_pow+0x16a>
 8005800:	4a84      	ldr	r2, [pc, #528]	@ (8005a14 <__ieee754_pow+0x2ac>)
 8005802:	9904      	ldr	r1, [sp, #16]
 8005804:	4291      	cmp	r1, r2
 8005806:	d863      	bhi.n	80058d0 <__ieee754_pow+0x168>
 8005808:	4a83      	ldr	r2, [pc, #524]	@ (8005a18 <__ieee754_pow+0x2b0>)
 800580a:	4291      	cmp	r1, r2
 800580c:	d910      	bls.n	8005830 <__ieee754_pow+0xc8>
 800580e:	150a      	asrs	r2, r1, #20
 8005810:	4982      	ldr	r1, [pc, #520]	@ (8005a1c <__ieee754_pow+0x2b4>)
 8005812:	1852      	adds	r2, r2, r1
 8005814:	2a14      	cmp	r2, #20
 8005816:	dd3b      	ble.n	8005890 <__ieee754_pow+0x128>
 8005818:	2134      	movs	r1, #52	@ 0x34
 800581a:	1a89      	subs	r1, r1, r2
 800581c:	9a02      	ldr	r2, [sp, #8]
 800581e:	40ca      	lsrs	r2, r1
 8005820:	0010      	movs	r0, r2
 8005822:	4088      	lsls	r0, r1
 8005824:	4298      	cmp	r0, r3
 8005826:	d103      	bne.n	8005830 <__ieee754_pow+0xc8>
 8005828:	2101      	movs	r1, #1
 800582a:	3502      	adds	r5, #2
 800582c:	400a      	ands	r2, r1
 800582e:	1aad      	subs	r5, r5, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d03d      	beq.n	80058b0 <__ieee754_pow+0x148>
 8005834:	0030      	movs	r0, r6
 8005836:	0039      	movs	r1, r7
 8005838:	f000 fcc2 	bl	80061c0 <fabs>
 800583c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800583e:	9000      	str	r0, [sp, #0]
 8005840:	9101      	str	r1, [sp, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d000      	beq.n	8005848 <__ieee754_pow+0xe0>
 8005846:	e093      	b.n	8005970 <__ieee754_pow+0x208>
 8005848:	4a75      	ldr	r2, [pc, #468]	@ (8005a20 <__ieee754_pow+0x2b8>)
 800584a:	00bb      	lsls	r3, r7, #2
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	4293      	cmp	r3, r2
 8005850:	d002      	beq.n	8005858 <__ieee754_pow+0xf0>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d000      	beq.n	8005858 <__ieee754_pow+0xf0>
 8005856:	e08b      	b.n	8005970 <__ieee754_pow+0x208>
 8005858:	9b06      	ldr	r3, [sp, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	da07      	bge.n	800586e <__ieee754_pow+0x106>
 800585e:	9a00      	ldr	r2, [sp, #0]
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	2000      	movs	r0, #0
 8005864:	496e      	ldr	r1, [pc, #440]	@ (8005a20 <__ieee754_pow+0x2b8>)
 8005866:	f7fb ff3b 	bl	80016e0 <__aeabi_ddiv>
 800586a:	9000      	str	r0, [sp, #0]
 800586c:	9101      	str	r1, [sp, #4]
 800586e:	9b08      	ldr	r3, [sp, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	da54      	bge.n	800591e <__ieee754_pow+0x1b6>
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <__ieee754_pow+0x2a8>)
 8005876:	18e4      	adds	r4, r4, r3
 8005878:	432c      	orrs	r4, r5
 800587a:	d000      	beq.n	800587e <__ieee754_pow+0x116>
 800587c:	e06d      	b.n	800595a <__ieee754_pow+0x1f2>
 800587e:	9a00      	ldr	r2, [sp, #0]
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	0010      	movs	r0, r2
 8005884:	0019      	movs	r1, r3
 8005886:	f7fc fe37 	bl	80024f8 <__aeabi_dsub>
 800588a:	0002      	movs	r2, r0
 800588c:	000b      	movs	r3, r1
 800588e:	e01c      	b.n	80058ca <__ieee754_pow+0x162>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1cf      	bne.n	8005834 <__ieee754_pow+0xcc>
 8005894:	3314      	adds	r3, #20
 8005896:	1a9a      	subs	r2, r3, r2
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	4113      	asrs	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	4091      	lsls	r1, r2
 80058a0:	000a      	movs	r2, r1
 80058a2:	9904      	ldr	r1, [sp, #16]
 80058a4:	428a      	cmp	r2, r1
 80058a6:	d103      	bne.n	80058b0 <__ieee754_pow+0x148>
 80058a8:	2201      	movs	r2, #1
 80058aa:	2502      	movs	r5, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	1aed      	subs	r5, r5, r3
 80058b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005a20 <__ieee754_pow+0x2b8>)
 80058b2:	9a04      	ldr	r2, [sp, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d136      	bne.n	8005926 <__ieee754_pow+0x1be>
 80058b8:	9b06      	ldr	r3, [sp, #24]
 80058ba:	9600      	str	r6, [sp, #0]
 80058bc:	9701      	str	r7, [sp, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da2d      	bge.n	800591e <__ieee754_pow+0x1b6>
 80058c2:	0032      	movs	r2, r6
 80058c4:	003b      	movs	r3, r7
 80058c6:	2000      	movs	r0, #0
 80058c8:	4955      	ldr	r1, [pc, #340]	@ (8005a20 <__ieee754_pow+0x2b8>)
 80058ca:	f7fb ff09 	bl	80016e0 <__aeabi_ddiv>
 80058ce:	e773      	b.n	80057b8 <__ieee754_pow+0x50>
 80058d0:	2502      	movs	r5, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1ae      	bne.n	8005834 <__ieee754_pow+0xcc>
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	4a4c      	ldr	r2, [pc, #304]	@ (8005a0c <__ieee754_pow+0x2a4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d1e8      	bne.n	80058b0 <__ieee754_pow+0x148>
 80058de:	4b4c      	ldr	r3, [pc, #304]	@ (8005a10 <__ieee754_pow+0x2a8>)
 80058e0:	18e3      	adds	r3, r4, r3
 80058e2:	4333      	orrs	r3, r6
 80058e4:	d101      	bne.n	80058ea <__ieee754_pow+0x182>
 80058e6:	f000 fc3b 	bl	8006160 <__ieee754_pow+0x9f8>
 80058ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005a18 <__ieee754_pow+0x2b0>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d909      	bls.n	8005904 <__ieee754_pow+0x19c>
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da01      	bge.n	80058fa <__ieee754_pow+0x192>
 80058f6:	f000 fc37 	bl	8006168 <__ieee754_pow+0xa00>
 80058fa:	9b02      	ldr	r3, [sp, #8]
 80058fc:	9c03      	ldr	r4, [sp, #12]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	9401      	str	r4, [sp, #4]
 8005902:	e00c      	b.n	800591e <__ieee754_pow+0x1b6>
 8005904:	9b06      	ldr	r3, [sp, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db01      	blt.n	800590e <__ieee754_pow+0x1a6>
 800590a:	f000 fc2d 	bl	8006168 <__ieee754_pow+0xa00>
 800590e:	2280      	movs	r2, #128	@ 0x80
 8005910:	0612      	lsls	r2, r2, #24
 8005912:	4694      	mov	ip, r2
 8005914:	9b02      	ldr	r3, [sp, #8]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	4463      	add	r3, ip
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	9800      	ldr	r0, [sp, #0]
 8005920:	9901      	ldr	r1, [sp, #4]
 8005922:	b015      	add	sp, #84	@ 0x54
 8005924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005926:	2380      	movs	r3, #128	@ 0x80
 8005928:	9a06      	ldr	r2, [sp, #24]
 800592a:	05db      	lsls	r3, r3, #23
 800592c:	429a      	cmp	r2, r3
 800592e:	d106      	bne.n	800593e <__ieee754_pow+0x1d6>
 8005930:	0032      	movs	r2, r6
 8005932:	003b      	movs	r3, r7
 8005934:	0030      	movs	r0, r6
 8005936:	0039      	movs	r1, r7
 8005938:	f7fc fb16 	bl	8001f68 <__aeabi_dmul>
 800593c:	e73c      	b.n	80057b8 <__ieee754_pow+0x50>
 800593e:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <__ieee754_pow+0x2bc>)
 8005940:	9a06      	ldr	r2, [sp, #24]
 8005942:	429a      	cmp	r2, r3
 8005944:	d000      	beq.n	8005948 <__ieee754_pow+0x1e0>
 8005946:	e775      	b.n	8005834 <__ieee754_pow+0xcc>
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da00      	bge.n	8005950 <__ieee754_pow+0x1e8>
 800594e:	e771      	b.n	8005834 <__ieee754_pow+0xcc>
 8005950:	0030      	movs	r0, r6
 8005952:	0039      	movs	r1, r7
 8005954:	f000 fcd2 	bl	80062fc <__ieee754_sqrt>
 8005958:	e72e      	b.n	80057b8 <__ieee754_pow+0x50>
 800595a:	2d01      	cmp	r5, #1
 800595c:	d1df      	bne.n	800591e <__ieee754_pow+0x1b6>
 800595e:	9800      	ldr	r0, [sp, #0]
 8005960:	2180      	movs	r1, #128	@ 0x80
 8005962:	0002      	movs	r2, r0
 8005964:	9801      	ldr	r0, [sp, #4]
 8005966:	0609      	lsls	r1, r1, #24
 8005968:	1843      	adds	r3, r0, r1
 800596a:	9200      	str	r2, [sp, #0]
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	e7d6      	b.n	800591e <__ieee754_pow+0x1b6>
 8005970:	0ffb      	lsrs	r3, r7, #31
 8005972:	3b01      	subs	r3, #1
 8005974:	001a      	movs	r2, r3
 8005976:	432a      	orrs	r2, r5
 8005978:	d104      	bne.n	8005984 <__ieee754_pow+0x21c>
 800597a:	0032      	movs	r2, r6
 800597c:	003b      	movs	r3, r7
 800597e:	0030      	movs	r0, r6
 8005980:	0039      	movs	r1, r7
 8005982:	e780      	b.n	8005886 <__ieee754_pow+0x11e>
 8005984:	3d01      	subs	r5, #1
 8005986:	2200      	movs	r2, #0
 8005988:	431d      	orrs	r5, r3
 800598a:	d015      	beq.n	80059b8 <__ieee754_pow+0x250>
 800598c:	4b24      	ldr	r3, [pc, #144]	@ (8005a20 <__ieee754_pow+0x2b8>)
 800598e:	9208      	str	r2, [sp, #32]
 8005990:	9309      	str	r3, [sp, #36]	@ 0x24
 8005992:	2384      	movs	r3, #132	@ 0x84
 8005994:	9a04      	ldr	r2, [sp, #16]
 8005996:	05db      	lsls	r3, r3, #23
 8005998:	429a      	cmp	r2, r3
 800599a:	d800      	bhi.n	800599e <__ieee754_pow+0x236>
 800599c:	e102      	b.n	8005ba4 <__ieee754_pow+0x43c>
 800599e:	4b22      	ldr	r3, [pc, #136]	@ (8005a28 <__ieee754_pow+0x2c0>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d912      	bls.n	80059ca <__ieee754_pow+0x262>
 80059a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <__ieee754_pow+0x2b0>)
 80059a6:	429c      	cmp	r4, r3
 80059a8:	d808      	bhi.n	80059bc <__ieee754_pow+0x254>
 80059aa:	9b06      	ldr	r3, [sp, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da08      	bge.n	80059c2 <__ieee754_pow+0x25a>
 80059b0:	2000      	movs	r0, #0
 80059b2:	f000 fc9b 	bl	80062ec <__math_oflow>
 80059b6:	e6ff      	b.n	80057b8 <__ieee754_pow+0x50>
 80059b8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <__ieee754_pow+0x2c4>)
 80059ba:	e7e8      	b.n	800598e <__ieee754_pow+0x226>
 80059bc:	9b06      	ldr	r3, [sp, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dcf6      	bgt.n	80059b0 <__ieee754_pow+0x248>
 80059c2:	2000      	movs	r0, #0
 80059c4:	f000 fc8b 	bl	80062de <__math_uflow>
 80059c8:	e6f6      	b.n	80057b8 <__ieee754_pow+0x50>
 80059ca:	4b19      	ldr	r3, [pc, #100]	@ (8005a30 <__ieee754_pow+0x2c8>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d80b      	bhi.n	80059e8 <__ieee754_pow+0x280>
 80059d0:	9808      	ldr	r0, [sp, #32]
 80059d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	f7fa fd30 	bl	800043c <__aeabi_dcmplt>
 80059dc:	1e43      	subs	r3, r0, #1
 80059de:	4198      	sbcs	r0, r3
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	daee      	bge.n	80059c4 <__ieee754_pow+0x25c>
 80059e6:	e7e4      	b.n	80059b2 <__ieee754_pow+0x24a>
 80059e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <__ieee754_pow+0x2b8>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d921      	bls.n	8005a34 <__ieee754_pow+0x2cc>
 80059f0:	9808      	ldr	r0, [sp, #32]
 80059f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059f4:	2300      	movs	r3, #0
 80059f6:	f7fa fd21 	bl	800043c <__aeabi_dcmplt>
 80059fa:	1e43      	subs	r3, r0, #1
 80059fc:	4198      	sbcs	r0, r3
 80059fe:	9b06      	ldr	r3, [sp, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dcd6      	bgt.n	80059b2 <__ieee754_pow+0x24a>
 8005a04:	e7de      	b.n	80059c4 <__ieee754_pow+0x25c>
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	fff00000 	.word	0xfff00000
 8005a0c:	7ff00000 	.word	0x7ff00000
 8005a10:	c0100000 	.word	0xc0100000
 8005a14:	433fffff 	.word	0x433fffff
 8005a18:	3fefffff 	.word	0x3fefffff
 8005a1c:	fffffc01 	.word	0xfffffc01
 8005a20:	3ff00000 	.word	0x3ff00000
 8005a24:	3fe00000 	.word	0x3fe00000
 8005a28:	43f00000 	.word	0x43f00000
 8005a2c:	bff00000 	.word	0xbff00000
 8005a30:	3feffffe 	.word	0x3feffffe
 8005a34:	9800      	ldr	r0, [sp, #0]
 8005a36:	9901      	ldr	r1, [sp, #4]
 8005a38:	4b4f      	ldr	r3, [pc, #316]	@ (8005b78 <__ieee754_pow+0x410>)
 8005a3a:	f7fc fd5d 	bl	80024f8 <__aeabi_dsub>
 8005a3e:	22c0      	movs	r2, #192	@ 0xc0
 8005a40:	4b4e      	ldr	r3, [pc, #312]	@ (8005b7c <__ieee754_pow+0x414>)
 8005a42:	05d2      	lsls	r2, r2, #23
 8005a44:	0006      	movs	r6, r0
 8005a46:	000f      	movs	r7, r1
 8005a48:	f7fc fa8e 	bl	8001f68 <__aeabi_dmul>
 8005a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8005b80 <__ieee754_pow+0x418>)
 8005a4e:	9004      	str	r0, [sp, #16]
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	4b4c      	ldr	r3, [pc, #304]	@ (8005b84 <__ieee754_pow+0x41c>)
 8005a54:	0030      	movs	r0, r6
 8005a56:	0039      	movs	r1, r7
 8005a58:	f7fc fa86 	bl	8001f68 <__aeabi_dmul>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	9000      	str	r0, [sp, #0]
 8005a60:	9101      	str	r1, [sp, #4]
 8005a62:	4b49      	ldr	r3, [pc, #292]	@ (8005b88 <__ieee754_pow+0x420>)
 8005a64:	0030      	movs	r0, r6
 8005a66:	0039      	movs	r1, r7
 8005a68:	f7fc fa7e 	bl	8001f68 <__aeabi_dmul>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	000b      	movs	r3, r1
 8005a70:	4846      	ldr	r0, [pc, #280]	@ (8005b8c <__ieee754_pow+0x424>)
 8005a72:	4947      	ldr	r1, [pc, #284]	@ (8005b90 <__ieee754_pow+0x428>)
 8005a74:	f7fc fd40 	bl	80024f8 <__aeabi_dsub>
 8005a78:	0032      	movs	r2, r6
 8005a7a:	003b      	movs	r3, r7
 8005a7c:	f7fc fa74 	bl	8001f68 <__aeabi_dmul>
 8005a80:	0002      	movs	r2, r0
 8005a82:	000b      	movs	r3, r1
 8005a84:	2000      	movs	r0, #0
 8005a86:	4943      	ldr	r1, [pc, #268]	@ (8005b94 <__ieee754_pow+0x42c>)
 8005a88:	f7fc fd36 	bl	80024f8 <__aeabi_dsub>
 8005a8c:	0032      	movs	r2, r6
 8005a8e:	0004      	movs	r4, r0
 8005a90:	000d      	movs	r5, r1
 8005a92:	003b      	movs	r3, r7
 8005a94:	0030      	movs	r0, r6
 8005a96:	0039      	movs	r1, r7
 8005a98:	f7fc fa66 	bl	8001f68 <__aeabi_dmul>
 8005a9c:	0002      	movs	r2, r0
 8005a9e:	000b      	movs	r3, r1
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	0029      	movs	r1, r5
 8005aa4:	f7fc fa60 	bl	8001f68 <__aeabi_dmul>
 8005aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8005b98 <__ieee754_pow+0x430>)
 8005aaa:	4b34      	ldr	r3, [pc, #208]	@ (8005b7c <__ieee754_pow+0x414>)
 8005aac:	f7fc fa5c 	bl	8001f68 <__aeabi_dmul>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	000b      	movs	r3, r1
 8005ab4:	9800      	ldr	r0, [sp, #0]
 8005ab6:	9901      	ldr	r1, [sp, #4]
 8005ab8:	f7fc fd1e 	bl	80024f8 <__aeabi_dsub>
 8005abc:	0002      	movs	r2, r0
 8005abe:	000b      	movs	r3, r1
 8005ac0:	0004      	movs	r4, r0
 8005ac2:	000d      	movs	r5, r1
 8005ac4:	9804      	ldr	r0, [sp, #16]
 8005ac6:	9905      	ldr	r1, [sp, #20]
 8005ac8:	f7fb faa6 	bl	8001018 <__aeabi_dadd>
 8005acc:	9a04      	ldr	r2, [sp, #16]
 8005ace:	9b05      	ldr	r3, [sp, #20]
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	9000      	str	r0, [sp, #0]
 8005ad4:	9101      	str	r1, [sp, #4]
 8005ad6:	f7fc fd0f 	bl	80024f8 <__aeabi_dsub>
 8005ada:	0002      	movs	r2, r0
 8005adc:	000b      	movs	r3, r1
 8005ade:	0020      	movs	r0, r4
 8005ae0:	0029      	movs	r1, r5
 8005ae2:	f7fc fd09 	bl	80024f8 <__aeabi_dsub>
 8005ae6:	9b02      	ldr	r3, [sp, #8]
 8005ae8:	9c03      	ldr	r4, [sp, #12]
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	9405      	str	r4, [sp, #20]
 8005aee:	2300      	movs	r3, #0
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	9c04      	ldr	r4, [sp, #16]
 8005af4:	9d05      	ldr	r5, [sp, #20]
 8005af6:	0006      	movs	r6, r0
 8005af8:	000f      	movs	r7, r1
 8005afa:	9802      	ldr	r0, [sp, #8]
 8005afc:	9903      	ldr	r1, [sp, #12]
 8005afe:	0022      	movs	r2, r4
 8005b00:	002b      	movs	r3, r5
 8005b02:	f7fc fcf9 	bl	80024f8 <__aeabi_dsub>
 8005b06:	9a00      	ldr	r2, [sp, #0]
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	f7fc fa2d 	bl	8001f68 <__aeabi_dmul>
 8005b0e:	9a02      	ldr	r2, [sp, #8]
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	9006      	str	r0, [sp, #24]
 8005b14:	9107      	str	r1, [sp, #28]
 8005b16:	0030      	movs	r0, r6
 8005b18:	0039      	movs	r1, r7
 8005b1a:	f7fc fa25 	bl	8001f68 <__aeabi_dmul>
 8005b1e:	0002      	movs	r2, r0
 8005b20:	000b      	movs	r3, r1
 8005b22:	9806      	ldr	r0, [sp, #24]
 8005b24:	9907      	ldr	r1, [sp, #28]
 8005b26:	f7fb fa77 	bl	8001018 <__aeabi_dadd>
 8005b2a:	0022      	movs	r2, r4
 8005b2c:	002b      	movs	r3, r5
 8005b2e:	9002      	str	r0, [sp, #8]
 8005b30:	9103      	str	r1, [sp, #12]
 8005b32:	9800      	ldr	r0, [sp, #0]
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	f7fc fa17 	bl	8001f68 <__aeabi_dmul>
 8005b3a:	000b      	movs	r3, r1
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	0006      	movs	r6, r0
 8005b40:	000f      	movs	r7, r1
 8005b42:	9802      	ldr	r0, [sp, #8]
 8005b44:	9903      	ldr	r1, [sp, #12]
 8005b46:	f7fb fa67 	bl	8001018 <__aeabi_dadd>
 8005b4a:	9000      	str	r0, [sp, #0]
 8005b4c:	9101      	str	r1, [sp, #4]
 8005b4e:	9c01      	ldr	r4, [sp, #4]
 8005b50:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <__ieee754_pow+0x434>)
 8005b52:	9406      	str	r4, [sp, #24]
 8005b54:	429c      	cmp	r4, r3
 8005b56:	dc00      	bgt.n	8005b5a <__ieee754_pow+0x3f2>
 8005b58:	e222      	b.n	8005fa0 <__ieee754_pow+0x838>
 8005b5a:	4a11      	ldr	r2, [pc, #68]	@ (8005ba0 <__ieee754_pow+0x438>)
 8005b5c:	18a3      	adds	r3, r4, r2
 8005b5e:	9a00      	ldr	r2, [sp, #0]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d100      	bne.n	8005b66 <__ieee754_pow+0x3fe>
 8005b64:	e1a0      	b.n	8005ea8 <__ieee754_pow+0x740>
 8005b66:	9808      	ldr	r0, [sp, #32]
 8005b68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f7fa fc65 	bl	800043c <__aeabi_dcmplt>
 8005b72:	1e43      	subs	r3, r0, #1
 8005b74:	4198      	sbcs	r0, r3
 8005b76:	e71c      	b.n	80059b2 <__ieee754_pow+0x24a>
 8005b78:	3ff00000 	.word	0x3ff00000
 8005b7c:	3ff71547 	.word	0x3ff71547
 8005b80:	f85ddf44 	.word	0xf85ddf44
 8005b84:	3e54ae0b 	.word	0x3e54ae0b
 8005b88:	3fd00000 	.word	0x3fd00000
 8005b8c:	55555555 	.word	0x55555555
 8005b90:	3fd55555 	.word	0x3fd55555
 8005b94:	3fe00000 	.word	0x3fe00000
 8005b98:	652b82fe 	.word	0x652b82fe
 8005b9c:	408fffff 	.word	0x408fffff
 8005ba0:	bf700000 	.word	0xbf700000
 8005ba4:	4be0      	ldr	r3, [pc, #896]	@ (8005f28 <__ieee754_pow+0x7c0>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	423b      	tst	r3, r7
 8005baa:	d10b      	bne.n	8005bc4 <__ieee754_pow+0x45c>
 8005bac:	9800      	ldr	r0, [sp, #0]
 8005bae:	9901      	ldr	r1, [sp, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4bde      	ldr	r3, [pc, #888]	@ (8005f2c <__ieee754_pow+0x7c4>)
 8005bb4:	f7fc f9d8 	bl	8001f68 <__aeabi_dmul>
 8005bb8:	2235      	movs	r2, #53	@ 0x35
 8005bba:	9000      	str	r0, [sp, #0]
 8005bbc:	9101      	str	r1, [sp, #4]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	4252      	negs	r2, r2
 8005bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bc6:	49da      	ldr	r1, [pc, #872]	@ (8005f30 <__ieee754_pow+0x7c8>)
 8005bc8:	151b      	asrs	r3, r3, #20
 8005bca:	185b      	adds	r3, r3, r1
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bd2:	4dd8      	ldr	r5, [pc, #864]	@ (8005f34 <__ieee754_pow+0x7cc>)
 8005bd4:	031b      	lsls	r3, r3, #12
 8005bd6:	4ad8      	ldr	r2, [pc, #864]	@ (8005f38 <__ieee754_pow+0x7d0>)
 8005bd8:	0b1b      	lsrs	r3, r3, #12
 8005bda:	2600      	movs	r6, #0
 8005bdc:	431d      	orrs	r5, r3
 8005bde:	4293      	cmp	r3, r2
 8005be0:	dd09      	ble.n	8005bf6 <__ieee754_pow+0x48e>
 8005be2:	4ad6      	ldr	r2, [pc, #856]	@ (8005f3c <__ieee754_pow+0x7d4>)
 8005be4:	3601      	adds	r6, #1
 8005be6:	4293      	cmp	r3, r2
 8005be8:	dd05      	ble.n	8005bf6 <__ieee754_pow+0x48e>
 8005bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bec:	199b      	adds	r3, r3, r6
 8005bee:	2600      	movs	r6, #0
 8005bf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bf2:	4bd3      	ldr	r3, [pc, #844]	@ (8005f40 <__ieee754_pow+0x7d8>)
 8005bf4:	18ed      	adds	r5, r5, r3
 8005bf6:	9800      	ldr	r0, [sp, #0]
 8005bf8:	9901      	ldr	r1, [sp, #4]
 8005bfa:	0029      	movs	r1, r5
 8005bfc:	4bd1      	ldr	r3, [pc, #836]	@ (8005f44 <__ieee754_pow+0x7dc>)
 8005bfe:	00f2      	lsls	r2, r6, #3
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	685c      	ldr	r4, [r3, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	0023      	movs	r3, r4
 8005c10:	900c      	str	r0, [sp, #48]	@ 0x30
 8005c12:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c14:	f7fc fc70 	bl	80024f8 <__aeabi_dsub>
 8005c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c1c:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c1e:	9111      	str	r1, [sp, #68]	@ 0x44
 8005c20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c24:	f7fb f9f8 	bl	8001018 <__aeabi_dadd>
 8005c28:	0002      	movs	r2, r0
 8005c2a:	000b      	movs	r3, r1
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	49c1      	ldr	r1, [pc, #772]	@ (8005f34 <__ieee754_pow+0x7cc>)
 8005c30:	f7fb fd56 	bl	80016e0 <__aeabi_ddiv>
 8005c34:	0002      	movs	r2, r0
 8005c36:	000b      	movs	r3, r1
 8005c38:	9012      	str	r0, [sp, #72]	@ 0x48
 8005c3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005c3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005c3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005c40:	f7fc f992 	bl	8001f68 <__aeabi_dmul>
 8005c44:	9006      	str	r0, [sp, #24]
 8005c46:	9107      	str	r1, [sp, #28]
 8005c48:	9b06      	ldr	r3, [sp, #24]
 8005c4a:	9c07      	ldr	r4, [sp, #28]
 8005c4c:	2180      	movs	r1, #128	@ 0x80
 8005c4e:	9304      	str	r3, [sp, #16]
 8005c50:	9405      	str	r4, [sp, #20]
 8005c52:	2080      	movs	r0, #128	@ 0x80
 8005c54:	2300      	movs	r3, #0
 8005c56:	2200      	movs	r2, #0
 8005c58:	106d      	asrs	r5, r5, #1
 8005c5a:	0589      	lsls	r1, r1, #22
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	4329      	orrs	r1, r5
 8005c60:	0300      	lsls	r0, r0, #12
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	9c05      	ldr	r4, [sp, #20]
 8005c66:	1809      	adds	r1, r1, r0
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	9401      	str	r4, [sp, #4]
 8005c6c:	04b6      	lsls	r6, r6, #18
 8005c6e:	198b      	adds	r3, r1, r6
 8005c70:	9800      	ldr	r0, [sp, #0]
 8005c72:	9901      	ldr	r1, [sp, #4]
 8005c74:	0014      	movs	r4, r2
 8005c76:	001d      	movs	r5, r3
 8005c78:	f7fc f976 	bl	8001f68 <__aeabi_dmul>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	000b      	movs	r3, r1
 8005c80:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005c82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005c84:	f7fc fc38 	bl	80024f8 <__aeabi_dsub>
 8005c88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c8c:	0006      	movs	r6, r0
 8005c8e:	000f      	movs	r7, r1
 8005c90:	0020      	movs	r0, r4
 8005c92:	0029      	movs	r1, r5
 8005c94:	f7fc fc30 	bl	80024f8 <__aeabi_dsub>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	000b      	movs	r3, r1
 8005c9c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005c9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ca0:	f7fc fc2a 	bl	80024f8 <__aeabi_dsub>
 8005ca4:	9a00      	ldr	r2, [sp, #0]
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	f7fc f95e 	bl	8001f68 <__aeabi_dmul>
 8005cac:	0002      	movs	r2, r0
 8005cae:	000b      	movs	r3, r1
 8005cb0:	0030      	movs	r0, r6
 8005cb2:	0039      	movs	r1, r7
 8005cb4:	f7fc fc20 	bl	80024f8 <__aeabi_dsub>
 8005cb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cbc:	f7fc f954 	bl	8001f68 <__aeabi_dmul>
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	9b07      	ldr	r3, [sp, #28]
 8005cc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005cc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005cc8:	0010      	movs	r0, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	f7fc f94c 	bl	8001f68 <__aeabi_dmul>
 8005cd0:	0006      	movs	r6, r0
 8005cd2:	000f      	movs	r7, r1
 8005cd4:	4a9c      	ldr	r2, [pc, #624]	@ (8005f48 <__ieee754_pow+0x7e0>)
 8005cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f4c <__ieee754_pow+0x7e4>)
 8005cd8:	f7fc f946 	bl	8001f68 <__aeabi_dmul>
 8005cdc:	4a9c      	ldr	r2, [pc, #624]	@ (8005f50 <__ieee754_pow+0x7e8>)
 8005cde:	4b9d      	ldr	r3, [pc, #628]	@ (8005f54 <__ieee754_pow+0x7ec>)
 8005ce0:	f7fb f99a 	bl	8001018 <__aeabi_dadd>
 8005ce4:	0032      	movs	r2, r6
 8005ce6:	003b      	movs	r3, r7
 8005ce8:	f7fc f93e 	bl	8001f68 <__aeabi_dmul>
 8005cec:	4a9a      	ldr	r2, [pc, #616]	@ (8005f58 <__ieee754_pow+0x7f0>)
 8005cee:	4b9b      	ldr	r3, [pc, #620]	@ (8005f5c <__ieee754_pow+0x7f4>)
 8005cf0:	f7fb f992 	bl	8001018 <__aeabi_dadd>
 8005cf4:	0032      	movs	r2, r6
 8005cf6:	003b      	movs	r3, r7
 8005cf8:	f7fc f936 	bl	8001f68 <__aeabi_dmul>
 8005cfc:	4a98      	ldr	r2, [pc, #608]	@ (8005f60 <__ieee754_pow+0x7f8>)
 8005cfe:	4b99      	ldr	r3, [pc, #612]	@ (8005f64 <__ieee754_pow+0x7fc>)
 8005d00:	f7fb f98a 	bl	8001018 <__aeabi_dadd>
 8005d04:	0032      	movs	r2, r6
 8005d06:	003b      	movs	r3, r7
 8005d08:	f7fc f92e 	bl	8001f68 <__aeabi_dmul>
 8005d0c:	4a96      	ldr	r2, [pc, #600]	@ (8005f68 <__ieee754_pow+0x800>)
 8005d0e:	4b97      	ldr	r3, [pc, #604]	@ (8005f6c <__ieee754_pow+0x804>)
 8005d10:	f7fb f982 	bl	8001018 <__aeabi_dadd>
 8005d14:	0032      	movs	r2, r6
 8005d16:	003b      	movs	r3, r7
 8005d18:	f7fc f926 	bl	8001f68 <__aeabi_dmul>
 8005d1c:	4a94      	ldr	r2, [pc, #592]	@ (8005f70 <__ieee754_pow+0x808>)
 8005d1e:	4b95      	ldr	r3, [pc, #596]	@ (8005f74 <__ieee754_pow+0x80c>)
 8005d20:	f7fb f97a 	bl	8001018 <__aeabi_dadd>
 8005d24:	0032      	movs	r2, r6
 8005d26:	0004      	movs	r4, r0
 8005d28:	000d      	movs	r5, r1
 8005d2a:	003b      	movs	r3, r7
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	0039      	movs	r1, r7
 8005d30:	f7fc f91a 	bl	8001f68 <__aeabi_dmul>
 8005d34:	0002      	movs	r2, r0
 8005d36:	000b      	movs	r3, r1
 8005d38:	0020      	movs	r0, r4
 8005d3a:	0029      	movs	r1, r5
 8005d3c:	f7fc f914 	bl	8001f68 <__aeabi_dmul>
 8005d40:	9a00      	ldr	r2, [sp, #0]
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	0004      	movs	r4, r0
 8005d46:	000d      	movs	r5, r1
 8005d48:	9806      	ldr	r0, [sp, #24]
 8005d4a:	9907      	ldr	r1, [sp, #28]
 8005d4c:	f7fb f964 	bl	8001018 <__aeabi_dadd>
 8005d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d54:	f7fc f908 	bl	8001f68 <__aeabi_dmul>
 8005d58:	0022      	movs	r2, r4
 8005d5a:	002b      	movs	r3, r5
 8005d5c:	f7fb f95c 	bl	8001018 <__aeabi_dadd>
 8005d60:	9a00      	ldr	r2, [sp, #0]
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	900c      	str	r0, [sp, #48]	@ 0x30
 8005d66:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d68:	0010      	movs	r0, r2
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	f7fc f8fc 	bl	8001f68 <__aeabi_dmul>
 8005d70:	2200      	movs	r2, #0
 8005d72:	4b81      	ldr	r3, [pc, #516]	@ (8005f78 <__ieee754_pow+0x810>)
 8005d74:	0004      	movs	r4, r0
 8005d76:	000d      	movs	r5, r1
 8005d78:	f7fb f94e 	bl	8001018 <__aeabi_dadd>
 8005d7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d80:	f7fb f94a 	bl	8001018 <__aeabi_dadd>
 8005d84:	2000      	movs	r0, #0
 8005d86:	000f      	movs	r7, r1
 8005d88:	0006      	movs	r6, r0
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	000b      	movs	r3, r1
 8005d8e:	9800      	ldr	r0, [sp, #0]
 8005d90:	9901      	ldr	r1, [sp, #4]
 8005d92:	f7fc f8e9 	bl	8001f68 <__aeabi_dmul>
 8005d96:	2200      	movs	r2, #0
 8005d98:	9000      	str	r0, [sp, #0]
 8005d9a:	9101      	str	r1, [sp, #4]
 8005d9c:	4b76      	ldr	r3, [pc, #472]	@ (8005f78 <__ieee754_pow+0x810>)
 8005d9e:	0030      	movs	r0, r6
 8005da0:	0039      	movs	r1, r7
 8005da2:	f7fc fba9 	bl	80024f8 <__aeabi_dsub>
 8005da6:	0022      	movs	r2, r4
 8005da8:	002b      	movs	r3, r5
 8005daa:	f7fc fba5 	bl	80024f8 <__aeabi_dsub>
 8005dae:	0002      	movs	r2, r0
 8005db0:	000b      	movs	r3, r1
 8005db2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005db4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005db6:	f7fc fb9f 	bl	80024f8 <__aeabi_dsub>
 8005dba:	9a06      	ldr	r2, [sp, #24]
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	f7fc f8d3 	bl	8001f68 <__aeabi_dmul>
 8005dc2:	0032      	movs	r2, r6
 8005dc4:	0004      	movs	r4, r0
 8005dc6:	000d      	movs	r5, r1
 8005dc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005dca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dcc:	003b      	movs	r3, r7
 8005dce:	f7fc f8cb 	bl	8001f68 <__aeabi_dmul>
 8005dd2:	0002      	movs	r2, r0
 8005dd4:	000b      	movs	r3, r1
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	0029      	movs	r1, r5
 8005dda:	f7fb f91d 	bl	8001018 <__aeabi_dadd>
 8005dde:	0004      	movs	r4, r0
 8005de0:	000d      	movs	r5, r1
 8005de2:	0002      	movs	r2, r0
 8005de4:	000b      	movs	r3, r1
 8005de6:	9800      	ldr	r0, [sp, #0]
 8005de8:	9901      	ldr	r1, [sp, #4]
 8005dea:	f7fb f915 	bl	8001018 <__aeabi_dadd>
 8005dee:	22e0      	movs	r2, #224	@ 0xe0
 8005df0:	2000      	movs	r0, #0
 8005df2:	4b62      	ldr	r3, [pc, #392]	@ (8005f7c <__ieee754_pow+0x814>)
 8005df4:	0612      	lsls	r2, r2, #24
 8005df6:	0006      	movs	r6, r0
 8005df8:	000f      	movs	r7, r1
 8005dfa:	f7fc f8b5 	bl	8001f68 <__aeabi_dmul>
 8005dfe:	9006      	str	r0, [sp, #24]
 8005e00:	9107      	str	r1, [sp, #28]
 8005e02:	9a00      	ldr	r2, [sp, #0]
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	0030      	movs	r0, r6
 8005e08:	0039      	movs	r1, r7
 8005e0a:	f7fc fb75 	bl	80024f8 <__aeabi_dsub>
 8005e0e:	0002      	movs	r2, r0
 8005e10:	000b      	movs	r3, r1
 8005e12:	0020      	movs	r0, r4
 8005e14:	0029      	movs	r1, r5
 8005e16:	f7fc fb6f 	bl	80024f8 <__aeabi_dsub>
 8005e1a:	4a59      	ldr	r2, [pc, #356]	@ (8005f80 <__ieee754_pow+0x818>)
 8005e1c:	4b57      	ldr	r3, [pc, #348]	@ (8005f7c <__ieee754_pow+0x814>)
 8005e1e:	f7fc f8a3 	bl	8001f68 <__aeabi_dmul>
 8005e22:	4a58      	ldr	r2, [pc, #352]	@ (8005f84 <__ieee754_pow+0x81c>)
 8005e24:	0004      	movs	r4, r0
 8005e26:	000d      	movs	r5, r1
 8005e28:	0030      	movs	r0, r6
 8005e2a:	0039      	movs	r1, r7
 8005e2c:	4b56      	ldr	r3, [pc, #344]	@ (8005f88 <__ieee754_pow+0x820>)
 8005e2e:	f7fc f89b 	bl	8001f68 <__aeabi_dmul>
 8005e32:	0002      	movs	r2, r0
 8005e34:	000b      	movs	r3, r1
 8005e36:	0020      	movs	r0, r4
 8005e38:	0029      	movs	r1, r5
 8005e3a:	f7fb f8ed 	bl	8001018 <__aeabi_dadd>
 8005e3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005e40:	4b52      	ldr	r3, [pc, #328]	@ (8005f8c <__ieee754_pow+0x824>)
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f7fb f8e6 	bl	8001018 <__aeabi_dadd>
 8005e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e50:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8005e52:	f7fc ff0f 	bl	8002c74 <__aeabi_i2d>
 8005e56:	0004      	movs	r4, r0
 8005e58:	000d      	movs	r5, r1
 8005e5a:	9806      	ldr	r0, [sp, #24]
 8005e5c:	9907      	ldr	r1, [sp, #28]
 8005e5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005e60:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <__ieee754_pow+0x828>)
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	681e      	ldr	r6, [r3, #0]
 8005e66:	685f      	ldr	r7, [r3, #4]
 8005e68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e6c:	f7fb f8d4 	bl	8001018 <__aeabi_dadd>
 8005e70:	0032      	movs	r2, r6
 8005e72:	003b      	movs	r3, r7
 8005e74:	f7fb f8d0 	bl	8001018 <__aeabi_dadd>
 8005e78:	0022      	movs	r2, r4
 8005e7a:	002b      	movs	r3, r5
 8005e7c:	f7fb f8cc 	bl	8001018 <__aeabi_dadd>
 8005e80:	2000      	movs	r0, #0
 8005e82:	0022      	movs	r2, r4
 8005e84:	002b      	movs	r3, r5
 8005e86:	9000      	str	r0, [sp, #0]
 8005e88:	9101      	str	r1, [sp, #4]
 8005e8a:	f7fc fb35 	bl	80024f8 <__aeabi_dsub>
 8005e8e:	0032      	movs	r2, r6
 8005e90:	003b      	movs	r3, r7
 8005e92:	f7fc fb31 	bl	80024f8 <__aeabi_dsub>
 8005e96:	9a06      	ldr	r2, [sp, #24]
 8005e98:	9b07      	ldr	r3, [sp, #28]
 8005e9a:	f7fc fb2d 	bl	80024f8 <__aeabi_dsub>
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	000b      	movs	r3, r1
 8005ea2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ea6:	e61c      	b.n	8005ae2 <__ieee754_pow+0x37a>
 8005ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8005f94 <__ieee754_pow+0x82c>)
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <__ieee754_pow+0x830>)
 8005eac:	9802      	ldr	r0, [sp, #8]
 8005eae:	9903      	ldr	r1, [sp, #12]
 8005eb0:	f7fb f8b2 	bl	8001018 <__aeabi_dadd>
 8005eb4:	0032      	movs	r2, r6
 8005eb6:	003b      	movs	r3, r7
 8005eb8:	9004      	str	r0, [sp, #16]
 8005eba:	9105      	str	r1, [sp, #20]
 8005ebc:	9800      	ldr	r0, [sp, #0]
 8005ebe:	9901      	ldr	r1, [sp, #4]
 8005ec0:	f7fc fb1a 	bl	80024f8 <__aeabi_dsub>
 8005ec4:	0002      	movs	r2, r0
 8005ec6:	000b      	movs	r3, r1
 8005ec8:	9804      	ldr	r0, [sp, #16]
 8005eca:	9905      	ldr	r1, [sp, #20]
 8005ecc:	f7fa faca 	bl	8000464 <__aeabi_dcmpgt>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d000      	beq.n	8005ed6 <__ieee754_pow+0x76e>
 8005ed4:	e647      	b.n	8005b66 <__ieee754_pow+0x3fe>
 8005ed6:	2580      	movs	r5, #128	@ 0x80
 8005ed8:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <__ieee754_pow+0x834>)
 8005eda:	036d      	lsls	r5, r5, #13
 8005edc:	1524      	asrs	r4, r4, #20
 8005ede:	18e4      	adds	r4, r4, r3
 8005ee0:	002b      	movs	r3, r5
 8005ee2:	4123      	asrs	r3, r4
 8005ee4:	9a06      	ldr	r2, [sp, #24]
 8005ee6:	4912      	ldr	r1, [pc, #72]	@ (8005f30 <__ieee754_pow+0x7c8>)
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	005a      	lsls	r2, r3, #1
 8005eec:	4c14      	ldr	r4, [pc, #80]	@ (8005f40 <__ieee754_pow+0x7d8>)
 8005eee:	0d52      	lsrs	r2, r2, #21
 8005ef0:	1852      	adds	r2, r2, r1
 8005ef2:	4114      	asrs	r4, r2
 8005ef4:	401c      	ands	r4, r3
 8005ef6:	0021      	movs	r1, r4
 8005ef8:	2414      	movs	r4, #20
 8005efa:	031b      	lsls	r3, r3, #12
 8005efc:	0b1b      	lsrs	r3, r3, #12
 8005efe:	432b      	orrs	r3, r5
 8005f00:	1aa2      	subs	r2, r4, r2
 8005f02:	4113      	asrs	r3, r2
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da02      	bge.n	8005f14 <__ieee754_pow+0x7ac>
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	425b      	negs	r3, r3
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	0002      	movs	r2, r0
 8005f16:	000b      	movs	r3, r1
 8005f18:	0030      	movs	r0, r6
 8005f1a:	0039      	movs	r1, r7
 8005f1c:	f7fc faec 	bl	80024f8 <__aeabi_dsub>
 8005f20:	0006      	movs	r6, r0
 8005f22:	000f      	movs	r7, r1
 8005f24:	e065      	b.n	8005ff2 <__ieee754_pow+0x88a>
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	7ff00000 	.word	0x7ff00000
 8005f2c:	43400000 	.word	0x43400000
 8005f30:	fffffc01 	.word	0xfffffc01
 8005f34:	3ff00000 	.word	0x3ff00000
 8005f38:	0003988e 	.word	0x0003988e
 8005f3c:	000bb679 	.word	0x000bb679
 8005f40:	fff00000 	.word	0xfff00000
 8005f44:	08006898 	.word	0x08006898
 8005f48:	4a454eef 	.word	0x4a454eef
 8005f4c:	3fca7e28 	.word	0x3fca7e28
 8005f50:	93c9db65 	.word	0x93c9db65
 8005f54:	3fcd864a 	.word	0x3fcd864a
 8005f58:	a91d4101 	.word	0xa91d4101
 8005f5c:	3fd17460 	.word	0x3fd17460
 8005f60:	518f264d 	.word	0x518f264d
 8005f64:	3fd55555 	.word	0x3fd55555
 8005f68:	db6fabff 	.word	0xdb6fabff
 8005f6c:	3fdb6db6 	.word	0x3fdb6db6
 8005f70:	33333303 	.word	0x33333303
 8005f74:	3fe33333 	.word	0x3fe33333
 8005f78:	40080000 	.word	0x40080000
 8005f7c:	3feec709 	.word	0x3feec709
 8005f80:	dc3a03fd 	.word	0xdc3a03fd
 8005f84:	145b01f5 	.word	0x145b01f5
 8005f88:	be3e2fe0 	.word	0xbe3e2fe0
 8005f8c:	08006878 	.word	0x08006878
 8005f90:	08006888 	.word	0x08006888
 8005f94:	652b82fe 	.word	0x652b82fe
 8005f98:	3c971547 	.word	0x3c971547
 8005f9c:	fffffc02 	.word	0xfffffc02
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	005c      	lsls	r4, r3, #1
 8005fa4:	4b72      	ldr	r3, [pc, #456]	@ (8006170 <__ieee754_pow+0xa08>)
 8005fa6:	0864      	lsrs	r4, r4, #1
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d91c      	bls.n	8005fe6 <__ieee754_pow+0x87e>
 8005fac:	4a71      	ldr	r2, [pc, #452]	@ (8006174 <__ieee754_pow+0xa0c>)
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	9a00      	ldr	r2, [sp, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d008      	beq.n	8005fca <__ieee754_pow+0x862>
 8005fb8:	9808      	ldr	r0, [sp, #32]
 8005fba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f7fa fa3c 	bl	800043c <__aeabi_dcmplt>
 8005fc4:	1e43      	subs	r3, r0, #1
 8005fc6:	4198      	sbcs	r0, r3
 8005fc8:	e4fc      	b.n	80059c4 <__ieee754_pow+0x25c>
 8005fca:	0032      	movs	r2, r6
 8005fcc:	9800      	ldr	r0, [sp, #0]
 8005fce:	9901      	ldr	r1, [sp, #4]
 8005fd0:	003b      	movs	r3, r7
 8005fd2:	f7fc fa91 	bl	80024f8 <__aeabi_dsub>
 8005fd6:	9a02      	ldr	r2, [sp, #8]
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	f7fa fa4d 	bl	8000478 <__aeabi_dcmpge>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d1ea      	bne.n	8005fb8 <__ieee754_pow+0x850>
 8005fe2:	4c65      	ldr	r4, [pc, #404]	@ (8006178 <__ieee754_pow+0xa10>)
 8005fe4:	e777      	b.n	8005ed6 <__ieee754_pow+0x76e>
 8005fe6:	9a04      	ldr	r2, [sp, #16]
 8005fe8:	4b64      	ldr	r3, [pc, #400]	@ (800617c <__ieee754_pow+0xa14>)
 8005fea:	9200      	str	r2, [sp, #0]
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d900      	bls.n	8005ff2 <__ieee754_pow+0x88a>
 8005ff0:	e771      	b.n	8005ed6 <__ieee754_pow+0x76e>
 8005ff2:	9a02      	ldr	r2, [sp, #8]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	0030      	movs	r0, r6
 8005ff8:	0039      	movs	r1, r7
 8005ffa:	f7fb f80d 	bl	8001018 <__aeabi_dadd>
 8005ffe:	2000      	movs	r0, #0
 8006000:	2200      	movs	r2, #0
 8006002:	4b5f      	ldr	r3, [pc, #380]	@ (8006180 <__ieee754_pow+0xa18>)
 8006004:	9004      	str	r0, [sp, #16]
 8006006:	9105      	str	r1, [sp, #20]
 8006008:	f7fb ffae 	bl	8001f68 <__aeabi_dmul>
 800600c:	0032      	movs	r2, r6
 800600e:	003b      	movs	r3, r7
 8006010:	9006      	str	r0, [sp, #24]
 8006012:	9107      	str	r1, [sp, #28]
 8006014:	9804      	ldr	r0, [sp, #16]
 8006016:	9905      	ldr	r1, [sp, #20]
 8006018:	f7fc fa6e 	bl	80024f8 <__aeabi_dsub>
 800601c:	0002      	movs	r2, r0
 800601e:	000b      	movs	r3, r1
 8006020:	9802      	ldr	r0, [sp, #8]
 8006022:	9903      	ldr	r1, [sp, #12]
 8006024:	f7fc fa68 	bl	80024f8 <__aeabi_dsub>
 8006028:	4a56      	ldr	r2, [pc, #344]	@ (8006184 <__ieee754_pow+0xa1c>)
 800602a:	4b57      	ldr	r3, [pc, #348]	@ (8006188 <__ieee754_pow+0xa20>)
 800602c:	f7fb ff9c 	bl	8001f68 <__aeabi_dmul>
 8006030:	4a56      	ldr	r2, [pc, #344]	@ (800618c <__ieee754_pow+0xa24>)
 8006032:	0004      	movs	r4, r0
 8006034:	000d      	movs	r5, r1
 8006036:	9804      	ldr	r0, [sp, #16]
 8006038:	9905      	ldr	r1, [sp, #20]
 800603a:	4b55      	ldr	r3, [pc, #340]	@ (8006190 <__ieee754_pow+0xa28>)
 800603c:	f7fb ff94 	bl	8001f68 <__aeabi_dmul>
 8006040:	0002      	movs	r2, r0
 8006042:	000b      	movs	r3, r1
 8006044:	0020      	movs	r0, r4
 8006046:	0029      	movs	r1, r5
 8006048:	f7fa ffe6 	bl	8001018 <__aeabi_dadd>
 800604c:	0004      	movs	r4, r0
 800604e:	000d      	movs	r5, r1
 8006050:	0002      	movs	r2, r0
 8006052:	000b      	movs	r3, r1
 8006054:	9806      	ldr	r0, [sp, #24]
 8006056:	9907      	ldr	r1, [sp, #28]
 8006058:	f7fa ffde 	bl	8001018 <__aeabi_dadd>
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	9b07      	ldr	r3, [sp, #28]
 8006060:	0006      	movs	r6, r0
 8006062:	000f      	movs	r7, r1
 8006064:	f7fc fa48 	bl	80024f8 <__aeabi_dsub>
 8006068:	0002      	movs	r2, r0
 800606a:	000b      	movs	r3, r1
 800606c:	0020      	movs	r0, r4
 800606e:	0029      	movs	r1, r5
 8006070:	f7fc fa42 	bl	80024f8 <__aeabi_dsub>
 8006074:	0032      	movs	r2, r6
 8006076:	9002      	str	r0, [sp, #8]
 8006078:	9103      	str	r1, [sp, #12]
 800607a:	003b      	movs	r3, r7
 800607c:	0030      	movs	r0, r6
 800607e:	0039      	movs	r1, r7
 8006080:	f7fb ff72 	bl	8001f68 <__aeabi_dmul>
 8006084:	0004      	movs	r4, r0
 8006086:	000d      	movs	r5, r1
 8006088:	4a42      	ldr	r2, [pc, #264]	@ (8006194 <__ieee754_pow+0xa2c>)
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <__ieee754_pow+0xa30>)
 800608c:	f7fb ff6c 	bl	8001f68 <__aeabi_dmul>
 8006090:	4a42      	ldr	r2, [pc, #264]	@ (800619c <__ieee754_pow+0xa34>)
 8006092:	4b43      	ldr	r3, [pc, #268]	@ (80061a0 <__ieee754_pow+0xa38>)
 8006094:	f7fc fa30 	bl	80024f8 <__aeabi_dsub>
 8006098:	0022      	movs	r2, r4
 800609a:	002b      	movs	r3, r5
 800609c:	f7fb ff64 	bl	8001f68 <__aeabi_dmul>
 80060a0:	4a40      	ldr	r2, [pc, #256]	@ (80061a4 <__ieee754_pow+0xa3c>)
 80060a2:	4b41      	ldr	r3, [pc, #260]	@ (80061a8 <__ieee754_pow+0xa40>)
 80060a4:	f7fa ffb8 	bl	8001018 <__aeabi_dadd>
 80060a8:	0022      	movs	r2, r4
 80060aa:	002b      	movs	r3, r5
 80060ac:	f7fb ff5c 	bl	8001f68 <__aeabi_dmul>
 80060b0:	4a3e      	ldr	r2, [pc, #248]	@ (80061ac <__ieee754_pow+0xa44>)
 80060b2:	4b3f      	ldr	r3, [pc, #252]	@ (80061b0 <__ieee754_pow+0xa48>)
 80060b4:	f7fc fa20 	bl	80024f8 <__aeabi_dsub>
 80060b8:	0022      	movs	r2, r4
 80060ba:	002b      	movs	r3, r5
 80060bc:	f7fb ff54 	bl	8001f68 <__aeabi_dmul>
 80060c0:	4a3c      	ldr	r2, [pc, #240]	@ (80061b4 <__ieee754_pow+0xa4c>)
 80060c2:	4b3d      	ldr	r3, [pc, #244]	@ (80061b8 <__ieee754_pow+0xa50>)
 80060c4:	f7fa ffa8 	bl	8001018 <__aeabi_dadd>
 80060c8:	0022      	movs	r2, r4
 80060ca:	002b      	movs	r3, r5
 80060cc:	f7fb ff4c 	bl	8001f68 <__aeabi_dmul>
 80060d0:	0002      	movs	r2, r0
 80060d2:	000b      	movs	r3, r1
 80060d4:	0030      	movs	r0, r6
 80060d6:	0039      	movs	r1, r7
 80060d8:	f7fc fa0e 	bl	80024f8 <__aeabi_dsub>
 80060dc:	0004      	movs	r4, r0
 80060de:	000d      	movs	r5, r1
 80060e0:	0002      	movs	r2, r0
 80060e2:	000b      	movs	r3, r1
 80060e4:	0030      	movs	r0, r6
 80060e6:	0039      	movs	r1, r7
 80060e8:	f7fb ff3e 	bl	8001f68 <__aeabi_dmul>
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	9004      	str	r0, [sp, #16]
 80060f0:	9105      	str	r1, [sp, #20]
 80060f2:	2200      	movs	r2, #0
 80060f4:	0020      	movs	r0, r4
 80060f6:	0029      	movs	r1, r5
 80060f8:	05db      	lsls	r3, r3, #23
 80060fa:	f7fc f9fd 	bl	80024f8 <__aeabi_dsub>
 80060fe:	0002      	movs	r2, r0
 8006100:	000b      	movs	r3, r1
 8006102:	9804      	ldr	r0, [sp, #16]
 8006104:	9905      	ldr	r1, [sp, #20]
 8006106:	f7fb faeb 	bl	80016e0 <__aeabi_ddiv>
 800610a:	9a02      	ldr	r2, [sp, #8]
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	0004      	movs	r4, r0
 8006110:	000d      	movs	r5, r1
 8006112:	0030      	movs	r0, r6
 8006114:	0039      	movs	r1, r7
 8006116:	f7fb ff27 	bl	8001f68 <__aeabi_dmul>
 800611a:	9a02      	ldr	r2, [sp, #8]
 800611c:	9b03      	ldr	r3, [sp, #12]
 800611e:	f7fa ff7b 	bl	8001018 <__aeabi_dadd>
 8006122:	0002      	movs	r2, r0
 8006124:	000b      	movs	r3, r1
 8006126:	0020      	movs	r0, r4
 8006128:	0029      	movs	r1, r5
 800612a:	f7fc f9e5 	bl	80024f8 <__aeabi_dsub>
 800612e:	0032      	movs	r2, r6
 8006130:	003b      	movs	r3, r7
 8006132:	f7fc f9e1 	bl	80024f8 <__aeabi_dsub>
 8006136:	0002      	movs	r2, r0
 8006138:	000b      	movs	r3, r1
 800613a:	2000      	movs	r0, #0
 800613c:	491f      	ldr	r1, [pc, #124]	@ (80061bc <__ieee754_pow+0xa54>)
 800613e:	f7fc f9db 	bl	80024f8 <__aeabi_dsub>
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	051b      	lsls	r3, r3, #20
 8006146:	185b      	adds	r3, r3, r1
 8006148:	151a      	asrs	r2, r3, #20
 800614a:	2a00      	cmp	r2, #0
 800614c:	dc06      	bgt.n	800615c <__ieee754_pow+0x9f4>
 800614e:	9a00      	ldr	r2, [sp, #0]
 8006150:	f000 f83a 	bl	80061c8 <scalbn>
 8006154:	9a08      	ldr	r2, [sp, #32]
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	f7ff fbee 	bl	8005938 <__ieee754_pow+0x1d0>
 800615c:	0019      	movs	r1, r3
 800615e:	e7f9      	b.n	8006154 <__ieee754_pow+0x9ec>
 8006160:	2300      	movs	r3, #0
 8006162:	4c16      	ldr	r4, [pc, #88]	@ (80061bc <__ieee754_pow+0xa54>)
 8006164:	f7ff fbcb 	bl	80058fe <__ieee754_pow+0x196>
 8006168:	2300      	movs	r3, #0
 800616a:	2400      	movs	r4, #0
 800616c:	f7ff fbc7 	bl	80058fe <__ieee754_pow+0x196>
 8006170:	4090cbff 	.word	0x4090cbff
 8006174:	3f6f3400 	.word	0x3f6f3400
 8006178:	4090cc00 	.word	0x4090cc00
 800617c:	3fe00000 	.word	0x3fe00000
 8006180:	3fe62e43 	.word	0x3fe62e43
 8006184:	fefa39ef 	.word	0xfefa39ef
 8006188:	3fe62e42 	.word	0x3fe62e42
 800618c:	0ca86c39 	.word	0x0ca86c39
 8006190:	be205c61 	.word	0xbe205c61
 8006194:	72bea4d0 	.word	0x72bea4d0
 8006198:	3e663769 	.word	0x3e663769
 800619c:	c5d26bf1 	.word	0xc5d26bf1
 80061a0:	3ebbbd41 	.word	0x3ebbbd41
 80061a4:	af25de2c 	.word	0xaf25de2c
 80061a8:	3f11566a 	.word	0x3f11566a
 80061ac:	16bebd93 	.word	0x16bebd93
 80061b0:	3f66c16c 	.word	0x3f66c16c
 80061b4:	5555553e 	.word	0x5555553e
 80061b8:	3fc55555 	.word	0x3fc55555
 80061bc:	3ff00000 	.word	0x3ff00000

080061c0 <fabs>:
 80061c0:	0049      	lsls	r1, r1, #1
 80061c2:	084b      	lsrs	r3, r1, #1
 80061c4:	0019      	movs	r1, r3
 80061c6:	4770      	bx	lr

080061c8 <scalbn>:
 80061c8:	004b      	lsls	r3, r1, #1
 80061ca:	b570      	push	{r4, r5, r6, lr}
 80061cc:	0d5b      	lsrs	r3, r3, #21
 80061ce:	0014      	movs	r4, r2
 80061d0:	000d      	movs	r5, r1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <scalbn+0x2e>
 80061d6:	004b      	lsls	r3, r1, #1
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	4303      	orrs	r3, r0
 80061dc:	d012      	beq.n	8006204 <scalbn+0x3c>
 80061de:	4b23      	ldr	r3, [pc, #140]	@ (800626c <scalbn+0xa4>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	f7fb fec1 	bl	8001f68 <__aeabi_dmul>
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <scalbn+0xa8>)
 80061e8:	429c      	cmp	r4, r3
 80061ea:	da0c      	bge.n	8006206 <scalbn+0x3e>
 80061ec:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <scalbn+0xac>)
 80061ee:	4b22      	ldr	r3, [pc, #136]	@ (8006278 <scalbn+0xb0>)
 80061f0:	f7fb feba 	bl	8001f68 <__aeabi_dmul>
 80061f4:	e006      	b.n	8006204 <scalbn+0x3c>
 80061f6:	4a21      	ldr	r2, [pc, #132]	@ (800627c <scalbn+0xb4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d108      	bne.n	800620e <scalbn+0x46>
 80061fc:	0002      	movs	r2, r0
 80061fe:	000b      	movs	r3, r1
 8006200:	f7fa ff0a 	bl	8001018 <__aeabi_dadd>
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	000d      	movs	r5, r1
 8006208:	004b      	lsls	r3, r1, #1
 800620a:	0d5b      	lsrs	r3, r3, #21
 800620c:	3b36      	subs	r3, #54	@ 0x36
 800620e:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <scalbn+0xb8>)
 8006210:	4294      	cmp	r4, r2
 8006212:	dd0a      	ble.n	800622a <scalbn+0x62>
 8006214:	4c1b      	ldr	r4, [pc, #108]	@ (8006284 <scalbn+0xbc>)
 8006216:	4d1c      	ldr	r5, [pc, #112]	@ (8006288 <scalbn+0xc0>)
 8006218:	2900      	cmp	r1, #0
 800621a:	da01      	bge.n	8006220 <scalbn+0x58>
 800621c:	4c19      	ldr	r4, [pc, #100]	@ (8006284 <scalbn+0xbc>)
 800621e:	4d1b      	ldr	r5, [pc, #108]	@ (800628c <scalbn+0xc4>)
 8006220:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <scalbn+0xbc>)
 8006222:	4b19      	ldr	r3, [pc, #100]	@ (8006288 <scalbn+0xc0>)
 8006224:	0020      	movs	r0, r4
 8006226:	0029      	movs	r1, r5
 8006228:	e7e2      	b.n	80061f0 <scalbn+0x28>
 800622a:	18e2      	adds	r2, r4, r3
 800622c:	4b18      	ldr	r3, [pc, #96]	@ (8006290 <scalbn+0xc8>)
 800622e:	429a      	cmp	r2, r3
 8006230:	dcf0      	bgt.n	8006214 <scalbn+0x4c>
 8006232:	2a00      	cmp	r2, #0
 8006234:	dd05      	ble.n	8006242 <scalbn+0x7a>
 8006236:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <scalbn+0xcc>)
 8006238:	0512      	lsls	r2, r2, #20
 800623a:	402b      	ands	r3, r5
 800623c:	431a      	orrs	r2, r3
 800623e:	0011      	movs	r1, r2
 8006240:	e7e0      	b.n	8006204 <scalbn+0x3c>
 8006242:	0013      	movs	r3, r2
 8006244:	3335      	adds	r3, #53	@ 0x35
 8006246:	da08      	bge.n	800625a <scalbn+0x92>
 8006248:	4c0a      	ldr	r4, [pc, #40]	@ (8006274 <scalbn+0xac>)
 800624a:	4d0b      	ldr	r5, [pc, #44]	@ (8006278 <scalbn+0xb0>)
 800624c:	2900      	cmp	r1, #0
 800624e:	da01      	bge.n	8006254 <scalbn+0x8c>
 8006250:	4c08      	ldr	r4, [pc, #32]	@ (8006274 <scalbn+0xac>)
 8006252:	4d11      	ldr	r5, [pc, #68]	@ (8006298 <scalbn+0xd0>)
 8006254:	4a07      	ldr	r2, [pc, #28]	@ (8006274 <scalbn+0xac>)
 8006256:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <scalbn+0xb0>)
 8006258:	e7e4      	b.n	8006224 <scalbn+0x5c>
 800625a:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <scalbn+0xcc>)
 800625c:	3236      	adds	r2, #54	@ 0x36
 800625e:	401d      	ands	r5, r3
 8006260:	0512      	lsls	r2, r2, #20
 8006262:	432a      	orrs	r2, r5
 8006264:	0011      	movs	r1, r2
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <scalbn+0xd4>)
 8006268:	2200      	movs	r2, #0
 800626a:	e7c1      	b.n	80061f0 <scalbn+0x28>
 800626c:	43500000 	.word	0x43500000
 8006270:	ffff3cb0 	.word	0xffff3cb0
 8006274:	c2f8f359 	.word	0xc2f8f359
 8006278:	01a56e1f 	.word	0x01a56e1f
 800627c:	000007ff 	.word	0x000007ff
 8006280:	0000c350 	.word	0x0000c350
 8006284:	8800759c 	.word	0x8800759c
 8006288:	7e37e43c 	.word	0x7e37e43c
 800628c:	fe37e43c 	.word	0xfe37e43c
 8006290:	000007fe 	.word	0x000007fe
 8006294:	800fffff 	.word	0x800fffff
 8006298:	81a56e1f 	.word	0x81a56e1f
 800629c:	3c900000 	.word	0x3c900000

080062a0 <with_errno>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	000d      	movs	r5, r1
 80062a4:	0016      	movs	r6, r2
 80062a6:	0004      	movs	r4, r0
 80062a8:	f7fe fd6a 	bl	8004d80 <__errno>
 80062ac:	0029      	movs	r1, r5
 80062ae:	6006      	str	r6, [r0, #0]
 80062b0:	0020      	movs	r0, r4
 80062b2:	bd70      	pop	{r4, r5, r6, pc}

080062b4 <xflow>:
 80062b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062b6:	0014      	movs	r4, r2
 80062b8:	001d      	movs	r5, r3
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d002      	beq.n	80062c4 <xflow+0x10>
 80062be:	2180      	movs	r1, #128	@ 0x80
 80062c0:	0609      	lsls	r1, r1, #24
 80062c2:	185b      	adds	r3, r3, r1
 80062c4:	9200      	str	r2, [sp, #0]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	9a00      	ldr	r2, [sp, #0]
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	0020      	movs	r0, r4
 80062ce:	0029      	movs	r1, r5
 80062d0:	f7fb fe4a 	bl	8001f68 <__aeabi_dmul>
 80062d4:	2222      	movs	r2, #34	@ 0x22
 80062d6:	f7ff ffe3 	bl	80062a0 <with_errno>
 80062da:	b003      	add	sp, #12
 80062dc:	bd30      	pop	{r4, r5, pc}

080062de <__math_uflow>:
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	b510      	push	{r4, lr}
 80062e2:	2200      	movs	r2, #0
 80062e4:	055b      	lsls	r3, r3, #21
 80062e6:	f7ff ffe5 	bl	80062b4 <xflow>
 80062ea:	bd10      	pop	{r4, pc}

080062ec <__math_oflow>:
 80062ec:	23e0      	movs	r3, #224	@ 0xe0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	2200      	movs	r2, #0
 80062f2:	05db      	lsls	r3, r3, #23
 80062f4:	f7ff ffde 	bl	80062b4 <xflow>
 80062f8:	bd10      	pop	{r4, pc}
	...

080062fc <__ieee754_sqrt>:
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fe:	000a      	movs	r2, r1
 8006300:	000d      	movs	r5, r1
 8006302:	496d      	ldr	r1, [pc, #436]	@ (80064b8 <__ieee754_sqrt+0x1bc>)
 8006304:	0004      	movs	r4, r0
 8006306:	0003      	movs	r3, r0
 8006308:	0008      	movs	r0, r1
 800630a:	b087      	sub	sp, #28
 800630c:	4028      	ands	r0, r5
 800630e:	4288      	cmp	r0, r1
 8006310:	d111      	bne.n	8006336 <__ieee754_sqrt+0x3a>
 8006312:	0022      	movs	r2, r4
 8006314:	002b      	movs	r3, r5
 8006316:	0020      	movs	r0, r4
 8006318:	0029      	movs	r1, r5
 800631a:	f7fb fe25 	bl	8001f68 <__aeabi_dmul>
 800631e:	0002      	movs	r2, r0
 8006320:	000b      	movs	r3, r1
 8006322:	0020      	movs	r0, r4
 8006324:	0029      	movs	r1, r5
 8006326:	f7fa fe77 	bl	8001018 <__aeabi_dadd>
 800632a:	0004      	movs	r4, r0
 800632c:	000d      	movs	r5, r1
 800632e:	0020      	movs	r0, r4
 8006330:	0029      	movs	r1, r5
 8006332:	b007      	add	sp, #28
 8006334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006336:	2d00      	cmp	r5, #0
 8006338:	dc11      	bgt.n	800635e <__ieee754_sqrt+0x62>
 800633a:	0069      	lsls	r1, r5, #1
 800633c:	0849      	lsrs	r1, r1, #1
 800633e:	4321      	orrs	r1, r4
 8006340:	d0f5      	beq.n	800632e <__ieee754_sqrt+0x32>
 8006342:	2000      	movs	r0, #0
 8006344:	4285      	cmp	r5, r0
 8006346:	d010      	beq.n	800636a <__ieee754_sqrt+0x6e>
 8006348:	0022      	movs	r2, r4
 800634a:	002b      	movs	r3, r5
 800634c:	0020      	movs	r0, r4
 800634e:	0029      	movs	r1, r5
 8006350:	f7fc f8d2 	bl	80024f8 <__aeabi_dsub>
 8006354:	0002      	movs	r2, r0
 8006356:	000b      	movs	r3, r1
 8006358:	f7fb f9c2 	bl	80016e0 <__aeabi_ddiv>
 800635c:	e7e5      	b.n	800632a <__ieee754_sqrt+0x2e>
 800635e:	1528      	asrs	r0, r5, #20
 8006360:	d115      	bne.n	800638e <__ieee754_sqrt+0x92>
 8006362:	2480      	movs	r4, #128	@ 0x80
 8006364:	2100      	movs	r1, #0
 8006366:	0364      	lsls	r4, r4, #13
 8006368:	e007      	b.n	800637a <__ieee754_sqrt+0x7e>
 800636a:	0ada      	lsrs	r2, r3, #11
 800636c:	3815      	subs	r0, #21
 800636e:	055b      	lsls	r3, r3, #21
 8006370:	2a00      	cmp	r2, #0
 8006372:	d0fa      	beq.n	800636a <__ieee754_sqrt+0x6e>
 8006374:	e7f5      	b.n	8006362 <__ieee754_sqrt+0x66>
 8006376:	0052      	lsls	r2, r2, #1
 8006378:	3101      	adds	r1, #1
 800637a:	4222      	tst	r2, r4
 800637c:	d0fb      	beq.n	8006376 <__ieee754_sqrt+0x7a>
 800637e:	1e4c      	subs	r4, r1, #1
 8006380:	1b00      	subs	r0, r0, r4
 8006382:	2420      	movs	r4, #32
 8006384:	001d      	movs	r5, r3
 8006386:	1a64      	subs	r4, r4, r1
 8006388:	40e5      	lsrs	r5, r4
 800638a:	408b      	lsls	r3, r1
 800638c:	432a      	orrs	r2, r5
 800638e:	494b      	ldr	r1, [pc, #300]	@ (80064bc <__ieee754_sqrt+0x1c0>)
 8006390:	0312      	lsls	r2, r2, #12
 8006392:	1844      	adds	r4, r0, r1
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	0b12      	lsrs	r2, r2, #12
 8006398:	0349      	lsls	r1, r1, #13
 800639a:	4311      	orrs	r1, r2
 800639c:	07c0      	lsls	r0, r0, #31
 800639e:	d403      	bmi.n	80063a8 <__ieee754_sqrt+0xac>
 80063a0:	0fda      	lsrs	r2, r3, #31
 80063a2:	0049      	lsls	r1, r1, #1
 80063a4:	1851      	adds	r1, r2, r1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	2500      	movs	r5, #0
 80063aa:	1062      	asrs	r2, r4, #1
 80063ac:	0049      	lsls	r1, r1, #1
 80063ae:	2480      	movs	r4, #128	@ 0x80
 80063b0:	9205      	str	r2, [sp, #20]
 80063b2:	0fda      	lsrs	r2, r3, #31
 80063b4:	1852      	adds	r2, r2, r1
 80063b6:	2016      	movs	r0, #22
 80063b8:	0029      	movs	r1, r5
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	03a4      	lsls	r4, r4, #14
 80063be:	190e      	adds	r6, r1, r4
 80063c0:	4296      	cmp	r6, r2
 80063c2:	dc02      	bgt.n	80063ca <__ieee754_sqrt+0xce>
 80063c4:	1931      	adds	r1, r6, r4
 80063c6:	1b92      	subs	r2, r2, r6
 80063c8:	192d      	adds	r5, r5, r4
 80063ca:	0fde      	lsrs	r6, r3, #31
 80063cc:	0052      	lsls	r2, r2, #1
 80063ce:	3801      	subs	r0, #1
 80063d0:	1992      	adds	r2, r2, r6
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	0864      	lsrs	r4, r4, #1
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1f1      	bne.n	80063be <__ieee754_sqrt+0xc2>
 80063da:	2620      	movs	r6, #32
 80063dc:	2780      	movs	r7, #128	@ 0x80
 80063de:	0004      	movs	r4, r0
 80063e0:	9604      	str	r6, [sp, #16]
 80063e2:	063f      	lsls	r7, r7, #24
 80063e4:	19c6      	adds	r6, r0, r7
 80063e6:	46b4      	mov	ip, r6
 80063e8:	4291      	cmp	r1, r2
 80063ea:	db02      	blt.n	80063f2 <__ieee754_sqrt+0xf6>
 80063ec:	d114      	bne.n	8006418 <__ieee754_sqrt+0x11c>
 80063ee:	429e      	cmp	r6, r3
 80063f0:	d812      	bhi.n	8006418 <__ieee754_sqrt+0x11c>
 80063f2:	4660      	mov	r0, ip
 80063f4:	4666      	mov	r6, ip
 80063f6:	19c0      	adds	r0, r0, r7
 80063f8:	9100      	str	r1, [sp, #0]
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	da03      	bge.n	8006406 <__ieee754_sqrt+0x10a>
 80063fe:	43c6      	mvns	r6, r0
 8006400:	0ff6      	lsrs	r6, r6, #31
 8006402:	198e      	adds	r6, r1, r6
 8006404:	9600      	str	r6, [sp, #0]
 8006406:	1a52      	subs	r2, r2, r1
 8006408:	4563      	cmp	r3, ip
 800640a:	4189      	sbcs	r1, r1
 800640c:	4249      	negs	r1, r1
 800640e:	1a52      	subs	r2, r2, r1
 8006410:	4661      	mov	r1, ip
 8006412:	1a5b      	subs	r3, r3, r1
 8006414:	9900      	ldr	r1, [sp, #0]
 8006416:	19e4      	adds	r4, r4, r7
 8006418:	0fde      	lsrs	r6, r3, #31
 800641a:	0052      	lsls	r2, r2, #1
 800641c:	1992      	adds	r2, r2, r6
 800641e:	9e04      	ldr	r6, [sp, #16]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	3e01      	subs	r6, #1
 8006424:	087f      	lsrs	r7, r7, #1
 8006426:	9604      	str	r6, [sp, #16]
 8006428:	2e00      	cmp	r6, #0
 800642a:	d1db      	bne.n	80063e4 <__ieee754_sqrt+0xe8>
 800642c:	431a      	orrs	r2, r3
 800642e:	d01f      	beq.n	8006470 <__ieee754_sqrt+0x174>
 8006430:	4e23      	ldr	r6, [pc, #140]	@ (80064c0 <__ieee754_sqrt+0x1c4>)
 8006432:	4f24      	ldr	r7, [pc, #144]	@ (80064c4 <__ieee754_sqrt+0x1c8>)
 8006434:	6830      	ldr	r0, [r6, #0]
 8006436:	6871      	ldr	r1, [r6, #4]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	9200      	str	r2, [sp, #0]
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	6832      	ldr	r2, [r6, #0]
 8006442:	6873      	ldr	r3, [r6, #4]
 8006444:	9202      	str	r2, [sp, #8]
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	9a00      	ldr	r2, [sp, #0]
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	f7fc f854 	bl	80024f8 <__aeabi_dsub>
 8006450:	0002      	movs	r2, r0
 8006452:	000b      	movs	r3, r1
 8006454:	9802      	ldr	r0, [sp, #8]
 8006456:	9903      	ldr	r1, [sp, #12]
 8006458:	f7f9 fffa 	bl	8000450 <__aeabi_dcmple>
 800645c:	2800      	cmp	r0, #0
 800645e:	d007      	beq.n	8006470 <__ieee754_sqrt+0x174>
 8006460:	6830      	ldr	r0, [r6, #0]
 8006462:	6871      	ldr	r1, [r6, #4]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	1c67      	adds	r7, r4, #1
 800646a:	d10f      	bne.n	800648c <__ieee754_sqrt+0x190>
 800646c:	9c04      	ldr	r4, [sp, #16]
 800646e:	3501      	adds	r5, #1
 8006470:	4b15      	ldr	r3, [pc, #84]	@ (80064c8 <__ieee754_sqrt+0x1cc>)
 8006472:	106a      	asrs	r2, r5, #1
 8006474:	18d2      	adds	r2, r2, r3
 8006476:	0863      	lsrs	r3, r4, #1
 8006478:	07ed      	lsls	r5, r5, #31
 800647a:	d502      	bpl.n	8006482 <__ieee754_sqrt+0x186>
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	0609      	lsls	r1, r1, #24
 8006480:	430b      	orrs	r3, r1
 8006482:	9905      	ldr	r1, [sp, #20]
 8006484:	001c      	movs	r4, r3
 8006486:	0509      	lsls	r1, r1, #20
 8006488:	188d      	adds	r5, r1, r2
 800648a:	e750      	b.n	800632e <__ieee754_sqrt+0x32>
 800648c:	f7fa fdc4 	bl	8001018 <__aeabi_dadd>
 8006490:	6877      	ldr	r7, [r6, #4]
 8006492:	6836      	ldr	r6, [r6, #0]
 8006494:	0002      	movs	r2, r0
 8006496:	000b      	movs	r3, r1
 8006498:	0030      	movs	r0, r6
 800649a:	0039      	movs	r1, r7
 800649c:	f7f9 ffce 	bl	800043c <__aeabi_dcmplt>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d004      	beq.n	80064ae <__ieee754_sqrt+0x1b2>
 80064a4:	3402      	adds	r4, #2
 80064a6:	4263      	negs	r3, r4
 80064a8:	4163      	adcs	r3, r4
 80064aa:	18ed      	adds	r5, r5, r3
 80064ac:	e7e0      	b.n	8006470 <__ieee754_sqrt+0x174>
 80064ae:	2301      	movs	r3, #1
 80064b0:	3401      	adds	r4, #1
 80064b2:	439c      	bics	r4, r3
 80064b4:	e7dc      	b.n	8006470 <__ieee754_sqrt+0x174>
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	fffffc01 	.word	0xfffffc01
 80064c0:	20000068 	.word	0x20000068
 80064c4:	20000060 	.word	0x20000060
 80064c8:	3fe00000 	.word	0x3fe00000

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	46c0      	nop			@ (mov r8, r8)
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
