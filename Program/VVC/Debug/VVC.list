
VVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a10  08003a10  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a10  08003a10  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a10  08003a10  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003a18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  08003a74  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003a74  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a48  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  0000cacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001533e  00000000  00000000  0000ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a3c0  00000000  00000000  00023f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00085e07  00000000  00000000  0002e31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b4125  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000689  00000000  00000000  000b4168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002318  00000000  00000000  000b47f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b6b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003798 	.word	0x08003798

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08003798 	.word	0x08003798

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b590      	push	{r4, r7, lr}
 800022e:	b08b      	sub	sp, #44	@ 0x2c
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint16_t ADC_buffer[4];
  for(int i = 0; i < 4; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	627b      	str	r3, [r7, #36]	@ 0x24
 8000236:	e008      	b.n	800024a <main+0x1e>
	  ADC_buffer[i] = 0;
 8000238:	2318      	movs	r3, #24
 800023a:	18fb      	adds	r3, r7, r3
 800023c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	2100      	movs	r1, #0
 8000242:	52d1      	strh	r1, [r2, r3]
  for(int i = 0; i < 4; i++)
 8000244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000246:	3301      	adds	r3, #1
 8000248:	627b      	str	r3, [r7, #36]	@ 0x24
 800024a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800024c:	2b03      	cmp	r3, #3
 800024e:	ddf3      	ble.n	8000238 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 fc92 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f86a 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 f994 	bl	8000584 <MX_GPIO_Init>
  MX_ADC1_Init();
 800025c:	f000 f8ae 	bl	80003bc <MX_ADC1_Init>
  MX_SPI2_Init();
 8000260:	f000 f950 	bl	8000504 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reset_screen();
 8000264:	f000 f9ec 	bl	8000640 <reset_screen>
  init_screen();
 8000268:	f000 fa03 	bl	8000672 <init_screen>
  clear_screen();
 800026c:	f000 fa21 	bl	80006b2 <clear_screen>
  comm_write(0x40); // Display start address + 0x40
 8000270:	2040      	movs	r0, #64	@ 0x40
 8000272:	f000 fa5f 	bl	8000734 <comm_write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i = 0; i < 4; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	623b      	str	r3, [r7, #32]
 800027a:	e016      	b.n	80002aa <main+0x7e>
	  {
		  HAL_ADC_Start(&hadc1);
 800027c:	4b29      	ldr	r3, [pc, #164]	@ (8000324 <main+0xf8>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f802 	bl	8001288 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8000284:	4b27      	ldr	r3, [pc, #156]	@ (8000324 <main+0xf8>)
 8000286:	2101      	movs	r1, #1
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f84b 	bl	8001324 <HAL_ADC_PollForConversion>
		  ADC_buffer[i] = HAL_ADC_GetValue(&hadc1);
 800028e:	4b25      	ldr	r3, [pc, #148]	@ (8000324 <main+0xf8>)
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f8db 	bl	800144c <HAL_ADC_GetValue>
 8000296:	0003      	movs	r3, r0
 8000298:	b299      	uxth	r1, r3
 800029a:	2318      	movs	r3, #24
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	6a3a      	ldr	r2, [r7, #32]
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	52d1      	strh	r1, [r2, r3]
	  for(int i = 0; i < 4; i++)
 80002a4:	6a3b      	ldr	r3, [r7, #32]
 80002a6:	3301      	adds	r3, #1
 80002a8:	623b      	str	r3, [r7, #32]
 80002aa:	6a3b      	ldr	r3, [r7, #32]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	dde5      	ble.n	800027c <main+0x50>
		  //sprintf(numText, "%d", ADC_buffer[i]);
		  //print_data(numText, i);

	  }
	  //Now the buffer contains all 4 values.
	  sprintf(numText, "%d", ADC_buffer[0]);
 80002b0:	2418      	movs	r4, #24
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	001a      	movs	r2, r3
 80002b8:	491b      	ldr	r1, [pc, #108]	@ (8000328 <main+0xfc>)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	0018      	movs	r0, r3
 80002be:	f002 fdcd 	bl	8002e5c <siprintf>
	  print_data(numText, 0);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fa84 	bl	80007d4 <print_data>

	  sprintf(numText, "%d", ADC_buffer[1]);
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	885b      	ldrh	r3, [r3, #2]
 80002d0:	001a      	movs	r2, r3
 80002d2:	4915      	ldr	r1, [pc, #84]	@ (8000328 <main+0xfc>)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	0018      	movs	r0, r3
 80002d8:	f002 fdc0 	bl	8002e5c <siprintf>
	  print_data(numText, 1);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fa77 	bl	80007d4 <print_data>

	  sprintf(numText, "%d", ADC_buffer[2]);
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	001a      	movs	r2, r3
 80002ec:	490e      	ldr	r1, [pc, #56]	@ (8000328 <main+0xfc>)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 fdb3 	bl	8002e5c <siprintf>
	  print_data(numText, 2);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fa6a 	bl	80007d4 <print_data>

	  sprintf(numText, "%d", ADC_buffer[3]);
 8000300:	193b      	adds	r3, r7, r4
 8000302:	88db      	ldrh	r3, [r3, #6]
 8000304:	001a      	movs	r2, r3
 8000306:	4908      	ldr	r1, [pc, #32]	@ (8000328 <main+0xfc>)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	0018      	movs	r0, r3
 800030c:	f002 fda6 	bl	8002e5c <siprintf>
	  print_data(numText, 3);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2103      	movs	r1, #3
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fa5d 	bl	80007d4 <print_data>
	  //print_data(text, 0);
	  //print_data(text2, 1);
	  //print_data(text3, 2);
	  //print_data(text4, 3);
	  HAL_Delay(100);
 800031a:	2064      	movs	r0, #100	@ 0x64
 800031c:	f000 fcb2 	bl	8000c84 <HAL_Delay>
	  for(int i = 0; i < 4; i++)
 8000320:	e7a9      	b.n	8000276 <main+0x4a>
 8000322:	46c0      	nop			@ (mov r8, r8)
 8000324:	20000078 	.word	0x20000078
 8000328:	080037b0 	.word	0x080037b0

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b093      	sub	sp, #76	@ 0x4c
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	2414      	movs	r4, #20
 8000334:	193b      	adds	r3, r7, r4
 8000336:	0018      	movs	r0, r3
 8000338:	2334      	movs	r3, #52	@ 0x34
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f002 fdad 	bl	8002e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	0018      	movs	r0, r3
 8000346:	2310      	movs	r3, #16
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fda6 	bl	8002e9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000350:	2380      	movs	r3, #128	@ 0x80
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fd19 	bl	8001d8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2280      	movs	r2, #128	@ 0x80
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000368:	193b      	adds	r3, r7, r4
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2240      	movs	r2, #64	@ 0x40
 8000372:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	193b      	adds	r3, r7, r4
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fd45 	bl	8001e0c <HAL_RCC_OscConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000386:	f000 fa8b 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f002 f840 	bl	800242c <HAL_RCC_ClockConfig>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b0:	f000 fa76 	bl	80008a0 <Error_Handler>
  }
}
 80003b4:	46c0      	nop			@ (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b013      	add	sp, #76	@ 0x4c
 80003ba:	bd90      	pop	{r4, r7, pc}

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	0018      	movs	r0, r3
 80003c6:	230c      	movs	r3, #12
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f002 fd66 	bl	8002e9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003d0:	4b46      	ldr	r3, [pc, #280]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003d2:	4a47      	ldr	r2, [pc, #284]	@ (80004f0 <MX_ADC1_Init+0x134>)
 80003d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003d6:	4b45      	ldr	r3, [pc, #276]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	05d2      	lsls	r2, r2, #23
 80003dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	4b43      	ldr	r3, [pc, #268]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b41      	ldr	r3, [pc, #260]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ea:	4b40      	ldr	r3, [pc, #256]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003ec:	2280      	movs	r2, #128	@ 0x80
 80003ee:	0392      	lsls	r2, r2, #14
 80003f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f2:	4b3e      	ldr	r3, [pc, #248]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003f4:	2204      	movs	r2, #4
 80003f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f8:	4b3c      	ldr	r3, [pc, #240]	@ (80004ec <MX_ADC1_Init+0x130>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003fe:	4b3b      	ldr	r3, [pc, #236]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000400:	2200      	movs	r2, #0
 8000402:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000404:	4b39      	ldr	r3, [pc, #228]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000406:	2200      	movs	r2, #0
 8000408:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800040a:	4b38      	ldr	r3, [pc, #224]	@ (80004ec <MX_ADC1_Init+0x130>)
 800040c:	2204      	movs	r2, #4
 800040e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000410:	4b36      	ldr	r3, [pc, #216]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000412:	2220      	movs	r2, #32
 8000414:	2101      	movs	r1, #1
 8000416:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000418:	4b34      	ldr	r3, [pc, #208]	@ (80004ec <MX_ADC1_Init+0x130>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041e:	4b33      	ldr	r3, [pc, #204]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000420:	2200      	movs	r2, #0
 8000422:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000424:	4b31      	ldr	r3, [pc, #196]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000426:	222c      	movs	r2, #44	@ 0x2c
 8000428:	2100      	movs	r1, #0
 800042a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042c:	4b2f      	ldr	r3, [pc, #188]	@ (80004ec <MX_ADC1_Init+0x130>)
 800042e:	2200      	movs	r2, #0
 8000430:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000434:	2200      	movs	r2, #0
 8000436:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000438:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <MX_ADC1_Init+0x130>)
 800043a:	2200      	movs	r2, #0
 800043c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800043e:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000440:	223c      	movs	r2, #60	@ 0x3c
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000446:	4b29      	ldr	r3, [pc, #164]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000448:	2200      	movs	r2, #0
 800044a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044c:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <MX_ADC1_Init+0x130>)
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fd72 	bl	8000f38 <HAL_ADC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000458:	f000 fa22 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <MX_ADC1_Init+0x138>)
 8000460:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046e:	1d3a      	adds	r2, r7, #4
 8000470:	4b1e      	ldr	r3, [pc, #120]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fff5 	bl	8001464 <HAL_ADC_ConfigChannel>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800047e:	f000 fa0f 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4a1c      	ldr	r2, [pc, #112]	@ (80004f8 <MX_ADC1_Init+0x13c>)
 8000486:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2204      	movs	r2, #4
 800048c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_ADC1_Init+0x130>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 ffe5 	bl	8001464 <HAL_ADC_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800049e:	f000 f9ff 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a15      	ldr	r2, [pc, #84]	@ (80004fc <MX_ADC1_Init+0x140>)
 80004a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2208      	movs	r2, #8
 80004ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_ADC1_Init+0x130>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 ffd5 	bl	8001464 <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80004be:	f000 f9ef 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <MX_ADC1_Init+0x144>)
 80004c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	220c      	movs	r2, #12
 80004cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ce:	1d3a      	adds	r2, r7, #4
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <MX_ADC1_Init+0x130>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 ffc5 	bl	8001464 <HAL_ADC_ConfigChannel>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80004de:	f000 f9df 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b004      	add	sp, #16
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	20000078 	.word	0x20000078
 80004f0:	40012400 	.word	0x40012400
 80004f4:	2c000800 	.word	0x2c000800
 80004f8:	20000100 	.word	0x20000100
 80004fc:	18000040 	.word	0x18000040
 8000500:	1c000080 	.word	0x1c000080

08000504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000508:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <MX_SPI2_Init+0x78>)
 800050a:	4a1d      	ldr	r2, [pc, #116]	@ (8000580 <MX_SPI2_Init+0x7c>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <MX_SPI2_Init+0x78>)
 8000510:	2282      	movs	r2, #130	@ 0x82
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <MX_SPI2_Init+0x78>)
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	0212      	lsls	r2, r2, #8
 800051c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_SPI2_Init+0x78>)
 8000520:	22e0      	movs	r2, #224	@ 0xe0
 8000522:	00d2      	lsls	r2, r2, #3
 8000524:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <MX_SPI2_Init+0x78>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <MX_SPI2_Init+0x78>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <MX_SPI2_Init+0x78>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0092      	lsls	r2, r2, #2
 8000538:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_SPI2_Init+0x78>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_SPI2_Init+0x78>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_SPI2_Init+0x78>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <MX_SPI2_Init+0x78>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <MX_SPI2_Init+0x78>)
 8000554:	2207      	movs	r2, #7
 8000556:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <MX_SPI2_Init+0x78>)
 800055a:	2200      	movs	r2, #0
 800055c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <MX_SPI2_Init+0x78>)
 8000560:	2208      	movs	r2, #8
 8000562:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <MX_SPI2_Init+0x78>)
 8000566:	0018      	movs	r0, r3
 8000568:	f002 f8ea 	bl	8002740 <HAL_SPI_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000570:	f000 f996 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	200000dc 	.word	0x200000dc
 8000580:	40003800 	.word	0x40003800

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b089      	sub	sp, #36	@ 0x24
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	240c      	movs	r4, #12
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f002 fc81 	bl	8002e9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <MX_GPIO_Init+0xb4>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005a0:	2102      	movs	r1, #2
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2202      	movs	r2, #2
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 80005ca:	23a0      	movs	r3, #160	@ 0xa0
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2200      	movs	r2, #0
 80005d0:	2106      	movs	r1, #6
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fbbc 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_GPIO_Init+0xb8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fbb6 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _RST_Pin A0_Pin */
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2206      	movs	r2, #6
 80005e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2201      	movs	r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	193a      	adds	r2, r7, r4
 80005fe:	23a0      	movs	r3, #160	@ 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fa3f 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : _CS_Pin */
  GPIO_InitStruct.Pin = _CS_Pin;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2208      	movs	r2, #8
 8000610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2201      	movs	r2, #1
 8000616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8000624:	187b      	adds	r3, r7, r1
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <MX_GPIO_Init+0xb8>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f001 fa2c 	bl	8001a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b009      	add	sp, #36	@ 0x24
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	50000400 	.word	0x50000400

08000640 <reset_screen>:

/* USER CODE BEGIN 4 */
void reset_screen()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_RESET);
 8000644:	23a0      	movs	r3, #160	@ 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2200      	movs	r2, #0
 800064a:	2102      	movs	r1, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fb7f 	bl	8001d50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000652:	2064      	movs	r0, #100	@ 0x64
 8000654:	f000 fb16 	bl	8000c84 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_SET);
 8000658:	23a0      	movs	r3, #160	@ 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fb75 	bl	8001d50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000666:	2064      	movs	r0, #100	@ 0x64
 8000668:	f000 fb0c 	bl	8000c84 <HAL_Delay>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <init_screen>:

void init_screen()
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
	comm_write(0xA0); //Set SEG (column) direction - left to right
 8000676:	20a0      	movs	r0, #160	@ 0xa0
 8000678:	f000 f85c 	bl	8000734 <comm_write>
	comm_write(0xAE); //Turn the display off
 800067c:	20ae      	movs	r0, #174	@ 0xae
 800067e:	f000 f859 	bl	8000734 <comm_write>
	comm_write(0xC8); //Set COM (row) direction - top to bottom
 8000682:	20c8      	movs	r0, #200	@ 0xc8
 8000684:	f000 f856 	bl	8000734 <comm_write>
	comm_write(0xA2); //Set LCD bias
 8000688:	20a2      	movs	r0, #162	@ 0xa2
 800068a:	f000 f853 	bl	8000734 <comm_write>
	comm_write(0x2F); //Power Control Set - Boost, Regulator and Follower are all on
 800068e:	202f      	movs	r0, #47	@ 0x2f
 8000690:	f000 f850 	bl	8000734 <comm_write>
	comm_write(0x21); //Set Resistor Ratio - 001 -> 3.5
 8000694:	2021      	movs	r0, #33	@ 0x21
 8000696:	f000 f84d 	bl	8000734 <comm_write>
	comm_write(0x81); //Electronic Volume Command (set contrast) Double Byte: 1 of 2
 800069a:	2081      	movs	r0, #129	@ 0x81
 800069c:	f000 f84a 	bl	8000734 <comm_write>
	comm_write(0x20); //Electronic Volume value (contrast value) Double Byte: 2 of 2
 80006a0:	2020      	movs	r0, #32
 80006a2:	f000 f847 	bl	8000734 <comm_write>
	comm_write(0xAF); //Display ON
 80006a6:	20af      	movs	r0, #175	@ 0xaf
 80006a8:	f000 f844 	bl	8000734 <comm_write>
}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <clear_screen>:

void clear_screen()
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
	uint8_t page = 0xB0; //'B'- command to set Page Address, lower four bits contain actual address
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	22b0      	movs	r2, #176	@ 0xb0
 80006bc:	701a      	strb	r2, [r3, #0]
						//Command := 0xB0 + start address
	comm_write(0xAE); // Display OFF
 80006be:	20ae      	movs	r0, #174	@ 0xae
 80006c0:	f000 f838 	bl	8000734 <comm_write>
	comm_write(0x40); // D7,D6 = "01" - command to set start line, Bottom 5 bits are start line address
 80006c4:	2040      	movs	r0, #64	@ 0x40
 80006c6:	f000 f835 	bl	8000734 <comm_write>
						//Command := 0x40 + start line address

	for(uint8_t i = 0; i < 4; i++)
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e025      	b.n	800071e <clear_screen+0x6c>
	{
		comm_write(page);	// send page address
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f82c 	bl	8000734 <comm_write>
		//	Following two lines set the column address to leftmost column
		comm_write(0x10); // column address upper 4 bits + 0x10
 80006dc:	2010      	movs	r0, #16
 80006de:	f000 f829 	bl	8000734 <comm_write>
		comm_write(0x00); // column address lower 4 bits + 0x00
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f826 	bl	8000734 <comm_write>

		for(uint8_t j = 0; j < 128; j++)
 80006e8:	1d7b      	adds	r3, r7, #5
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e007      	b.n	8000700 <clear_screen+0x4e>
		{
			data_write(0x00);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f847 	bl	8000784 <data_write>
		for(uint8_t j = 0; j < 128; j++)
 80006f6:	1d7b      	adds	r3, r7, #5
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	1d7b      	adds	r3, r7, #5
 80006fc:	3201      	adds	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1d7b      	adds	r3, r7, #5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	daf2      	bge.n	80006f0 <clear_screen+0x3e>
		}
		page++;//After 128 columns, go to the next page
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	3201      	adds	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	3201      	adds	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	1dbb      	adds	r3, r7, #6
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d9d5      	bls.n	80006d2 <clear_screen+0x20>
	}
	comm_write(0xAF);//Turn the display back on
 8000726:	20af      	movs	r0, #175	@ 0xaf
 8000728:	f000 f804 	bl	8000734 <comm_write>
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}

08000734 <comm_write>:

void comm_write(uint8_t c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <comm_write+0x48>)
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fb02 	bl	8001d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_RESET);	//Set message type to command
 800074c:	23a0      	movs	r3, #160	@ 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fafb 	bl	8001d50 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 100); // transmit command
 800075a:	1df9      	adds	r1, r7, #7
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <comm_write+0x4c>)
 800075e:	2364      	movs	r3, #100	@ 0x64
 8000760:	2201      	movs	r2, #1
 8000762:	f002 f8a5 	bl	80028b0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <comm_write+0x48>)
 8000768:	2201      	movs	r2, #1
 800076a:	2108      	movs	r1, #8
 800076c:	0018      	movs	r0, r3
 800076e:	f001 faef 	bl	8001d50 <HAL_GPIO_WritePin>

}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	50000400 	.word	0x50000400
 8000780:	200000dc 	.word	0x200000dc

08000784 <data_write>:

void data_write(uint8_t d)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <data_write+0x48>)
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fada 	bl	8001d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_SET);	//Set message type to
 800079c:	23a0      	movs	r3, #160	@ 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2201      	movs	r2, #1
 80007a2:	2104      	movs	r1, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fad3 	bl	8001d50 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 100); //transmit data
 80007aa:	1df9      	adds	r1, r7, #7
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <data_write+0x4c>)
 80007ae:	2364      	movs	r3, #100	@ 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	f002 f87d 	bl	80028b0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <data_write+0x48>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fac7 	bl	8001d50 <HAL_GPIO_WritePin>
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	50000400 	.word	0x50000400
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <print_data>:

void print_data(char* text, uint8_t rowIndex)
{
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	000a      	movs	r2, r1
 80007de:	1cfb      	adds	r3, r7, #3
 80007e0:	701a      	strb	r2, [r3, #0]
	unsigned char page = 0xB0;
 80007e2:	210d      	movs	r1, #13
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	22b0      	movs	r2, #176	@ 0xb0
 80007e8:	701a      	strb	r2, [r3, #0]
	comm_write(page + rowIndex); // send page address
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	1cfb      	adds	r3, r7, #3
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	18d3      	adds	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff9c 	bl	8000734 <comm_write>
	comm_write(0x10); // column address upper 4 bits + 0x10
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ff99 	bl	8000734 <comm_write>
	comm_write(0x00); // column address lower 4 bits + 0x00
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff96 	bl	8000734 <comm_write>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e036      	b.n	8000880 <print_data+0xac>
	{
		uint8_t c = (uint8_t)text[i] - 32;
 8000812:	230f      	movs	r3, #15
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	230c      	movs	r3, #12
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	3a20      	subs	r2, #32
 8000824:	701a      	strb	r2, [r3, #0]
		uint8_t val = 0;
 8000826:	230b      	movs	r3, #11
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 5; j++)
 800082e:	230e      	movs	r3, #14
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e018      	b.n	800086a <print_data+0x96>
		{
			val = Ascii_1[c][j];
 8000838:	230c      	movs	r3, #12
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	250e      	movs	r5, #14
 8000840:	197b      	adds	r3, r7, r5
 8000842:	7818      	ldrb	r0, [r3, #0]
 8000844:	260b      	movs	r6, #11
 8000846:	19b9      	adds	r1, r7, r6
 8000848:	4c14      	ldr	r4, [pc, #80]	@ (800089c <print_data+0xc8>)
 800084a:	0013      	movs	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	189b      	adds	r3, r3, r2
 8000850:	18e3      	adds	r3, r4, r3
 8000852:	5c1b      	ldrb	r3, [r3, r0]
 8000854:	700b      	strb	r3, [r1, #0]
			data_write(val);
 8000856:	19bb      	adds	r3, r7, r6
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff ff92 	bl	8000784 <data_write>
		for(uint8_t j = 0; j < 5; j++)
 8000860:	197b      	adds	r3, r7, r5
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	197b      	adds	r3, r7, r5
 8000866:	3201      	adds	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b04      	cmp	r3, #4
 8000872:	d9e1      	bls.n	8000838 <print_data+0x64>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 8000874:	210f      	movs	r1, #15
 8000876:	187b      	adds	r3, r7, r1
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	187b      	adds	r3, r7, r1
 800087c:	3201      	adds	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	230f      	movs	r3, #15
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1c0      	bne.n	8000812 <print_data+0x3e>
		}

	}
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b005      	add	sp, #20
 8000898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	080037b4 	.word	0x080037b4

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	0549      	lsls	r1, r1, #21
 80008d4:	430a      	orrs	r2, r1
 80008d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_MspInit+0x44>)
 80008da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	055b      	lsls	r3, r3, #21
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2414      	movs	r4, #20
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f002 fac8 	bl	8002e9c <memset>
  if(hadc->Instance==ADC1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a26      	ldr	r2, [pc, #152]	@ (80009ac <HAL_ADC_MspInit+0xb8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d145      	bne.n	80009a2 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0349      	lsls	r1, r1, #13
 8000920:	430a      	orrs	r2, r1
 8000922:	641a      	str	r2, [r3, #64]	@ 0x40
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	035b      	lsls	r3, r3, #13
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000938:	2102      	movs	r1, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	2202      	movs	r2, #2
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <HAL_ADC_MspInit+0xbc>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2281      	movs	r2, #129	@ 0x81
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2203      	movs	r2, #3
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	193b      	adds	r3, r7, r4
 8000976:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <HAL_ADC_MspInit+0xc0>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f001 f884 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_Input_Current_Pin|S_Output_Current_Pin;
 8000980:	0021      	movs	r1, r4
 8000982:	187b      	adds	r3, r7, r1
 8000984:	22c0      	movs	r2, #192	@ 0xc0
 8000986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2203      	movs	r2, #3
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	187a      	adds	r2, r7, r1
 8000996:	23a0      	movs	r3, #160	@ 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f873 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b00b      	add	sp, #44	@ 0x2c
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40012400 	.word	0x40012400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000400 	.word	0x50000400

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	@ 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	2414      	movs	r4, #20
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f002 fa66 	bl	8002e9c <memset>
  if(hspi->Instance==SPI2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a26      	ldr	r2, [pc, #152]	@ (8000a70 <HAL_SPI_MspInit+0xb8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d146      	bne.n	8000a68 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 80009dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	01c9      	lsls	r1, r1, #7
 80009e4:	430a      	orrs	r2, r1
 80009e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	01db      	lsls	r3, r3, #7
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_SPI_MspInit+0xbc>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2202      	movs	r2, #2
 8000a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	193a      	adds	r2, r7, r4
 8000a2e:	23a0      	movs	r3, #160	@ 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 f827 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2210      	movs	r2, #16
 8000a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2202      	movs	r2, #2
 8000a46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2201      	movs	r2, #1
 8000a58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	187a      	adds	r2, r7, r1
 8000a5c:	23a0      	movs	r3, #160	@ 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 f810 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b00b      	add	sp, #44	@ 0x2c
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	40003800 	.word	0x40003800
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f8d4 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f002 f9e6 	bl	8002eac <__errno>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	425b      	negs	r3, r3
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	18d2      	adds	r2, r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b006      	add	sp, #24
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20002000 	.word	0x20002000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	20000140 	.word	0x20000140
 8000b14:	20000290 	.word	0x20000290

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b28:	f7ff fff6 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f002 f9b1 	bl	8002eb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b56:	f7ff fb69 	bl	800022c <main>

08000b5a <LoopForever>:

LoopForever:
  b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b68:	08003a18 	.word	0x08003a18
  ldr r2, =_sbss
 8000b6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b70:	20000290 	.word	0x20000290

08000b74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_Init+0x3c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_Init+0x3c>)
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0049      	lsls	r1, r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f810 	bl	8000bb8 <HAL_InitTick>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe82 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02b      	beq.n	8000c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0x8c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	@ 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa99 	bl	8000114 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa94 	bl	8000114 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 ff3d 	bl	8001a6e <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80a      	bhi.n	8000c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 ff1c 	bl	8001a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_InitTick+0x90>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e008      	b.n	8000c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000144 	.word	0x20000144

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	@ (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000144 	.word	0x20000144

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	20000008 	.word	0x20000008

08000ccc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cdc:	401a      	ands	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	fe3fffff 	.word	0xfe3fffff

08000cf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	23e0      	movs	r3, #224	@ 0xe0
 8000d02:	045b      	lsls	r3, r3, #17
 8000d04:	4013      	ands	r3, r2
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	2104      	movs	r1, #4
 8000d22:	400a      	ands	r2, r1
 8000d24:	2107      	movs	r1, #7
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	43d2      	mvns	r2, r2
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2104      	movs	r1, #4
 8000d32:	400b      	ands	r3, r1
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4099      	lsls	r1, r3
 8000d38:	000b      	movs	r3, r1
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	2104      	movs	r1, #4
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	4091      	lsls	r1, r2
 8000d60:	000a      	movs	r2, r1
 8000d62:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2104      	movs	r1, #4
 8000d68:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	0013      	movs	r3, r2
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	23c0      	movs	r3, #192	@ 0xc0
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4013      	ands	r3, r2
 8000d88:	d101      	bne.n	8000d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	211f      	movs	r1, #31
 8000dac:	400a      	ands	r2, r1
 8000dae:	210f      	movs	r1, #15
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0e9b      	lsrs	r3, r3, #26
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	201f      	movs	r0, #31
 8000dc4:	4003      	ands	r3, r0
 8000dc6:	4099      	lsls	r1, r3
 8000dc8:	000b      	movs	r3, r1
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	035b      	lsls	r3, r3, #13
 8000dea:	0b5b      	lsrs	r3, r3, #13
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	0352      	lsls	r2, r2, #13
 8000e0c:	0b52      	lsrs	r2, r2, #13
 8000e0e:	43d2      	mvns	r2, r2
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	0212      	lsls	r2, r2, #8
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
 8000e40:	4904      	ldr	r1, [pc, #16]	@ (8000e54 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e42:	400b      	ands	r3, r1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	07ffff00 	.word	0x07ffff00

08000e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <LL_ADC_EnableInternalRegulator+0x24>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	0552      	lsls	r2, r2, #21
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	6fffffe8 	.word	0x6fffffe8

08000e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	055b      	lsls	r3, r3, #21
 8000e90:	401a      	ands	r2, r3
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	055b      	lsls	r3, r3, #21
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d101      	bne.n	8000e9e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <LL_ADC_Enable+0x20>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2201      	movs	r2, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	7fffffe8 	.word	0x7fffffe8

08000ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <LL_ADC_IsEnabled+0x18>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <LL_ADC_IsEnabled+0x1a>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <LL_ADC_REG_StartConversion+0x20>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	2204      	movs	r2, #4
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	7fffffe8 	.word	0x7fffffe8

08000f14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2204      	movs	r2, #4
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d101      	bne.n	8000f2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f40:	231f      	movs	r3, #31
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e17f      	b.n	800125e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fcc3 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2254      	movs	r2, #84	@ 0x54
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff7d 	bl	8000e80 <LL_ADC_IsInternalRegulatorEnabled>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d115      	bne.n	8000fb6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff ff62 	bl	8000e58 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f94:	4bb4      	ldr	r3, [pc, #720]	@ (8001268 <HAL_ADC_Init+0x330>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	49b4      	ldr	r1, [pc, #720]	@ (800126c <HAL_ADC_Init+0x334>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff f8ba 	bl	8000114 <__udivsi3>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff ff60 	bl	8000e80 <LL_ADC_IsInternalRegulatorEnabled>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d10f      	bne.n	8000fe4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc8:	2210      	movs	r2, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fdc:	231f      	movs	r3, #31
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff93 	bl	8000f14 <LL_ADC_REG_IsConversionOngoing>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	2210      	movs	r2, #16
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d000      	beq.n	8000ffe <HAL_ADC_Init+0xc6>
 8000ffc:	e122      	b.n	8001244 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d000      	beq.n	8001006 <HAL_ADC_Init+0xce>
 8001004:	e11e      	b.n	8001244 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	4a99      	ldr	r2, [pc, #612]	@ (8001270 <HAL_ADC_Init+0x338>)
 800100c:	4013      	ands	r3, r2
 800100e:	2202      	movs	r2, #2
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff56 	bl	8000ecc <LL_ADC_IsEnabled>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d000      	beq.n	8001026 <HAL_ADC_Init+0xee>
 8001024:	e0ad      	b.n	8001182 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7e1b      	ldrb	r3, [r3, #24]
 800102e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001030:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7e5b      	ldrb	r3, [r3, #25]
 8001036:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001038:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7e9b      	ldrb	r3, [r3, #26]
 800103e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001040:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <HAL_ADC_Init+0x118>
 800104a:	2380      	movs	r3, #128	@ 0x80
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	e000      	b.n	8001052 <HAL_ADC_Init+0x11a>
 8001050:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001052:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001058:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	da04      	bge.n	800106c <HAL_ADC_Init+0x134>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	e001      	b.n	8001070 <HAL_ADC_Init+0x138>
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001070:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	212c      	movs	r1, #44	@ 0x2c
 8001076:	5c5b      	ldrb	r3, [r3, r1]
 8001078:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800107a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2220      	movs	r2, #32
 8001086:	5c9b      	ldrb	r3, [r3, r2]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d115      	bne.n	80010b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e9b      	ldrb	r3, [r3, #26]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	0252      	lsls	r2, r2, #9
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	e00b      	b.n	80010b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	2220      	movs	r2, #32
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b0:	2201      	movs	r2, #1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00a      	beq.n	80010d6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c4:	23e0      	movs	r3, #224	@ 0xe0
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010ce:	4313      	orrs	r3, r2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <HAL_ADC_Init+0x33c>)
 80010de:	4013      	ands	r3, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	0f9b      	lsrs	r3, r3, #30
 80010f2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010f8:	4313      	orrs	r3, r2
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	223c      	movs	r2, #60	@ 0x3c
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d111      	bne.n	800112e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	0f9b      	lsrs	r3, r3, #30
 8001110:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001116:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800111c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001122:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	2201      	movs	r2, #1
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a50      	ldr	r2, [pc, #320]	@ (8001278 <HAL_ADC_Init+0x340>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	430a      	orrs	r2, r1
 8001142:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	23c0      	movs	r3, #192	@ 0xc0
 800114a:	061b      	lsls	r3, r3, #24
 800114c:	429a      	cmp	r2, r3
 800114e:	d018      	beq.n	8001182 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	429a      	cmp	r2, r3
 800115a:	d012      	beq.n	8001182 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	429a      	cmp	r2, r3
 8001166:	d00c      	beq.n	8001182 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001168:	4b44      	ldr	r3, [pc, #272]	@ (800127c <HAL_ADC_Init+0x344>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a44      	ldr	r2, [pc, #272]	@ (8001280 <HAL_ADC_Init+0x348>)
 800116e:	4013      	ands	r3, r2
 8001170:	0019      	movs	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	23f0      	movs	r3, #240	@ 0xf0
 8001178:	039b      	lsls	r3, r3, #14
 800117a:	401a      	ands	r2, r3
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <HAL_ADC_Init+0x344>)
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f7ff fdbe 	bl	8000d0e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119a:	493a      	ldr	r1, [pc, #232]	@ (8001284 <HAL_ADC_Init+0x34c>)
 800119c:	001a      	movs	r2, r3
 800119e:	f7ff fdb6 	bl	8000d0e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2110      	movs	r1, #16
 80011b6:	4249      	negs	r1, r1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80011bc:	e018      	b.n	80011f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	039b      	lsls	r3, r3, #14
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d112      	bne.n	80011f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	221c      	movs	r2, #28
 80011da:	4013      	ands	r3, r2
 80011dc:	2210      	movs	r2, #16
 80011de:	4252      	negs	r2, r2
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0011      	movs	r1, r2
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2100      	movs	r1, #0
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fda6 	bl	8000d48 <LL_ADC_GetSamplingTimeCommonChannels>
 80011fc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001202:	429a      	cmp	r2, r3
 8001204:	d10b      	bne.n	800121e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	2203      	movs	r2, #3
 8001212:	4393      	bics	r3, r2
 8001214:	2201      	movs	r2, #1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800121c:	e01c      	b.n	8001258 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	2212      	movs	r2, #18
 8001224:	4393      	bics	r3, r2
 8001226:	2210      	movs	r2, #16
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001232:	2201      	movs	r2, #1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800123a:	231f      	movs	r3, #31
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001242:	e009      	b.n	8001258 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001248:	2210      	movs	r2, #16
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001250:	231f      	movs	r3, #31
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001258:	231f      	movs	r3, #31
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	781b      	ldrb	r3, [r3, #0]
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b008      	add	sp, #32
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	20000000 	.word	0x20000000
 800126c:	00030d40 	.word	0x00030d40
 8001270:	fffffefd 	.word	0xfffffefd
 8001274:	ffde0201 	.word	0xffde0201
 8001278:	1ffffc02 	.word	0x1ffffc02
 800127c:	40012708 	.word	0x40012708
 8001280:	ffc3ffff 	.word	0xffc3ffff
 8001284:	07ffff04 	.word	0x07ffff04

08001288 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fe3d 	bl	8000f14 <LL_ADC_REG_IsConversionOngoing>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d135      	bne.n	800130a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2254      	movs	r2, #84	@ 0x54
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_Start+0x24>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e035      	b.n	8001318 <HAL_ADC_Start+0x90>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2254      	movs	r2, #84	@ 0x54
 80012b0:	2101      	movs	r1, #1
 80012b2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012b4:	250f      	movs	r5, #15
 80012b6:	197c      	adds	r4, r7, r5
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 faaa 	bl	8001814 <ADC_Enable>
 80012c0:	0003      	movs	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012c4:	197b      	adds	r3, r7, r5
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d119      	bne.n	8001300 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d0:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <HAL_ADC_Start+0x98>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	0052      	lsls	r2, r2, #1
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	221c      	movs	r2, #28
 80012ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2254      	movs	r2, #84	@ 0x54
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fdf9 	bl	8000ef0 <LL_ADC_REG_StartConversion>
 80012fe:	e008      	b.n	8001312 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2254      	movs	r2, #84	@ 0x54
 8001304:	2100      	movs	r1, #0
 8001306:	5499      	strb	r1, [r3, r2]
 8001308:	e003      	b.n	8001312 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001312:	230f      	movs	r3, #15
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	fffff0fe 	.word	0xfffff0fe

08001324 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d102      	bne.n	800133c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001336:	2308      	movs	r3, #8
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e00f      	b.n	800135c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	2220      	movs	r2, #32
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e072      	b.n	800143e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001358:	2304      	movs	r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800135c:	f7ff fc88 	bl	8000c70 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001364:	e01f      	b.n	80013a6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	d01c      	beq.n	80013a6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800136c:	f7ff fc80 	bl	8000c70 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d302      	bcc.n	8001382 <HAL_ADC_PollForConversion+0x5e>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d111      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	d10b      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	2204      	movs	r2, #4
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2254      	movs	r2, #84	@ 0x54
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e04b      	b.n	800143e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	d0d9      	beq.n	8001366 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fcd6 	bl	8000d76 <LL_ADC_REG_IsTriggerSourceSWStart>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d02e      	beq.n	800142c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e9b      	ldrb	r3, [r3, #26]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12a      	bne.n	800142c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2208      	movs	r2, #8
 80013de:	4013      	ands	r3, r2
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d123      	bne.n	800142c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fd93 	bl	8000f14 <LL_ADC_REG_IsConversionOngoing>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d110      	bne.n	8001414 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	210c      	movs	r1, #12
 80013fe:	438a      	bics	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_ADC_PollForConversion+0x124>)
 8001408:	4013      	ands	r3, r2
 800140a:	2201      	movs	r2, #1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	659a      	str	r2, [r3, #88]	@ 0x58
 8001412:	e00b      	b.n	800142c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001418:	2220      	movs	r2, #32
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	220c      	movs	r2, #12
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	fffffefe 	.word	0xfffffefe

0800144c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2317      	movs	r3, #23
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2254      	movs	r2, #84	@ 0x54
 800147e:	5c9b      	ldrb	r3, [r3, r2]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x24>
 8001484:	2302      	movs	r3, #2
 8001486:	e1c0      	b.n	800180a <HAL_ADC_ConfigChannel+0x3a6>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2254      	movs	r2, #84	@ 0x54
 800148c:	2101      	movs	r1, #1
 800148e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fd3d 	bl	8000f14 <LL_ADC_REG_IsConversionOngoing>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d000      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x3c>
 800149e:	e1a3      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d100      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x46>
 80014a8:	e143      	b.n	8001732 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d004      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014ba:	4ac1      	ldr	r2, [pc, #772]	@ (80017c0 <HAL_ADC_ConfigChannel+0x35c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d108      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0019      	movs	r1, r3
 80014ca:	0010      	movs	r0, r2
 80014cc:	f7ff fc84 	bl	8000dd8 <LL_ADC_REG_SetSequencerChAdd>
 80014d0:	e0c9      	b.n	8001666 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	211f      	movs	r1, #31
 80014dc:	400b      	ands	r3, r1
 80014de:	210f      	movs	r1, #15
 80014e0:	4099      	lsls	r1, r3
 80014e2:	000b      	movs	r3, r1
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	035b      	lsls	r3, r3, #13
 80014f0:	0b5b      	lsrs	r3, r3, #13
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x9c>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e9b      	lsrs	r3, r3, #26
 80014fa:	221f      	movs	r2, #31
 80014fc:	4013      	ands	r3, r2
 80014fe:	e098      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	d000      	beq.n	800150c <HAL_ADC_ConfigChannel+0xa8>
 800150a:	e091      	b.n	8001630 <HAL_ADC_ConfigChannel+0x1cc>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xb4>
 8001516:	e089      	b.n	800162c <HAL_ADC_ConfigChannel+0x1c8>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d000      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xc0>
 8001522:	e081      	b.n	8001628 <HAL_ADC_ConfigChannel+0x1c4>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	d000      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xcc>
 800152e:	e079      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2210      	movs	r2, #16
 8001536:	4013      	ands	r3, r2
 8001538:	d000      	beq.n	800153c <HAL_ADC_ConfigChannel+0xd8>
 800153a:	e071      	b.n	8001620 <HAL_ADC_ConfigChannel+0x1bc>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2220      	movs	r2, #32
 8001542:	4013      	ands	r3, r2
 8001544:	d000      	beq.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
 8001546:	e069      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	4013      	ands	r3, r2
 8001550:	d000      	beq.n	8001554 <HAL_ADC_ConfigChannel+0xf0>
 8001552:	e061      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1b4>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	4013      	ands	r3, r2
 800155c:	d000      	beq.n	8001560 <HAL_ADC_ConfigChannel+0xfc>
 800155e:	e059      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1b0>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d151      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1ac>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d149      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1a8>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4013      	ands	r3, r2
 8001582:	d141      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1a4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d139      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1a0>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4013      	ands	r3, r2
 800159a:	d131      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x19c>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	4013      	ands	r3, r2
 80015a6:	d129      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x198>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4013      	ands	r3, r2
 80015b2:	d121      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x194>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	4013      	ands	r3, r2
 80015be:	d119      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x190>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	025b      	lsls	r3, r3, #9
 80015c8:	4013      	ands	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x18c>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x188>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	02db      	lsls	r3, r3, #11
 80015e0:	4013      	ands	r3, r2
 80015e2:	d001      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0x184>
 80015e4:	2312      	movs	r3, #18
 80015e6:	e024      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2300      	movs	r3, #0
 80015ea:	e022      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	2311      	movs	r3, #17
 80015ee:	e020      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	2310      	movs	r3, #16
 80015f2:	e01e      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	230f      	movs	r3, #15
 80015f6:	e01c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	230e      	movs	r3, #14
 80015fa:	e01a      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015fc:	230d      	movs	r3, #13
 80015fe:	e018      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001600:	230c      	movs	r3, #12
 8001602:	e016      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001604:	230b      	movs	r3, #11
 8001606:	e014      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001608:	230a      	movs	r3, #10
 800160a:	e012      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800160c:	2309      	movs	r3, #9
 800160e:	e010      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	2308      	movs	r3, #8
 8001612:	e00e      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	2307      	movs	r3, #7
 8001616:	e00c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001618:	2306      	movs	r3, #6
 800161a:	e00a      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800161c:	2305      	movs	r3, #5
 800161e:	e008      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001620:	2304      	movs	r3, #4
 8001622:	e006      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001624:	2303      	movs	r3, #3
 8001626:	e004      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001630:	2300      	movs	r3, #0
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6852      	ldr	r2, [r2, #4]
 8001636:	201f      	movs	r0, #31
 8001638:	4002      	ands	r2, r0
 800163a:	4093      	lsls	r3, r2
 800163c:	000a      	movs	r2, r1
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	429a      	cmp	r2, r3
 8001652:	d808      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	f7ff fb99 	bl	8000d98 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	001a      	movs	r2, r3
 8001674:	f7ff fbd4 	bl	8000e20 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db00      	blt.n	8001682 <HAL_ADC_ConfigChannel+0x21e>
 8001680:	e0bc      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001682:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fb35 	bl	8000cf4 <LL_ADC_GetCommonPathInternalCh>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_ADC_ConfigChannel+0x364>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d122      	bne.n	80016de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a0:	d11d      	bne.n	80016de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f7ff fb0c 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_ADC_ConfigChannel+0x368>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4945      	ldr	r1, [pc, #276]	@ (80017d0 <HAL_ADC_ConfigChannel+0x36c>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe fd2a 	bl	8000114 <__udivsi3>
 80016c0:	0003      	movs	r3, r0
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	0013      	movs	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	189b      	adds	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016ce:	e002      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016dc:	e08e      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <HAL_ADC_ConfigChannel+0x370>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d10e      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	4013      	ands	r3, r2
 80016f0:	d109      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	0452      	lsls	r2, r2, #17
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80016fc:	0019      	movs	r1, r3
 80016fe:	0010      	movs	r0, r2
 8001700:	f7ff fae4 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 8001704:	e07a      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a33      	ldr	r2, [pc, #204]	@ (80017d8 <HAL_ADC_ConfigChannel+0x374>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d000      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x2ae>
 8001710:	e074      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	03db      	lsls	r3, r3, #15
 8001718:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800171a:	d000      	beq.n	800171e <HAL_ADC_ConfigChannel+0x2ba>
 800171c:	e06e      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	03d2      	lsls	r2, r2, #15
 8001724:	4313      	orrs	r3, r2
 8001726:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f7ff face 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 8001730:	e064      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	429a      	cmp	r2, r3
 800173c:	d004      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001742:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_ADC_ConfigChannel+0x35c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d107      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7ff fb51 	bl	8000dfa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da4d      	bge.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff fac6 	bl	8000cf4 <LL_ADC_GetCommonPathInternalCh>
 8001768:	0003      	movs	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <HAL_ADC_ConfigChannel+0x364>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d108      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_ADC_ConfigChannel+0x378>)
 800177a:	4013      	ands	r3, r2
 800177c:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f7ff faa3 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 8001786:	e039      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <HAL_ADC_ConfigChannel+0x370>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d108      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_ADC_ConfigChannel+0x37c>)
 8001796:	4013      	ands	r3, r2
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 800179a:	0019      	movs	r1, r3
 800179c:	0010      	movs	r0, r2
 800179e:	f7ff fa95 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 80017a2:	e02b      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_ADC_ConfigChannel+0x374>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d126      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <HAL_ADC_ConfigChannel+0x380>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80017b6:	0019      	movs	r1, r3
 80017b8:	0010      	movs	r0, r2
 80017ba:	f7ff fa87 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 80017be:	e01d      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
 80017c0:	80000004 	.word	0x80000004
 80017c4:	40012708 	.word	0x40012708
 80017c8:	b0001000 	.word	0xb0001000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	00030d40 	.word	0x00030d40
 80017d4:	b8004000 	.word	0xb8004000
 80017d8:	b4002000 	.word	0xb4002000
 80017dc:	ff7fffff 	.word	0xff7fffff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	2220      	movs	r2, #32
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017f4:	2317      	movs	r3, #23
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2254      	movs	r2, #84	@ 0x54
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001804:	2317      	movs	r3, #23
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b006      	add	sp, #24
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)

08001814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fb51 	bl	8000ecc <LL_ADC_IsEnabled>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d000      	beq.n	8001830 <ADC_Enable+0x1c>
 800182e:	e069      	b.n	8001904 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4a36      	ldr	r2, [pc, #216]	@ (8001910 <ADC_Enable+0xfc>)
 8001838:	4013      	ands	r3, r2
 800183a:	d00d      	beq.n	8001858 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	2210      	movs	r2, #16
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	2201      	movs	r2, #1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e056      	b.n	8001906 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fb23 	bl	8000ea8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001862:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <ADC_Enable+0x100>)
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fa45 	bl	8000cf4 <LL_ADC_GetCommonPathInternalCh>
 800186a:	0002      	movs	r2, r0
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	4013      	ands	r3, r2
 8001872:	d00f      	beq.n	8001894 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <ADC_Enable+0x104>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4928      	ldr	r1, [pc, #160]	@ (800191c <ADC_Enable+0x108>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fc4a 	bl	8000114 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001884:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001886:	e002      	b.n	800188e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3b01      	subs	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e5b      	ldrb	r3, [r3, #25]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d033      	beq.n	8001904 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800189c:	f7ff f9e8 	bl	8000c70 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018a4:	e027      	b.n	80018f6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff fb0e 	bl	8000ecc <LL_ADC_IsEnabled>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d104      	bne.n	80018be <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff faf5 	bl	8000ea8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018be:	f7ff f9d7 	bl	8000c70 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d914      	bls.n	80018f6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d00d      	beq.n	80018f6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	2210      	movs	r2, #16
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ea:	2201      	movs	r2, #1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e007      	b.n	8001906 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	2b01      	cmp	r3, #1
 8001902:	d1d0      	bne.n	80018a6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	80000017 	.word	0x80000017
 8001914:	40012708 	.word	0x40012708
 8001918:	20000000 	.word	0x20000000
 800191c:	00030d40 	.word	0x00030d40

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	0002      	movs	r2, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b7f      	cmp	r3, #127	@ 0x7f
 8001934:	d828      	bhi.n	8001988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001936:	4a2f      	ldr	r2, [pc, #188]	@ (80019f4 <__NVIC_SetPriority+0xd4>)
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	33c0      	adds	r3, #192	@ 0xc0
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	589b      	ldr	r3, [r3, r2]
 8001946:	1dfa      	adds	r2, r7, #7
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	0011      	movs	r1, r2
 800194c:	2203      	movs	r2, #3
 800194e:	400a      	ands	r2, r1
 8001950:	00d2      	lsls	r2, r2, #3
 8001952:	21ff      	movs	r1, #255	@ 0xff
 8001954:	4091      	lsls	r1, r2
 8001956:	000a      	movs	r2, r1
 8001958:	43d2      	mvns	r2, r2
 800195a:	401a      	ands	r2, r3
 800195c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	401a      	ands	r2, r3
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	0018      	movs	r0, r3
 800196c:	2303      	movs	r3, #3
 800196e:	4003      	ands	r3, r0
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001974:	481f      	ldr	r0, [pc, #124]	@ (80019f4 <__NVIC_SetPriority+0xd4>)
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	430a      	orrs	r2, r1
 8001980:	33c0      	adds	r3, #192	@ 0xc0
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001986:	e031      	b.n	80019ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001988:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <__NVIC_SetPriority+0xd8>)
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0019      	movs	r1, r3
 8001990:	230f      	movs	r3, #15
 8001992:	400b      	ands	r3, r1
 8001994:	3b08      	subs	r3, #8
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3306      	adds	r3, #6
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	3304      	adds	r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1dfa      	adds	r2, r7, #7
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	0011      	movs	r1, r2
 80019a8:	2203      	movs	r2, #3
 80019aa:	400a      	ands	r2, r1
 80019ac:	00d2      	lsls	r2, r2, #3
 80019ae:	21ff      	movs	r1, #255	@ 0xff
 80019b0:	4091      	lsls	r1, r2
 80019b2:	000a      	movs	r2, r1
 80019b4:	43d2      	mvns	r2, r2
 80019b6:	401a      	ands	r2, r3
 80019b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	22ff      	movs	r2, #255	@ 0xff
 80019c0:	401a      	ands	r2, r3
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0018      	movs	r0, r3
 80019c8:	2303      	movs	r3, #3
 80019ca:	4003      	ands	r3, r0
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <__NVIC_SetPriority+0xd8>)
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	001c      	movs	r4, r3
 80019d8:	230f      	movs	r3, #15
 80019da:	4023      	ands	r3, r4
 80019dc:	3b08      	subs	r3, #8
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	430a      	orrs	r2, r1
 80019e2:	3306      	adds	r3, #6
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	18c3      	adds	r3, r0, r3
 80019e8:	3304      	adds	r3, #4
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b003      	add	sp, #12
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	045b      	lsls	r3, r3, #17
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d301      	bcc.n	8001a14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a10:	2301      	movs	r3, #1
 8001a12:	e010      	b.n	8001a36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <SysTick_Config+0x44>)
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	425b      	negs	r3, r3
 8001a20:	2103      	movs	r1, #3
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff ff7c 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x44>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x44>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	210f      	movs	r1, #15
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	1c02      	adds	r2, r0, #0
 8001a54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	0011      	movs	r1, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff ffbf 	bl	80019fc <SysTick_Config>
 8001a7e:	0003      	movs	r3, r0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	e147      	b.n	8001d28 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4091      	lsls	r1, r2
 8001aa2:	000a      	movs	r2, r1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <HAL_GPIO_Init+0x28>
 8001aae:	e138      	b.n	8001d22 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d005      	beq.n	8001ac8 <HAL_GPIO_Init+0x40>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d130      	bne.n	8001b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afe:	2201      	movs	r2, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	2201      	movs	r2, #1
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d017      	beq.n	8001b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d123      	bne.n	8001bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	58d3      	ldr	r3, [r2, r3]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2107      	movs	r1, #7
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	6939      	ldr	r1, [r7, #16]
 8001bb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	23c0      	movs	r3, #192	@ 0xc0
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <HAL_GPIO_Init+0x174>
 8001bfa:	e092      	b.n	8001d22 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3318      	adds	r3, #24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	589b      	ldr	r3, [r3, r2]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	220f      	movs	r2, #15
 8001c14:	409a      	lsls	r2, r3
 8001c16:	0013      	movs	r3, r2
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	23a0      	movs	r3, #160	@ 0xa0
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x1ca>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a45      	ldr	r2, [pc, #276]	@ (8001d44 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x1c6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a44      	ldr	r2, [pc, #272]	@ (8001d48 <HAL_GPIO_Init+0x2c0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x1c2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a43      	ldr	r2, [pc, #268]	@ (8001d4c <HAL_GPIO_Init+0x2c4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x1be>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x1cc>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x1cc>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x1cc>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x1cc>
 8001c52:	2300      	movs	r3, #0
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	2103      	movs	r1, #3
 8001c58:	400a      	ands	r2, r1
 8001c5a:	00d2      	lsls	r2, r2, #3
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c64:	4936      	ldr	r1, [pc, #216]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c72:	4b33      	ldr	r3, [pc, #204]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	035b      	lsls	r3, r3, #13
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	039b      	lsls	r3, r3, #14
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001cc8:	2384      	movs	r3, #132	@ 0x84
 8001cca:	58d3      	ldr	r3, [r2, r3]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	029b      	lsls	r3, r3, #10
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cec:	4914      	ldr	r1, [pc, #80]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001cee:	2284      	movs	r2, #132	@ 0x84
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	58d3      	ldr	r3, [r2, r3]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d1a:	4909      	ldr	r1, [pc, #36]	@ (8001d40 <HAL_GPIO_Init+0x2b8>)
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	40da      	lsrs	r2, r3
 8001d30:	1e13      	subs	r3, r2, #0
 8001d32:	d000      	beq.n	8001d36 <HAL_GPIO_Init+0x2ae>
 8001d34:	e6b0      	b.n	8001a98 <HAL_GPIO_Init+0x10>
  }
}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021800 	.word	0x40021800
 8001d44:	50000400 	.word	0x50000400
 8001d48:	50000800 	.word	0x50000800
 8001d4c:	50000c00 	.word	0x50000c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	0008      	movs	r0, r1
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	1cbb      	adds	r3, r7, #2
 8001d5e:	1c02      	adds	r2, r0, #0
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	1c7b      	adds	r3, r7, #1
 8001d64:	1c0a      	adds	r2, r1, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d68:	1c7b      	adds	r3, r7, #1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d70:	1cbb      	adds	r3, r7, #2
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	1cbb      	adds	r3, r7, #2
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d11f      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	0013      	movs	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	189b      	adds	r3, r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4912      	ldr	r1, [pc, #72]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7fe f9a8 	bl	8000114 <__udivsi3>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	e008      	b.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e001      	b.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e009      	b.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	401a      	ands	r2, r3
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d0ed      	beq.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	fffff9ff 	.word	0xfffff9ff
 8001e04:	20000000 	.word	0x20000000
 8001e08:	000f4240 	.word	0x000f4240

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e2f3      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1e>
 8001e28:	e07c      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4bc3      	ldr	r3, [pc, #780]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2238      	movs	r2, #56	@ 0x38
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4bc0      	ldr	r3, [pc, #768]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3e>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4bb9      	ldr	r3, [pc, #740]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d062      	beq.n	8001f22 <HAL_RCC_OscConfig+0x116>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d15e      	bne.n	8001f22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e2ce      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x78>
 8001e74:	4bb0      	ldr	r3, [pc, #704]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4baf      	ldr	r3, [pc, #700]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	0249      	lsls	r1, r1, #9
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e020      	b.n	8001ec6 <HAL_RCC_OscConfig+0xba>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	23a0      	movs	r3, #160	@ 0xa0
 8001e8a:	02db      	lsls	r3, r3, #11
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d10e      	bne.n	8001eae <HAL_RCC_OscConfig+0xa2>
 8001e90:	4ba9      	ldr	r3, [pc, #676]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4ba8      	ldr	r3, [pc, #672]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2180      	movs	r1, #128	@ 0x80
 8001e98:	02c9      	lsls	r1, r1, #11
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba5      	ldr	r3, [pc, #660]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0xba>
 8001eae:	4ba2      	ldr	r3, [pc, #648]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4ba1      	ldr	r3, [pc, #644]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	49a1      	ldr	r1, [pc, #644]	@ (800213c <HAL_RCC_OscConfig+0x330>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4b9f      	ldr	r3, [pc, #636]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	499f      	ldr	r1, [pc, #636]	@ (8002140 <HAL_RCC_OscConfig+0x334>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe fecf 	bl	8000c70 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe feca 	bl	8000c70 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	@ 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e28d      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	4b93      	ldr	r3, [pc, #588]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xcc>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe feba 	bl	8000c70 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f02:	f7fe feb5 	bl	8000c70 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	@ 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e278      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f14:	4b88      	ldr	r3, [pc, #544]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0xf6>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x124>
 8001f2e:	e099      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f30:	4b81      	ldr	r3, [pc, #516]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	@ 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_OscConfig+0x144>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d002      	beq.n	8001f56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d135      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f56:	4b78      	ldr	r3, [pc, #480]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x162>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e24b      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b72      	ldr	r3, [pc, #456]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a74      	ldr	r2, [pc, #464]	@ (8002144 <HAL_RCC_OscConfig+0x338>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	021a      	lsls	r2, r3, #8
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x33c>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	4b67      	ldr	r3, [pc, #412]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f9e:	4b66      	ldr	r3, [pc, #408]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	4a68      	ldr	r2, [pc, #416]	@ (800214c <HAL_RCC_OscConfig+0x340>)
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	4b68      	ldr	r3, [pc, #416]	@ (8002150 <HAL_RCC_OscConfig+0x344>)
 8001fae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb0:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_OscConfig+0x348>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7fe fdff 	bl	8000bb8 <HAL_InitTick>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d051      	beq.n	8002062 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e221      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d030      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fca:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x33c>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	4b57      	ldr	r3, [pc, #348]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fde:	4b56      	ldr	r3, [pc, #344]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0049      	lsls	r1, r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fe40 	bl	8000c70 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7fe fe3b 	bl	8000c70 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1fe      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	@ (8002144 <HAL_RCC_OscConfig+0x338>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	4b44      	ldr	r3, [pc, #272]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002032:	4949      	ldr	r1, [pc, #292]	@ (8002158 <HAL_RCC_OscConfig+0x34c>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe fe1a 	bl	8000c70 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe fe15 	bl	8000c70 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1d8      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002054:	4b38      	ldr	r3, [pc, #224]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4013      	ands	r3, r2
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x236>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002062:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2208      	movs	r2, #8
 800206a:	4013      	ands	r3, r2
 800206c:	d047      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800206e:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2238      	movs	r2, #56	@ 0x38
 8002074:	4013      	ands	r3, r2
 8002076:	2b18      	cmp	r3, #24
 8002078:	d10a      	bne.n	8002090 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800207a:	4b2f      	ldr	r3, [pc, #188]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d03c      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d138      	bne.n	80020fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e1ba      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d019      	beq.n	80020cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 800209a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800209c:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fde4 	bl	8000c70 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe fddf 	bl	8000c70 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a2      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f1      	beq.n	80020ae <HAL_RCC_OscConfig+0x2a2>
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fdca 	bl	8000c70 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7fe fdc5 	bl	8000c70 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e188      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f1      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2204      	movs	r2, #4
 8002104:	4013      	ands	r3, r2
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x2fe>
 8002108:	e0c6      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	231f      	movs	r3, #31
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2238      	movs	r2, #56	@ 0x38
 8002118:	4013      	ands	r3, r2
 800211a:	2b20      	cmp	r3, #32
 800211c:	d11e      	bne.n	800215c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x31e>
 8002128:	e0b6      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d000      	beq.n	8002134 <HAL_RCC_OscConfig+0x328>
 8002132:	e0b1      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e166      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
 8002138:	40021000 	.word	0x40021000
 800213c:	fffeffff 	.word	0xfffeffff
 8002140:	fffbffff 	.word	0xfffbffff
 8002144:	ffff80ff 	.word	0xffff80ff
 8002148:	ffffc7ff 	.word	0xffffc7ff
 800214c:	00f42400 	.word	0x00f42400
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004
 8002158:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800215c:	4bac      	ldr	r3, [pc, #688]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800215e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	055b      	lsls	r3, r3, #21
 8002164:	4013      	ands	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x362>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d011      	beq.n	8002196 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4ba7      	ldr	r3, [pc, #668]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002176:	4ba6      	ldr	r3, [pc, #664]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	0549      	lsls	r1, r1, #21
 800217c:	430a      	orrs	r2, r1
 800217e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002180:	4ba3      	ldr	r3, [pc, #652]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800218e:	231f      	movs	r3, #31
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	4b9f      	ldr	r3, [pc, #636]	@ (8002414 <HAL_RCC_OscConfig+0x608>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002414 <HAL_RCC_OscConfig+0x608>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b9b      	ldr	r3, [pc, #620]	@ (8002414 <HAL_RCC_OscConfig+0x608>)
 80021a8:	2180      	movs	r1, #128	@ 0x80
 80021aa:	0049      	lsls	r1, r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fd5e 	bl	8000c70 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fd59 	bl	8000c70 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e11c      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	4b91      	ldr	r3, [pc, #580]	@ (8002414 <HAL_RCC_OscConfig+0x608>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x3e2>
 80021e0:	4b8b      	ldr	r3, [pc, #556]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80021e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ec:	e01c      	b.n	8002228 <HAL_RCC_OscConfig+0x41c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x404>
 80021f6:	4b86      	ldr	r3, [pc, #536]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fa:	4b85      	ldr	r3, [pc, #532]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80021fc:	2104      	movs	r1, #4
 80021fe:	430a      	orrs	r2, r1
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002202:	4b83      	ldr	r3, [pc, #524]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002204:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002206:	4b82      	ldr	r3, [pc, #520]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0x41c>
 8002210:	4b7f      	ldr	r3, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002212:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002214:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800221c:	4b7c      	ldr	r3, [pc, #496]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800221e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002220:	4b7b      	ldr	r3, [pc, #492]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002222:	2104      	movs	r1, #4
 8002224:	438a      	bics	r2, r1
 8002226:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d014      	beq.n	800225a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd1e 	bl	8000c70 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e009      	b.n	800224e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fd19 	bl	8000c70 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a74      	ldr	r2, [pc, #464]	@ (8002418 <HAL_RCC_OscConfig+0x60c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0db      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224e:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x42e>
 8002258:	e013      	b.n	8002282 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fd09 	bl	8000c70 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7fe fd04 	bl	8000c70 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x60c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0c6      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4b65      	ldr	r3, [pc, #404]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b60      	ldr	r3, [pc, #384]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800228e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002290:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002292:	4962      	ldr	r1, [pc, #392]	@ (800241c <HAL_RCC_OscConfig+0x610>)
 8002294:	400a      	ands	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x496>
 80022a0:	e0b0      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2238      	movs	r2, #56	@ 0x38
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d100      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4a4>
 80022ae:	e078      	b.n	80023a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d153      	bne.n	8002360 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b55      	ldr	r3, [pc, #340]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80022be:	4958      	ldr	r1, [pc, #352]	@ (8002420 <HAL_RCC_OscConfig+0x614>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fcd4 	bl	8000c70 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7fe fccf 	bl	8000c70 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e092      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	049b      	lsls	r3, r3, #18
 80022e8:	4013      	ands	r3, r2
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	431a      	orrs	r2, r3
 8002314:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	0449      	lsls	r1, r1, #17
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002328:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0549      	lsls	r1, r1, #21
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fc9b 	bl	8000c70 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fc96 	bl	8000c70 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e059      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x534>
 800235e:	e051      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002366:	492e      	ldr	r1, [pc, #184]	@ (8002420 <HAL_RCC_OscConfig+0x614>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fc80 	bl	8000c70 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fc7b 	bl	8000c70 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03e      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	049b      	lsls	r3, r3, #18
 8002390:	4013      	ands	r3, r2
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002394:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 800239a:	4923      	ldr	r1, [pc, #140]	@ (8002428 <HAL_RCC_OscConfig+0x61c>)
 800239c:	400a      	ands	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e030      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e02b      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_RCC_OscConfig+0x604>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2203      	movs	r2, #3
 80023b8:	401a      	ands	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d11e      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2270      	movs	r2, #112	@ 0x70
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d117      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	23fe      	movs	r3, #254	@ 0xfe
 80023d4:	01db      	lsls	r3, r3, #7
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	23f8      	movs	r3, #248	@ 0xf8
 80023e6:	039b      	lsls	r3, r3, #14
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	0f5b      	lsrs	r3, r3, #29
 80023f6:	075a      	lsls	r2, r3, #29
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b008      	add	sp, #32
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	00001388 	.word	0x00001388
 800241c:	efffffff 	.word	0xefffffff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	1fc1808c 	.word	0x1fc1808c
 8002428:	effefffc 	.word	0xeffefffc

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0e9      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d91e      	bls.n	800248c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b70      	ldr	r3, [pc, #448]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7fe fc06 	bl	8000c70 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002468:	e009      	b.n	800247e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7fe fc01 	bl	8000c70 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0ca      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	4013      	ands	r3, r2
 800249e:	d006      	beq.n	80024ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a0:	4b60      	ldr	r3, [pc, #384]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	21e0      	movs	r1, #224	@ 0xe0
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_RCC_ClockConfig+0x1fc>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d057      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	d12b      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e097      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d11f      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e08b      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4013      	ands	r3, r2
 800250e:	d113      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e07f      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d106      	bne.n	800252a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251c:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d108      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e074      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e06d      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2207      	movs	r2, #7
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fb90 	bl	8000c70 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e009      	b.n	800256a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe fb8b 	bl	8000c70 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a2f      	ldr	r2, [pc, #188]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e054      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2238      	movs	r2, #56	@ 0x38
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d1ec      	bne.n	8002556 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d21e      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2207      	movs	r2, #7
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b21      	ldr	r3, [pc, #132]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800259c:	f7fe fb68 	bl	8000c70 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a4:	e009      	b.n	80025ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f7fe fb63 	bl	8000c70 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e02c      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <HAL_RCC_ClockConfig+0x200>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025e6:	f000 f829 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025ea:	0001      	movs	r1, r0
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	220f      	movs	r2, #15
 80025f4:	401a      	ands	r2, r3
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x204>)
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	58d3      	ldr	r3, [r2, r3]
 80025fc:	221f      	movs	r2, #31
 80025fe:	4013      	ands	r3, r2
 8002600:	000a      	movs	r2, r1
 8002602:	40da      	lsrs	r2, r3
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_ClockConfig+0x208>)
 8002606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x20c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe fad3 	bl	8000bb8 <HAL_InitTick>
 8002612:	0003      	movs	r3, r0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40022000 	.word	0x40022000
 8002620:	00001388 	.word	0x00001388
 8002624:	40021000 	.word	0x40021000
 8002628:	fffff0ff 	.word	0xfffff0ff
 800262c:	ffff8fff 	.word	0xffff8fff
 8002630:	0800399c 	.word	0x0800399c
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	@ 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0adb      	lsrs	r3, r3, #11
 8002652:	2207      	movs	r2, #7
 8002654:	4013      	ands	r3, r2
 8002656:	2201      	movs	r2, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	4835      	ldr	r0, [pc, #212]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002662:	f7fd fd57 	bl	8000114 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e05d      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2238      	movs	r2, #56	@ 0x38
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e054      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267e:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2238      	movs	r2, #56	@ 0x38
 8002684:	4013      	ands	r3, r2
 8002686:	2b10      	cmp	r3, #16
 8002688:	d138      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2203      	movs	r2, #3
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	3301      	adds	r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4824      	ldr	r0, [pc, #144]	@ (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 80026ac:	f7fd fd32 	bl	8000114 <__udivsi3>
 80026b0:	0003      	movs	r3, r0
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	227f      	movs	r2, #127	@ 0x7f
 80026bc:	4013      	ands	r3, r2
 80026be:	434b      	muls	r3, r1
 80026c0:	617b      	str	r3, [r7, #20]
        break;
 80026c2:	e00d      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	481c      	ldr	r0, [pc, #112]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026c8:	f7fd fd24 	bl	8000114 <__udivsi3>
 80026cc:	0003      	movs	r3, r0
 80026ce:	0019      	movs	r1, r3
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	227f      	movs	r2, #127	@ 0x7f
 80026d8:	4013      	ands	r3, r2
 80026da:	434b      	muls	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
        break;
 80026de:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0f5b      	lsrs	r3, r3, #29
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	3301      	adds	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f7fd fd0f 	bl	8000114 <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e015      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2238      	movs	r2, #56	@ 0x38
 8002702:	4013      	ands	r3, r2
 8002704:	2b20      	cmp	r3, #32
 8002706:	d103      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	@ 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	2b18      	cmp	r3, #24
 800271a:	d103      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800271c:	23fa      	movs	r3, #250	@ 0xfa
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e001      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	40021000 	.word	0x40021000
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0a8      	b.n	80028a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	2382      	movs	r3, #130	@ 0x82
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	429a      	cmp	r2, r3
 8002764:	d009      	beq.n	800277a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	61da      	str	r2, [r3, #28]
 800276c:	e005      	b.n	800277a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	225d      	movs	r2, #93	@ 0x5d
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	225c      	movs	r2, #92	@ 0x5c
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f7fe f90e 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	225d      	movs	r2, #93	@ 0x5d
 80027a0:	2102      	movs	r1, #2
 80027a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	@ 0x40
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	23e0      	movs	r3, #224	@ 0xe0
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	429a      	cmp	r2, r3
 80027be:	d902      	bls.n	80027c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e002      	b.n	80027cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	23f0      	movs	r3, #240	@ 0xf0
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d008      	beq.n	80027ea <HAL_SPI_Init+0xaa>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	23e0      	movs	r3, #224	@ 0xe0
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	2382      	movs	r3, #130	@ 0x82
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	401a      	ands	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	2384      	movs	r3, #132	@ 0x84
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	400b      	ands	r3, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2102      	movs	r1, #2
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2101      	movs	r1, #1
 8002810:	400b      	ands	r3, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6999      	ldr	r1, [r3, #24]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	400b      	ands	r3, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2138      	movs	r1, #56	@ 0x38
 8002826:	400b      	ands	r3, r1
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	0011      	movs	r1, r2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	2204      	movs	r2, #4
 8002850:	401a      	ands	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	2110      	movs	r1, #16
 8002858:	400b      	ands	r3, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	2108      	movs	r1, #8
 8002862:	400b      	ands	r3, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	23f0      	movs	r3, #240	@ 0xf0
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	0011      	movs	r1, r2
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	015b      	lsls	r3, r3, #5
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4907      	ldr	r1, [pc, #28]	@ (80028ac <HAL_SPI_Init+0x16c>)
 8002890:	400a      	ands	r2, r1
 8002892:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	225d      	movs	r2, #93	@ 0x5d
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b004      	add	sp, #16
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	fffff7ff 	.word	0xfffff7ff

080028b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	1dbb      	adds	r3, r7, #6
 80028be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	225c      	movs	r2, #92	@ 0x5c
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_SPI_Transmit+0x26>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e147      	b.n	8002b66 <HAL_SPI_Transmit+0x2b6>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	225c      	movs	r2, #92	@ 0x5c
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028de:	f7fe f9c7 	bl	8000c70 <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028e6:	2316      	movs	r3, #22
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	1dba      	adds	r2, r7, #6
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	225d      	movs	r2, #93	@ 0x5d
 80028f4:	5c9b      	ldrb	r3, [r3, r2]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d004      	beq.n	8002906 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80028fc:	231f      	movs	r3, #31
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
    goto error;
 8002904:	e128      	b.n	8002b58 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_SPI_Transmit+0x64>
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002914:	231f      	movs	r3, #31
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
    goto error;
 800291c:	e11c      	b.n	8002b58 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	225d      	movs	r2, #93	@ 0x5d
 8002922:	2103      	movs	r1, #3
 8002924:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1dba      	adds	r2, r7, #6
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1dba      	adds	r2, r7, #6
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2244      	movs	r2, #68	@ 0x44
 800294c:	2100      	movs	r1, #0
 800294e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2246      	movs	r2, #70	@ 0x46
 8002954:	2100      	movs	r1, #0
 8002956:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	429a      	cmp	r2, r3
 800296e:	d110      	bne.n	8002992 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2140      	movs	r1, #64	@ 0x40
 800297c:	438a      	bics	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2180      	movs	r1, #128	@ 0x80
 800298c:	01c9      	lsls	r1, r1, #7
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	@ 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d007      	beq.n	80029b0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2140      	movs	r1, #64	@ 0x40
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d952      	bls.n	8002a62 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_SPI_Transmit+0x11e>
 80029c4:	2316      	movs	r3, #22
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d143      	bne.n	8002a56 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	881a      	ldrh	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029de:	1c9a      	adds	r2, r3, #2
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029f2:	e030      	b.n	8002a56 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2202      	movs	r2, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d112      	bne.n	8002a28 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	1c9a      	adds	r2, r3, #2
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a26:	e016      	b.n	8002a56 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a28:	f7fe f922 	bl	8000c70 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d802      	bhi.n	8002a3e <HAL_SPI_Transmit+0x18e>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_SPI_Transmit+0x194>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002a44:	231f      	movs	r3, #31
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2203      	movs	r2, #3
 8002a4a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	225d      	movs	r2, #93	@ 0x5d
 8002a50:	2101      	movs	r1, #1
 8002a52:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a54:	e080      	b.n	8002b58 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1c9      	bne.n	80029f4 <HAL_SPI_Transmit+0x144>
 8002a60:	e053      	b.n	8002b0a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_SPI_Transmit+0x1c4>
 8002a6a:	2316      	movs	r3, #22
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d145      	bne.n	8002b00 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002a9a:	e031      	b.n	8002b00 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d113      	bne.n	8002ad2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ad0:	e016      	b.n	8002b00 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad2:	f7fe f8cd 	bl	8000c70 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_SPI_Transmit+0x238>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Transmit+0x23e>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002aee:	231f      	movs	r3, #31
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2203      	movs	r2, #3
 8002af4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	225d      	movs	r2, #93	@ 0x5d
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
          goto error;
 8002afe:	e02b      	b.n	8002b58 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1c8      	bne.n	8002a9c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f95d 	bl	8002dd0 <SPI_EndRxTxTransaction>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e003      	b.n	8002b58 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	225d      	movs	r2, #93	@ 0x5d
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	225c      	movs	r2, #92	@ 0x5c
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b60:	231f      	movs	r3, #31
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b008      	add	sp, #32
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b80:	f7fe f876 	bl	8000c70 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	18d3      	adds	r3, r2, r3
 8002b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b90:	f7fe f86e 	bl	8000c70 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b98:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	4353      	muls	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba6:	e058      	b.n	8002c5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	d055      	beq.n	8002c5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bae:	f7fe f85f 	bl	8000c70 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d902      	bls.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d142      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	21e0      	movs	r1, #224	@ 0xe0
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	2382      	movs	r3, #130	@ 0x82
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d113      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d005      	beq.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2140      	movs	r1, #64	@ 0x40
 8002c04:	438a      	bics	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	019b      	lsls	r3, r3, #6
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d110      	bne.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	491a      	ldr	r1, [pc, #104]	@ (8002c88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2180      	movs	r1, #128	@ 0x80
 8002c30:	0189      	lsls	r1, r1, #6
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	225d      	movs	r2, #93	@ 0x5d
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	225c      	movs	r2, #92	@ 0x5c
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e017      	b.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	425a      	negs	r2, r3
 8002c6a:	4153      	adcs	r3, r2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	001a      	movs	r2, r3
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d197      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b008      	add	sp, #32
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	20000000 	.word	0x20000000
 8002c88:	ffffdfff 	.word	0xffffdfff

08002c8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c9a:	2317      	movs	r3, #23
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ca2:	f7fd ffe5 	bl	8000c70 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cb2:	f7fd ffdd 	bl	8000c70 <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	00da      	lsls	r2, r3, #3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	0d1b      	lsrs	r3, r3, #20
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	4353      	muls	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cd8:	e068      	b.n	8002dac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	23c0      	movs	r3, #192	@ 0xc0
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d10a      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	2117      	movs	r1, #23
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	d055      	beq.n	8002dac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d00:	f7fd ffb6 	bl	8000c70 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d902      	bls.n	8002d16 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d142      	bne.n	8002d9c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	21e0      	movs	r1, #224	@ 0xe0
 8002d22:	438a      	bics	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	2382      	movs	r3, #130	@ 0x82
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d113      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d005      	beq.n	8002d4a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d107      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	@ 0x40
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d110      	bne.n	8002d88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	0189      	lsls	r1, r1, #6
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	225d      	movs	r2, #93	@ 0x5d
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	225c      	movs	r2, #92	@ 0x5c
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e010      	b.n	8002dbe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d18e      	bne.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b00a      	add	sp, #40	@ 0x28
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	ffffdfff 	.word	0xffffdfff

08002dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	23c0      	movs	r3, #192	@ 0xc0
 8002de0:	0159      	lsls	r1, r3, #5
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	0013      	movs	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	f7ff ff4e 	bl	8002c8c <SPI_WaitFifoStateUntilTimeout>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d007      	beq.n	8002e04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df8:	2220      	movs	r2, #32
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e027      	b.n	8002e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2180      	movs	r1, #128	@ 0x80
 8002e12:	f7ff fead 	bl	8002b70 <SPI_WaitFlagStateUntilTimeout>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d007      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	2220      	movs	r2, #32
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e014      	b.n	8002e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	23c0      	movs	r3, #192	@ 0xc0
 8002e2e:	00d9      	lsls	r1, r3, #3
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	0013      	movs	r3, r2
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f7ff ff27 	bl	8002c8c <SPI_WaitFifoStateUntilTimeout>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d007      	beq.n	8002e52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	2220      	movs	r2, #32
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e000      	b.n	8002e54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b004      	add	sp, #16
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <siprintf>:
 8002e5c:	b40e      	push	{r1, r2, r3}
 8002e5e:	b500      	push	{lr}
 8002e60:	490b      	ldr	r1, [pc, #44]	@ (8002e90 <siprintf+0x34>)
 8002e62:	b09c      	sub	sp, #112	@ 0x70
 8002e64:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e66:	9002      	str	r0, [sp, #8]
 8002e68:	9006      	str	r0, [sp, #24]
 8002e6a:	9107      	str	r1, [sp, #28]
 8002e6c:	9104      	str	r1, [sp, #16]
 8002e6e:	4809      	ldr	r0, [pc, #36]	@ (8002e94 <siprintf+0x38>)
 8002e70:	4909      	ldr	r1, [pc, #36]	@ (8002e98 <siprintf+0x3c>)
 8002e72:	cb04      	ldmia	r3!, {r2}
 8002e74:	9105      	str	r1, [sp, #20]
 8002e76:	6800      	ldr	r0, [r0, #0]
 8002e78:	a902      	add	r1, sp, #8
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	f000 f99e 	bl	80031bc <_svfiprintf_r>
 8002e80:	2200      	movs	r2, #0
 8002e82:	9b02      	ldr	r3, [sp, #8]
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	b01c      	add	sp, #112	@ 0x70
 8002e88:	bc08      	pop	{r3}
 8002e8a:	b003      	add	sp, #12
 8002e8c:	4718      	bx	r3
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	7fffffff 	.word	0x7fffffff
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	ffff0208 	.word	0xffff0208

08002e9c <memset>:
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	1882      	adds	r2, r0, r2
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memset+0xa>
 8002ea4:	4770      	bx	lr
 8002ea6:	7019      	strb	r1, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	e7f9      	b.n	8002ea0 <memset+0x4>

08002eac <__errno>:
 8002eac:	4b01      	ldr	r3, [pc, #4]	@ (8002eb4 <__errno+0x8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	2600      	movs	r6, #0
 8002ebc:	4c0c      	ldr	r4, [pc, #48]	@ (8002ef0 <__libc_init_array+0x38>)
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef4 <__libc_init_array+0x3c>)
 8002ec0:	1b64      	subs	r4, r4, r5
 8002ec2:	10a4      	asrs	r4, r4, #2
 8002ec4:	42a6      	cmp	r6, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	2600      	movs	r6, #0
 8002eca:	f000 fc65 	bl	8003798 <_init>
 8002ece:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef8 <__libc_init_array+0x40>)
 8002ed0:	4d0a      	ldr	r5, [pc, #40]	@ (8002efc <__libc_init_array+0x44>)
 8002ed2:	1b64      	subs	r4, r4, r5
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	42a6      	cmp	r6, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	00b3      	lsls	r3, r6, #2
 8002ede:	58eb      	ldr	r3, [r5, r3]
 8002ee0:	4798      	blx	r3
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	00b3      	lsls	r3, r6, #2
 8002ee8:	58eb      	ldr	r3, [r5, r3]
 8002eea:	4798      	blx	r3
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	08003a10 	.word	0x08003a10
 8002ef4:	08003a10 	.word	0x08003a10
 8002ef8:	08003a14 	.word	0x08003a14
 8002efc:	08003a10 	.word	0x08003a10

08002f00 <__retarget_lock_acquire_recursive>:
 8002f00:	4770      	bx	lr

08002f02 <__retarget_lock_release_recursive>:
 8002f02:	4770      	bx	lr

08002f04 <_free_r>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	0005      	movs	r5, r0
 8002f08:	1e0c      	subs	r4, r1, #0
 8002f0a:	d010      	beq.n	8002f2e <_free_r+0x2a>
 8002f0c:	3c04      	subs	r4, #4
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da00      	bge.n	8002f16 <_free_r+0x12>
 8002f14:	18e4      	adds	r4, r4, r3
 8002f16:	0028      	movs	r0, r5
 8002f18:	f000 f8e0 	bl	80030dc <__malloc_lock>
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f94 <_free_r+0x90>)
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <_free_r+0x2c>
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	6014      	str	r4, [r2, #0]
 8002f28:	0028      	movs	r0, r5
 8002f2a:	f000 f8df 	bl	80030ec <__malloc_unlock>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	d908      	bls.n	8002f46 <_free_r+0x42>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	1821      	adds	r1, r4, r0
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d1f3      	bne.n	8002f24 <_free_r+0x20>
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	1809      	adds	r1, r1, r0
 8002f42:	6021      	str	r1, [r4, #0]
 8002f44:	e7ee      	b.n	8002f24 <_free_r+0x20>
 8002f46:	001a      	movs	r2, r3
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <_free_r+0x4e>
 8002f4e:	42a3      	cmp	r3, r4
 8002f50:	d9f9      	bls.n	8002f46 <_free_r+0x42>
 8002f52:	6811      	ldr	r1, [r2, #0]
 8002f54:	1850      	adds	r0, r2, r1
 8002f56:	42a0      	cmp	r0, r4
 8002f58:	d10b      	bne.n	8002f72 <_free_r+0x6e>
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	1809      	adds	r1, r1, r0
 8002f5e:	1850      	adds	r0, r2, r1
 8002f60:	6011      	str	r1, [r2, #0]
 8002f62:	4283      	cmp	r3, r0
 8002f64:	d1e0      	bne.n	8002f28 <_free_r+0x24>
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	1841      	adds	r1, r0, r1
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	e7da      	b.n	8002f28 <_free_r+0x24>
 8002f72:	42a0      	cmp	r0, r4
 8002f74:	d902      	bls.n	8002f7c <_free_r+0x78>
 8002f76:	230c      	movs	r3, #12
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	e7d5      	b.n	8002f28 <_free_r+0x24>
 8002f7c:	6820      	ldr	r0, [r4, #0]
 8002f7e:	1821      	adds	r1, r4, r0
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d103      	bne.n	8002f8c <_free_r+0x88>
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	1809      	adds	r1, r1, r0
 8002f8a:	6021      	str	r1, [r4, #0]
 8002f8c:	6063      	str	r3, [r4, #4]
 8002f8e:	6054      	str	r4, [r2, #4]
 8002f90:	e7ca      	b.n	8002f28 <_free_r+0x24>
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	2000028c 	.word	0x2000028c

08002f98 <sbrk_aligned>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8002fd8 <sbrk_aligned+0x40>)
 8002f9c:	000d      	movs	r5, r1
 8002f9e:	6831      	ldr	r1, [r6, #0]
 8002fa0:	0004      	movs	r4, r0
 8002fa2:	2900      	cmp	r1, #0
 8002fa4:	d102      	bne.n	8002fac <sbrk_aligned+0x14>
 8002fa6:	f000 fb99 	bl	80036dc <_sbrk_r>
 8002faa:	6030      	str	r0, [r6, #0]
 8002fac:	0029      	movs	r1, r5
 8002fae:	0020      	movs	r0, r4
 8002fb0:	f000 fb94 	bl	80036dc <_sbrk_r>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d103      	bne.n	8002fc0 <sbrk_aligned+0x28>
 8002fb8:	2501      	movs	r5, #1
 8002fba:	426d      	negs	r5, r5
 8002fbc:	0028      	movs	r0, r5
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	1cc5      	adds	r5, r0, #3
 8002fc4:	439d      	bics	r5, r3
 8002fc6:	42a8      	cmp	r0, r5
 8002fc8:	d0f8      	beq.n	8002fbc <sbrk_aligned+0x24>
 8002fca:	1a29      	subs	r1, r5, r0
 8002fcc:	0020      	movs	r0, r4
 8002fce:	f000 fb85 	bl	80036dc <_sbrk_r>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d1f2      	bne.n	8002fbc <sbrk_aligned+0x24>
 8002fd6:	e7ef      	b.n	8002fb8 <sbrk_aligned+0x20>
 8002fd8:	20000288 	.word	0x20000288

08002fdc <_malloc_r>:
 8002fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fde:	2203      	movs	r2, #3
 8002fe0:	1ccb      	adds	r3, r1, #3
 8002fe2:	4393      	bics	r3, r2
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	001f      	movs	r7, r3
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d234      	bcs.n	8003058 <_malloc_r+0x7c>
 8002fee:	270c      	movs	r7, #12
 8002ff0:	42b9      	cmp	r1, r7
 8002ff2:	d833      	bhi.n	800305c <_malloc_r+0x80>
 8002ff4:	0028      	movs	r0, r5
 8002ff6:	f000 f871 	bl	80030dc <__malloc_lock>
 8002ffa:	4e37      	ldr	r6, [pc, #220]	@ (80030d8 <_malloc_r+0xfc>)
 8002ffc:	6833      	ldr	r3, [r6, #0]
 8002ffe:	001c      	movs	r4, r3
 8003000:	2c00      	cmp	r4, #0
 8003002:	d12f      	bne.n	8003064 <_malloc_r+0x88>
 8003004:	0039      	movs	r1, r7
 8003006:	0028      	movs	r0, r5
 8003008:	f7ff ffc6 	bl	8002f98 <sbrk_aligned>
 800300c:	0004      	movs	r4, r0
 800300e:	1c43      	adds	r3, r0, #1
 8003010:	d15f      	bne.n	80030d2 <_malloc_r+0xf6>
 8003012:	6834      	ldr	r4, [r6, #0]
 8003014:	9400      	str	r4, [sp, #0]
 8003016:	9b00      	ldr	r3, [sp, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d14a      	bne.n	80030b2 <_malloc_r+0xd6>
 800301c:	2c00      	cmp	r4, #0
 800301e:	d052      	beq.n	80030c6 <_malloc_r+0xea>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	0028      	movs	r0, r5
 8003024:	18e3      	adds	r3, r4, r3
 8003026:	9900      	ldr	r1, [sp, #0]
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	f000 fb57 	bl	80036dc <_sbrk_r>
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	4283      	cmp	r3, r0
 8003032:	d148      	bne.n	80030c6 <_malloc_r+0xea>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	0028      	movs	r0, r5
 8003038:	1aff      	subs	r7, r7, r3
 800303a:	0039      	movs	r1, r7
 800303c:	f7ff ffac 	bl	8002f98 <sbrk_aligned>
 8003040:	3001      	adds	r0, #1
 8003042:	d040      	beq.n	80030c6 <_malloc_r+0xea>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	19db      	adds	r3, r3, r7
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	6833      	ldr	r3, [r6, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	2a00      	cmp	r2, #0
 8003050:	d133      	bne.n	80030ba <_malloc_r+0xde>
 8003052:	9b00      	ldr	r3, [sp, #0]
 8003054:	6033      	str	r3, [r6, #0]
 8003056:	e019      	b.n	800308c <_malloc_r+0xb0>
 8003058:	2b00      	cmp	r3, #0
 800305a:	dac9      	bge.n	8002ff0 <_malloc_r+0x14>
 800305c:	230c      	movs	r3, #12
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	2000      	movs	r0, #0
 8003062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003064:	6821      	ldr	r1, [r4, #0]
 8003066:	1bc9      	subs	r1, r1, r7
 8003068:	d420      	bmi.n	80030ac <_malloc_r+0xd0>
 800306a:	290b      	cmp	r1, #11
 800306c:	d90a      	bls.n	8003084 <_malloc_r+0xa8>
 800306e:	19e2      	adds	r2, r4, r7
 8003070:	6027      	str	r7, [r4, #0]
 8003072:	42a3      	cmp	r3, r4
 8003074:	d104      	bne.n	8003080 <_malloc_r+0xa4>
 8003076:	6032      	str	r2, [r6, #0]
 8003078:	6863      	ldr	r3, [r4, #4]
 800307a:	6011      	str	r1, [r2, #0]
 800307c:	6053      	str	r3, [r2, #4]
 800307e:	e005      	b.n	800308c <_malloc_r+0xb0>
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	e7f9      	b.n	8003078 <_malloc_r+0x9c>
 8003084:	6862      	ldr	r2, [r4, #4]
 8003086:	42a3      	cmp	r3, r4
 8003088:	d10e      	bne.n	80030a8 <_malloc_r+0xcc>
 800308a:	6032      	str	r2, [r6, #0]
 800308c:	0028      	movs	r0, r5
 800308e:	f000 f82d 	bl	80030ec <__malloc_unlock>
 8003092:	0020      	movs	r0, r4
 8003094:	2207      	movs	r2, #7
 8003096:	300b      	adds	r0, #11
 8003098:	1d23      	adds	r3, r4, #4
 800309a:	4390      	bics	r0, r2
 800309c:	1ac2      	subs	r2, r0, r3
 800309e:	4298      	cmp	r0, r3
 80030a0:	d0df      	beq.n	8003062 <_malloc_r+0x86>
 80030a2:	1a1b      	subs	r3, r3, r0
 80030a4:	50a3      	str	r3, [r4, r2]
 80030a6:	e7dc      	b.n	8003062 <_malloc_r+0x86>
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e7ef      	b.n	800308c <_malloc_r+0xb0>
 80030ac:	0023      	movs	r3, r4
 80030ae:	6864      	ldr	r4, [r4, #4]
 80030b0:	e7a6      	b.n	8003000 <_malloc_r+0x24>
 80030b2:	9c00      	ldr	r4, [sp, #0]
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	e7ad      	b.n	8003016 <_malloc_r+0x3a>
 80030ba:	001a      	movs	r2, r3
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	42a3      	cmp	r3, r4
 80030c0:	d1fb      	bne.n	80030ba <_malloc_r+0xde>
 80030c2:	2300      	movs	r3, #0
 80030c4:	e7da      	b.n	800307c <_malloc_r+0xa0>
 80030c6:	230c      	movs	r3, #12
 80030c8:	0028      	movs	r0, r5
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	f000 f80e 	bl	80030ec <__malloc_unlock>
 80030d0:	e7c6      	b.n	8003060 <_malloc_r+0x84>
 80030d2:	6007      	str	r7, [r0, #0]
 80030d4:	e7da      	b.n	800308c <_malloc_r+0xb0>
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	2000028c 	.word	0x2000028c

080030dc <__malloc_lock>:
 80030dc:	b510      	push	{r4, lr}
 80030de:	4802      	ldr	r0, [pc, #8]	@ (80030e8 <__malloc_lock+0xc>)
 80030e0:	f7ff ff0e 	bl	8002f00 <__retarget_lock_acquire_recursive>
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	20000284 	.word	0x20000284

080030ec <__malloc_unlock>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4802      	ldr	r0, [pc, #8]	@ (80030f8 <__malloc_unlock+0xc>)
 80030f0:	f7ff ff07 	bl	8002f02 <__retarget_lock_release_recursive>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	20000284 	.word	0x20000284

080030fc <__ssputs_r>:
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	688e      	ldr	r6, [r1, #8]
 8003100:	b085      	sub	sp, #20
 8003102:	001f      	movs	r7, r3
 8003104:	000c      	movs	r4, r1
 8003106:	680b      	ldr	r3, [r1, #0]
 8003108:	9002      	str	r0, [sp, #8]
 800310a:	9203      	str	r2, [sp, #12]
 800310c:	42be      	cmp	r6, r7
 800310e:	d830      	bhi.n	8003172 <__ssputs_r+0x76>
 8003110:	210c      	movs	r1, #12
 8003112:	5e62      	ldrsh	r2, [r4, r1]
 8003114:	2190      	movs	r1, #144	@ 0x90
 8003116:	00c9      	lsls	r1, r1, #3
 8003118:	420a      	tst	r2, r1
 800311a:	d028      	beq.n	800316e <__ssputs_r+0x72>
 800311c:	2003      	movs	r0, #3
 800311e:	6921      	ldr	r1, [r4, #16]
 8003120:	1a5b      	subs	r3, r3, r1
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	6963      	ldr	r3, [r4, #20]
 8003126:	4343      	muls	r3, r0
 8003128:	9801      	ldr	r0, [sp, #4]
 800312a:	0fdd      	lsrs	r5, r3, #31
 800312c:	18ed      	adds	r5, r5, r3
 800312e:	1c7b      	adds	r3, r7, #1
 8003130:	181b      	adds	r3, r3, r0
 8003132:	106d      	asrs	r5, r5, #1
 8003134:	42ab      	cmp	r3, r5
 8003136:	d900      	bls.n	800313a <__ssputs_r+0x3e>
 8003138:	001d      	movs	r5, r3
 800313a:	0552      	lsls	r2, r2, #21
 800313c:	d528      	bpl.n	8003190 <__ssputs_r+0x94>
 800313e:	0029      	movs	r1, r5
 8003140:	9802      	ldr	r0, [sp, #8]
 8003142:	f7ff ff4b 	bl	8002fdc <_malloc_r>
 8003146:	1e06      	subs	r6, r0, #0
 8003148:	d02c      	beq.n	80031a4 <__ssputs_r+0xa8>
 800314a:	9a01      	ldr	r2, [sp, #4]
 800314c:	6921      	ldr	r1, [r4, #16]
 800314e:	f000 fae2 	bl	8003716 <memcpy>
 8003152:	89a2      	ldrh	r2, [r4, #12]
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <__ssputs_r+0xbc>)
 8003156:	401a      	ands	r2, r3
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	4313      	orrs	r3, r2
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	9b01      	ldr	r3, [sp, #4]
 8003160:	6126      	str	r6, [r4, #16]
 8003162:	18f6      	adds	r6, r6, r3
 8003164:	6026      	str	r6, [r4, #0]
 8003166:	003e      	movs	r6, r7
 8003168:	6165      	str	r5, [r4, #20]
 800316a:	1aed      	subs	r5, r5, r3
 800316c:	60a5      	str	r5, [r4, #8]
 800316e:	42be      	cmp	r6, r7
 8003170:	d900      	bls.n	8003174 <__ssputs_r+0x78>
 8003172:	003e      	movs	r6, r7
 8003174:	0032      	movs	r2, r6
 8003176:	9903      	ldr	r1, [sp, #12]
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	f000 fa9b 	bl	80036b4 <memmove>
 800317e:	2000      	movs	r0, #0
 8003180:	68a3      	ldr	r3, [r4, #8]
 8003182:	1b9b      	subs	r3, r3, r6
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	199b      	adds	r3, r3, r6
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	b005      	add	sp, #20
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	002a      	movs	r2, r5
 8003192:	9802      	ldr	r0, [sp, #8]
 8003194:	f000 fac8 	bl	8003728 <_realloc_r>
 8003198:	1e06      	subs	r6, r0, #0
 800319a:	d1e0      	bne.n	800315e <__ssputs_r+0x62>
 800319c:	6921      	ldr	r1, [r4, #16]
 800319e:	9802      	ldr	r0, [sp, #8]
 80031a0:	f7ff feb0 	bl	8002f04 <_free_r>
 80031a4:	230c      	movs	r3, #12
 80031a6:	2001      	movs	r0, #1
 80031a8:	9a02      	ldr	r2, [sp, #8]
 80031aa:	4240      	negs	r0, r0
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	89a2      	ldrh	r2, [r4, #12]
 80031b0:	3334      	adds	r3, #52	@ 0x34
 80031b2:	4313      	orrs	r3, r2
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	e7e9      	b.n	800318c <__ssputs_r+0x90>
 80031b8:	fffffb7f 	.word	0xfffffb7f

080031bc <_svfiprintf_r>:
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	b0a1      	sub	sp, #132	@ 0x84
 80031c0:	9003      	str	r0, [sp, #12]
 80031c2:	001d      	movs	r5, r3
 80031c4:	898b      	ldrh	r3, [r1, #12]
 80031c6:	000f      	movs	r7, r1
 80031c8:	0016      	movs	r6, r2
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	d511      	bpl.n	80031f2 <_svfiprintf_r+0x36>
 80031ce:	690b      	ldr	r3, [r1, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <_svfiprintf_r+0x36>
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	f7ff ff01 	bl	8002fdc <_malloc_r>
 80031da:	6038      	str	r0, [r7, #0]
 80031dc:	6138      	str	r0, [r7, #16]
 80031de:	2800      	cmp	r0, #0
 80031e0:	d105      	bne.n	80031ee <_svfiprintf_r+0x32>
 80031e2:	230c      	movs	r3, #12
 80031e4:	9a03      	ldr	r2, [sp, #12]
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	2001      	movs	r0, #1
 80031ea:	4240      	negs	r0, r0
 80031ec:	e0cf      	b.n	800338e <_svfiprintf_r+0x1d2>
 80031ee:	2340      	movs	r3, #64	@ 0x40
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	2300      	movs	r3, #0
 80031f4:	ac08      	add	r4, sp, #32
 80031f6:	6163      	str	r3, [r4, #20]
 80031f8:	3320      	adds	r3, #32
 80031fa:	7663      	strb	r3, [r4, #25]
 80031fc:	3310      	adds	r3, #16
 80031fe:	76a3      	strb	r3, [r4, #26]
 8003200:	9507      	str	r5, [sp, #28]
 8003202:	0035      	movs	r5, r6
 8003204:	782b      	ldrb	r3, [r5, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <_svfiprintf_r+0x52>
 800320a:	2b25      	cmp	r3, #37	@ 0x25
 800320c:	d148      	bne.n	80032a0 <_svfiprintf_r+0xe4>
 800320e:	1bab      	subs	r3, r5, r6
 8003210:	9305      	str	r3, [sp, #20]
 8003212:	42b5      	cmp	r5, r6
 8003214:	d00b      	beq.n	800322e <_svfiprintf_r+0x72>
 8003216:	0032      	movs	r2, r6
 8003218:	0039      	movs	r1, r7
 800321a:	9803      	ldr	r0, [sp, #12]
 800321c:	f7ff ff6e 	bl	80030fc <__ssputs_r>
 8003220:	3001      	adds	r0, #1
 8003222:	d100      	bne.n	8003226 <_svfiprintf_r+0x6a>
 8003224:	e0ae      	b.n	8003384 <_svfiprintf_r+0x1c8>
 8003226:	6963      	ldr	r3, [r4, #20]
 8003228:	9a05      	ldr	r2, [sp, #20]
 800322a:	189b      	adds	r3, r3, r2
 800322c:	6163      	str	r3, [r4, #20]
 800322e:	782b      	ldrb	r3, [r5, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d100      	bne.n	8003236 <_svfiprintf_r+0x7a>
 8003234:	e0a6      	b.n	8003384 <_svfiprintf_r+0x1c8>
 8003236:	2201      	movs	r2, #1
 8003238:	2300      	movs	r3, #0
 800323a:	4252      	negs	r2, r2
 800323c:	6062      	str	r2, [r4, #4]
 800323e:	a904      	add	r1, sp, #16
 8003240:	3254      	adds	r2, #84	@ 0x54
 8003242:	1852      	adds	r2, r2, r1
 8003244:	1c6e      	adds	r6, r5, #1
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	60e3      	str	r3, [r4, #12]
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	7013      	strb	r3, [r2, #0]
 800324e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003250:	4b54      	ldr	r3, [pc, #336]	@ (80033a4 <_svfiprintf_r+0x1e8>)
 8003252:	2205      	movs	r2, #5
 8003254:	0018      	movs	r0, r3
 8003256:	7831      	ldrb	r1, [r6, #0]
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	f000 fa51 	bl	8003700 <memchr>
 800325e:	1c75      	adds	r5, r6, #1
 8003260:	2800      	cmp	r0, #0
 8003262:	d11f      	bne.n	80032a4 <_svfiprintf_r+0xe8>
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	06d3      	lsls	r3, r2, #27
 8003268:	d504      	bpl.n	8003274 <_svfiprintf_r+0xb8>
 800326a:	2353      	movs	r3, #83	@ 0x53
 800326c:	a904      	add	r1, sp, #16
 800326e:	185b      	adds	r3, r3, r1
 8003270:	2120      	movs	r1, #32
 8003272:	7019      	strb	r1, [r3, #0]
 8003274:	0713      	lsls	r3, r2, #28
 8003276:	d504      	bpl.n	8003282 <_svfiprintf_r+0xc6>
 8003278:	2353      	movs	r3, #83	@ 0x53
 800327a:	a904      	add	r1, sp, #16
 800327c:	185b      	adds	r3, r3, r1
 800327e:	212b      	movs	r1, #43	@ 0x2b
 8003280:	7019      	strb	r1, [r3, #0]
 8003282:	7833      	ldrb	r3, [r6, #0]
 8003284:	2b2a      	cmp	r3, #42	@ 0x2a
 8003286:	d016      	beq.n	80032b6 <_svfiprintf_r+0xfa>
 8003288:	0035      	movs	r5, r6
 800328a:	2100      	movs	r1, #0
 800328c:	200a      	movs	r0, #10
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	782a      	ldrb	r2, [r5, #0]
 8003292:	1c6e      	adds	r6, r5, #1
 8003294:	3a30      	subs	r2, #48	@ 0x30
 8003296:	2a09      	cmp	r2, #9
 8003298:	d950      	bls.n	800333c <_svfiprintf_r+0x180>
 800329a:	2900      	cmp	r1, #0
 800329c:	d111      	bne.n	80032c2 <_svfiprintf_r+0x106>
 800329e:	e017      	b.n	80032d0 <_svfiprintf_r+0x114>
 80032a0:	3501      	adds	r5, #1
 80032a2:	e7af      	b.n	8003204 <_svfiprintf_r+0x48>
 80032a4:	9b05      	ldr	r3, [sp, #20]
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	1ac0      	subs	r0, r0, r3
 80032aa:	2301      	movs	r3, #1
 80032ac:	4083      	lsls	r3, r0
 80032ae:	4313      	orrs	r3, r2
 80032b0:	002e      	movs	r6, r5
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	e7cc      	b.n	8003250 <_svfiprintf_r+0x94>
 80032b6:	9b07      	ldr	r3, [sp, #28]
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	9107      	str	r1, [sp, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db01      	blt.n	80032c6 <_svfiprintf_r+0x10a>
 80032c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032c4:	e004      	b.n	80032d0 <_svfiprintf_r+0x114>
 80032c6:	425b      	negs	r3, r3
 80032c8:	60e3      	str	r3, [r4, #12]
 80032ca:	2302      	movs	r3, #2
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	782b      	ldrb	r3, [r5, #0]
 80032d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d4:	d10c      	bne.n	80032f0 <_svfiprintf_r+0x134>
 80032d6:	786b      	ldrb	r3, [r5, #1]
 80032d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032da:	d134      	bne.n	8003346 <_svfiprintf_r+0x18a>
 80032dc:	9b07      	ldr	r3, [sp, #28]
 80032de:	3502      	adds	r5, #2
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	9207      	str	r2, [sp, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da01      	bge.n	80032ee <_svfiprintf_r+0x132>
 80032ea:	2301      	movs	r3, #1
 80032ec:	425b      	negs	r3, r3
 80032ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80032f0:	4e2d      	ldr	r6, [pc, #180]	@ (80033a8 <_svfiprintf_r+0x1ec>)
 80032f2:	2203      	movs	r2, #3
 80032f4:	0030      	movs	r0, r6
 80032f6:	7829      	ldrb	r1, [r5, #0]
 80032f8:	f000 fa02 	bl	8003700 <memchr>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d006      	beq.n	800330e <_svfiprintf_r+0x152>
 8003300:	2340      	movs	r3, #64	@ 0x40
 8003302:	1b80      	subs	r0, r0, r6
 8003304:	4083      	lsls	r3, r0
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	3501      	adds	r5, #1
 800330a:	4313      	orrs	r3, r2
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	7829      	ldrb	r1, [r5, #0]
 8003310:	2206      	movs	r2, #6
 8003312:	4826      	ldr	r0, [pc, #152]	@ (80033ac <_svfiprintf_r+0x1f0>)
 8003314:	1c6e      	adds	r6, r5, #1
 8003316:	7621      	strb	r1, [r4, #24]
 8003318:	f000 f9f2 	bl	8003700 <memchr>
 800331c:	2800      	cmp	r0, #0
 800331e:	d038      	beq.n	8003392 <_svfiprintf_r+0x1d6>
 8003320:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <_svfiprintf_r+0x1f4>)
 8003322:	2b00      	cmp	r3, #0
 8003324:	d122      	bne.n	800336c <_svfiprintf_r+0x1b0>
 8003326:	2207      	movs	r2, #7
 8003328:	9b07      	ldr	r3, [sp, #28]
 800332a:	3307      	adds	r3, #7
 800332c:	4393      	bics	r3, r2
 800332e:	3308      	adds	r3, #8
 8003330:	9307      	str	r3, [sp, #28]
 8003332:	6963      	ldr	r3, [r4, #20]
 8003334:	9a04      	ldr	r2, [sp, #16]
 8003336:	189b      	adds	r3, r3, r2
 8003338:	6163      	str	r3, [r4, #20]
 800333a:	e762      	b.n	8003202 <_svfiprintf_r+0x46>
 800333c:	4343      	muls	r3, r0
 800333e:	0035      	movs	r5, r6
 8003340:	2101      	movs	r1, #1
 8003342:	189b      	adds	r3, r3, r2
 8003344:	e7a4      	b.n	8003290 <_svfiprintf_r+0xd4>
 8003346:	2300      	movs	r3, #0
 8003348:	200a      	movs	r0, #10
 800334a:	0019      	movs	r1, r3
 800334c:	3501      	adds	r5, #1
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	782a      	ldrb	r2, [r5, #0]
 8003352:	1c6e      	adds	r6, r5, #1
 8003354:	3a30      	subs	r2, #48	@ 0x30
 8003356:	2a09      	cmp	r2, #9
 8003358:	d903      	bls.n	8003362 <_svfiprintf_r+0x1a6>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0c8      	beq.n	80032f0 <_svfiprintf_r+0x134>
 800335e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003360:	e7c6      	b.n	80032f0 <_svfiprintf_r+0x134>
 8003362:	4341      	muls	r1, r0
 8003364:	0035      	movs	r5, r6
 8003366:	2301      	movs	r3, #1
 8003368:	1889      	adds	r1, r1, r2
 800336a:	e7f1      	b.n	8003350 <_svfiprintf_r+0x194>
 800336c:	aa07      	add	r2, sp, #28
 800336e:	9200      	str	r2, [sp, #0]
 8003370:	0021      	movs	r1, r4
 8003372:	003a      	movs	r2, r7
 8003374:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <_svfiprintf_r+0x1f8>)
 8003376:	9803      	ldr	r0, [sp, #12]
 8003378:	e000      	b.n	800337c <_svfiprintf_r+0x1c0>
 800337a:	bf00      	nop
 800337c:	9004      	str	r0, [sp, #16]
 800337e:	9b04      	ldr	r3, [sp, #16]
 8003380:	3301      	adds	r3, #1
 8003382:	d1d6      	bne.n	8003332 <_svfiprintf_r+0x176>
 8003384:	89bb      	ldrh	r3, [r7, #12]
 8003386:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003388:	065b      	lsls	r3, r3, #25
 800338a:	d500      	bpl.n	800338e <_svfiprintf_r+0x1d2>
 800338c:	e72c      	b.n	80031e8 <_svfiprintf_r+0x2c>
 800338e:	b021      	add	sp, #132	@ 0x84
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	aa07      	add	r2, sp, #28
 8003394:	9200      	str	r2, [sp, #0]
 8003396:	0021      	movs	r1, r4
 8003398:	003a      	movs	r2, r7
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <_svfiprintf_r+0x1f8>)
 800339c:	9803      	ldr	r0, [sp, #12]
 800339e:	f000 f87b 	bl	8003498 <_printf_i>
 80033a2:	e7eb      	b.n	800337c <_svfiprintf_r+0x1c0>
 80033a4:	080039dc 	.word	0x080039dc
 80033a8:	080039e2 	.word	0x080039e2
 80033ac:	080039e6 	.word	0x080039e6
 80033b0:	00000000 	.word	0x00000000
 80033b4:	080030fd 	.word	0x080030fd

080033b8 <_printf_common>:
 80033b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ba:	0016      	movs	r6, r2
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	688a      	ldr	r2, [r1, #8]
 80033c0:	690b      	ldr	r3, [r1, #16]
 80033c2:	000c      	movs	r4, r1
 80033c4:	9000      	str	r0, [sp, #0]
 80033c6:	4293      	cmp	r3, r2
 80033c8:	da00      	bge.n	80033cc <_printf_common+0x14>
 80033ca:	0013      	movs	r3, r2
 80033cc:	0022      	movs	r2, r4
 80033ce:	6033      	str	r3, [r6, #0]
 80033d0:	3243      	adds	r2, #67	@ 0x43
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	d001      	beq.n	80033dc <_printf_common+0x24>
 80033d8:	3301      	adds	r3, #1
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	d502      	bpl.n	80033e8 <_printf_common+0x30>
 80033e2:	6833      	ldr	r3, [r6, #0]
 80033e4:	3302      	adds	r3, #2
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	2306      	movs	r3, #6
 80033ec:	0015      	movs	r5, r2
 80033ee:	401d      	ands	r5, r3
 80033f0:	421a      	tst	r2, r3
 80033f2:	d027      	beq.n	8003444 <_printf_common+0x8c>
 80033f4:	0023      	movs	r3, r4
 80033f6:	3343      	adds	r3, #67	@ 0x43
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	4193      	sbcs	r3, r2
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	0692      	lsls	r2, r2, #26
 8003402:	d430      	bmi.n	8003466 <_printf_common+0xae>
 8003404:	0022      	movs	r2, r4
 8003406:	9901      	ldr	r1, [sp, #4]
 8003408:	9800      	ldr	r0, [sp, #0]
 800340a:	9d08      	ldr	r5, [sp, #32]
 800340c:	3243      	adds	r2, #67	@ 0x43
 800340e:	47a8      	blx	r5
 8003410:	3001      	adds	r0, #1
 8003412:	d025      	beq.n	8003460 <_printf_common+0xa8>
 8003414:	2206      	movs	r2, #6
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	2500      	movs	r5, #0
 800341a:	4013      	ands	r3, r2
 800341c:	2b04      	cmp	r3, #4
 800341e:	d105      	bne.n	800342c <_printf_common+0x74>
 8003420:	6833      	ldr	r3, [r6, #0]
 8003422:	68e5      	ldr	r5, [r4, #12]
 8003424:	1aed      	subs	r5, r5, r3
 8003426:	43eb      	mvns	r3, r5
 8003428:	17db      	asrs	r3, r3, #31
 800342a:	401d      	ands	r5, r3
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	6922      	ldr	r2, [r4, #16]
 8003430:	4293      	cmp	r3, r2
 8003432:	dd01      	ble.n	8003438 <_printf_common+0x80>
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	18ed      	adds	r5, r5, r3
 8003438:	2600      	movs	r6, #0
 800343a:	42b5      	cmp	r5, r6
 800343c:	d120      	bne.n	8003480 <_printf_common+0xc8>
 800343e:	2000      	movs	r0, #0
 8003440:	e010      	b.n	8003464 <_printf_common+0xac>
 8003442:	3501      	adds	r5, #1
 8003444:	68e3      	ldr	r3, [r4, #12]
 8003446:	6832      	ldr	r2, [r6, #0]
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	42ab      	cmp	r3, r5
 800344c:	ddd2      	ble.n	80033f4 <_printf_common+0x3c>
 800344e:	0022      	movs	r2, r4
 8003450:	2301      	movs	r3, #1
 8003452:	9901      	ldr	r1, [sp, #4]
 8003454:	9800      	ldr	r0, [sp, #0]
 8003456:	9f08      	ldr	r7, [sp, #32]
 8003458:	3219      	adds	r2, #25
 800345a:	47b8      	blx	r7
 800345c:	3001      	adds	r0, #1
 800345e:	d1f0      	bne.n	8003442 <_printf_common+0x8a>
 8003460:	2001      	movs	r0, #1
 8003462:	4240      	negs	r0, r0
 8003464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003466:	2030      	movs	r0, #48	@ 0x30
 8003468:	18e1      	adds	r1, r4, r3
 800346a:	3143      	adds	r1, #67	@ 0x43
 800346c:	7008      	strb	r0, [r1, #0]
 800346e:	0021      	movs	r1, r4
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	3145      	adds	r1, #69	@ 0x45
 8003474:	7809      	ldrb	r1, [r1, #0]
 8003476:	18a2      	adds	r2, r4, r2
 8003478:	3243      	adds	r2, #67	@ 0x43
 800347a:	3302      	adds	r3, #2
 800347c:	7011      	strb	r1, [r2, #0]
 800347e:	e7c1      	b.n	8003404 <_printf_common+0x4c>
 8003480:	0022      	movs	r2, r4
 8003482:	2301      	movs	r3, #1
 8003484:	9901      	ldr	r1, [sp, #4]
 8003486:	9800      	ldr	r0, [sp, #0]
 8003488:	9f08      	ldr	r7, [sp, #32]
 800348a:	321a      	adds	r2, #26
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	d0e6      	beq.n	8003460 <_printf_common+0xa8>
 8003492:	3601      	adds	r6, #1
 8003494:	e7d1      	b.n	800343a <_printf_common+0x82>
	...

08003498 <_printf_i>:
 8003498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349a:	b08b      	sub	sp, #44	@ 0x2c
 800349c:	9206      	str	r2, [sp, #24]
 800349e:	000a      	movs	r2, r1
 80034a0:	3243      	adds	r2, #67	@ 0x43
 80034a2:	9307      	str	r3, [sp, #28]
 80034a4:	9005      	str	r0, [sp, #20]
 80034a6:	9203      	str	r2, [sp, #12]
 80034a8:	7e0a      	ldrb	r2, [r1, #24]
 80034aa:	000c      	movs	r4, r1
 80034ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80034ae:	2a78      	cmp	r2, #120	@ 0x78
 80034b0:	d809      	bhi.n	80034c6 <_printf_i+0x2e>
 80034b2:	2a62      	cmp	r2, #98	@ 0x62
 80034b4:	d80b      	bhi.n	80034ce <_printf_i+0x36>
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d100      	bne.n	80034bc <_printf_i+0x24>
 80034ba:	e0bc      	b.n	8003636 <_printf_i+0x19e>
 80034bc:	497b      	ldr	r1, [pc, #492]	@ (80036ac <_printf_i+0x214>)
 80034be:	9104      	str	r1, [sp, #16]
 80034c0:	2a58      	cmp	r2, #88	@ 0x58
 80034c2:	d100      	bne.n	80034c6 <_printf_i+0x2e>
 80034c4:	e090      	b.n	80035e8 <_printf_i+0x150>
 80034c6:	0025      	movs	r5, r4
 80034c8:	3542      	adds	r5, #66	@ 0x42
 80034ca:	702a      	strb	r2, [r5, #0]
 80034cc:	e022      	b.n	8003514 <_printf_i+0x7c>
 80034ce:	0010      	movs	r0, r2
 80034d0:	3863      	subs	r0, #99	@ 0x63
 80034d2:	2815      	cmp	r0, #21
 80034d4:	d8f7      	bhi.n	80034c6 <_printf_i+0x2e>
 80034d6:	f7fc fe13 	bl	8000100 <__gnu_thumb1_case_shi>
 80034da:	0016      	.short	0x0016
 80034dc:	fff6001f 	.word	0xfff6001f
 80034e0:	fff6fff6 	.word	0xfff6fff6
 80034e4:	001ffff6 	.word	0x001ffff6
 80034e8:	fff6fff6 	.word	0xfff6fff6
 80034ec:	fff6fff6 	.word	0xfff6fff6
 80034f0:	003600a1 	.word	0x003600a1
 80034f4:	fff60080 	.word	0xfff60080
 80034f8:	00b2fff6 	.word	0x00b2fff6
 80034fc:	0036fff6 	.word	0x0036fff6
 8003500:	fff6fff6 	.word	0xfff6fff6
 8003504:	0084      	.short	0x0084
 8003506:	0025      	movs	r5, r4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	3542      	adds	r5, #66	@ 0x42
 800350c:	1d11      	adds	r1, r2, #4
 800350e:	6019      	str	r1, [r3, #0]
 8003510:	6813      	ldr	r3, [r2, #0]
 8003512:	702b      	strb	r3, [r5, #0]
 8003514:	2301      	movs	r3, #1
 8003516:	e0a0      	b.n	800365a <_printf_i+0x1c2>
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	6809      	ldr	r1, [r1, #0]
 800351c:	1d02      	adds	r2, r0, #4
 800351e:	060d      	lsls	r5, r1, #24
 8003520:	d50b      	bpl.n	800353a <_printf_i+0xa2>
 8003522:	6806      	ldr	r6, [r0, #0]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	2e00      	cmp	r6, #0
 8003528:	da03      	bge.n	8003532 <_printf_i+0x9a>
 800352a:	232d      	movs	r3, #45	@ 0x2d
 800352c:	9a03      	ldr	r2, [sp, #12]
 800352e:	4276      	negs	r6, r6
 8003530:	7013      	strb	r3, [r2, #0]
 8003532:	4b5e      	ldr	r3, [pc, #376]	@ (80036ac <_printf_i+0x214>)
 8003534:	270a      	movs	r7, #10
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	e018      	b.n	800356c <_printf_i+0xd4>
 800353a:	6806      	ldr	r6, [r0, #0]
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	0649      	lsls	r1, r1, #25
 8003540:	d5f1      	bpl.n	8003526 <_printf_i+0x8e>
 8003542:	b236      	sxth	r6, r6
 8003544:	e7ef      	b.n	8003526 <_printf_i+0x8e>
 8003546:	6808      	ldr	r0, [r1, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	c940      	ldmia	r1!, {r6}
 800354c:	0605      	lsls	r5, r0, #24
 800354e:	d402      	bmi.n	8003556 <_printf_i+0xbe>
 8003550:	0640      	lsls	r0, r0, #25
 8003552:	d500      	bpl.n	8003556 <_printf_i+0xbe>
 8003554:	b2b6      	uxth	r6, r6
 8003556:	6019      	str	r1, [r3, #0]
 8003558:	4b54      	ldr	r3, [pc, #336]	@ (80036ac <_printf_i+0x214>)
 800355a:	270a      	movs	r7, #10
 800355c:	9304      	str	r3, [sp, #16]
 800355e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003560:	d100      	bne.n	8003564 <_printf_i+0xcc>
 8003562:	3f02      	subs	r7, #2
 8003564:	0023      	movs	r3, r4
 8003566:	2200      	movs	r2, #0
 8003568:	3343      	adds	r3, #67	@ 0x43
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	60a3      	str	r3, [r4, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db03      	blt.n	800357c <_printf_i+0xe4>
 8003574:	2104      	movs	r1, #4
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	438a      	bics	r2, r1
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	2e00      	cmp	r6, #0
 800357e:	d102      	bne.n	8003586 <_printf_i+0xee>
 8003580:	9d03      	ldr	r5, [sp, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <_printf_i+0x108>
 8003586:	9d03      	ldr	r5, [sp, #12]
 8003588:	0030      	movs	r0, r6
 800358a:	0039      	movs	r1, r7
 800358c:	f7fc fe48 	bl	8000220 <__aeabi_uidivmod>
 8003590:	9b04      	ldr	r3, [sp, #16]
 8003592:	3d01      	subs	r5, #1
 8003594:	5c5b      	ldrb	r3, [r3, r1]
 8003596:	702b      	strb	r3, [r5, #0]
 8003598:	0033      	movs	r3, r6
 800359a:	0006      	movs	r6, r0
 800359c:	429f      	cmp	r7, r3
 800359e:	d9f3      	bls.n	8003588 <_printf_i+0xf0>
 80035a0:	2f08      	cmp	r7, #8
 80035a2:	d109      	bne.n	80035b8 <_printf_i+0x120>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	07db      	lsls	r3, r3, #31
 80035a8:	d506      	bpl.n	80035b8 <_printf_i+0x120>
 80035aa:	6862      	ldr	r2, [r4, #4]
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dc02      	bgt.n	80035b8 <_printf_i+0x120>
 80035b2:	2330      	movs	r3, #48	@ 0x30
 80035b4:	3d01      	subs	r5, #1
 80035b6:	702b      	strb	r3, [r5, #0]
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	1b5b      	subs	r3, r3, r5
 80035bc:	6123      	str	r3, [r4, #16]
 80035be:	9b07      	ldr	r3, [sp, #28]
 80035c0:	0021      	movs	r1, r4
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	9805      	ldr	r0, [sp, #20]
 80035c6:	9b06      	ldr	r3, [sp, #24]
 80035c8:	aa09      	add	r2, sp, #36	@ 0x24
 80035ca:	f7ff fef5 	bl	80033b8 <_printf_common>
 80035ce:	3001      	adds	r0, #1
 80035d0:	d148      	bne.n	8003664 <_printf_i+0x1cc>
 80035d2:	2001      	movs	r0, #1
 80035d4:	4240      	negs	r0, r0
 80035d6:	b00b      	add	sp, #44	@ 0x2c
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035da:	2220      	movs	r2, #32
 80035dc:	6809      	ldr	r1, [r1, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	2278      	movs	r2, #120	@ 0x78
 80035e4:	4932      	ldr	r1, [pc, #200]	@ (80036b0 <_printf_i+0x218>)
 80035e6:	9104      	str	r1, [sp, #16]
 80035e8:	0021      	movs	r1, r4
 80035ea:	3145      	adds	r1, #69	@ 0x45
 80035ec:	700a      	strb	r2, [r1, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	c940      	ldmia	r1!, {r6}
 80035f4:	0610      	lsls	r0, r2, #24
 80035f6:	d402      	bmi.n	80035fe <_printf_i+0x166>
 80035f8:	0650      	lsls	r0, r2, #25
 80035fa:	d500      	bpl.n	80035fe <_printf_i+0x166>
 80035fc:	b2b6      	uxth	r6, r6
 80035fe:	6019      	str	r1, [r3, #0]
 8003600:	07d3      	lsls	r3, r2, #31
 8003602:	d502      	bpl.n	800360a <_printf_i+0x172>
 8003604:	2320      	movs	r3, #32
 8003606:	4313      	orrs	r3, r2
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	2e00      	cmp	r6, #0
 800360c:	d001      	beq.n	8003612 <_printf_i+0x17a>
 800360e:	2710      	movs	r7, #16
 8003610:	e7a8      	b.n	8003564 <_printf_i+0xcc>
 8003612:	2220      	movs	r2, #32
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	4393      	bics	r3, r2
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	e7f8      	b.n	800360e <_printf_i+0x176>
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	680d      	ldr	r5, [r1, #0]
 8003620:	1d10      	adds	r0, r2, #4
 8003622:	6949      	ldr	r1, [r1, #20]
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	062e      	lsls	r6, r5, #24
 800362a:	d501      	bpl.n	8003630 <_printf_i+0x198>
 800362c:	6019      	str	r1, [r3, #0]
 800362e:	e002      	b.n	8003636 <_printf_i+0x19e>
 8003630:	066d      	lsls	r5, r5, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0x194>
 8003634:	8019      	strh	r1, [r3, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	9d03      	ldr	r5, [sp, #12]
 800363a:	6123      	str	r3, [r4, #16]
 800363c:	e7bf      	b.n	80035be <_printf_i+0x126>
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	1d11      	adds	r1, r2, #4
 8003642:	6019      	str	r1, [r3, #0]
 8003644:	6815      	ldr	r5, [r2, #0]
 8003646:	2100      	movs	r1, #0
 8003648:	0028      	movs	r0, r5
 800364a:	6862      	ldr	r2, [r4, #4]
 800364c:	f000 f858 	bl	8003700 <memchr>
 8003650:	2800      	cmp	r0, #0
 8003652:	d001      	beq.n	8003658 <_printf_i+0x1c0>
 8003654:	1b40      	subs	r0, r0, r5
 8003656:	6060      	str	r0, [r4, #4]
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	6123      	str	r3, [r4, #16]
 800365c:	2300      	movs	r3, #0
 800365e:	9a03      	ldr	r2, [sp, #12]
 8003660:	7013      	strb	r3, [r2, #0]
 8003662:	e7ac      	b.n	80035be <_printf_i+0x126>
 8003664:	002a      	movs	r2, r5
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	9906      	ldr	r1, [sp, #24]
 800366a:	9805      	ldr	r0, [sp, #20]
 800366c:	9d07      	ldr	r5, [sp, #28]
 800366e:	47a8      	blx	r5
 8003670:	3001      	adds	r0, #1
 8003672:	d0ae      	beq.n	80035d2 <_printf_i+0x13a>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	079b      	lsls	r3, r3, #30
 8003678:	d415      	bmi.n	80036a6 <_printf_i+0x20e>
 800367a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800367c:	68e0      	ldr	r0, [r4, #12]
 800367e:	4298      	cmp	r0, r3
 8003680:	daa9      	bge.n	80035d6 <_printf_i+0x13e>
 8003682:	0018      	movs	r0, r3
 8003684:	e7a7      	b.n	80035d6 <_printf_i+0x13e>
 8003686:	0022      	movs	r2, r4
 8003688:	2301      	movs	r3, #1
 800368a:	9906      	ldr	r1, [sp, #24]
 800368c:	9805      	ldr	r0, [sp, #20]
 800368e:	9e07      	ldr	r6, [sp, #28]
 8003690:	3219      	adds	r2, #25
 8003692:	47b0      	blx	r6
 8003694:	3001      	adds	r0, #1
 8003696:	d09c      	beq.n	80035d2 <_printf_i+0x13a>
 8003698:	3501      	adds	r5, #1
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	42ab      	cmp	r3, r5
 80036a2:	dcf0      	bgt.n	8003686 <_printf_i+0x1ee>
 80036a4:	e7e9      	b.n	800367a <_printf_i+0x1e2>
 80036a6:	2500      	movs	r5, #0
 80036a8:	e7f7      	b.n	800369a <_printf_i+0x202>
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	080039ed 	.word	0x080039ed
 80036b0:	080039fe 	.word	0x080039fe

080036b4 <memmove>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	4288      	cmp	r0, r1
 80036b8:	d806      	bhi.n	80036c8 <memmove+0x14>
 80036ba:	2300      	movs	r3, #0
 80036bc:	429a      	cmp	r2, r3
 80036be:	d008      	beq.n	80036d2 <memmove+0x1e>
 80036c0:	5ccc      	ldrb	r4, [r1, r3]
 80036c2:	54c4      	strb	r4, [r0, r3]
 80036c4:	3301      	adds	r3, #1
 80036c6:	e7f9      	b.n	80036bc <memmove+0x8>
 80036c8:	188b      	adds	r3, r1, r2
 80036ca:	4298      	cmp	r0, r3
 80036cc:	d2f5      	bcs.n	80036ba <memmove+0x6>
 80036ce:	3a01      	subs	r2, #1
 80036d0:	d200      	bcs.n	80036d4 <memmove+0x20>
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	5c8b      	ldrb	r3, [r1, r2]
 80036d6:	5483      	strb	r3, [r0, r2]
 80036d8:	e7f9      	b.n	80036ce <memmove+0x1a>
	...

080036dc <_sbrk_r>:
 80036dc:	2300      	movs	r3, #0
 80036de:	b570      	push	{r4, r5, r6, lr}
 80036e0:	4d06      	ldr	r5, [pc, #24]	@ (80036fc <_sbrk_r+0x20>)
 80036e2:	0004      	movs	r4, r0
 80036e4:	0008      	movs	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fd f9e0 	bl	8000aac <_sbrk>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d103      	bne.n	80036f8 <_sbrk_r+0x1c>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d000      	beq.n	80036f8 <_sbrk_r+0x1c>
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	bd70      	pop	{r4, r5, r6, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	20000280 	.word	0x20000280

08003700 <memchr>:
 8003700:	b2c9      	uxtb	r1, r1
 8003702:	1882      	adds	r2, r0, r2
 8003704:	4290      	cmp	r0, r2
 8003706:	d101      	bne.n	800370c <memchr+0xc>
 8003708:	2000      	movs	r0, #0
 800370a:	4770      	bx	lr
 800370c:	7803      	ldrb	r3, [r0, #0]
 800370e:	428b      	cmp	r3, r1
 8003710:	d0fb      	beq.n	800370a <memchr+0xa>
 8003712:	3001      	adds	r0, #1
 8003714:	e7f6      	b.n	8003704 <memchr+0x4>

08003716 <memcpy>:
 8003716:	2300      	movs	r3, #0
 8003718:	b510      	push	{r4, lr}
 800371a:	429a      	cmp	r2, r3
 800371c:	d100      	bne.n	8003720 <memcpy+0xa>
 800371e:	bd10      	pop	{r4, pc}
 8003720:	5ccc      	ldrb	r4, [r1, r3]
 8003722:	54c4      	strb	r4, [r0, r3]
 8003724:	3301      	adds	r3, #1
 8003726:	e7f8      	b.n	800371a <memcpy+0x4>

08003728 <_realloc_r>:
 8003728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372a:	0006      	movs	r6, r0
 800372c:	000c      	movs	r4, r1
 800372e:	0015      	movs	r5, r2
 8003730:	2900      	cmp	r1, #0
 8003732:	d105      	bne.n	8003740 <_realloc_r+0x18>
 8003734:	0011      	movs	r1, r2
 8003736:	f7ff fc51 	bl	8002fdc <_malloc_r>
 800373a:	0004      	movs	r4, r0
 800373c:	0020      	movs	r0, r4
 800373e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003740:	2a00      	cmp	r2, #0
 8003742:	d103      	bne.n	800374c <_realloc_r+0x24>
 8003744:	f7ff fbde 	bl	8002f04 <_free_r>
 8003748:	2400      	movs	r4, #0
 800374a:	e7f7      	b.n	800373c <_realloc_r+0x14>
 800374c:	f000 f81b 	bl	8003786 <_malloc_usable_size_r>
 8003750:	0007      	movs	r7, r0
 8003752:	4285      	cmp	r5, r0
 8003754:	d802      	bhi.n	800375c <_realloc_r+0x34>
 8003756:	0843      	lsrs	r3, r0, #1
 8003758:	42ab      	cmp	r3, r5
 800375a:	d3ef      	bcc.n	800373c <_realloc_r+0x14>
 800375c:	0029      	movs	r1, r5
 800375e:	0030      	movs	r0, r6
 8003760:	f7ff fc3c 	bl	8002fdc <_malloc_r>
 8003764:	9001      	str	r0, [sp, #4]
 8003766:	2800      	cmp	r0, #0
 8003768:	d0ee      	beq.n	8003748 <_realloc_r+0x20>
 800376a:	002a      	movs	r2, r5
 800376c:	42bd      	cmp	r5, r7
 800376e:	d900      	bls.n	8003772 <_realloc_r+0x4a>
 8003770:	003a      	movs	r2, r7
 8003772:	0021      	movs	r1, r4
 8003774:	9801      	ldr	r0, [sp, #4]
 8003776:	f7ff ffce 	bl	8003716 <memcpy>
 800377a:	0021      	movs	r1, r4
 800377c:	0030      	movs	r0, r6
 800377e:	f7ff fbc1 	bl	8002f04 <_free_r>
 8003782:	9c01      	ldr	r4, [sp, #4]
 8003784:	e7da      	b.n	800373c <_realloc_r+0x14>

08003786 <_malloc_usable_size_r>:
 8003786:	1f0b      	subs	r3, r1, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1f18      	subs	r0, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	da01      	bge.n	8003794 <_malloc_usable_size_r+0xe>
 8003790:	580b      	ldr	r3, [r1, r0]
 8003792:	18c0      	adds	r0, r0, r3
 8003794:	4770      	bx	lr
	...

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
