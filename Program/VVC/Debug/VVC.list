
VVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de8  08004de8  000060ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004de8  08004de8  000060ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de8  08004de8  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000158  200000ac  08004e9c  000060ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004e9c  00006204  2**0
                  ALLOC
 11 .persistent_log 00000000  0800f800  0800f800  000060ac  2**0
                  CONTENTS
 12 .ARM.attributes 00000028  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a2e  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002051  00000000  00000000  0000fb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  00011b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bf  00000000  00000000  00012598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b65  00000000  00000000  00012d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6b7  00000000  00000000  000288bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086a77  00000000  00000000  00034f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bb9ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002544  00000000  00000000  000bba30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000bdf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000ac 	.word	0x200000ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004aac 	.word	0x08004aac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000b0 	.word	0x200000b0
 80000fc:	08004aac 	.word	0x08004aac

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <__aeabi_cfrcmple>:
 80003fc:	4684      	mov	ip, r0
 80003fe:	0008      	movs	r0, r1
 8000400:	4661      	mov	r1, ip
 8000402:	e7ff      	b.n	8000404 <__aeabi_cfcmpeq>

08000404 <__aeabi_cfcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 f9cb 	bl	80007a0 <__lesf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cfcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_fcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f94b 	bl	80006b0 <__eqsf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_fcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f9bd 	bl	80007a0 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_fcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_fcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f9b3 	bl	80007a0 <__lesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_fcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_fcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f959 	bl	8000700 <__gesf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_fcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_fcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f94f 	bl	8000700 <__gesf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_fcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_fdiv>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464f      	mov	r7, r9
 8000474:	4646      	mov	r6, r8
 8000476:	46d6      	mov	lr, sl
 8000478:	0244      	lsls	r4, r0, #9
 800047a:	b5c0      	push	{r6, r7, lr}
 800047c:	0047      	lsls	r7, r0, #1
 800047e:	1c0e      	adds	r6, r1, #0
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	0e3f      	lsrs	r7, r7, #24
 8000484:	0fc5      	lsrs	r5, r0, #31
 8000486:	2f00      	cmp	r7, #0
 8000488:	d03c      	beq.n	8000504 <__aeabi_fdiv+0x94>
 800048a:	2fff      	cmp	r7, #255	@ 0xff
 800048c:	d042      	beq.n	8000514 <__aeabi_fdiv+0xa4>
 800048e:	2300      	movs	r3, #0
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	4699      	mov	r9, r3
 8000494:	469a      	mov	sl, r3
 8000496:	00e4      	lsls	r4, r4, #3
 8000498:	04d2      	lsls	r2, r2, #19
 800049a:	4314      	orrs	r4, r2
 800049c:	3f7f      	subs	r7, #127	@ 0x7f
 800049e:	0273      	lsls	r3, r6, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	4698      	mov	r8, r3
 80004a4:	0073      	lsls	r3, r6, #1
 80004a6:	0e1b      	lsrs	r3, r3, #24
 80004a8:	0ff6      	lsrs	r6, r6, #31
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d01b      	beq.n	80004e6 <__aeabi_fdiv+0x76>
 80004ae:	2bff      	cmp	r3, #255	@ 0xff
 80004b0:	d013      	beq.n	80004da <__aeabi_fdiv+0x6a>
 80004b2:	4642      	mov	r2, r8
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	00d2      	lsls	r2, r2, #3
 80004b8:	04c9      	lsls	r1, r1, #19
 80004ba:	4311      	orrs	r1, r2
 80004bc:	4688      	mov	r8, r1
 80004be:	2000      	movs	r0, #0
 80004c0:	3b7f      	subs	r3, #127	@ 0x7f
 80004c2:	0029      	movs	r1, r5
 80004c4:	1aff      	subs	r7, r7, r3
 80004c6:	464b      	mov	r3, r9
 80004c8:	4071      	eors	r1, r6
 80004ca:	b2c9      	uxtb	r1, r1
 80004cc:	2b0f      	cmp	r3, #15
 80004ce:	d900      	bls.n	80004d2 <__aeabi_fdiv+0x62>
 80004d0:	e0b5      	b.n	800063e <__aeabi_fdiv+0x1ce>
 80004d2:	4a74      	ldr	r2, [pc, #464]	@ (80006a4 <__aeabi_fdiv+0x234>)
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	58d3      	ldr	r3, [r2, r3]
 80004d8:	469f      	mov	pc, r3
 80004da:	4643      	mov	r3, r8
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d13f      	bne.n	8000560 <__aeabi_fdiv+0xf0>
 80004e0:	3fff      	subs	r7, #255	@ 0xff
 80004e2:	3302      	adds	r3, #2
 80004e4:	e003      	b.n	80004ee <__aeabi_fdiv+0x7e>
 80004e6:	4643      	mov	r3, r8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d12d      	bne.n	8000548 <__aeabi_fdiv+0xd8>
 80004ec:	2301      	movs	r3, #1
 80004ee:	0029      	movs	r1, r5
 80004f0:	464a      	mov	r2, r9
 80004f2:	4071      	eors	r1, r6
 80004f4:	b2c9      	uxtb	r1, r1
 80004f6:	431a      	orrs	r2, r3
 80004f8:	2a0e      	cmp	r2, #14
 80004fa:	d838      	bhi.n	800056e <__aeabi_fdiv+0xfe>
 80004fc:	486a      	ldr	r0, [pc, #424]	@ (80006a8 <__aeabi_fdiv+0x238>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	5882      	ldr	r2, [r0, r2]
 8000502:	4697      	mov	pc, r2
 8000504:	2c00      	cmp	r4, #0
 8000506:	d113      	bne.n	8000530 <__aeabi_fdiv+0xc0>
 8000508:	2304      	movs	r3, #4
 800050a:	4699      	mov	r9, r3
 800050c:	3b03      	subs	r3, #3
 800050e:	2700      	movs	r7, #0
 8000510:	469a      	mov	sl, r3
 8000512:	e7c4      	b.n	800049e <__aeabi_fdiv+0x2e>
 8000514:	2c00      	cmp	r4, #0
 8000516:	d105      	bne.n	8000524 <__aeabi_fdiv+0xb4>
 8000518:	2308      	movs	r3, #8
 800051a:	4699      	mov	r9, r3
 800051c:	3b06      	subs	r3, #6
 800051e:	27ff      	movs	r7, #255	@ 0xff
 8000520:	469a      	mov	sl, r3
 8000522:	e7bc      	b.n	800049e <__aeabi_fdiv+0x2e>
 8000524:	230c      	movs	r3, #12
 8000526:	4699      	mov	r9, r3
 8000528:	3b09      	subs	r3, #9
 800052a:	27ff      	movs	r7, #255	@ 0xff
 800052c:	469a      	mov	sl, r3
 800052e:	e7b6      	b.n	800049e <__aeabi_fdiv+0x2e>
 8000530:	0020      	movs	r0, r4
 8000532:	f000 fd29 	bl	8000f88 <__clzsi2>
 8000536:	2776      	movs	r7, #118	@ 0x76
 8000538:	1f43      	subs	r3, r0, #5
 800053a:	409c      	lsls	r4, r3
 800053c:	2300      	movs	r3, #0
 800053e:	427f      	negs	r7, r7
 8000540:	4699      	mov	r9, r3
 8000542:	469a      	mov	sl, r3
 8000544:	1a3f      	subs	r7, r7, r0
 8000546:	e7aa      	b.n	800049e <__aeabi_fdiv+0x2e>
 8000548:	4640      	mov	r0, r8
 800054a:	f000 fd1d 	bl	8000f88 <__clzsi2>
 800054e:	4642      	mov	r2, r8
 8000550:	1f43      	subs	r3, r0, #5
 8000552:	409a      	lsls	r2, r3
 8000554:	2376      	movs	r3, #118	@ 0x76
 8000556:	425b      	negs	r3, r3
 8000558:	1a1b      	subs	r3, r3, r0
 800055a:	4690      	mov	r8, r2
 800055c:	2000      	movs	r0, #0
 800055e:	e7b0      	b.n	80004c2 <__aeabi_fdiv+0x52>
 8000560:	2303      	movs	r3, #3
 8000562:	464a      	mov	r2, r9
 8000564:	431a      	orrs	r2, r3
 8000566:	4691      	mov	r9, r2
 8000568:	2003      	movs	r0, #3
 800056a:	33fc      	adds	r3, #252	@ 0xfc
 800056c:	e7a9      	b.n	80004c2 <__aeabi_fdiv+0x52>
 800056e:	000d      	movs	r5, r1
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	2200      	movs	r2, #0
 8000574:	05c0      	lsls	r0, r0, #23
 8000576:	07ed      	lsls	r5, r5, #31
 8000578:	4310      	orrs	r0, r2
 800057a:	4328      	orrs	r0, r5
 800057c:	bce0      	pop	{r5, r6, r7}
 800057e:	46ba      	mov	sl, r7
 8000580:	46b1      	mov	r9, r6
 8000582:	46a8      	mov	r8, r5
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	000d      	movs	r5, r1
 8000588:	2000      	movs	r0, #0
 800058a:	2200      	movs	r2, #0
 800058c:	e7f2      	b.n	8000574 <__aeabi_fdiv+0x104>
 800058e:	4653      	mov	r3, sl
 8000590:	2b02      	cmp	r3, #2
 8000592:	d0ed      	beq.n	8000570 <__aeabi_fdiv+0x100>
 8000594:	2b03      	cmp	r3, #3
 8000596:	d033      	beq.n	8000600 <__aeabi_fdiv+0x190>
 8000598:	46a0      	mov	r8, r4
 800059a:	2b01      	cmp	r3, #1
 800059c:	d105      	bne.n	80005aa <__aeabi_fdiv+0x13a>
 800059e:	2000      	movs	r0, #0
 80005a0:	2200      	movs	r2, #0
 80005a2:	e7e7      	b.n	8000574 <__aeabi_fdiv+0x104>
 80005a4:	0035      	movs	r5, r6
 80005a6:	2803      	cmp	r0, #3
 80005a8:	d07a      	beq.n	80006a0 <__aeabi_fdiv+0x230>
 80005aa:	003b      	movs	r3, r7
 80005ac:	337f      	adds	r3, #127	@ 0x7f
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dd2d      	ble.n	800060e <__aeabi_fdiv+0x19e>
 80005b2:	4642      	mov	r2, r8
 80005b4:	0752      	lsls	r2, r2, #29
 80005b6:	d007      	beq.n	80005c8 <__aeabi_fdiv+0x158>
 80005b8:	220f      	movs	r2, #15
 80005ba:	4641      	mov	r1, r8
 80005bc:	400a      	ands	r2, r1
 80005be:	2a04      	cmp	r2, #4
 80005c0:	d002      	beq.n	80005c8 <__aeabi_fdiv+0x158>
 80005c2:	2204      	movs	r2, #4
 80005c4:	4694      	mov	ip, r2
 80005c6:	44e0      	add	r8, ip
 80005c8:	4642      	mov	r2, r8
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	d505      	bpl.n	80005da <__aeabi_fdiv+0x16a>
 80005ce:	4642      	mov	r2, r8
 80005d0:	4b36      	ldr	r3, [pc, #216]	@ (80006ac <__aeabi_fdiv+0x23c>)
 80005d2:	401a      	ands	r2, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4690      	mov	r8, r2
 80005d8:	3380      	adds	r3, #128	@ 0x80
 80005da:	2bfe      	cmp	r3, #254	@ 0xfe
 80005dc:	dcc8      	bgt.n	8000570 <__aeabi_fdiv+0x100>
 80005de:	4642      	mov	r2, r8
 80005e0:	0192      	lsls	r2, r2, #6
 80005e2:	0a52      	lsrs	r2, r2, #9
 80005e4:	b2d8      	uxtb	r0, r3
 80005e6:	e7c5      	b.n	8000574 <__aeabi_fdiv+0x104>
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	2500      	movs	r5, #0
 80005ec:	20ff      	movs	r0, #255	@ 0xff
 80005ee:	03d2      	lsls	r2, r2, #15
 80005f0:	e7c0      	b.n	8000574 <__aeabi_fdiv+0x104>
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	03d2      	lsls	r2, r2, #15
 80005f6:	4214      	tst	r4, r2
 80005f8:	d002      	beq.n	8000600 <__aeabi_fdiv+0x190>
 80005fa:	4643      	mov	r3, r8
 80005fc:	4213      	tst	r3, r2
 80005fe:	d049      	beq.n	8000694 <__aeabi_fdiv+0x224>
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	4322      	orrs	r2, r4
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	20ff      	movs	r0, #255	@ 0xff
 800060a:	0a52      	lsrs	r2, r2, #9
 800060c:	e7b2      	b.n	8000574 <__aeabi_fdiv+0x104>
 800060e:	2201      	movs	r2, #1
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	2b1b      	cmp	r3, #27
 8000614:	dcc3      	bgt.n	800059e <__aeabi_fdiv+0x12e>
 8000616:	4642      	mov	r2, r8
 8000618:	40da      	lsrs	r2, r3
 800061a:	4643      	mov	r3, r8
 800061c:	379e      	adds	r7, #158	@ 0x9e
 800061e:	40bb      	lsls	r3, r7
 8000620:	1e59      	subs	r1, r3, #1
 8000622:	418b      	sbcs	r3, r1
 8000624:	431a      	orrs	r2, r3
 8000626:	0753      	lsls	r3, r2, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fdiv+0x1c4>
 800062a:	230f      	movs	r3, #15
 800062c:	4013      	ands	r3, r2
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fdiv+0x1c4>
 8000632:	3204      	adds	r2, #4
 8000634:	0153      	lsls	r3, r2, #5
 8000636:	d529      	bpl.n	800068c <__aeabi_fdiv+0x21c>
 8000638:	2001      	movs	r0, #1
 800063a:	2200      	movs	r2, #0
 800063c:	e79a      	b.n	8000574 <__aeabi_fdiv+0x104>
 800063e:	4642      	mov	r2, r8
 8000640:	0163      	lsls	r3, r4, #5
 8000642:	0155      	lsls	r5, r2, #5
 8000644:	42ab      	cmp	r3, r5
 8000646:	d215      	bcs.n	8000674 <__aeabi_fdiv+0x204>
 8000648:	201b      	movs	r0, #27
 800064a:	2200      	movs	r2, #0
 800064c:	3f01      	subs	r7, #1
 800064e:	2601      	movs	r6, #1
 8000650:	001c      	movs	r4, r3
 8000652:	0052      	lsls	r2, r2, #1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2c00      	cmp	r4, #0
 8000658:	db01      	blt.n	800065e <__aeabi_fdiv+0x1ee>
 800065a:	429d      	cmp	r5, r3
 800065c:	d801      	bhi.n	8000662 <__aeabi_fdiv+0x1f2>
 800065e:	1b5b      	subs	r3, r3, r5
 8000660:	4332      	orrs	r2, r6
 8000662:	3801      	subs	r0, #1
 8000664:	2800      	cmp	r0, #0
 8000666:	d1f3      	bne.n	8000650 <__aeabi_fdiv+0x1e0>
 8000668:	1e58      	subs	r0, r3, #1
 800066a:	4183      	sbcs	r3, r0
 800066c:	4313      	orrs	r3, r2
 800066e:	4698      	mov	r8, r3
 8000670:	000d      	movs	r5, r1
 8000672:	e79a      	b.n	80005aa <__aeabi_fdiv+0x13a>
 8000674:	201a      	movs	r0, #26
 8000676:	2201      	movs	r2, #1
 8000678:	1b5b      	subs	r3, r3, r5
 800067a:	e7e8      	b.n	800064e <__aeabi_fdiv+0x1de>
 800067c:	3b02      	subs	r3, #2
 800067e:	425a      	negs	r2, r3
 8000680:	4153      	adcs	r3, r2
 8000682:	425b      	negs	r3, r3
 8000684:	0035      	movs	r5, r6
 8000686:	2200      	movs	r2, #0
 8000688:	b2d8      	uxtb	r0, r3
 800068a:	e773      	b.n	8000574 <__aeabi_fdiv+0x104>
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	2000      	movs	r0, #0
 8000690:	0a52      	lsrs	r2, r2, #9
 8000692:	e76f      	b.n	8000574 <__aeabi_fdiv+0x104>
 8000694:	431a      	orrs	r2, r3
 8000696:	0252      	lsls	r2, r2, #9
 8000698:	0035      	movs	r5, r6
 800069a:	20ff      	movs	r0, #255	@ 0xff
 800069c:	0a52      	lsrs	r2, r2, #9
 800069e:	e769      	b.n	8000574 <__aeabi_fdiv+0x104>
 80006a0:	4644      	mov	r4, r8
 80006a2:	e7ad      	b.n	8000600 <__aeabi_fdiv+0x190>
 80006a4:	08004ae8 	.word	0x08004ae8
 80006a8:	08004b28 	.word	0x08004b28
 80006ac:	f7ffffff 	.word	0xf7ffffff

080006b0 <__eqsf2>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	0042      	lsls	r2, r0, #1
 80006b4:	024e      	lsls	r6, r1, #9
 80006b6:	004c      	lsls	r4, r1, #1
 80006b8:	0245      	lsls	r5, r0, #9
 80006ba:	0a6d      	lsrs	r5, r5, #9
 80006bc:	0e12      	lsrs	r2, r2, #24
 80006be:	0fc3      	lsrs	r3, r0, #31
 80006c0:	0a76      	lsrs	r6, r6, #9
 80006c2:	0e24      	lsrs	r4, r4, #24
 80006c4:	0fc9      	lsrs	r1, r1, #31
 80006c6:	2aff      	cmp	r2, #255	@ 0xff
 80006c8:	d010      	beq.n	80006ec <__eqsf2+0x3c>
 80006ca:	2cff      	cmp	r4, #255	@ 0xff
 80006cc:	d00c      	beq.n	80006e8 <__eqsf2+0x38>
 80006ce:	2001      	movs	r0, #1
 80006d0:	42a2      	cmp	r2, r4
 80006d2:	d10a      	bne.n	80006ea <__eqsf2+0x3a>
 80006d4:	42b5      	cmp	r5, r6
 80006d6:	d108      	bne.n	80006ea <__eqsf2+0x3a>
 80006d8:	428b      	cmp	r3, r1
 80006da:	d00f      	beq.n	80006fc <__eqsf2+0x4c>
 80006dc:	2a00      	cmp	r2, #0
 80006de:	d104      	bne.n	80006ea <__eqsf2+0x3a>
 80006e0:	0028      	movs	r0, r5
 80006e2:	1e43      	subs	r3, r0, #1
 80006e4:	4198      	sbcs	r0, r3
 80006e6:	e000      	b.n	80006ea <__eqsf2+0x3a>
 80006e8:	2001      	movs	r0, #1
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	2001      	movs	r0, #1
 80006ee:	2cff      	cmp	r4, #255	@ 0xff
 80006f0:	d1fb      	bne.n	80006ea <__eqsf2+0x3a>
 80006f2:	4335      	orrs	r5, r6
 80006f4:	d1f9      	bne.n	80006ea <__eqsf2+0x3a>
 80006f6:	404b      	eors	r3, r1
 80006f8:	0018      	movs	r0, r3
 80006fa:	e7f6      	b.n	80006ea <__eqsf2+0x3a>
 80006fc:	2000      	movs	r0, #0
 80006fe:	e7f4      	b.n	80006ea <__eqsf2+0x3a>

08000700 <__gesf2>:
 8000700:	b530      	push	{r4, r5, lr}
 8000702:	0042      	lsls	r2, r0, #1
 8000704:	0244      	lsls	r4, r0, #9
 8000706:	024d      	lsls	r5, r1, #9
 8000708:	0fc3      	lsrs	r3, r0, #31
 800070a:	0048      	lsls	r0, r1, #1
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	0e12      	lsrs	r2, r2, #24
 8000710:	0a6d      	lsrs	r5, r5, #9
 8000712:	0e00      	lsrs	r0, r0, #24
 8000714:	0fc9      	lsrs	r1, r1, #31
 8000716:	2aff      	cmp	r2, #255	@ 0xff
 8000718:	d019      	beq.n	800074e <__gesf2+0x4e>
 800071a:	28ff      	cmp	r0, #255	@ 0xff
 800071c:	d00b      	beq.n	8000736 <__gesf2+0x36>
 800071e:	2a00      	cmp	r2, #0
 8000720:	d11e      	bne.n	8000760 <__gesf2+0x60>
 8000722:	2800      	cmp	r0, #0
 8000724:	d10b      	bne.n	800073e <__gesf2+0x3e>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d027      	beq.n	800077a <__gesf2+0x7a>
 800072a:	2c00      	cmp	r4, #0
 800072c:	d134      	bne.n	8000798 <__gesf2+0x98>
 800072e:	2900      	cmp	r1, #0
 8000730:	d02f      	beq.n	8000792 <__gesf2+0x92>
 8000732:	0008      	movs	r0, r1
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	2d00      	cmp	r5, #0
 8000738:	d128      	bne.n	800078c <__gesf2+0x8c>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d101      	bne.n	8000742 <__gesf2+0x42>
 800073e:	2c00      	cmp	r4, #0
 8000740:	d0f5      	beq.n	800072e <__gesf2+0x2e>
 8000742:	428b      	cmp	r3, r1
 8000744:	d107      	bne.n	8000756 <__gesf2+0x56>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d023      	beq.n	8000792 <__gesf2+0x92>
 800074a:	0018      	movs	r0, r3
 800074c:	e7f2      	b.n	8000734 <__gesf2+0x34>
 800074e:	2c00      	cmp	r4, #0
 8000750:	d11c      	bne.n	800078c <__gesf2+0x8c>
 8000752:	28ff      	cmp	r0, #255	@ 0xff
 8000754:	d014      	beq.n	8000780 <__gesf2+0x80>
 8000756:	1e58      	subs	r0, r3, #1
 8000758:	2302      	movs	r3, #2
 800075a:	4018      	ands	r0, r3
 800075c:	3801      	subs	r0, #1
 800075e:	e7e9      	b.n	8000734 <__gesf2+0x34>
 8000760:	2800      	cmp	r0, #0
 8000762:	d0f8      	beq.n	8000756 <__gesf2+0x56>
 8000764:	428b      	cmp	r3, r1
 8000766:	d1f6      	bne.n	8000756 <__gesf2+0x56>
 8000768:	4282      	cmp	r2, r0
 800076a:	dcf4      	bgt.n	8000756 <__gesf2+0x56>
 800076c:	dbeb      	blt.n	8000746 <__gesf2+0x46>
 800076e:	42ac      	cmp	r4, r5
 8000770:	d8f1      	bhi.n	8000756 <__gesf2+0x56>
 8000772:	2000      	movs	r0, #0
 8000774:	42ac      	cmp	r4, r5
 8000776:	d2dd      	bcs.n	8000734 <__gesf2+0x34>
 8000778:	e7e5      	b.n	8000746 <__gesf2+0x46>
 800077a:	2c00      	cmp	r4, #0
 800077c:	d0da      	beq.n	8000734 <__gesf2+0x34>
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x56>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d103      	bne.n	800078c <__gesf2+0x8c>
 8000784:	428b      	cmp	r3, r1
 8000786:	d1e6      	bne.n	8000756 <__gesf2+0x56>
 8000788:	2000      	movs	r0, #0
 800078a:	e7d3      	b.n	8000734 <__gesf2+0x34>
 800078c:	2002      	movs	r0, #2
 800078e:	4240      	negs	r0, r0
 8000790:	e7d0      	b.n	8000734 <__gesf2+0x34>
 8000792:	2001      	movs	r0, #1
 8000794:	4240      	negs	r0, r0
 8000796:	e7cd      	b.n	8000734 <__gesf2+0x34>
 8000798:	428b      	cmp	r3, r1
 800079a:	d0e8      	beq.n	800076e <__gesf2+0x6e>
 800079c:	e7db      	b.n	8000756 <__gesf2+0x56>
 800079e:	46c0      	nop			@ (mov r8, r8)

080007a0 <__lesf2>:
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	0042      	lsls	r2, r0, #1
 80007a4:	0244      	lsls	r4, r0, #9
 80007a6:	024d      	lsls	r5, r1, #9
 80007a8:	0fc3      	lsrs	r3, r0, #31
 80007aa:	0048      	lsls	r0, r1, #1
 80007ac:	0a64      	lsrs	r4, r4, #9
 80007ae:	0e12      	lsrs	r2, r2, #24
 80007b0:	0a6d      	lsrs	r5, r5, #9
 80007b2:	0e00      	lsrs	r0, r0, #24
 80007b4:	0fc9      	lsrs	r1, r1, #31
 80007b6:	2aff      	cmp	r2, #255	@ 0xff
 80007b8:	d01a      	beq.n	80007f0 <__lesf2+0x50>
 80007ba:	28ff      	cmp	r0, #255	@ 0xff
 80007bc:	d00e      	beq.n	80007dc <__lesf2+0x3c>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d11e      	bne.n	8000800 <__lesf2+0x60>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d10e      	bne.n	80007e4 <__lesf2+0x44>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d02a      	beq.n	8000820 <__lesf2+0x80>
 80007ca:	2c00      	cmp	r4, #0
 80007cc:	d00c      	beq.n	80007e8 <__lesf2+0x48>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d01d      	beq.n	800080e <__lesf2+0x6e>
 80007d2:	1e58      	subs	r0, r3, #1
 80007d4:	2302      	movs	r3, #2
 80007d6:	4018      	ands	r0, r3
 80007d8:	3801      	subs	r0, #1
 80007da:	e010      	b.n	80007fe <__lesf2+0x5e>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d10d      	bne.n	80007fc <__lesf2+0x5c>
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d120      	bne.n	8000826 <__lesf2+0x86>
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d11e      	bne.n	8000826 <__lesf2+0x86>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d023      	beq.n	8000834 <__lesf2+0x94>
 80007ec:	0008      	movs	r0, r1
 80007ee:	e006      	b.n	80007fe <__lesf2+0x5e>
 80007f0:	2c00      	cmp	r4, #0
 80007f2:	d103      	bne.n	80007fc <__lesf2+0x5c>
 80007f4:	28ff      	cmp	r0, #255	@ 0xff
 80007f6:	d1ec      	bne.n	80007d2 <__lesf2+0x32>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d017      	beq.n	800082c <__lesf2+0x8c>
 80007fc:	2002      	movs	r0, #2
 80007fe:	bd30      	pop	{r4, r5, pc}
 8000800:	2800      	cmp	r0, #0
 8000802:	d0e6      	beq.n	80007d2 <__lesf2+0x32>
 8000804:	428b      	cmp	r3, r1
 8000806:	d1e4      	bne.n	80007d2 <__lesf2+0x32>
 8000808:	4282      	cmp	r2, r0
 800080a:	dce2      	bgt.n	80007d2 <__lesf2+0x32>
 800080c:	db04      	blt.n	8000818 <__lesf2+0x78>
 800080e:	42ac      	cmp	r4, r5
 8000810:	d8df      	bhi.n	80007d2 <__lesf2+0x32>
 8000812:	2000      	movs	r0, #0
 8000814:	42ac      	cmp	r4, r5
 8000816:	d2f2      	bcs.n	80007fe <__lesf2+0x5e>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <__lesf2+0x94>
 800081c:	0018      	movs	r0, r3
 800081e:	e7ee      	b.n	80007fe <__lesf2+0x5e>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d0ec      	beq.n	80007fe <__lesf2+0x5e>
 8000824:	e7d5      	b.n	80007d2 <__lesf2+0x32>
 8000826:	428b      	cmp	r3, r1
 8000828:	d1d3      	bne.n	80007d2 <__lesf2+0x32>
 800082a:	e7f5      	b.n	8000818 <__lesf2+0x78>
 800082c:	2000      	movs	r0, #0
 800082e:	428b      	cmp	r3, r1
 8000830:	d0e5      	beq.n	80007fe <__lesf2+0x5e>
 8000832:	e7ce      	b.n	80007d2 <__lesf2+0x32>
 8000834:	2001      	movs	r0, #1
 8000836:	4240      	negs	r0, r0
 8000838:	e7e1      	b.n	80007fe <__lesf2+0x5e>
 800083a:	46c0      	nop			@ (mov r8, r8)

0800083c <__aeabi_fmul>:
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	464f      	mov	r7, r9
 8000840:	4646      	mov	r6, r8
 8000842:	46d6      	mov	lr, sl
 8000844:	0243      	lsls	r3, r0, #9
 8000846:	0a5b      	lsrs	r3, r3, #9
 8000848:	0045      	lsls	r5, r0, #1
 800084a:	b5c0      	push	{r6, r7, lr}
 800084c:	4699      	mov	r9, r3
 800084e:	1c0f      	adds	r7, r1, #0
 8000850:	0e2d      	lsrs	r5, r5, #24
 8000852:	0fc6      	lsrs	r6, r0, #31
 8000854:	2d00      	cmp	r5, #0
 8000856:	d100      	bne.n	800085a <__aeabi_fmul+0x1e>
 8000858:	e088      	b.n	800096c <__aeabi_fmul+0x130>
 800085a:	2dff      	cmp	r5, #255	@ 0xff
 800085c:	d100      	bne.n	8000860 <__aeabi_fmul+0x24>
 800085e:	e08d      	b.n	800097c <__aeabi_fmul+0x140>
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	431a      	orrs	r2, r3
 8000868:	2300      	movs	r3, #0
 800086a:	4691      	mov	r9, r2
 800086c:	4698      	mov	r8, r3
 800086e:	469a      	mov	sl, r3
 8000870:	3d7f      	subs	r5, #127	@ 0x7f
 8000872:	027c      	lsls	r4, r7, #9
 8000874:	007b      	lsls	r3, r7, #1
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	0e1b      	lsrs	r3, r3, #24
 800087a:	0fff      	lsrs	r7, r7, #31
 800087c:	2b00      	cmp	r3, #0
 800087e:	d068      	beq.n	8000952 <__aeabi_fmul+0x116>
 8000880:	2bff      	cmp	r3, #255	@ 0xff
 8000882:	d021      	beq.n	80008c8 <__aeabi_fmul+0x8c>
 8000884:	2280      	movs	r2, #128	@ 0x80
 8000886:	00e4      	lsls	r4, r4, #3
 8000888:	04d2      	lsls	r2, r2, #19
 800088a:	4314      	orrs	r4, r2
 800088c:	4642      	mov	r2, r8
 800088e:	3b7f      	subs	r3, #127	@ 0x7f
 8000890:	195b      	adds	r3, r3, r5
 8000892:	2100      	movs	r1, #0
 8000894:	1c5d      	adds	r5, r3, #1
 8000896:	2a0a      	cmp	r2, #10
 8000898:	dc2e      	bgt.n	80008f8 <__aeabi_fmul+0xbc>
 800089a:	407e      	eors	r6, r7
 800089c:	4642      	mov	r2, r8
 800089e:	2a02      	cmp	r2, #2
 80008a0:	dc23      	bgt.n	80008ea <__aeabi_fmul+0xae>
 80008a2:	3a01      	subs	r2, #1
 80008a4:	2a01      	cmp	r2, #1
 80008a6:	d900      	bls.n	80008aa <__aeabi_fmul+0x6e>
 80008a8:	e0bd      	b.n	8000a26 <__aeabi_fmul+0x1ea>
 80008aa:	2902      	cmp	r1, #2
 80008ac:	d06e      	beq.n	800098c <__aeabi_fmul+0x150>
 80008ae:	2901      	cmp	r1, #1
 80008b0:	d12c      	bne.n	800090c <__aeabi_fmul+0xd0>
 80008b2:	2000      	movs	r0, #0
 80008b4:	2200      	movs	r2, #0
 80008b6:	05c0      	lsls	r0, r0, #23
 80008b8:	07f6      	lsls	r6, r6, #31
 80008ba:	4310      	orrs	r0, r2
 80008bc:	4330      	orrs	r0, r6
 80008be:	bce0      	pop	{r5, r6, r7}
 80008c0:	46ba      	mov	sl, r7
 80008c2:	46b1      	mov	r9, r6
 80008c4:	46a8      	mov	r8, r5
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c8:	002b      	movs	r3, r5
 80008ca:	33ff      	adds	r3, #255	@ 0xff
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d065      	beq.n	800099c <__aeabi_fmul+0x160>
 80008d0:	2203      	movs	r2, #3
 80008d2:	4641      	mov	r1, r8
 80008d4:	4311      	orrs	r1, r2
 80008d6:	0032      	movs	r2, r6
 80008d8:	3501      	adds	r5, #1
 80008da:	4688      	mov	r8, r1
 80008dc:	407a      	eors	r2, r7
 80008de:	35ff      	adds	r5, #255	@ 0xff
 80008e0:	290a      	cmp	r1, #10
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_fmul+0xaa>
 80008e4:	e0d8      	b.n	8000a98 <__aeabi_fmul+0x25c>
 80008e6:	0016      	movs	r6, r2
 80008e8:	2103      	movs	r1, #3
 80008ea:	4640      	mov	r0, r8
 80008ec:	2201      	movs	r2, #1
 80008ee:	4082      	lsls	r2, r0
 80008f0:	20a6      	movs	r0, #166	@ 0xa6
 80008f2:	00c0      	lsls	r0, r0, #3
 80008f4:	4202      	tst	r2, r0
 80008f6:	d020      	beq.n	800093a <__aeabi_fmul+0xfe>
 80008f8:	4653      	mov	r3, sl
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d046      	beq.n	800098c <__aeabi_fmul+0x150>
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d100      	bne.n	8000904 <__aeabi_fmul+0xc8>
 8000902:	e0bb      	b.n	8000a7c <__aeabi_fmul+0x240>
 8000904:	4651      	mov	r1, sl
 8000906:	464c      	mov	r4, r9
 8000908:	2901      	cmp	r1, #1
 800090a:	d0d2      	beq.n	80008b2 <__aeabi_fmul+0x76>
 800090c:	002b      	movs	r3, r5
 800090e:	337f      	adds	r3, #127	@ 0x7f
 8000910:	2b00      	cmp	r3, #0
 8000912:	dd70      	ble.n	80009f6 <__aeabi_fmul+0x1ba>
 8000914:	0762      	lsls	r2, r4, #29
 8000916:	d004      	beq.n	8000922 <__aeabi_fmul+0xe6>
 8000918:	220f      	movs	r2, #15
 800091a:	4022      	ands	r2, r4
 800091c:	2a04      	cmp	r2, #4
 800091e:	d000      	beq.n	8000922 <__aeabi_fmul+0xe6>
 8000920:	3404      	adds	r4, #4
 8000922:	0122      	lsls	r2, r4, #4
 8000924:	d503      	bpl.n	800092e <__aeabi_fmul+0xf2>
 8000926:	4b63      	ldr	r3, [pc, #396]	@ (8000ab4 <__aeabi_fmul+0x278>)
 8000928:	401c      	ands	r4, r3
 800092a:	002b      	movs	r3, r5
 800092c:	3380      	adds	r3, #128	@ 0x80
 800092e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000930:	dc2c      	bgt.n	800098c <__aeabi_fmul+0x150>
 8000932:	01a2      	lsls	r2, r4, #6
 8000934:	0a52      	lsrs	r2, r2, #9
 8000936:	b2d8      	uxtb	r0, r3
 8000938:	e7bd      	b.n	80008b6 <__aeabi_fmul+0x7a>
 800093a:	2090      	movs	r0, #144	@ 0x90
 800093c:	0080      	lsls	r0, r0, #2
 800093e:	4202      	tst	r2, r0
 8000940:	d127      	bne.n	8000992 <__aeabi_fmul+0x156>
 8000942:	38b9      	subs	r0, #185	@ 0xb9
 8000944:	38ff      	subs	r0, #255	@ 0xff
 8000946:	4210      	tst	r0, r2
 8000948:	d06d      	beq.n	8000a26 <__aeabi_fmul+0x1ea>
 800094a:	003e      	movs	r6, r7
 800094c:	46a1      	mov	r9, r4
 800094e:	468a      	mov	sl, r1
 8000950:	e7d2      	b.n	80008f8 <__aeabi_fmul+0xbc>
 8000952:	2c00      	cmp	r4, #0
 8000954:	d141      	bne.n	80009da <__aeabi_fmul+0x19e>
 8000956:	2301      	movs	r3, #1
 8000958:	4642      	mov	r2, r8
 800095a:	431a      	orrs	r2, r3
 800095c:	4690      	mov	r8, r2
 800095e:	002b      	movs	r3, r5
 8000960:	4642      	mov	r2, r8
 8000962:	2101      	movs	r1, #1
 8000964:	1c5d      	adds	r5, r3, #1
 8000966:	2a0a      	cmp	r2, #10
 8000968:	dd97      	ble.n	800089a <__aeabi_fmul+0x5e>
 800096a:	e7c5      	b.n	80008f8 <__aeabi_fmul+0xbc>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d126      	bne.n	80009be <__aeabi_fmul+0x182>
 8000970:	2304      	movs	r3, #4
 8000972:	4698      	mov	r8, r3
 8000974:	3b03      	subs	r3, #3
 8000976:	2500      	movs	r5, #0
 8000978:	469a      	mov	sl, r3
 800097a:	e77a      	b.n	8000872 <__aeabi_fmul+0x36>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d118      	bne.n	80009b2 <__aeabi_fmul+0x176>
 8000980:	2308      	movs	r3, #8
 8000982:	4698      	mov	r8, r3
 8000984:	3b06      	subs	r3, #6
 8000986:	25ff      	movs	r5, #255	@ 0xff
 8000988:	469a      	mov	sl, r3
 800098a:	e772      	b.n	8000872 <__aeabi_fmul+0x36>
 800098c:	20ff      	movs	r0, #255	@ 0xff
 800098e:	2200      	movs	r2, #0
 8000990:	e791      	b.n	80008b6 <__aeabi_fmul+0x7a>
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	2600      	movs	r6, #0
 8000996:	20ff      	movs	r0, #255	@ 0xff
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	e78c      	b.n	80008b6 <__aeabi_fmul+0x7a>
 800099c:	4641      	mov	r1, r8
 800099e:	2202      	movs	r2, #2
 80009a0:	3501      	adds	r5, #1
 80009a2:	4311      	orrs	r1, r2
 80009a4:	4688      	mov	r8, r1
 80009a6:	35ff      	adds	r5, #255	@ 0xff
 80009a8:	290a      	cmp	r1, #10
 80009aa:	dca5      	bgt.n	80008f8 <__aeabi_fmul+0xbc>
 80009ac:	2102      	movs	r1, #2
 80009ae:	407e      	eors	r6, r7
 80009b0:	e774      	b.n	800089c <__aeabi_fmul+0x60>
 80009b2:	230c      	movs	r3, #12
 80009b4:	4698      	mov	r8, r3
 80009b6:	3b09      	subs	r3, #9
 80009b8:	25ff      	movs	r5, #255	@ 0xff
 80009ba:	469a      	mov	sl, r3
 80009bc:	e759      	b.n	8000872 <__aeabi_fmul+0x36>
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fae2 	bl	8000f88 <__clzsi2>
 80009c4:	464a      	mov	r2, r9
 80009c6:	1f43      	subs	r3, r0, #5
 80009c8:	2576      	movs	r5, #118	@ 0x76
 80009ca:	409a      	lsls	r2, r3
 80009cc:	2300      	movs	r3, #0
 80009ce:	426d      	negs	r5, r5
 80009d0:	4691      	mov	r9, r2
 80009d2:	4698      	mov	r8, r3
 80009d4:	469a      	mov	sl, r3
 80009d6:	1a2d      	subs	r5, r5, r0
 80009d8:	e74b      	b.n	8000872 <__aeabi_fmul+0x36>
 80009da:	0020      	movs	r0, r4
 80009dc:	f000 fad4 	bl	8000f88 <__clzsi2>
 80009e0:	4642      	mov	r2, r8
 80009e2:	1f43      	subs	r3, r0, #5
 80009e4:	409c      	lsls	r4, r3
 80009e6:	1a2b      	subs	r3, r5, r0
 80009e8:	3b76      	subs	r3, #118	@ 0x76
 80009ea:	2100      	movs	r1, #0
 80009ec:	1c5d      	adds	r5, r3, #1
 80009ee:	2a0a      	cmp	r2, #10
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_fmul+0x1b8>
 80009f2:	e752      	b.n	800089a <__aeabi_fmul+0x5e>
 80009f4:	e780      	b.n	80008f8 <__aeabi_fmul+0xbc>
 80009f6:	2201      	movs	r2, #1
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b1b      	cmp	r3, #27
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_fmul+0x1c4>
 80009fe:	e758      	b.n	80008b2 <__aeabi_fmul+0x76>
 8000a00:	359e      	adds	r5, #158	@ 0x9e
 8000a02:	0022      	movs	r2, r4
 8000a04:	40ac      	lsls	r4, r5
 8000a06:	40da      	lsrs	r2, r3
 8000a08:	1e63      	subs	r3, r4, #1
 8000a0a:	419c      	sbcs	r4, r3
 8000a0c:	4322      	orrs	r2, r4
 8000a0e:	0753      	lsls	r3, r2, #29
 8000a10:	d004      	beq.n	8000a1c <__aeabi_fmul+0x1e0>
 8000a12:	230f      	movs	r3, #15
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fmul+0x1e0>
 8000a1a:	3204      	adds	r2, #4
 8000a1c:	0153      	lsls	r3, r2, #5
 8000a1e:	d537      	bpl.n	8000a90 <__aeabi_fmul+0x254>
 8000a20:	2001      	movs	r0, #1
 8000a22:	2200      	movs	r2, #0
 8000a24:	e747      	b.n	80008b6 <__aeabi_fmul+0x7a>
 8000a26:	0c21      	lsrs	r1, r4, #16
 8000a28:	464a      	mov	r2, r9
 8000a2a:	0424      	lsls	r4, r4, #16
 8000a2c:	0c24      	lsrs	r4, r4, #16
 8000a2e:	0027      	movs	r7, r4
 8000a30:	0c10      	lsrs	r0, r2, #16
 8000a32:	0412      	lsls	r2, r2, #16
 8000a34:	0c12      	lsrs	r2, r2, #16
 8000a36:	4344      	muls	r4, r0
 8000a38:	4357      	muls	r7, r2
 8000a3a:	4348      	muls	r0, r1
 8000a3c:	4351      	muls	r1, r2
 8000a3e:	0c3a      	lsrs	r2, r7, #16
 8000a40:	1909      	adds	r1, r1, r4
 8000a42:	1852      	adds	r2, r2, r1
 8000a44:	4294      	cmp	r4, r2
 8000a46:	d903      	bls.n	8000a50 <__aeabi_fmul+0x214>
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	4460      	add	r0, ip
 8000a50:	043f      	lsls	r7, r7, #16
 8000a52:	0411      	lsls	r1, r2, #16
 8000a54:	0c3f      	lsrs	r7, r7, #16
 8000a56:	19c9      	adds	r1, r1, r7
 8000a58:	018c      	lsls	r4, r1, #6
 8000a5a:	1e67      	subs	r7, r4, #1
 8000a5c:	41bc      	sbcs	r4, r7
 8000a5e:	0c12      	lsrs	r2, r2, #16
 8000a60:	0e89      	lsrs	r1, r1, #26
 8000a62:	1812      	adds	r2, r2, r0
 8000a64:	430c      	orrs	r4, r1
 8000a66:	0192      	lsls	r2, r2, #6
 8000a68:	4314      	orrs	r4, r2
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	d50e      	bpl.n	8000a8c <__aeabi_fmul+0x250>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	0862      	lsrs	r2, r4, #1
 8000a72:	401c      	ands	r4, r3
 8000a74:	4314      	orrs	r4, r2
 8000a76:	e749      	b.n	800090c <__aeabi_fmul+0xd0>
 8000a78:	003e      	movs	r6, r7
 8000a7a:	46a1      	mov	r9, r4
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	464b      	mov	r3, r9
 8000a80:	03d2      	lsls	r2, r2, #15
 8000a82:	431a      	orrs	r2, r3
 8000a84:	0252      	lsls	r2, r2, #9
 8000a86:	20ff      	movs	r0, #255	@ 0xff
 8000a88:	0a52      	lsrs	r2, r2, #9
 8000a8a:	e714      	b.n	80008b6 <__aeabi_fmul+0x7a>
 8000a8c:	001d      	movs	r5, r3
 8000a8e:	e73d      	b.n	800090c <__aeabi_fmul+0xd0>
 8000a90:	0192      	lsls	r2, r2, #6
 8000a92:	2000      	movs	r0, #0
 8000a94:	0a52      	lsrs	r2, r2, #9
 8000a96:	e70e      	b.n	80008b6 <__aeabi_fmul+0x7a>
 8000a98:	290f      	cmp	r1, #15
 8000a9a:	d1ed      	bne.n	8000a78 <__aeabi_fmul+0x23c>
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	464b      	mov	r3, r9
 8000aa0:	03d2      	lsls	r2, r2, #15
 8000aa2:	4213      	tst	r3, r2
 8000aa4:	d0ea      	beq.n	8000a7c <__aeabi_fmul+0x240>
 8000aa6:	4214      	tst	r4, r2
 8000aa8:	d1e8      	bne.n	8000a7c <__aeabi_fmul+0x240>
 8000aaa:	003e      	movs	r6, r7
 8000aac:	20ff      	movs	r0, #255	@ 0xff
 8000aae:	4322      	orrs	r2, r4
 8000ab0:	e701      	b.n	80008b6 <__aeabi_fmul+0x7a>
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	f7ffffff 	.word	0xf7ffffff

08000ab8 <__aeabi_fsub>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	4647      	mov	r7, r8
 8000abc:	46ce      	mov	lr, r9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	0243      	lsls	r3, r0, #9
 8000ac2:	0045      	lsls	r5, r0, #1
 8000ac4:	0a72      	lsrs	r2, r6, #9
 8000ac6:	0fc4      	lsrs	r4, r0, #31
 8000ac8:	0048      	lsls	r0, r1, #1
 8000aca:	b580      	push	{r7, lr}
 8000acc:	4694      	mov	ip, r2
 8000ace:	0a5f      	lsrs	r7, r3, #9
 8000ad0:	0e2d      	lsrs	r5, r5, #24
 8000ad2:	099b      	lsrs	r3, r3, #6
 8000ad4:	0e00      	lsrs	r0, r0, #24
 8000ad6:	0fc9      	lsrs	r1, r1, #31
 8000ad8:	09b6      	lsrs	r6, r6, #6
 8000ada:	28ff      	cmp	r0, #255	@ 0xff
 8000adc:	d024      	beq.n	8000b28 <__aeabi_fsub+0x70>
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4051      	eors	r1, r2
 8000ae2:	1a2a      	subs	r2, r5, r0
 8000ae4:	428c      	cmp	r4, r1
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fsub+0x50>
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_fsub+0x36>
 8000aec:	e16a      	b.n	8000dc4 <__aeabi_fsub+0x30c>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d135      	bne.n	8000b5e <__aeabi_fsub+0xa6>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x40>
 8000af6:	e0a2      	b.n	8000c3e <__aeabi_fsub+0x186>
 8000af8:	1e51      	subs	r1, r2, #1
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x48>
 8000afe:	e124      	b.n	8000d4a <__aeabi_fsub+0x292>
 8000b00:	2aff      	cmp	r2, #255	@ 0xff
 8000b02:	d021      	beq.n	8000b48 <__aeabi_fsub+0x90>
 8000b04:	000a      	movs	r2, r1
 8000b06:	e02f      	b.n	8000b68 <__aeabi_fsub+0xb0>
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	dc00      	bgt.n	8000b0e <__aeabi_fsub+0x56>
 8000b0c:	e167      	b.n	8000dde <__aeabi_fsub+0x326>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d05e      	beq.n	8000bd0 <__aeabi_fsub+0x118>
 8000b12:	2dff      	cmp	r5, #255	@ 0xff
 8000b14:	d018      	beq.n	8000b48 <__aeabi_fsub+0x90>
 8000b16:	2180      	movs	r1, #128	@ 0x80
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	430e      	orrs	r6, r1
 8000b1c:	2a1b      	cmp	r2, #27
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_fsub+0x6a>
 8000b20:	e076      	b.n	8000c10 <__aeabi_fsub+0x158>
 8000b22:	002a      	movs	r2, r5
 8000b24:	3301      	adds	r3, #1
 8000b26:	e032      	b.n	8000b8e <__aeabi_fsub+0xd6>
 8000b28:	002a      	movs	r2, r5
 8000b2a:	3aff      	subs	r2, #255	@ 0xff
 8000b2c:	4691      	mov	r9, r2
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d042      	beq.n	8000bb8 <__aeabi_fsub+0x100>
 8000b32:	428c      	cmp	r4, r1
 8000b34:	d055      	beq.n	8000be2 <__aeabi_fsub+0x12a>
 8000b36:	464a      	mov	r2, r9
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x86>
 8000b3c:	e09c      	b.n	8000c78 <__aeabi_fsub+0x1c0>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fsub+0x8c>
 8000b42:	e077      	b.n	8000c34 <__aeabi_fsub+0x17c>
 8000b44:	000c      	movs	r4, r1
 8000b46:	0033      	movs	r3, r6
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x98>
 8000b4e:	e06e      	b.n	8000c2e <__aeabi_fsub+0x176>
 8000b50:	2280      	movs	r2, #128	@ 0x80
 8000b52:	03d2      	lsls	r2, r2, #15
 8000b54:	4313      	orrs	r3, r2
 8000b56:	025b      	lsls	r3, r3, #9
 8000b58:	20ff      	movs	r0, #255	@ 0xff
 8000b5a:	0a5b      	lsrs	r3, r3, #9
 8000b5c:	e024      	b.n	8000ba8 <__aeabi_fsub+0xf0>
 8000b5e:	2dff      	cmp	r5, #255	@ 0xff
 8000b60:	d0f2      	beq.n	8000b48 <__aeabi_fsub+0x90>
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	04c9      	lsls	r1, r1, #19
 8000b66:	430e      	orrs	r6, r1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2a1b      	cmp	r2, #27
 8000b6c:	dc08      	bgt.n	8000b80 <__aeabi_fsub+0xc8>
 8000b6e:	0031      	movs	r1, r6
 8000b70:	2020      	movs	r0, #32
 8000b72:	40d1      	lsrs	r1, r2
 8000b74:	1a82      	subs	r2, r0, r2
 8000b76:	4096      	lsls	r6, r2
 8000b78:	0032      	movs	r2, r6
 8000b7a:	1e50      	subs	r0, r2, #1
 8000b7c:	4182      	sbcs	r2, r0
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	015a      	lsls	r2, r3, #5
 8000b84:	d460      	bmi.n	8000c48 <__aeabi_fsub+0x190>
 8000b86:	2107      	movs	r1, #7
 8000b88:	002a      	movs	r2, r5
 8000b8a:	4019      	ands	r1, r3
 8000b8c:	d057      	beq.n	8000c3e <__aeabi_fsub+0x186>
 8000b8e:	210f      	movs	r1, #15
 8000b90:	4019      	ands	r1, r3
 8000b92:	2904      	cmp	r1, #4
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fsub+0xe0>
 8000b96:	3304      	adds	r3, #4
 8000b98:	0159      	lsls	r1, r3, #5
 8000b9a:	d550      	bpl.n	8000c3e <__aeabi_fsub+0x186>
 8000b9c:	1c50      	adds	r0, r2, #1
 8000b9e:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba0:	d045      	beq.n	8000c2e <__aeabi_fsub+0x176>
 8000ba2:	019b      	lsls	r3, r3, #6
 8000ba4:	b2c0      	uxtb	r0, r0
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	05c0      	lsls	r0, r0, #23
 8000baa:	4318      	orrs	r0, r3
 8000bac:	07e4      	lsls	r4, r4, #31
 8000bae:	4320      	orrs	r0, r4
 8000bb0:	bcc0      	pop	{r6, r7}
 8000bb2:	46b9      	mov	r9, r7
 8000bb4:	46b0      	mov	r8, r6
 8000bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4051      	eors	r1, r2
 8000bbc:	428c      	cmp	r4, r1
 8000bbe:	d1ba      	bne.n	8000b36 <__aeabi_fsub+0x7e>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d010      	beq.n	8000be8 <__aeabi_fsub+0x130>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x114>
 8000bca:	e098      	b.n	8000cfe <__aeabi_fsub+0x246>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e7bb      	b.n	8000b48 <__aeabi_fsub+0x90>
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d034      	beq.n	8000c3e <__aeabi_fsub+0x186>
 8000bd4:	1e51      	subs	r1, r2, #1
 8000bd6:	2a01      	cmp	r2, #1
 8000bd8:	d06e      	beq.n	8000cb8 <__aeabi_fsub+0x200>
 8000bda:	2aff      	cmp	r2, #255	@ 0xff
 8000bdc:	d0b4      	beq.n	8000b48 <__aeabi_fsub+0x90>
 8000bde:	000a      	movs	r2, r1
 8000be0:	e79c      	b.n	8000b1c <__aeabi_fsub+0x64>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fsub+0x130>
 8000be6:	e088      	b.n	8000cfa <__aeabi_fsub+0x242>
 8000be8:	20fe      	movs	r0, #254	@ 0xfe
 8000bea:	1c6a      	adds	r2, r5, #1
 8000bec:	4210      	tst	r0, r2
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fsub+0x13a>
 8000bf0:	e092      	b.n	8000d18 <__aeabi_fsub+0x260>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fsub+0x140>
 8000bf6:	e0a4      	b.n	8000d42 <__aeabi_fsub+0x28a>
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fsub+0x146>
 8000bfc:	e0cb      	b.n	8000d96 <__aeabi_fsub+0x2de>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_fsub+0x14c>
 8000c02:	e0ca      	b.n	8000d9a <__aeabi_fsub+0x2e2>
 8000c04:	2200      	movs	r2, #0
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	0a5b      	lsrs	r3, r3, #9
 8000c0c:	b2d0      	uxtb	r0, r2
 8000c0e:	e7cb      	b.n	8000ba8 <__aeabi_fsub+0xf0>
 8000c10:	0031      	movs	r1, r6
 8000c12:	2020      	movs	r0, #32
 8000c14:	40d1      	lsrs	r1, r2
 8000c16:	1a82      	subs	r2, r0, r2
 8000c18:	4096      	lsls	r6, r2
 8000c1a:	0032      	movs	r2, r6
 8000c1c:	1e50      	subs	r0, r2, #1
 8000c1e:	4182      	sbcs	r2, r0
 8000c20:	430a      	orrs	r2, r1
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	015a      	lsls	r2, r3, #5
 8000c26:	d5ae      	bpl.n	8000b86 <__aeabi_fsub+0xce>
 8000c28:	1c6a      	adds	r2, r5, #1
 8000c2a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c2c:	d14a      	bne.n	8000cc4 <__aeabi_fsub+0x20c>
 8000c2e:	20ff      	movs	r0, #255	@ 0xff
 8000c30:	2300      	movs	r3, #0
 8000c32:	e7b9      	b.n	8000ba8 <__aeabi_fsub+0xf0>
 8000c34:	22ff      	movs	r2, #255	@ 0xff
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__aeabi_fsub+0x21a>
 8000c3a:	000c      	movs	r4, r1
 8000c3c:	0033      	movs	r3, r6
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	2aff      	cmp	r2, #255	@ 0xff
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fsub+0x18e>
 8000c44:	e781      	b.n	8000b4a <__aeabi_fsub+0x92>
 8000c46:	e7df      	b.n	8000c08 <__aeabi_fsub+0x150>
 8000c48:	019f      	lsls	r7, r3, #6
 8000c4a:	09bf      	lsrs	r7, r7, #6
 8000c4c:	0038      	movs	r0, r7
 8000c4e:	f000 f99b 	bl	8000f88 <__clzsi2>
 8000c52:	3805      	subs	r0, #5
 8000c54:	4087      	lsls	r7, r0
 8000c56:	4285      	cmp	r5, r0
 8000c58:	dc21      	bgt.n	8000c9e <__aeabi_fsub+0x1e6>
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	1b42      	subs	r2, r0, r5
 8000c60:	3201      	adds	r2, #1
 8000c62:	40d3      	lsrs	r3, r2
 8000c64:	1a8a      	subs	r2, r1, r2
 8000c66:	4097      	lsls	r7, r2
 8000c68:	1e7a      	subs	r2, r7, #1
 8000c6a:	4197      	sbcs	r7, r2
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	433b      	orrs	r3, r7
 8000c70:	0759      	lsls	r1, r3, #29
 8000c72:	d000      	beq.n	8000c76 <__aeabi_fsub+0x1be>
 8000c74:	e78b      	b.n	8000b8e <__aeabi_fsub+0xd6>
 8000c76:	e78f      	b.n	8000b98 <__aeabi_fsub+0xe0>
 8000c78:	20fe      	movs	r0, #254	@ 0xfe
 8000c7a:	1c6a      	adds	r2, r5, #1
 8000c7c:	4210      	tst	r0, r2
 8000c7e:	d112      	bne.n	8000ca6 <__aeabi_fsub+0x1ee>
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d152      	bne.n	8000d2a <__aeabi_fsub+0x272>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d07c      	beq.n	8000d82 <__aeabi_fsub+0x2ca>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d0bb      	beq.n	8000c04 <__aeabi_fsub+0x14c>
 8000c8c:	1b9a      	subs	r2, r3, r6
 8000c8e:	0150      	lsls	r0, r2, #5
 8000c90:	d400      	bmi.n	8000c94 <__aeabi_fsub+0x1dc>
 8000c92:	e08b      	b.n	8000dac <__aeabi_fsub+0x2f4>
 8000c94:	2401      	movs	r4, #1
 8000c96:	2200      	movs	r2, #0
 8000c98:	1af3      	subs	r3, r6, r3
 8000c9a:	400c      	ands	r4, r1
 8000c9c:	e7e8      	b.n	8000c70 <__aeabi_fsub+0x1b8>
 8000c9e:	4b56      	ldr	r3, [pc, #344]	@ (8000df8 <__aeabi_fsub+0x340>)
 8000ca0:	1a2a      	subs	r2, r5, r0
 8000ca2:	403b      	ands	r3, r7
 8000ca4:	e7e4      	b.n	8000c70 <__aeabi_fsub+0x1b8>
 8000ca6:	1b9f      	subs	r7, r3, r6
 8000ca8:	017a      	lsls	r2, r7, #5
 8000caa:	d446      	bmi.n	8000d3a <__aeabi_fsub+0x282>
 8000cac:	2f00      	cmp	r7, #0
 8000cae:	d1cd      	bne.n	8000c4c <__aeabi_fsub+0x194>
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e777      	b.n	8000ba8 <__aeabi_fsub+0xf0>
 8000cb8:	199b      	adds	r3, r3, r6
 8000cba:	2501      	movs	r5, #1
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	0159      	lsls	r1, r3, #5
 8000cc0:	d400      	bmi.n	8000cc4 <__aeabi_fsub+0x20c>
 8000cc2:	e760      	b.n	8000b86 <__aeabi_fsub+0xce>
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	484d      	ldr	r0, [pc, #308]	@ (8000dfc <__aeabi_fsub+0x344>)
 8000cc8:	4019      	ands	r1, r3
 8000cca:	085b      	lsrs	r3, r3, #1
 8000ccc:	4003      	ands	r3, r0
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	e7ce      	b.n	8000c70 <__aeabi_fsub+0x1b8>
 8000cd2:	1e57      	subs	r7, r2, #1
 8000cd4:	2a01      	cmp	r2, #1
 8000cd6:	d05a      	beq.n	8000d8e <__aeabi_fsub+0x2d6>
 8000cd8:	000c      	movs	r4, r1
 8000cda:	2aff      	cmp	r2, #255	@ 0xff
 8000cdc:	d033      	beq.n	8000d46 <__aeabi_fsub+0x28e>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2f1b      	cmp	r7, #27
 8000ce2:	dc07      	bgt.n	8000cf4 <__aeabi_fsub+0x23c>
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	1bc9      	subs	r1, r1, r7
 8000ce8:	001a      	movs	r2, r3
 8000cea:	408b      	lsls	r3, r1
 8000cec:	40fa      	lsrs	r2, r7
 8000cee:	1e59      	subs	r1, r3, #1
 8000cf0:	418b      	sbcs	r3, r1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	0005      	movs	r5, r0
 8000cf6:	1ab3      	subs	r3, r6, r2
 8000cf8:	e743      	b.n	8000b82 <__aeabi_fsub+0xca>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d123      	bne.n	8000d46 <__aeabi_fsub+0x28e>
 8000cfe:	22ff      	movs	r2, #255	@ 0xff
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d09b      	beq.n	8000c3c <__aeabi_fsub+0x184>
 8000d04:	1e51      	subs	r1, r2, #1
 8000d06:	2a01      	cmp	r2, #1
 8000d08:	d0d6      	beq.n	8000cb8 <__aeabi_fsub+0x200>
 8000d0a:	2aff      	cmp	r2, #255	@ 0xff
 8000d0c:	d01b      	beq.n	8000d46 <__aeabi_fsub+0x28e>
 8000d0e:	291b      	cmp	r1, #27
 8000d10:	dd2c      	ble.n	8000d6c <__aeabi_fsub+0x2b4>
 8000d12:	0002      	movs	r2, r0
 8000d14:	1c73      	adds	r3, r6, #1
 8000d16:	e73a      	b.n	8000b8e <__aeabi_fsub+0xd6>
 8000d18:	2aff      	cmp	r2, #255	@ 0xff
 8000d1a:	d088      	beq.n	8000c2e <__aeabi_fsub+0x176>
 8000d1c:	199b      	adds	r3, r3, r6
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	0759      	lsls	r1, r3, #29
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fsub+0x26e>
 8000d24:	e733      	b.n	8000b8e <__aeabi_fsub+0xd6>
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	e76e      	b.n	8000c08 <__aeabi_fsub+0x150>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d110      	bne.n	8000d50 <__aeabi_fsub+0x298>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d043      	beq.n	8000dba <__aeabi_fsub+0x302>
 8000d32:	2401      	movs	r4, #1
 8000d34:	0033      	movs	r3, r6
 8000d36:	400c      	ands	r4, r1
 8000d38:	e706      	b.n	8000b48 <__aeabi_fsub+0x90>
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	1af7      	subs	r7, r6, r3
 8000d3e:	400c      	ands	r4, r1
 8000d40:	e784      	b.n	8000c4c <__aeabi_fsub+0x194>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d104      	bne.n	8000d50 <__aeabi_fsub+0x298>
 8000d46:	0033      	movs	r3, r6
 8000d48:	e6fe      	b.n	8000b48 <__aeabi_fsub+0x90>
 8000d4a:	2501      	movs	r5, #1
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	e718      	b.n	8000b82 <__aeabi_fsub+0xca>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_fsub+0x29e>
 8000d54:	e6f8      	b.n	8000b48 <__aeabi_fsub+0x90>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4297      	cmp	r7, r2
 8000d5c:	d304      	bcc.n	8000d68 <__aeabi_fsub+0x2b0>
 8000d5e:	4594      	cmp	ip, r2
 8000d60:	d202      	bcs.n	8000d68 <__aeabi_fsub+0x2b0>
 8000d62:	2401      	movs	r4, #1
 8000d64:	0033      	movs	r3, r6
 8000d66:	400c      	ands	r4, r1
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	e6f1      	b.n	8000b50 <__aeabi_fsub+0x98>
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2520      	movs	r5, #32
 8000d70:	40ca      	lsrs	r2, r1
 8000d72:	1a69      	subs	r1, r5, r1
 8000d74:	408b      	lsls	r3, r1
 8000d76:	1e59      	subs	r1, r3, #1
 8000d78:	418b      	sbcs	r3, r1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	199b      	adds	r3, r3, r6
 8000d80:	e750      	b.n	8000c24 <__aeabi_fsub+0x16c>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d094      	beq.n	8000cb0 <__aeabi_fsub+0x1f8>
 8000d86:	2401      	movs	r4, #1
 8000d88:	0033      	movs	r3, r6
 8000d8a:	400c      	ands	r4, r1
 8000d8c:	e73a      	b.n	8000c04 <__aeabi_fsub+0x14c>
 8000d8e:	000c      	movs	r4, r1
 8000d90:	2501      	movs	r5, #1
 8000d92:	1af3      	subs	r3, r6, r3
 8000d94:	e6f5      	b.n	8000b82 <__aeabi_fsub+0xca>
 8000d96:	0033      	movs	r3, r6
 8000d98:	e734      	b.n	8000c04 <__aeabi_fsub+0x14c>
 8000d9a:	199b      	adds	r3, r3, r6
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0159      	lsls	r1, r3, #5
 8000da0:	d5c1      	bpl.n	8000d26 <__aeabi_fsub+0x26e>
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <__aeabi_fsub+0x340>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2201      	movs	r2, #1
 8000daa:	e72d      	b.n	8000c08 <__aeabi_fsub+0x150>
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x2fa>
 8000db0:	e77e      	b.n	8000cb0 <__aeabi_fsub+0x1f8>
 8000db2:	0013      	movs	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	e726      	b.n	8000c08 <__aeabi_fsub+0x150>
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	20ff      	movs	r0, #255	@ 0xff
 8000dc0:	03db      	lsls	r3, r3, #15
 8000dc2:	e6f1      	b.n	8000ba8 <__aeabi_fsub+0xf0>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fsub+0x312>
 8000dc8:	e756      	b.n	8000c78 <__aeabi_fsub+0x1c0>
 8000dca:	1b47      	subs	r7, r0, r5
 8000dcc:	003a      	movs	r2, r7
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x31c>
 8000dd2:	e730      	b.n	8000c36 <__aeabi_fsub+0x17e>
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	04d2      	lsls	r2, r2, #19
 8000dd8:	000c      	movs	r4, r1
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	e77f      	b.n	8000cde <__aeabi_fsub+0x226>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0x32c>
 8000de2:	e701      	b.n	8000be8 <__aeabi_fsub+0x130>
 8000de4:	1b41      	subs	r1, r0, r5
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d101      	bne.n	8000dee <__aeabi_fsub+0x336>
 8000dea:	000a      	movs	r2, r1
 8000dec:	e788      	b.n	8000d00 <__aeabi_fsub+0x248>
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	04d2      	lsls	r2, r2, #19
 8000df2:	4313      	orrs	r3, r2
 8000df4:	e78b      	b.n	8000d0e <__aeabi_fsub+0x256>
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	fbffffff 	.word	0xfbffffff
 8000dfc:	7dffffff 	.word	0x7dffffff

08000e00 <__aeabi_fcmpun>:
 8000e00:	0243      	lsls	r3, r0, #9
 8000e02:	024a      	lsls	r2, r1, #9
 8000e04:	0040      	lsls	r0, r0, #1
 8000e06:	0049      	lsls	r1, r1, #1
 8000e08:	0a5b      	lsrs	r3, r3, #9
 8000e0a:	0a52      	lsrs	r2, r2, #9
 8000e0c:	0e09      	lsrs	r1, r1, #24
 8000e0e:	0e00      	lsrs	r0, r0, #24
 8000e10:	28ff      	cmp	r0, #255	@ 0xff
 8000e12:	d006      	beq.n	8000e22 <__aeabi_fcmpun+0x22>
 8000e14:	2000      	movs	r0, #0
 8000e16:	29ff      	cmp	r1, #255	@ 0xff
 8000e18:	d102      	bne.n	8000e20 <__aeabi_fcmpun+0x20>
 8000e1a:	1e53      	subs	r3, r2, #1
 8000e1c:	419a      	sbcs	r2, r3
 8000e1e:	0010      	movs	r0, r2
 8000e20:	4770      	bx	lr
 8000e22:	38fe      	subs	r0, #254	@ 0xfe
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1fb      	bne.n	8000e20 <__aeabi_fcmpun+0x20>
 8000e28:	e7f4      	b.n	8000e14 <__aeabi_fcmpun+0x14>
 8000e2a:	46c0      	nop			@ (mov r8, r8)

08000e2c <__aeabi_f2iz>:
 8000e2c:	0241      	lsls	r1, r0, #9
 8000e2e:	0042      	lsls	r2, r0, #1
 8000e30:	0fc3      	lsrs	r3, r0, #31
 8000e32:	0a49      	lsrs	r1, r1, #9
 8000e34:	2000      	movs	r0, #0
 8000e36:	0e12      	lsrs	r2, r2, #24
 8000e38:	2a7e      	cmp	r2, #126	@ 0x7e
 8000e3a:	dd03      	ble.n	8000e44 <__aeabi_f2iz+0x18>
 8000e3c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000e3e:	dd02      	ble.n	8000e46 <__aeabi_f2iz+0x1a>
 8000e40:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <__aeabi_f2iz+0x3c>)
 8000e42:	1898      	adds	r0, r3, r2
 8000e44:	4770      	bx	lr
 8000e46:	2080      	movs	r0, #128	@ 0x80
 8000e48:	0400      	lsls	r0, r0, #16
 8000e4a:	4301      	orrs	r1, r0
 8000e4c:	2a95      	cmp	r2, #149	@ 0x95
 8000e4e:	dc07      	bgt.n	8000e60 <__aeabi_f2iz+0x34>
 8000e50:	2096      	movs	r0, #150	@ 0x96
 8000e52:	1a82      	subs	r2, r0, r2
 8000e54:	40d1      	lsrs	r1, r2
 8000e56:	4248      	negs	r0, r1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f3      	bne.n	8000e44 <__aeabi_f2iz+0x18>
 8000e5c:	0008      	movs	r0, r1
 8000e5e:	e7f1      	b.n	8000e44 <__aeabi_f2iz+0x18>
 8000e60:	3a96      	subs	r2, #150	@ 0x96
 8000e62:	4091      	lsls	r1, r2
 8000e64:	e7f7      	b.n	8000e56 <__aeabi_f2iz+0x2a>
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	7fffffff 	.word	0x7fffffff

08000e6c <__aeabi_i2f>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d013      	beq.n	8000e9a <__aeabi_i2f+0x2e>
 8000e72:	17c3      	asrs	r3, r0, #31
 8000e74:	18c5      	adds	r5, r0, r3
 8000e76:	405d      	eors	r5, r3
 8000e78:	0fc4      	lsrs	r4, r0, #31
 8000e7a:	0028      	movs	r0, r5
 8000e7c:	f000 f884 	bl	8000f88 <__clzsi2>
 8000e80:	239e      	movs	r3, #158	@ 0x9e
 8000e82:	0001      	movs	r1, r0
 8000e84:	1a1b      	subs	r3, r3, r0
 8000e86:	2b96      	cmp	r3, #150	@ 0x96
 8000e88:	dc0f      	bgt.n	8000eaa <__aeabi_i2f+0x3e>
 8000e8a:	2808      	cmp	r0, #8
 8000e8c:	d034      	beq.n	8000ef8 <__aeabi_i2f+0x8c>
 8000e8e:	3908      	subs	r1, #8
 8000e90:	408d      	lsls	r5, r1
 8000e92:	026d      	lsls	r5, r5, #9
 8000e94:	0a6d      	lsrs	r5, r5, #9
 8000e96:	b2d8      	uxtb	r0, r3
 8000e98:	e002      	b.n	8000ea0 <__aeabi_i2f+0x34>
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	05c0      	lsls	r0, r0, #23
 8000ea2:	4328      	orrs	r0, r5
 8000ea4:	07e4      	lsls	r4, r4, #31
 8000ea6:	4320      	orrs	r0, r4
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
 8000eaa:	2b99      	cmp	r3, #153	@ 0x99
 8000eac:	dc16      	bgt.n	8000edc <__aeabi_i2f+0x70>
 8000eae:	1f42      	subs	r2, r0, #5
 8000eb0:	2805      	cmp	r0, #5
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_i2f+0x4a>
 8000eb4:	4095      	lsls	r5, r2
 8000eb6:	002a      	movs	r2, r5
 8000eb8:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <__aeabi_i2f+0x94>)
 8000eba:	4002      	ands	r2, r0
 8000ebc:	076e      	lsls	r6, r5, #29
 8000ebe:	d009      	beq.n	8000ed4 <__aeabi_i2f+0x68>
 8000ec0:	260f      	movs	r6, #15
 8000ec2:	4035      	ands	r5, r6
 8000ec4:	2d04      	cmp	r5, #4
 8000ec6:	d005      	beq.n	8000ed4 <__aeabi_i2f+0x68>
 8000ec8:	3204      	adds	r2, #4
 8000eca:	0155      	lsls	r5, r2, #5
 8000ecc:	d502      	bpl.n	8000ed4 <__aeabi_i2f+0x68>
 8000ece:	239f      	movs	r3, #159	@ 0x9f
 8000ed0:	4002      	ands	r2, r0
 8000ed2:	1a5b      	subs	r3, r3, r1
 8000ed4:	0192      	lsls	r2, r2, #6
 8000ed6:	0a55      	lsrs	r5, r2, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	e7e1      	b.n	8000ea0 <__aeabi_i2f+0x34>
 8000edc:	2205      	movs	r2, #5
 8000ede:	1a12      	subs	r2, r2, r0
 8000ee0:	0028      	movs	r0, r5
 8000ee2:	40d0      	lsrs	r0, r2
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	0008      	movs	r0, r1
 8000ee8:	301b      	adds	r0, #27
 8000eea:	4085      	lsls	r5, r0
 8000eec:	0028      	movs	r0, r5
 8000eee:	1e45      	subs	r5, r0, #1
 8000ef0:	41a8      	sbcs	r0, r5
 8000ef2:	4302      	orrs	r2, r0
 8000ef4:	0015      	movs	r5, r2
 8000ef6:	e7de      	b.n	8000eb6 <__aeabi_i2f+0x4a>
 8000ef8:	026d      	lsls	r5, r5, #9
 8000efa:	2096      	movs	r0, #150	@ 0x96
 8000efc:	0a6d      	lsrs	r5, r5, #9
 8000efe:	e7cf      	b.n	8000ea0 <__aeabi_i2f+0x34>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ui2f>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	1e04      	subs	r4, r0, #0
 8000f08:	d00e      	beq.n	8000f28 <__aeabi_ui2f+0x24>
 8000f0a:	f000 f83d 	bl	8000f88 <__clzsi2>
 8000f0e:	239e      	movs	r3, #158	@ 0x9e
 8000f10:	0001      	movs	r1, r0
 8000f12:	1a1b      	subs	r3, r3, r0
 8000f14:	2b96      	cmp	r3, #150	@ 0x96
 8000f16:	dc0c      	bgt.n	8000f32 <__aeabi_ui2f+0x2e>
 8000f18:	2808      	cmp	r0, #8
 8000f1a:	d02f      	beq.n	8000f7c <__aeabi_ui2f+0x78>
 8000f1c:	3908      	subs	r1, #8
 8000f1e:	408c      	lsls	r4, r1
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	0a64      	lsrs	r4, r4, #9
 8000f24:	b2d8      	uxtb	r0, r3
 8000f26:	e001      	b.n	8000f2c <__aeabi_ui2f+0x28>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	05c0      	lsls	r0, r0, #23
 8000f2e:	4320      	orrs	r0, r4
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
 8000f32:	2b99      	cmp	r3, #153	@ 0x99
 8000f34:	dc16      	bgt.n	8000f64 <__aeabi_ui2f+0x60>
 8000f36:	1f42      	subs	r2, r0, #5
 8000f38:	2805      	cmp	r0, #5
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_ui2f+0x3a>
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	0022      	movs	r2, r4
 8000f40:	4810      	ldr	r0, [pc, #64]	@ (8000f84 <__aeabi_ui2f+0x80>)
 8000f42:	4002      	ands	r2, r0
 8000f44:	0765      	lsls	r5, r4, #29
 8000f46:	d009      	beq.n	8000f5c <__aeabi_ui2f+0x58>
 8000f48:	250f      	movs	r5, #15
 8000f4a:	402c      	ands	r4, r5
 8000f4c:	2c04      	cmp	r4, #4
 8000f4e:	d005      	beq.n	8000f5c <__aeabi_ui2f+0x58>
 8000f50:	3204      	adds	r2, #4
 8000f52:	0154      	lsls	r4, r2, #5
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_ui2f+0x58>
 8000f56:	239f      	movs	r3, #159	@ 0x9f
 8000f58:	4002      	ands	r2, r0
 8000f5a:	1a5b      	subs	r3, r3, r1
 8000f5c:	0192      	lsls	r2, r2, #6
 8000f5e:	0a54      	lsrs	r4, r2, #9
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	e7e3      	b.n	8000f2c <__aeabi_ui2f+0x28>
 8000f64:	0002      	movs	r2, r0
 8000f66:	0020      	movs	r0, r4
 8000f68:	321b      	adds	r2, #27
 8000f6a:	4090      	lsls	r0, r2
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	1e50      	subs	r0, r2, #1
 8000f70:	4182      	sbcs	r2, r0
 8000f72:	2005      	movs	r0, #5
 8000f74:	1a40      	subs	r0, r0, r1
 8000f76:	40c4      	lsrs	r4, r0
 8000f78:	4314      	orrs	r4, r2
 8000f7a:	e7e0      	b.n	8000f3e <__aeabi_ui2f+0x3a>
 8000f7c:	0264      	lsls	r4, r4, #9
 8000f7e:	2096      	movs	r0, #150	@ 0x96
 8000f80:	0a64      	lsrs	r4, r4, #9
 8000f82:	e7d3      	b.n	8000f2c <__aeabi_ui2f+0x28>
 8000f84:	fbffffff 	.word	0xfbffffff

08000f88 <__clzsi2>:
 8000f88:	211c      	movs	r1, #28
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d301      	bcc.n	8000f96 <__clzsi2+0xe>
 8000f92:	0c00      	lsrs	r0, r0, #16
 8000f94:	3910      	subs	r1, #16
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d301      	bcc.n	8000fa0 <__clzsi2+0x18>
 8000f9c:	0a00      	lsrs	r0, r0, #8
 8000f9e:	3908      	subs	r1, #8
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0x22>
 8000fa6:	0900      	lsrs	r0, r0, #4
 8000fa8:	3904      	subs	r1, #4
 8000faa:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb4 <__clzsi2+0x2c>)
 8000fac:	5c10      	ldrb	r0, [r2, r0]
 8000fae:	1840      	adds	r0, r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	02020304 	.word	0x02020304
 8000fb8:	01010101 	.word	0x01010101
	...

08000fc4 <reset_screen>:
 * @note While the pin is "LOW" no write functions will be accepted
 *
 * @retval None
 */
void reset_screen()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_RST_GPIO_Port, _RST_Pin, GPIO_PIN_RESET);
 8000fc8:	23a0      	movs	r3, #160	@ 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2102      	movs	r1, #2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f002 fcaf 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	@ 0x64
 8000fd8:	f001 f930 	bl	800223c <HAL_Delay>
	HAL_GPIO_WritePin(_RST_GPIO_Port, _RST_Pin, GPIO_PIN_SET);
 8000fdc:	23a0      	movs	r3, #160	@ 0xa0
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f002 fca5 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fea:	2064      	movs	r0, #100	@ 0x64
 8000fec:	f001 f926 	bl	800223c <HAL_Delay>
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <init_screen>:
 *
 * @retval NHD_LCD status
 */

NHD_LCDstatus_t init_screen()
{
 8000ff6:	b590      	push	{r4, r7, lr}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	if ((err_code = cmd_write(SET_COLSD_LF)) != NHD_SPI_OK) //Set SEG (column) direction - left to right
 8001002:	1dfc      	adds	r4, r7, #7
 8001004:	20a0      	movs	r0, #160	@ 0xa0
 8001006:	f000 f903 	bl	8001210 <cmd_write>
 800100a:	0003      	movs	r3, r0
 800100c:	7023      	strb	r3, [r4, #0]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <init_screen+0x26>
	{
		return err_code;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	e069      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(TURN_OFF)) != NHD_SPI_OK) //Turn the display off
 800101c:	1dfc      	adds	r4, r7, #7
 800101e:	20ae      	movs	r0, #174	@ 0xae
 8001020:	f000 f8f6 	bl	8001210 <cmd_write>
 8001024:	0003      	movs	r3, r0
 8001026:	7023      	strb	r3, [r4, #0]
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <init_screen+0x40>
	{
		return err_code;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	e05c      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_ROWD_TP)) != NHD_SPI_OK) //Set COM (row) direction - top to bottom
 8001036:	1dfc      	adds	r4, r7, #7
 8001038:	20c8      	movs	r0, #200	@ 0xc8
 800103a:	f000 f8e9 	bl	8001210 <cmd_write>
 800103e:	0003      	movs	r3, r0
 8001040:	7023      	strb	r3, [r4, #0]
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <init_screen+0x5a>
	{
		return err_code;
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	e04f      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_LCD_BIAS)) != NHD_SPI_OK) //Set LCD bias
 8001050:	1dfc      	adds	r4, r7, #7
 8001052:	20a2      	movs	r0, #162	@ 0xa2
 8001054:	f000 f8dc 	bl	8001210 <cmd_write>
 8001058:	0003      	movs	r3, r0
 800105a:	7023      	strb	r3, [r4, #0]
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <init_screen+0x74>
	{
		return err_code;
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	e042      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_PWR_CTRL)) != NHD_SPI_OK) //Power Control Set - Boost, Regulator and Follower are all on
 800106a:	1dfc      	adds	r4, r7, #7
 800106c:	202f      	movs	r0, #47	@ 0x2f
 800106e:	f000 f8cf 	bl	8001210 <cmd_write>
 8001072:	0003      	movs	r3, r0
 8001074:	7023      	strb	r3, [r4, #0]
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <init_screen+0x8e>
	{
		return err_code;
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	e035      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_RES_RTO)) != NHD_SPI_OK) //Set Resistor Ratio - 0x001 -> 3.5
 8001084:	1dfc      	adds	r4, r7, #7
 8001086:	2021      	movs	r0, #33	@ 0x21
 8001088:	f000 f8c2 	bl	8001210 <cmd_write>
 800108c:	0003      	movs	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <init_screen+0xa8>
	{
		return err_code;
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	e028      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_EVM_CMD)) != NHD_SPI_OK) //Electronic Volume Command (set contrast) Double Byte: 1 of 2
 800109e:	1dfc      	adds	r4, r7, #7
 80010a0:	2081      	movs	r0, #129	@ 0x81
 80010a2:	f000 f8b5 	bl	8001210 <cmd_write>
 80010a6:	0003      	movs	r3, r0
 80010a8:	7023      	strb	r3, [r4, #0]
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <init_screen+0xc2>
	{
		return err_code;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	e01b      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(SET_EVM_VAL)) != NHD_SPI_OK) //Electronic Volume value (contrast value) Double Byte: 2 of 2
 80010b8:	1dfc      	adds	r4, r7, #7
 80010ba:	2020      	movs	r0, #32
 80010bc:	f000 f8a8 	bl	8001210 <cmd_write>
 80010c0:	0003      	movs	r3, r0
 80010c2:	7023      	strb	r3, [r4, #0]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <init_screen+0xdc>
	{
		return err_code;
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	e00e      	b.n	80010f0 <init_screen+0xfa>
	}
	if ((err_code = cmd_write(TURN_ON)) != NHD_SPI_OK) //Display ON
 80010d2:	1dfc      	adds	r4, r7, #7
 80010d4:	20af      	movs	r0, #175	@ 0xaf
 80010d6:	f000 f89b 	bl	8001210 <cmd_write>
 80010da:	0003      	movs	r3, r0
 80010dc:	7023      	strb	r3, [r4, #0]
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <init_screen+0xf6>
	{
		return err_code;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	e001      	b.n	80010f0 <init_screen+0xfa>
	}

	return err_code; //NHD_SPI_OK
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b003      	add	sp, #12
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <clear_screen>:
 *
 * @retval NHD_LCD status
 */

NHD_LCDstatus_t clear_screen()
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
	if ((err_code = cmd_write(TURN_OFF)) != NHD_SPI_OK)
 8001104:	1d3c      	adds	r4, r7, #4
 8001106:	20ae      	movs	r0, #174	@ 0xae
 8001108:	f000 f882 	bl	8001210 <cmd_write>
 800110c:	0003      	movs	r3, r0
 800110e:	7023      	strb	r3, [r4, #0]
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <clear_screen+0x26>
	{
		return err_code;
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	e074      	b.n	8001208 <clear_screen+0x110>
	}
	if ((err_code = cmd_write(SET_SRT_ROW)) != NHD_SPI_OK)
 800111e:	1d3c      	adds	r4, r7, #4
 8001120:	2040      	movs	r0, #64	@ 0x40
 8001122:	f000 f875 	bl	8001210 <cmd_write>
 8001126:	0003      	movs	r3, r0
 8001128:	7023      	strb	r3, [r4, #0]
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <clear_screen+0x40>
	{
		return err_code;
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	e067      	b.n	8001208 <clear_screen+0x110>
	}

	uint8_t page = SET_PG_ADDR;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	22b0      	movs	r2, #176	@ 0xb0
 800113c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_CHAR_ROWS; i++)
 800113e:	1dbb      	adds	r3, r7, #6
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e04d      	b.n	80011e2 <clear_screen+0xea>
	{
		if ((err_code = cmd_write(page)) != NHD_SPI_OK)	// send page address
 8001146:	1d3c      	adds	r4, r7, #4
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f85f 	bl	8001210 <cmd_write>
 8001152:	0003      	movs	r3, r0
 8001154:	7023      	strb	r3, [r4, #0]
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <clear_screen+0x6c>
		{
			return err_code;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	e051      	b.n	8001208 <clear_screen+0x110>
		}
		//	Following two lines set the column address to leftmost column
		if ((err_code = cmd_write(SET_COL_ADRU)) != NHD_SPI_OK)
 8001164:	1d3c      	adds	r4, r7, #4
 8001166:	2010      	movs	r0, #16
 8001168:	f000 f852 	bl	8001210 <cmd_write>
 800116c:	0003      	movs	r3, r0
 800116e:	7023      	strb	r3, [r4, #0]
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <clear_screen+0x86>
		{
			return err_code;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	e044      	b.n	8001208 <clear_screen+0x110>
		}
		if ((err_code = cmd_write(SET_COL_ADRL)) != NHD_SPI_OK)
 800117e:	1d3c      	adds	r4, r7, #4
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f845 	bl	8001210 <cmd_write>
 8001186:	0003      	movs	r3, r0
 8001188:	7023      	strb	r3, [r4, #0]
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <clear_screen+0xa0>
		{
			return err_code;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	e037      	b.n	8001208 <clear_screen+0x110>
		}

		for (uint8_t j = 0; j < NUM_COLS; j++)
 8001198:	1d7b      	adds	r3, r7, #5
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e011      	b.n	80011c4 <clear_screen+0xcc>
		{
			if ((err_code = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
 80011a0:	1d3c      	adds	r4, r7, #4
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f876 	bl	8001294 <data_write>
 80011a8:	0003      	movs	r3, r0
 80011aa:	7023      	strb	r3, [r4, #0]
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <clear_screen+0xc2>
			{
				return err_code;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	e026      	b.n	8001208 <clear_screen+0x110>
		for (uint8_t j = 0; j < NUM_COLS; j++)
 80011ba:	1d7b      	adds	r3, r7, #5
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	1d7b      	adds	r3, r7, #5
 80011c0:	3201      	adds	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	1d7b      	adds	r3, r7, #5
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dae8      	bge.n	80011a0 <clear_screen+0xa8>
			}
		}
		page++;//After 128 columns, go to the next page
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	3201      	adds	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_CHAR_ROWS; i++)
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	3201      	adds	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	1dbb      	adds	r3, r7, #6
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9ad      	bls.n	8001146 <clear_screen+0x4e>
	}
	if ((err_code = cmd_write(TURN_ON)) != NHD_SPI_OK)//Turn the display back on
 80011ea:	1d3c      	adds	r4, r7, #4
 80011ec:	20af      	movs	r0, #175	@ 0xaf
 80011ee:	f000 f80f 	bl	8001210 <cmd_write>
 80011f2:	0003      	movs	r3, r0
 80011f4:	7023      	strb	r3, [r4, #0]
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <clear_screen+0x10c>
	{
		return err_code;
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	e001      	b.n	8001208 <clear_screen+0x110>
	}

	return err_code;
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	781b      	ldrb	r3, [r3, #0]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b003      	add	sp, #12
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <cmd_write>:
 * @param c: instruction for LCD module
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t cmd_write(uint8_t c)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef err_code;

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <cmd_write+0x7c>)
 800121e:	2200      	movs	r2, #0
 8001220:	2108      	movs	r1, #8
 8001222:	0018      	movs	r0, r3
 8001224:	f002 fb86 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);	//Set message type to command
 8001228:	23a0      	movs	r3, #160	@ 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	2200      	movs	r2, #0
 800122e:	2104      	movs	r1, #4
 8001230:	0018      	movs	r0, r3
 8001232:	f002 fb7f 	bl	8003934 <HAL_GPIO_WritePin>

	err_code = HAL_SPI_Transmit(&SPI_HANDLE, &c, 0, 100); 		// transmit command
 8001236:	250f      	movs	r5, #15
 8001238:	197c      	adds	r4, r7, r5
 800123a:	1df9      	adds	r1, r7, #7
 800123c:	4814      	ldr	r0, [pc, #80]	@ (8001290 <cmd_write+0x80>)
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	2200      	movs	r2, #0
 8001242:	f003 f927 	bl	8004494 <HAL_SPI_Transmit>
 8001246:	0003      	movs	r3, r0
 8001248:	7023      	strb	r3, [r4, #0]

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <cmd_write+0x7c>)
 800124c:	2201      	movs	r2, #1
 800124e:	2108      	movs	r1, #8
 8001250:	0018      	movs	r0, r3
 8001252:	f002 fb6f 	bl	8003934 <HAL_GPIO_WritePin>

	if (err_code != HAL_OK) //transmit data
 8001256:	197b      	adds	r3, r7, r5
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d010      	beq.n	8001280 <cmd_write+0x70>
	{
		switch (err_code)
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d008      	beq.n	8001278 <cmd_write+0x68>
 8001266:	dc09      	bgt.n	800127c <cmd_write+0x6c>
 8001268:	2b01      	cmp	r3, #1
 800126a:	d003      	beq.n	8001274 <cmd_write+0x64>
 800126c:	2b02      	cmp	r3, #2
 800126e:	d105      	bne.n	800127c <cmd_write+0x6c>
		{
		case HAL_BUSY:
			return NHD_SPI_BUSY;
 8001270:	2301      	movs	r3, #1
 8001272:	e006      	b.n	8001282 <cmd_write+0x72>
		case HAL_ERROR:
			return NHD_SPI_PARAM_ERROR;
 8001274:	2302      	movs	r3, #2
 8001276:	e004      	b.n	8001282 <cmd_write+0x72>
		case HAL_TIMEOUT:
			return NHD_SPI_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e002      	b.n	8001282 <cmd_write+0x72>
		default:
			return NHD_SPI_PARAM_ERROR;
 800127c:	2302      	movs	r3, #2
 800127e:	e000      	b.n	8001282 <cmd_write+0x72>
		}
	}
	return NHD_SPI_OK;
 8001280:	2300      	movs	r3, #0

}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b004      	add	sp, #16
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	50000400 	.word	0x50000400
 8001290:	20000130 	.word	0x20000130

08001294 <data_write>:
 * @param c: One fifth of character data to be sent to DDRAM of LCD module
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t data_write(uint8_t d)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	0002      	movs	r2, r0
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef err_code;

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);	//Select LCD Screen
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <data_write+0x7c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	2108      	movs	r1, #8
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 fb44 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET);		//Set message type to data
 80012ac:	23a0      	movs	r3, #160	@ 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2201      	movs	r2, #1
 80012b2:	2104      	movs	r1, #4
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 fb3d 	bl	8003934 <HAL_GPIO_WritePin>

	err_code = HAL_SPI_Transmit(&SPI_HANDLE, &d, 1, 100); 		// transmit data
 80012ba:	250f      	movs	r5, #15
 80012bc:	197c      	adds	r4, r7, r5
 80012be:	1df9      	adds	r1, r7, #7
 80012c0:	4814      	ldr	r0, [pc, #80]	@ (8001314 <data_write+0x80>)
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	2201      	movs	r2, #1
 80012c6:	f003 f8e5 	bl	8004494 <HAL_SPI_Transmit>
 80012ca:	0003      	movs	r3, r0
 80012cc:	7023      	strb	r3, [r4, #0]

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);	//De-select LCD Screen
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <data_write+0x7c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	2108      	movs	r1, #8
 80012d4:	0018      	movs	r0, r3
 80012d6:	f002 fb2d 	bl	8003934 <HAL_GPIO_WritePin>

	if (err_code != HAL_OK) //transmit data
 80012da:	197b      	adds	r3, r7, r5
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d010      	beq.n	8001304 <data_write+0x70>
	{
		switch (err_code)
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d008      	beq.n	80012fc <data_write+0x68>
 80012ea:	dc09      	bgt.n	8001300 <data_write+0x6c>
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d003      	beq.n	80012f8 <data_write+0x64>
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d105      	bne.n	8001300 <data_write+0x6c>
		{
		case HAL_BUSY:
			return NHD_SPI_BUSY;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e006      	b.n	8001306 <data_write+0x72>
		case HAL_ERROR:
			return NHD_SPI_PARAM_ERROR;
 80012f8:	2302      	movs	r3, #2
 80012fa:	e004      	b.n	8001306 <data_write+0x72>
		case HAL_TIMEOUT:
			return NHD_SPI_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e002      	b.n	8001306 <data_write+0x72>
		default:
			return NHD_SPI_PARAM_ERROR;
 8001300:	2302      	movs	r3, #2
 8001302:	e000      	b.n	8001306 <data_write+0x72>
		}
	}
	return NHD_SPI_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	50000400 	.word	0x50000400
 8001314:	20000130 	.word	0x20000130

08001318 <print_data>:
 * @param row_index: page to print text on; 0, 1, 2, 3 from top to bottom
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t print_data(const char * text, uint8_t row_index)
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	000a      	movs	r2, r1
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	701a      	strb	r2, [r3, #0]
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
 8001326:	210d      	movs	r1, #13
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

	if ((err_code = cmd_write(SET_PG_ADDR + row_index)) != NHD_SPI_OK) // send page address
 800132e:	1cfb      	adds	r3, r7, #3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3b50      	subs	r3, #80	@ 0x50
 8001334:	b2db      	uxtb	r3, r3
 8001336:	000d      	movs	r5, r1
 8001338:	187c      	adds	r4, r7, r1
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ff68 	bl	8001210 <cmd_write>
 8001340:	0003      	movs	r3, r0
 8001342:	7023      	strb	r3, [r4, #0]
 8001344:	197b      	adds	r3, r7, r5
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <print_data+0x3a>
	{
		return err_code;
 800134c:	197b      	adds	r3, r7, r5
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	e082      	b.n	8001458 <print_data+0x140>
	}
	//	Following two lines set the column address to leftmost column
	if ((err_code = cmd_write(SET_COL_ADRU)) != NHD_SPI_OK)
 8001352:	250d      	movs	r5, #13
 8001354:	197c      	adds	r4, r7, r5
 8001356:	2010      	movs	r0, #16
 8001358:	f7ff ff5a 	bl	8001210 <cmd_write>
 800135c:	0003      	movs	r3, r0
 800135e:	7023      	strb	r3, [r4, #0]
 8001360:	002a      	movs	r2, r5
 8001362:	18bb      	adds	r3, r7, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <print_data+0x58>
	{
		return err_code;
 800136a:	18bb      	adds	r3, r7, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	e073      	b.n	8001458 <print_data+0x140>
	}
	if ((err_code = cmd_write(SET_COL_ADRL)) != NHD_SPI_OK)
 8001370:	250d      	movs	r5, #13
 8001372:	197c      	adds	r4, r7, r5
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff ff4b 	bl	8001210 <cmd_write>
 800137a:	0003      	movs	r3, r0
 800137c:	7023      	strb	r3, [r4, #0]
 800137e:	002a      	movs	r2, r5
 8001380:	18bb      	adds	r3, r7, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <print_data+0x76>
	{
		return err_code;
 8001388:	18bb      	adds	r3, r7, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	e064      	b.n	8001458 <print_data+0x140>
	}

	for (uint8_t i = 0; text[i] != '\0'; i++)
 800138e:	230f      	movs	r3, #15
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e042      	b.n	800141e <print_data+0x106>
	{
		uint8_t c = (uint8_t)text[i] - 32;
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	230c      	movs	r3, #12
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	3a20      	subs	r2, #32
 80013aa:	701a      	strb	r2, [r3, #0]
		uint8_t val = 0;
 80013ac:	230b      	movs	r3, #11
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

		for (uint8_t j = 0; j < NUM_BYTES_PER_CHAR; j++)
 80013b4:	230e      	movs	r3, #14
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e024      	b.n	8001408 <print_data+0xf0>
		{
			val = Ascii_1[c][j];
 80013be:	230c      	movs	r3, #12
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	230e      	movs	r3, #14
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	7818      	ldrb	r0, [r3, #0]
 80013ca:	260b      	movs	r6, #11
 80013cc:	19b9      	adds	r1, r7, r6
 80013ce:	4c24      	ldr	r4, [pc, #144]	@ (8001460 <print_data+0x148>)
 80013d0:	0013      	movs	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	189b      	adds	r3, r3, r2
 80013d6:	18e3      	adds	r3, r4, r3
 80013d8:	5c1b      	ldrb	r3, [r3, r0]
 80013da:	700b      	strb	r3, [r1, #0]
			if ((err_code = data_write(val)) != NHD_SPI_OK)
 80013dc:	250d      	movs	r5, #13
 80013de:	197c      	adds	r4, r7, r5
 80013e0:	19bb      	adds	r3, r7, r6
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff55 	bl	8001294 <data_write>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7023      	strb	r3, [r4, #0]
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <print_data+0xe4>
			{
				return err_code;
 80013f6:	197b      	adds	r3, r7, r5
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	e02d      	b.n	8001458 <print_data+0x140>
		for (uint8_t j = 0; j < NUM_BYTES_PER_CHAR; j++)
 80013fc:	210e      	movs	r1, #14
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	187b      	adds	r3, r7, r1
 8001404:	3201      	adds	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	230e      	movs	r3, #14
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d9d5      	bls.n	80013be <print_data+0xa6>
	for (uint8_t i = 0; text[i] != '\0'; i++)
 8001412:	210f      	movs	r1, #15
 8001414:	187b      	adds	r3, r7, r1
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	187b      	adds	r3, r7, r1
 800141a:	3201      	adds	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	230f      	movs	r3, #15
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1b4      	bne.n	8001398 <print_data+0x80>
			}
		}
	}

	if ((err_code = erase_trails(text, row_index)) != NHD_SPI_OK)
 800142e:	250d      	movs	r5, #13
 8001430:	197c      	adds	r4, r7, r5
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f812 	bl	8001464 <erase_trails>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]
 8001444:	197b      	adds	r3, r7, r5
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <print_data+0x13a>
	{
		return err_code;
 800144c:	197b      	adds	r3, r7, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	e002      	b.n	8001458 <print_data+0x140>
	}

	return err_code;
 8001452:	230d      	movs	r3, #13
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	781b      	ldrb	r3, [r3, #0]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b005      	add	sp, #20
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	08004b64 	.word	0x08004b64

08001464 <erase_trails>:
 * @param row_index: page that the text is displayed on; 0, 1, 2, 3 from top to bottom
 *
 * @retval NHD_LCD status
 */
NHD_LCDstatus_t erase_trails(const char * text, uint8_t row_index)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	000a      	movs	r2, r1
 800146e:	1cfb      	adds	r3, r7, #3
 8001470:	701a      	strb	r2, [r3, #0]
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
 8001472:	2117      	movs	r1, #23
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
	if ((err_code = cmd_write(SET_PG_ADDR + row_index)) != NHD_SPI_OK) // send page address
 800147a:	1cfb      	adds	r3, r7, #3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3b50      	subs	r3, #80	@ 0x50
 8001480:	b2db      	uxtb	r3, r3
 8001482:	000d      	movs	r5, r1
 8001484:	187c      	adds	r4, r7, r1
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fec2 	bl	8001210 <cmd_write>
 800148c:	0003      	movs	r3, r0
 800148e:	7023      	strb	r3, [r4, #0]
 8001490:	197b      	adds	r3, r7, r5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <erase_trails+0x3a>
	{
		return err_code;
 8001498:	197b      	adds	r3, r7, r5
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	e052      	b.n	8001544 <erase_trails+0xe0>
	}

	//Get length of the current text
	size_t len = strlen(text);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7fe fe2d 	bl	8000100 <strlen>
 80014a6:	0003      	movs	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]
	if (last_len[row_index] > len) // There are characters in that were not overwritten and need to be cleared
 80014aa:	1cfb      	adds	r3, r7, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4a27      	ldr	r2, [pc, #156]	@ (800154c <erase_trails+0xe8>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	001a      	movs	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d23b      	bcs.n	8001532 <erase_trails+0xce>
	{
		uint8_t trails = last_len[row_index] - len;
 80014ba:	1cfb      	adds	r3, r7, #3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4a23      	ldr	r2, [pc, #140]	@ (800154c <erase_trails+0xe8>)
 80014c0:	5cd1      	ldrb	r1, [r2, r3]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	230f      	movs	r3, #15
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	1a8a      	subs	r2, r1, r2
 80014cc:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < trails; i++)
 80014ce:	2316      	movs	r3, #22
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e024      	b.n	8001522 <erase_trails+0xbe>
		{
			for (uint8_t j = 0; j < NUM_BYTES_PER_CHAR; j++)
 80014d8:	2315      	movs	r3, #21
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e014      	b.n	800150c <erase_trails+0xa8>
			{
				if ((err_code = data_write(CLR_PGE_BYTE)) != NHD_SPI_OK)
 80014e2:	2517      	movs	r5, #23
 80014e4:	197c      	adds	r4, r7, r5
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fed4 	bl	8001294 <data_write>
 80014ec:	0003      	movs	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
 80014f0:	002a      	movs	r2, r5
 80014f2:	18bb      	adds	r3, r7, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <erase_trails+0x9c>
				{
					return err_code;
 80014fa:	18bb      	adds	r3, r7, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	e021      	b.n	8001544 <erase_trails+0xe0>
			for (uint8_t j = 0; j < NUM_BYTES_PER_CHAR; j++)
 8001500:	2115      	movs	r1, #21
 8001502:	187b      	adds	r3, r7, r1
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	187b      	adds	r3, r7, r1
 8001508:	3201      	adds	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	2315      	movs	r3, #21
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b04      	cmp	r3, #4
 8001514:	d9e5      	bls.n	80014e2 <erase_trails+0x7e>
		for (uint8_t i = 0; i < trails; i++)
 8001516:	2116      	movs	r1, #22
 8001518:	187b      	adds	r3, r7, r1
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	187b      	adds	r3, r7, r1
 800151e:	3201      	adds	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	2316      	movs	r3, #22
 8001524:	18fa      	adds	r2, r7, r3
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3d2      	bcc.n	80014d8 <erase_trails+0x74>
				}
			}
		}
	}
	last_len[row_index] = len;
 8001532:	1cfb      	adds	r3, r7, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	b2d1      	uxtb	r1, r2
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <erase_trails+0xe8>)
 800153c:	54d1      	strb	r1, [r2, r3]

	return err_code;
 800153e:	2317      	movs	r3, #23
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b006      	add	sp, #24
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	200000c8 	.word	0x200000c8

08001550 <reverse>:
 * @param len: length of the character array
 *
 * @retval None
 */
void reverse(char * str, uint8_t len)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	000a      	movs	r2, r1
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0, j = len - 1, temp;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	230e      	movs	r3, #14
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	1cfa      	adds	r2, r7, #3
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	3a01      	subs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
  while (i < j)
 8001572:	e025      	b.n	80015c0 <reverse+0x70>
  {
    temp = str[i];
 8001574:	200f      	movs	r0, #15
 8001576:	183b      	adds	r3, r7, r0
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	18d2      	adds	r2, r2, r3
 800157e:	250d      	movs	r5, #13
 8001580:	197b      	adds	r3, r7, r5
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	701a      	strb	r2, [r3, #0]
    str[i] = str[j];
 8001586:	240e      	movs	r4, #14
 8001588:	193b      	adds	r3, r7, r4
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	18d2      	adds	r2, r2, r3
 8001590:	183b      	adds	r3, r7, r0
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	18cb      	adds	r3, r1, r3
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
    str[j] = temp;
 800159c:	0021      	movs	r1, r4
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	197a      	adds	r2, r7, r5
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
    i++;
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	183b      	adds	r3, r7, r0
 80015b2:	3201      	adds	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
    j--;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	3a01      	subs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
  while (i < j)
 80015c0:	230f      	movs	r3, #15
 80015c2:	18fa      	adds	r2, r7, r3
 80015c4:	230e      	movs	r3, #14
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3d1      	bcc.n	8001574 <reverse+0x24>
  }
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}

080015da <int_to_str>:
 * @param d: number of digits to place after the decimal
 *
 * @retval The number of characters in the string
 */
int32_t int_to_str(int32_t x, char str[], uint8_t d)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	701a      	strb	r2, [r3, #0]
	int32_t i = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    while (x)
 80015ec:	e016      	b.n	800161c <int_to_str+0x42>
    {
      str[i++] = (x % 10) + '0';
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	210a      	movs	r1, #10
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fefc 	bl	80003f0 <__aeabi_idivmod>
 80015f8:	000b      	movs	r3, r1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	6179      	str	r1, [r7, #20]
 8001602:	0019      	movs	r1, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	185b      	adds	r3, r3, r1
 8001608:	3230      	adds	r2, #48	@ 0x30
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
      x = x / 10;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	210a      	movs	r1, #10
 8001612:	0018      	movs	r0, r3
 8001614:	f7fe fe06 	bl	8000224 <__divsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
    while (x)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e5      	bne.n	80015ee <int_to_str+0x14>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001622:	e007      	b.n	8001634 <int_to_str+0x5a>
      str[i++] = '0';
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	617a      	str	r2, [r7, #20]
 800162a:	001a      	movs	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	189b      	adds	r3, r3, r2
 8001630:	2230      	movs	r2, #48	@ 0x30
 8001632:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbf2      	blt.n	8001624 <int_to_str+0x4a>

    reverse(str, i);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff ff82 	bl	8001550 <reverse>
    str[i] = '\0';
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	18d3      	adds	r3, r2, r3
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    return i;
 8001656:	697b      	ldr	r3, [r7, #20]
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b006      	add	sp, #24
 800165e:	bd80      	pop	{r7, pc}

08001660 <ftoa>:
 *
 * @retval None
 *
 */
void ftoa(float n, char * res, uint8_t afterpoint)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
	// Check validity of the input number 'n'
	if (res == NULL) return;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d100      	bne.n	8001676 <ftoa+0x16>
 8001674:	e0fc      	b.n	8001870 <ftoa+0x210>
	if (isnan(n)){strcpy(res,"nan"); return;}
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fbc1 	bl	8000e00 <__aeabi_fcmpun>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d008      	beq.n	8001694 <ftoa+0x34>
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4b7d      	ldr	r3, [pc, #500]	@ (800187c <ftoa+0x21c>)
 8001686:	0010      	movs	r0, r2
 8001688:	0019      	movs	r1, r3
 800168a:	2304      	movs	r3, #4
 800168c:	001a      	movs	r2, r3
 800168e:	f003 fa03 	bl	8004a98 <memcpy>
 8001692:	e0f0      	b.n	8001876 <ftoa+0x216>
	if (isinf(n)){strcpy(res,"inf"); return;}
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	085c      	lsrs	r4, r3, #1
 800169a:	2301      	movs	r3, #1
 800169c:	1c1d      	adds	r5, r3, #0
 800169e:	4978      	ldr	r1, [pc, #480]	@ (8001880 <ftoa+0x220>)
 80016a0:	1c20      	adds	r0, r4, #0
 80016a2:	f7ff fbad 	bl	8000e00 <__aeabi_fcmpun>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d107      	bne.n	80016ba <ftoa+0x5a>
 80016aa:	4975      	ldr	r1, [pc, #468]	@ (8001880 <ftoa+0x220>)
 80016ac:	1c20      	adds	r0, r4, #0
 80016ae:	f7fe fec1 	bl	8000434 <__aeabi_fcmple>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d101      	bne.n	80016ba <ftoa+0x5a>
 80016b6:	2300      	movs	r3, #0
 80016b8:	1c1d      	adds	r5, r3, #0
 80016ba:	b2eb      	uxtb	r3, r5
 80016bc:	2201      	movs	r2, #1
 80016be:	4053      	eors	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <ftoa+0x78>
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001884 <ftoa+0x224>)
 80016ca:	0010      	movs	r0, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	2304      	movs	r3, #4
 80016d0:	001a      	movs	r2, r3
 80016d2:	f003 f9e1 	bl	8004a98 <memcpy>
 80016d6:	e0ce      	b.n	8001876 <ftoa+0x216>

	// Check if the input float number 'n' is equal to zero
	if (n == 0.0f)
 80016d8:	2100      	movs	r1, #0
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7fe fe9a 	bl	8000414 <__aeabi_fcmpeq>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d027      	beq.n	8001734 <ftoa+0xd4>
	{
		res[0] = '0'; res[1] = '.';
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2230      	movs	r2, #48	@ 0x30
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	222e      	movs	r2, #46	@ 0x2e
 80016f0:	701a      	strb	r2, [r3, #0]
		for (uint8_t  i= 1; i <= afterpoint; i++)
 80016f2:	2327      	movs	r3, #39	@ 0x27
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e00c      	b.n	8001716 <ftoa+0xb6>
		{
			res[i + 1] = '0';
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	2230      	movs	r2, #48	@ 0x30
 800170a:	701a      	strb	r2, [r3, #0]
		for (uint8_t  i= 1; i <= afterpoint; i++)
 800170c:	187b      	adds	r3, r7, r1
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	187b      	adds	r3, r7, r1
 8001712:	3201      	adds	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	2327      	movs	r3, #39	@ 0x27
 8001718:	18fa      	adds	r2, r7, r3
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d9eb      	bls.n	80016fc <ftoa+0x9c>
		}
		res[afterpoint + 2] = '\0';
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3302      	adds	r3, #2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
		return;
 8001732:	e0a0      	b.n	8001876 <ftoa+0x216>
	}

	// Check if the sign of n is negative
	uint8_t startIndex = 0;
 8001734:	2426      	movs	r4, #38	@ 0x26
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	if (n < 0.0f)
 800173c:	2100      	movs	r1, #0
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7fe fe6e 	bl	8000420 <__aeabi_fcmplt>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d010      	beq.n	800176a <ftoa+0x10a>
	{
		res[startIndex] = '-';
 8001748:	0021      	movs	r1, r4
 800174a:	187b      	adds	r3, r7, r1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	222d      	movs	r2, #45	@ 0x2d
 8001754:	701a      	strb	r2, [r3, #0]
		startIndex++;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	187b      	adds	r3, r7, r1
 800175c:	3201      	adds	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		n = -n;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	0612      	lsls	r2, r2, #24
 8001766:	4053      	eors	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
	}

	// Extract integer part
	int32_t ipart = (int32_t)n;
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fb5e 	bl	8000e2c <__aeabi_f2iz>
 8001770:	0003      	movs	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
	int32_t i = 0; // i is the number of digits before the decimal
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]

	// Check if the absolute value of n is less than 1
	if ((float)abs(n) < 1.0f)
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fb57 	bl	8000e2c <__aeabi_f2iz>
 800177e:	0003      	movs	r3, r0
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	189b      	adds	r3, r3, r2
 8001784:	4053      	eors	r3, r2
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fb70 	bl	8000e6c <__aeabi_i2f>
 800178c:	1c03      	adds	r3, r0, #0
 800178e:	21fe      	movs	r1, #254	@ 0xfe
 8001790:	0589      	lsls	r1, r1, #22
 8001792:	1c18      	adds	r0, r3, #0
 8001794:	f7fe fe44 	bl	8000420 <__aeabi_fcmplt>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d00c      	beq.n	80017b6 <ftoa+0x156>
	{
		res[startIndex] = '0';
 800179c:	2126      	movs	r1, #38	@ 0x26
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	2230      	movs	r2, #48	@ 0x30
 80017a8:	701a      	strb	r2, [r3, #0]
		startIndex++;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	3201      	adds	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e00b      	b.n	80017ce <ftoa+0x16e>
	}
	else // abs(n) > 1
	{
		// convert integer part to string
		i = int_to_str(ipart, res + startIndex, 0);
 80017b6:	2326      	movs	r3, #38	@ 0x26
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	18d1      	adds	r1, r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff ff08 	bl	80015da <int_to_str>
 80017ca:	0003      	movs	r3, r0
 80017cc:	623b      	str	r3, [r7, #32]
	}

  // Extract floating part
  float fpart = n - (float)ipart;
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff fb4c 	bl	8000e6c <__aeabi_i2f>
 80017d4:	1c03      	adds	r3, r0, #0
 80017d6:	1c19      	adds	r1, r3, #0
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff f96d 	bl	8000ab8 <__aeabi_fsub>
 80017de:	1c03      	adds	r3, r0, #0
 80017e0:	613b      	str	r3, [r7, #16]

  // check for display option after point
  if (afterpoint != 0)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d045      	beq.n	8001876 <ftoa+0x216>
  {
    res[i + startIndex] = '.'; // add dot
 80017ea:	2326      	movs	r3, #38	@ 0x26
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	001a      	movs	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	189b      	adds	r3, r3, r2
 80017fa:	222e      	movs	r2, #46	@ 0x2e
 80017fc:	701a      	strb	r2, [r3, #0]

    // Get the value of fraction part up to given no.
    // of points after dot. The third parameter
    // is needed to handle cases like 233.007
    uint32_t result = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < afterpoint; i++)
 8001802:	231b      	movs	r3, #27
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e00f      	b.n	800182c <ftoa+0x1cc>
    {
      if (result > (UINT32_MAX / 10))
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <ftoa+0x228>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d82f      	bhi.n	8001874 <ftoa+0x214>
      {
        return;
      }
      result *= 10;
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	0013      	movs	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	189b      	adds	r3, r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < afterpoint; i++)
 8001820:	211b      	movs	r1, #27
 8001822:	187b      	adds	r3, r7, r1
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	187b      	adds	r3, r7, r1
 8001828:	3201      	adds	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	231b      	movs	r3, #27
 800182e:	18fa      	adds	r2, r7, r3
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3e8      	bcc.n	800180c <ftoa+0x1ac>
    }
    fpart = fpart * result;
 800183a:	69f8      	ldr	r0, [r7, #28]
 800183c:	f7ff fb62 	bl	8000f04 <__aeabi_ui2f>
 8001840:	1c03      	adds	r3, r0, #0
 8001842:	1c19      	adds	r1, r3, #0
 8001844:	6938      	ldr	r0, [r7, #16]
 8001846:	f7fe fff9 	bl	800083c <__aeabi_fmul>
 800184a:	1c03      	adds	r3, r0, #0
 800184c:	613b      	str	r3, [r7, #16]

    int_to_str((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff faec 	bl	8000e2c <__aeabi_f2iz>
 8001854:	2326      	movs	r3, #38	@ 0x26
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	3301      	adds	r3, #1
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	18d1      	adds	r1, r2, r3
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	f7ff feb6 	bl	80015da <int_to_str>
 800186e:	e002      	b.n	8001876 <ftoa+0x216>
	if (res == NULL) return;
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	e000      	b.n	8001876 <ftoa+0x216>
        return;
 8001874:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001876:	46bd      	mov	sp, r7
 8001878:	b00a      	add	sp, #40	@ 0x28
 800187a:	bdb0      	pop	{r4, r5, r7, pc}
 800187c:	08004ad8 	.word	0x08004ad8
 8001880:	7f7fffff 	.word	0x7f7fffff
 8001884:	08004adc 	.word	0x08004adc
 8001888:	19999999 	.word	0x19999999

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001892:	f000 fc4d 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001896:	f000 f863 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189a:	f000 f991 	bl	8001bc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800189e:	f000 f8a7 	bl	80019f0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80018a2:	f000 f94d 	bl	8001b40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reset_screen();
 80018a6:	f7ff fb8d 	bl	8000fc4 <reset_screen>

  NHD_LCDstatus_t err_code = NHD_SPI_OK;
 80018aa:	1cfb      	adds	r3, r7, #3
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
  err_code = init_screen();
 80018b0:	1cfc      	adds	r4, r7, #3
 80018b2:	f7ff fba0 	bl	8000ff6 <init_screen>
 80018b6:	0003      	movs	r3, r0
 80018b8:	7023      	strb	r3, [r4, #0]
  if (err_code != NHD_SPI_OK)
 80018ba:	1cfb      	adds	r3, r7, #3
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <main+0x44>
  {
    log_error(__LINE__, 'M', err_code);
 80018c2:	1cfb      	adds	r3, r7, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	214d      	movs	r1, #77	@ 0x4d
 80018ca:	208c      	movs	r0, #140	@ 0x8c
 80018cc:	f000 faa0 	bl	8001e10 <log_error>
	 //TODO: Gracefully handle initialization error
  }

  err_code = clear_screen();
 80018d0:	1cfc      	adds	r4, r7, #3
 80018d2:	f7ff fc11 	bl	80010f8 <clear_screen>
 80018d6:	0003      	movs	r3, r0
 80018d8:	7023      	strb	r3, [r4, #0]
  if (err_code != NHD_SPI_OK)
  {
	  //TODO: Gracefully handle clear screen error
  }
  err_code = cmd_write(SET_SRT_ROW); // To first line
 80018da:	1cfc      	adds	r4, r7, #3
 80018dc:	2040      	movs	r0, #64	@ 0x40
 80018de:	f7ff fc97 	bl	8001210 <cmd_write>
 80018e2:	0003      	movs	r3, r0
 80018e4:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Get voltage and current values from ADC
	  for (int i = 0; i < NUM_SENSORS; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e015      	b.n	8001918 <main+0x8c>
	  {
		  HAL_ADC_Start(&hadc1);
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <main+0xcc>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 ffc8 	bl	8002884 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <main+0xcc>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	0018      	movs	r0, r3
 80018fa:	f001 f811 	bl	8002920 <HAL_ADC_PollForConversion>
		  g_adc_buffer[i] = HAL_ADC_GetValue(&hadc1);
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <main+0xcc>)
 8001900:	0018      	movs	r0, r3
 8001902:	f001 f8a1 	bl	8002a48 <HAL_ADC_GetValue>
 8001906:	0003      	movs	r3, r0
 8001908:	b299      	uxth	r1, r3
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <main+0xd0>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	0052      	lsls	r2, r2, #1
 8001910:	52d1      	strh	r1, [r2, r3]
	  for (int i = 0; i < NUM_SENSORS; i++)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	dde6      	ble.n	80018ec <main+0x60>
	  }//Now the buffer contains all 4 values.

	  //Send input voltage, output voltage, input current, output current to the LCD screen
	  err_code = print_power_value(v_input);
 800191e:	1cfc      	adds	r4, r7, #3
 8001920:	2000      	movs	r0, #0
 8001922:	f000 f9ab 	bl	8001c7c <print_power_value>
 8001926:	0003      	movs	r3, r0
 8001928:	7023      	strb	r3, [r4, #0]
	  if (err_code != NHD_SPI_OK)
	  {
		  //TODO: Gracefully handle printing error
	  }
	  err_code = print_power_value(v_output);
 800192a:	1cfc      	adds	r4, r7, #3
 800192c:	2001      	movs	r0, #1
 800192e:	f000 f9a5 	bl	8001c7c <print_power_value>
 8001932:	0003      	movs	r3, r0
 8001934:	7023      	strb	r3, [r4, #0]
	  if (err_code != NHD_SPI_OK)
	  {
	    //TODO: Gracefully handle printing error
	  }
	  err_code = print_power_value(i_input);
 8001936:	1cfc      	adds	r4, r7, #3
 8001938:	2002      	movs	r0, #2
 800193a:	f000 f99f 	bl	8001c7c <print_power_value>
 800193e:	0003      	movs	r3, r0
 8001940:	7023      	strb	r3, [r4, #0]
	  if (err_code != NHD_SPI_OK)
	  {
	    //TODO: Gracefully handle printing error
	  }
	  err_code = print_power_value(i_output);
 8001942:	1cfc      	adds	r4, r7, #3
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f999 	bl	8001c7c <print_power_value>
 800194a:	0003      	movs	r3, r0
 800194c:	7023      	strb	r3, [r4, #0]
	  if (err_code != NHD_SPI_OK)
	  {
	    //TODO: Gracefully handle printing error
	  }
	  //delay for 100ms
	  HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	@ 0x64
 8001950:	f000 fc74 	bl	800223c <HAL_Delay>
	  for (int i = 0; i < NUM_SENSORS; i++)
 8001954:	e7c7      	b.n	80018e6 <main+0x5a>
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	200000cc 	.word	0x200000cc
 800195c:	20000194 	.word	0x20000194

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b093      	sub	sp, #76	@ 0x4c
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	2414      	movs	r4, #20
 8001968:	193b      	adds	r3, r7, r4
 800196a:	0018      	movs	r0, r3
 800196c:	2334      	movs	r3, #52	@ 0x34
 800196e:	001a      	movs	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f003 f865 	bl	8004a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	2310      	movs	r3, #16
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f003 f85e 	bl	8004a40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	0018      	movs	r0, r3
 800198a:	f001 fff1 	bl	8003970 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198e:	193b      	adds	r3, r7, r4
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2280      	movs	r2, #128	@ 0x80
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2240      	movs	r2, #64	@ 0x40
 80019a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	0018      	movs	r0, r3
 80019b2:	f002 f81d 	bl	80039f0 <HAL_RCC_OscConfig>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019ba:	f000 fa85 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2100      	movs	r1, #0
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 fb18 	bl	8004010 <HAL_RCC_ClockConfig>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019e4:	f000 fa70 	bl	8001ec8 <Error_Handler>
  }
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b013      	add	sp, #76	@ 0x4c
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	0018      	movs	r0, r3
 80019fa:	230c      	movs	r3, #12
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f003 f81e 	bl	8004a40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a04:	4b48      	ldr	r3, [pc, #288]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a06:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <MX_ADC1_Init+0x13c>)
 8001a08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a0c:	2280      	movs	r2, #128	@ 0x80
 8001a0e:	05d2      	lsls	r2, r2, #23
 8001a10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a12:	4b45      	ldr	r3, [pc, #276]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a18:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a1e:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	0392      	lsls	r2, r2, #14
 8001a24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a26:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a28:	2204      	movs	r2, #4
 8001a2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a40:	2204      	movs	r2, #4
 8001a42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001a44:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a46:	2220      	movs	r2, #32
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4c:	4b36      	ldr	r3, [pc, #216]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a52:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a5a:	222c      	movs	r2, #44	@ 0x2c
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a6e:	2207      	movs	r2, #7
 8001a70:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a74:	223c      	movs	r2, #60	@ 0x3c
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fd56 	bl	8002534 <HAL_ADC_Init>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001a8c:	f000 fa1c 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <MX_ADC1_Init+0x140>)
 8001a94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa2:	1d3a      	adds	r2, r7, #4
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 ffd9 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001ab2:	f000 fa09 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b34 <MX_ADC1_Init+0x144>)
 8001aba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2204      	movs	r2, #4
 8001ac0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac2:	1d3a      	adds	r2, r7, #4
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 ffc9 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001ad2:	f000 f9f9 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <MX_ADC1_Init+0x148>)
 8001ada:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2208      	movs	r2, #8
 8001ae0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	1d3a      	adds	r2, r7, #4
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 ffb9 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001af2:	f000 f9e9 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <MX_ADC1_Init+0x14c>)
 8001afa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	220c      	movs	r2, #12
 8001b00:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b02:	1d3a      	adds	r2, r7, #4
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 ffa9 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8001b12:	f000 f9d9 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <MX_ADC1_Init+0x138>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 faf5 	bl	8003108 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	200000cc 	.word	0x200000cc
 8001b2c:	40012400 	.word	0x40012400
 8001b30:	2c000800 	.word	0x2c000800
 8001b34:	20000100 	.word	0x20000100
 8001b38:	18000040 	.word	0x18000040
 8001b3c:	1c000080 	.word	0x1c000080

08001b40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b46:	4a1d      	ldr	r2, [pc, #116]	@ (8001bbc <MX_SPI2_Init+0x7c>)
 8001b48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b4c:	2282      	movs	r2, #130	@ 0x82
 8001b4e:	0052      	lsls	r2, r2, #1
 8001b50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b5c:	22e0      	movs	r2, #224	@ 0xe0
 8001b5e:	00d2      	lsls	r2, r2, #3
 8001b60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <MX_SPI2_Init+0x78>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f002 fbbe 	bl	8004324 <HAL_SPI_Init>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001bac:	f000 f98c 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	20000130 	.word	0x20000130
 8001bbc:	40003800 	.word	0x40003800

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	240c      	movs	r4, #12
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	0018      	movs	r0, r3
 8001bcc:	2314      	movs	r3, #20
 8001bce:	001a      	movs	r2, r3
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f002 ff35 	bl	8004a40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bda:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001bdc:	2102      	movs	r1, #2
 8001bde:	430a      	orrs	r2, r1
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_GPIO_Init+0xb4>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 8001c06:	23a0      	movs	r3, #160	@ 0xa0
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2106      	movs	r1, #6
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fe90 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_GPIO_Init+0xb8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	2108      	movs	r1, #8
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 fe8a 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _RST_Pin A0_Pin */
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 8001c20:	193b      	adds	r3, r7, r4
 8001c22:	2206      	movs	r2, #6
 8001c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	193b      	adds	r3, r7, r4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	193a      	adds	r2, r7, r4
 8001c3a:	23a0      	movs	r3, #160	@ 0xa0
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f001 fd13 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : _CS_Pin */
  GPIO_InitStruct.Pin = _CS_Pin;
 8001c46:	0021      	movs	r1, r4
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2201      	movs	r2, #1
 8001c52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <MX_GPIO_Init+0xb8>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f001 fd00 	bl	800366c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b009      	add	sp, #36	@ 0x24
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	50000400 	.word	0x50000400

08001c7c <print_power_value>:
 *
 * @param index: The character row that the value would be displayed on
 * @retval NHD_LCD status
 */
static NHD_LCDstatus_t print_power_value(uint8_t index)
{
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	0002      	movs	r2, r0
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	701a      	strb	r2, [r3, #0]
	// Set the number digits after the decimal point, and identify if it a current value or voltage value
	uint8_t decimals = 0;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
	uint8_t symbol_index;
	if (index == v_input || index == v_output)
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <print_power_value+0x24>
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <print_power_value+0x36>
	{
		decimals = 2;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
		symbol_index = 0;
 8001ca8:	230e      	movs	r3, #14
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <print_power_value+0x46>
	}
	else // if(index == i_input || i_output)
	{
		decimals = 3;
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	701a      	strb	r2, [r3, #0]
		symbol_index = 1;
 8001cba:	230e      	movs	r3, #14
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	}

	// Convert the ADC value from an integer->float->string
	ftoa((float)g_adc_buffer[index]*g_scales[index]/g_adc_res, g_num_text, decimals);
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001df0 <print_power_value+0x174>)
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	5ad3      	ldrh	r3, [r2, r3]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff f919 	bl	8000f04 <__aeabi_ui2f>
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <print_power_value+0x178>)
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	58d3      	ldr	r3, [r2, r3]
 8001cdc:	1c19      	adds	r1, r3, #0
 8001cde:	f7fe fdad 	bl	800083c <__aeabi_fmul>
 8001ce2:	1c03      	adds	r3, r0, #0
 8001ce4:	1c1c      	adds	r4, r3, #0
 8001ce6:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <print_power_value+0x17c>)
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff f8bf 	bl	8000e6c <__aeabi_i2f>
 8001cee:	1c03      	adds	r3, r0, #0
 8001cf0:	1c19      	adds	r1, r3, #0
 8001cf2:	1c20      	adds	r0, r4, #0
 8001cf4:	f7fe fbbc 	bl	8000470 <__aeabi_fdiv>
 8001cf8:	1c03      	adds	r3, r0, #0
 8001cfa:	1c18      	adds	r0, r3, #0
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <print_power_value+0x180>)
 8001d04:	0019      	movs	r1, r3
 8001d06:	f7ff fcab 	bl	8001660 <ftoa>

	// Concatenate the header string, value string and symbol string
	uint8_t num_text_len = strlen(g_num_text);
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <print_power_value+0x180>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe f9f7 	bl	8000100 <strlen>
 8001d12:	0002      	movs	r2, r0
 8001d14:	240d      	movs	r4, #13
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	701a      	strb	r2, [r3, #0]
	uint8_t symbol_len = strlen(g_unit_symbols[symbol_index]);
 8001d1a:	260e      	movs	r6, #14
 8001d1c:	19bb      	adds	r3, r7, r6
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <print_power_value+0x184>)
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	58d3      	ldr	r3, [r2, r3]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7fe f9ea 	bl	8000100 <strlen>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	250c      	movs	r5, #12
 8001d30:	197b      	adds	r3, r7, r5
 8001d32:	701a      	strb	r2, [r3, #0]
	uint8_t total_len = g_header_len[index] + num_text_len + symbol_len;
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4a32      	ldr	r2, [pc, #200]	@ (8001e04 <print_power_value+0x188>)
 8001d3a:	5cd2      	ldrb	r2, [r2, r3]
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	200b      	movs	r0, #11
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	197a      	adds	r2, r7, r5
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	188a      	adds	r2, r1, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

	if (sizeof(g_dest_text) - 1 > total_len) //checks there is enough space in the buffer for the combined text
 8001d50:	183b      	adds	r3, r7, r0
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b30      	cmp	r3, #48	@ 0x30
 8001d56:	d82f      	bhi.n	8001db8 <print_power_value+0x13c>
	{
	  memcpy(g_dest_text, g_headers[index], g_header_len[index]);
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <print_power_value+0x18c>)
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	58d1      	ldr	r1, [r2, r3]
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <print_power_value+0x188>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <print_power_value+0x190>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f002 fe92 	bl	8004a98 <memcpy>
		memcpy(g_dest_text + g_header_len[index], g_num_text, num_text_len);
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4a22      	ldr	r2, [pc, #136]	@ (8001e04 <print_power_value+0x188>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <print_power_value+0x190>)
 8001d80:	18d0      	adds	r0, r2, r3
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <print_power_value+0x180>)
 8001d88:	0019      	movs	r1, r3
 8001d8a:	f002 fe85 	bl	8004a98 <memcpy>
		memcpy(g_dest_text + g_header_len[index] + num_text_len,
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4a1c      	ldr	r2, [pc, #112]	@ (8001e04 <print_power_value+0x188>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	001a      	movs	r2, r3
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	18d2      	adds	r2, r2, r3
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <print_power_value+0x190>)
 8001da0:	18d0      	adds	r0, r2, r3
 8001da2:	19bb      	adds	r3, r7, r6
 8001da4:	781a      	ldrb	r2, [r3, #0]
		    g_unit_symbols[symbol_index], symbol_len + 1); // "+ 1" to add '\0'
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <print_power_value+0x184>)
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	58d1      	ldr	r1, [r2, r3]
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
		memcpy(g_dest_text + g_header_len[index] + num_text_len,
 8001db2:	001a      	movs	r2, r3
 8001db4:	f002 fe70 	bl	8004a98 <memcpy>
	{
		//TODO: Gracefully handle buffer overflow error
	}

	// Print string to the LCD string
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
 8001db8:	250a      	movs	r5, #10
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
	if ((err_code = print_data(g_dest_text, index)) != NHD_SPI_OK)
 8001dc0:	197c      	adds	r4, r7, r5
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <print_power_value+0x190>)
 8001dc8:	0011      	movs	r1, r2
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff faa4 	bl	8001318 <print_data>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	7023      	strb	r3, [r4, #0]
 8001dd4:	197b      	adds	r3, r7, r5
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <print_power_value+0x166>
		return err_code;
 8001ddc:	197b      	adds	r3, r7, r5
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	e002      	b.n	8001de8 <print_power_value+0x16c>

	return err_code;
 8001de2:	230a      	movs	r3, #10
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b005      	add	sp, #20
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	20000194 	.word	0x20000194
 8001df4:	08004d4c 	.word	0x08004d4c
 8001df8:	00000fff 	.word	0x00000fff
 8001dfc:	2000019c 	.word	0x2000019c
 8001e00:	20000000 	.word	0x20000000
 8001e04:	08004da4 	.word	0x08004da4
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	200001b0 	.word	0x200001b0

08001e10 <log_error>:

void log_error(uint16_t line, char source, NHD_LCDstatus_t err)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b08b      	sub	sp, #44	@ 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	0004      	movs	r4, r0
 8001e18:	0008      	movs	r0, r1
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	1dbb      	adds	r3, r7, #6
 8001e1e:	1c22      	adds	r2, r4, #0
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	1d7b      	adds	r3, r7, #5
 8001e24:	1c02      	adds	r2, r0, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	1c0a      	adds	r2, r1, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
  log_struct_t log;
  log.b0 = 'I';
 8001e2e:	210c      	movs	r1, #12
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	2249      	movs	r2, #73	@ 0x49
 8001e34:	701a      	strb	r2, [r3, #0]
  log.b1 = 'L';
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	224c      	movs	r2, #76	@ 0x4c
 8001e3a:	715a      	strb	r2, [r3, #5]
  log.b2 = 'T';
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2254      	movs	r2, #84	@ 0x54
 8001e40:	70da      	strb	r2, [r3, #3]
  log.line_num = line;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	1dba      	adds	r2, r7, #6
 8001e46:	8812      	ldrh	r2, [r2, #0]
 8001e48:	80da      	strh	r2, [r3, #6]
  log.source = source;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	1d7a      	adds	r2, r7, #5
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	709a      	strb	r2, [r3, #2]
  log.err_type = err;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	1d3a      	adds	r2, r7, #4
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	711a      	strb	r2, [r3, #4]

  log_struct_t *plog = (log_struct_t*)LOG_FLASH_START;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <log_error+0xb4>)
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t addr;
  uint64_t data;
  HAL_FLASH_Unlock();
 8001e5e:	f001 fb51 	bl	8003504 <HAL_FLASH_Unlock>
  for(uint8_t i = 0; i < 256; i++)
 8001e62:	2323      	movs	r3, #35	@ 0x23
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  {

    if(plog->b0 != 'I')
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b49      	cmp	r3, #73	@ 0x49
 8001e70:	d015      	beq.n	8001e9e <log_error+0x8e>
    {
      log.err_count = i + 1;
 8001e72:	2323      	movs	r3, #35	@ 0x23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	210c      	movs	r1, #12
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	705a      	strb	r2, [r3, #1]
      data =  *(uint64_t*)&log;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61ba      	str	r2, [r7, #24]
 8001e8a:	61fb      	str	r3, [r7, #28]
      addr = (uint32_t)plog;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	617b      	str	r3, [r7, #20]
      HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr,data);
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	2001      	movs	r0, #1
 8001e98:	f001 fae6 	bl	8003468 <HAL_FLASH_Program>
      break;
 8001e9c:	e009      	b.n	8001eb2 <log_error+0xa2>
    }
    plog++;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	3308      	adds	r3, #8
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  for(uint8_t i = 0; i < 256; i++)
 8001ea4:	2123      	movs	r1, #35	@ 0x23
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	3201      	adds	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
    if(plog->b0 != 'I')
 8001eb0:	e7db      	b.n	8001e6a <log_error+0x5a>
  }
  HAL_FLASH_Lock();
 8001eb2:	f001 fb4b 	bl	800354c <HAL_FLASH_Lock>
  Error_Handler();
 8001eb6:	f000 f807 	bl	8001ec8 <Error_Handler>

}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b00b      	add	sp, #44	@ 0x2c
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	0800f800 	.word	0x0800f800

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x8>

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_MspInit+0x44>)
 8001edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_MspInit+0x44>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_MspInit+0x44>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_MspInit+0x44>)
 8001ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_MspInit+0x44>)
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	0549      	lsls	r1, r1, #21
 8001efc:	430a      	orrs	r2, r1
 8001efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_MspInit+0x44>)
 8001f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	4013      	ands	r3, r2
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b08b      	sub	sp, #44	@ 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	2414      	movs	r4, #20
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	0018      	movs	r0, r3
 8001f2a:	2314      	movs	r3, #20
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f002 fd86 	bl	8004a40 <memset>
  if(hadc->Instance==ADC1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <HAL_ADC_MspInit+0xb8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d145      	bne.n	8001fca <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	0349      	lsls	r1, r1, #13
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	035b      	lsls	r3, r3, #13
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f60:	2102      	movs	r1, #2
 8001f62:	430a      	orrs	r2, r1
 8001f64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_ADC_MspInit+0xbc>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	2281      	movs	r2, #129	@ 0x81
 8001f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	2203      	movs	r2, #3
 8001f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_ADC_MspInit+0xc0>)
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	f001 fb62 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_Input_Current_Pin|S_Output_Current_Pin;
 8001fa8:	0021      	movs	r1, r4
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	22c0      	movs	r2, #192	@ 0xc0
 8001fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	187a      	adds	r2, r7, r1
 8001fbe:	23a0      	movs	r3, #160	@ 0xa0
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f001 fb51 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b00b      	add	sp, #44	@ 0x2c
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	40012400 	.word	0x40012400
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	50000400 	.word	0x50000400

08001fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b08b      	sub	sp, #44	@ 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	2414      	movs	r4, #20
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	0018      	movs	r0, r3
 8001fee:	2314      	movs	r3, #20
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f002 fd24 	bl	8004a40 <memset>
  if(hspi->Instance==SPI2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <HAL_SPI_MspInit+0xb8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d146      	bne.n	8002090 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 8002004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002006:	4b25      	ldr	r3, [pc, #148]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	01c9      	lsls	r1, r1, #7
 800200c:	430a      	orrs	r2, r1
 800200e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002010:	4b22      	ldr	r3, [pc, #136]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 8002012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 8002024:	2101      	movs	r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
 800202a:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <HAL_SPI_MspInit+0xbc>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002036:	193b      	adds	r3, r7, r4
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	193b      	adds	r3, r7, r4
 800203e:	2202      	movs	r2, #2
 8002040:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	193b      	adds	r3, r7, r4
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	193b      	adds	r3, r7, r4
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800204e:	193b      	adds	r3, r7, r4
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	193a      	adds	r2, r7, r4
 8002056:	23a0      	movs	r3, #160	@ 0xa0
 8002058:	05db      	lsls	r3, r3, #23
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f001 fb05 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002062:	0021      	movs	r1, r4
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2210      	movs	r2, #16
 8002068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2202      	movs	r2, #2
 800206e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800207c:	187b      	adds	r3, r7, r1
 800207e:	2201      	movs	r2, #1
 8002080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	187a      	adds	r2, r7, r1
 8002084:	23a0      	movs	r3, #160	@ 0xa0
 8002086:	05db      	lsls	r3, r3, #23
 8002088:	0011      	movs	r1, r2
 800208a:	0018      	movs	r0, r3
 800208c:	f001 faee 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b00b      	add	sp, #44	@ 0x2c
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	40003800 	.word	0x40003800
 800209c:	40021000 	.word	0x40021000

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c8:	f000 f89c 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020dc:	480d      	ldr	r0, [pc, #52]	@ (8002114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e0:	f7ff fff7 	bl	80020d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopForever+0xe>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopForever+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800210a:	f002 fca1 	bl	8004a50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800210e:	f7ff fbbd 	bl	800188c <main>

08002112 <LoopForever>:

LoopForever:
  b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   r0, =_estack
 8002114:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002120:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8002124:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002128:	20000204 	.word	0x20000204

0800212c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_IRQHandler>
	...

08002130 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_Init+0x3c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_Init+0x3c>)
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	0049      	lsls	r1, r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214a:	2003      	movs	r0, #3
 800214c:	f000 f810 	bl	8002170 <HAL_InitTick>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d003      	beq.n	800215c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e001      	b.n	8002160 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff feba 	bl	8001ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	781b      	ldrb	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_InitTick+0x88>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02b      	beq.n	80021e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_InitTick+0x8c>)
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_InitTick+0x88>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	0019      	movs	r1, r3
 8002192:	23fa      	movs	r3, #250	@ 0xfa
 8002194:	0098      	lsls	r0, r3, #2
 8002196:	f7fd ffbb 	bl	8000110 <__udivsi3>
 800219a:	0003      	movs	r3, r0
 800219c:	0019      	movs	r1, r3
 800219e:	0020      	movs	r0, r4
 80021a0:	f7fd ffb6 	bl	8000110 <__udivsi3>
 80021a4:	0003      	movs	r3, r0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 f951 	bl	800344e <HAL_SYSTICK_Config>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d112      	bne.n	80021d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d80a      	bhi.n	80021cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	2301      	movs	r3, #1
 80021ba:	425b      	negs	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	0018      	movs	r0, r3
 80021c0:	f001 f930 	bl	8003424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_InitTick+0x90>)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00d      	b.n	80021e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e008      	b.n	80021e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e003      	b.n	80021e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e0:	230f      	movs	r3, #15
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	781b      	ldrb	r3, [r3, #0]
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b005      	add	sp, #20
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	20000020 	.word	0x20000020
 80021fc:	20000018 	.word	0x20000018
 8002200:	2000001c 	.word	0x2000001c

08002204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_IncTick+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_IncTick+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_IncTick+0x20>)
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20000020 	.word	0x20000020
 8002224:	200001e4 	.word	0x200001e4

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b02      	ldr	r3, [pc, #8]	@ (8002238 <HAL_GetTick+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	200001e4 	.word	0x200001e4

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fff0 	bl	8002228 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	189b      	adds	r3, r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	f7ff ffe0 	bl	8002228 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	46c0      	nop			@ (mov r8, r8)
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	20000020 	.word	0x20000020

08002284 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002294:	401a      	ands	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	fe3fffff 	.word	0xfe3fffff

080022ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	23e0      	movs	r3, #224	@ 0xe0
 80022ba:	045b      	lsls	r3, r3, #17
 80022bc:	4013      	ands	r3, r2
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	2104      	movs	r1, #4
 80022da:	400a      	ands	r2, r1
 80022dc:	2107      	movs	r1, #7
 80022de:	4091      	lsls	r1, r2
 80022e0:	000a      	movs	r2, r1
 80022e2:	43d2      	mvns	r2, r2
 80022e4:	401a      	ands	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2104      	movs	r1, #4
 80022ea:	400b      	ands	r3, r1
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4099      	lsls	r1, r3
 80022f0:	000b      	movs	r3, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}

08002300 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	2104      	movs	r1, #4
 8002312:	400a      	ands	r2, r1
 8002314:	2107      	movs	r1, #7
 8002316:	4091      	lsls	r1, r2
 8002318:	000a      	movs	r2, r1
 800231a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2104      	movs	r1, #4
 8002320:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002322:	40da      	lsrs	r2, r3
 8002324:	0013      	movs	r3, r2
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}

0800232e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	23c0      	movs	r3, #192	@ 0xc0
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d101      	bne.n	8002346 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	211f      	movs	r1, #31
 8002364:	400a      	ands	r2, r1
 8002366:	210f      	movs	r1, #15
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	210f      	movs	r1, #15
 8002376:	4019      	ands	r1, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	201f      	movs	r0, #31
 800237c:	4003      	ands	r3, r0
 800237e:	4099      	lsls	r1, r3
 8002380:	000b      	movs	r3, r1
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002388:	46c0      	nop			@ (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}

08002390 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	035b      	lsls	r3, r3, #13
 80023a2:	0b5b      	lsrs	r3, r3, #13
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	0352      	lsls	r2, r2, #13
 80023c4:	0b52      	lsrs	r2, r2, #13
 80023c6:	43d2      	mvns	r2, r2
 80023c8:	401a      	ands	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b002      	add	sp, #8
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	0212      	lsls	r2, r2, #8
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	401a      	ands	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	400b      	ands	r3, r1
 80023f8:	4904      	ldr	r1, [pc, #16]	@ (800240c <LL_ADC_SetChannelSamplingTime+0x34>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	07ffff00 	.word	0x07ffff00

08002410 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <LL_ADC_EnableInternalRegulator+0x24>)
 800241e:	4013      	ands	r3, r2
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	0552      	lsls	r2, r2, #21
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	6fffffe8 	.word	0x6fffffe8

08002438 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	055b      	lsls	r3, r3, #21
 8002448:	401a      	ands	r2, r3
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	055b      	lsls	r3, r3, #21
 800244e:	429a      	cmp	r2, r3
 8002450:	d101      	bne.n	8002456 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <LL_ADC_Enable+0x20>)
 800246e:	4013      	ands	r3, r2
 8002470:	2201      	movs	r2, #1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	7fffffe8 	.word	0x7fffffe8

08002484 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <LL_ADC_Disable+0x20>)
 8002492:	4013      	ands	r3, r2
 8002494:	2202      	movs	r2, #2
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	7fffffe8 	.word	0x7fffffe8

080024a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_IsEnabled+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_IsEnabled+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}

080024ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d101      	bne.n	80024e2 <LL_ADC_IsDisableOngoing+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_ADC_IsDisableOngoing+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <LL_ADC_REG_StartConversion+0x20>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	2204      	movs	r2, #4
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}
 800250c:	7fffffe8 	.word	0x7fffffe8

08002510 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	2b04      	cmp	r3, #4
 8002522:	d101      	bne.n	8002528 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002528:	2300      	movs	r3, #0
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253c:	231f      	movs	r3, #31
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e17f      	b.n	800285a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff fcd9 	bl	8001f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2254      	movs	r2, #84	@ 0x54
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ff5b 	bl	8002438 <LL_ADC_IsInternalRegulatorEnabled>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d115      	bne.n	80025b2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff ff40 	bl	8002410 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002590:	4bb4      	ldr	r3, [pc, #720]	@ (8002864 <HAL_ADC_Init+0x330>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	49b4      	ldr	r1, [pc, #720]	@ (8002868 <HAL_ADC_Init+0x334>)
 8002596:	0018      	movs	r0, r3
 8002598:	f7fd fdba 	bl	8000110 <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7ff ff3e 	bl	8002438 <LL_ADC_IsInternalRegulatorEnabled>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d10f      	bne.n	80025e0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	2210      	movs	r2, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	2201      	movs	r2, #1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025d8:	231f      	movs	r3, #31
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff93 	bl	8002510 <LL_ADC_REG_IsConversionOngoing>
 80025ea:	0003      	movs	r3, r0
 80025ec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	2210      	movs	r2, #16
 80025f4:	4013      	ands	r3, r2
 80025f6:	d000      	beq.n	80025fa <HAL_ADC_Init+0xc6>
 80025f8:	e122      	b.n	8002840 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d000      	beq.n	8002602 <HAL_ADC_Init+0xce>
 8002600:	e11e      	b.n	8002840 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a99      	ldr	r2, [pc, #612]	@ (800286c <HAL_ADC_Init+0x338>)
 8002608:	4013      	ands	r3, r2
 800260a:	2202      	movs	r2, #2
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff ff46 	bl	80024a8 <LL_ADC_IsEnabled>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d000      	beq.n	8002622 <HAL_ADC_Init+0xee>
 8002620:	e0ad      	b.n	800277e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7e1b      	ldrb	r3, [r3, #24]
 800262a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800262c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7e5b      	ldrb	r3, [r3, #25]
 8002632:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002634:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7e9b      	ldrb	r3, [r3, #26]
 800263a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800263c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_ADC_Init+0x118>
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	015b      	lsls	r3, r3, #5
 800264a:	e000      	b.n	800264e <HAL_ADC_Init+0x11a>
 800264c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800264e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002654:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da04      	bge.n	8002668 <HAL_ADC_Init+0x134>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	e001      	b.n	800266c <HAL_ADC_Init+0x138>
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800266c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	212c      	movs	r1, #44	@ 0x2c
 8002672:	5c5b      	ldrb	r3, [r3, r1]
 8002674:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002676:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d115      	bne.n	80026b4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e9b      	ldrb	r3, [r3, #26]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2280      	movs	r2, #128	@ 0x80
 8002694:	0252      	lsls	r2, r2, #9
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e00b      	b.n	80026b4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	2220      	movs	r2, #32
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2201      	movs	r2, #1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c0:	23e0      	movs	r3, #224	@ 0xe0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a65      	ldr	r2, [pc, #404]	@ (8002870 <HAL_ADC_Init+0x33c>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0f9b      	lsrs	r3, r3, #30
 80026ee:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026f4:	4313      	orrs	r3, r2
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	223c      	movs	r2, #60	@ 0x3c
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d111      	bne.n	800272a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0f9b      	lsrs	r3, r3, #30
 800270c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002712:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002718:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800271e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	2201      	movs	r2, #1
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4a50      	ldr	r2, [pc, #320]	@ (8002874 <HAL_ADC_Init+0x340>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	430a      	orrs	r2, r1
 800273e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	23c0      	movs	r3, #192	@ 0xc0
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	429a      	cmp	r2, r3
 800274a:	d018      	beq.n	800277e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	429a      	cmp	r2, r3
 8002756:	d012      	beq.n	800277e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	429a      	cmp	r2, r3
 8002762:	d00c      	beq.n	800277e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002764:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <HAL_ADC_Init+0x344>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a44      	ldr	r2, [pc, #272]	@ (800287c <HAL_ADC_Init+0x348>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	23f0      	movs	r3, #240	@ 0xf0
 8002774:	039b      	lsls	r3, r3, #14
 8002776:	401a      	ands	r2, r3
 8002778:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <HAL_ADC_Init+0x344>)
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	001a      	movs	r2, r3
 8002788:	2100      	movs	r1, #0
 800278a:	f7ff fd9c 	bl	80022c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	493a      	ldr	r1, [pc, #232]	@ (8002880 <HAL_ADC_Init+0x34c>)
 8002798:	001a      	movs	r2, r3
 800279a:	f7ff fd94 	bl	80022c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2110      	movs	r1, #16
 80027b2:	4249      	negs	r1, r1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027b8:	e018      	b.n	80027ec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	039b      	lsls	r3, r3, #14
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d112      	bne.n	80027ec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	221c      	movs	r2, #28
 80027d6:	4013      	ands	r3, r2
 80027d8:	2210      	movs	r2, #16
 80027da:	4252      	negs	r2, r2
 80027dc:	409a      	lsls	r2, r3
 80027de:	0011      	movs	r1, r2
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fd84 	bl	8002300 <LL_ADC_GetSamplingTimeCommonChannels>
 80027f8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10b      	bne.n	800281a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	2203      	movs	r2, #3
 800280e:	4393      	bics	r3, r2
 8002810:	2201      	movs	r2, #1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002818:	e01c      	b.n	8002854 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	2212      	movs	r2, #18
 8002820:	4393      	bics	r3, r2
 8002822:	2210      	movs	r2, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	2201      	movs	r2, #1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800283e:	e009      	b.n	8002854 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	2210      	movs	r2, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800284c:	231f      	movs	r3, #31
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002854:	231f      	movs	r3, #31
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b008      	add	sp, #32
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	20000018 	.word	0x20000018
 8002868:	00030d40 	.word	0x00030d40
 800286c:	fffffefd 	.word	0xfffffefd
 8002870:	ffde0201 	.word	0xffde0201
 8002874:	1ffffc02 	.word	0x1ffffc02
 8002878:	40012708 	.word	0x40012708
 800287c:	ffc3ffff 	.word	0xffc3ffff
 8002880:	07ffff04 	.word	0x07ffff04

08002884 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff fe3d 	bl	8002510 <LL_ADC_REG_IsConversionOngoing>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d135      	bne.n	8002906 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2254      	movs	r2, #84	@ 0x54
 800289e:	5c9b      	ldrb	r3, [r3, r2]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_Start+0x24>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e035      	b.n	8002914 <HAL_ADC_Start+0x90>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2254      	movs	r2, #84	@ 0x54
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b0:	250f      	movs	r5, #15
 80028b2:	197c      	adds	r4, r7, r5
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 faaa 	bl	8002e10 <ADC_Enable>
 80028bc:	0003      	movs	r3, r0
 80028be:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d119      	bne.n	80028fc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_ADC_Start+0x98>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	2280      	movs	r2, #128	@ 0x80
 80028d2:	0052      	lsls	r2, r2, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	221c      	movs	r2, #28
 80028e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2254      	movs	r2, #84	@ 0x54
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff fdf9 	bl	80024ec <LL_ADC_REG_StartConversion>
 80028fa:	e008      	b.n	800290e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2254      	movs	r2, #84	@ 0x54
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]
 8002904:	e003      	b.n	800290e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002906:	230f      	movs	r3, #15
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800290e:	230f      	movs	r3, #15
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	fffff0fe 	.word	0xfffff0fe

08002920 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d102      	bne.n	8002938 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002932:	2308      	movs	r3, #8
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e00f      	b.n	8002958 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	4013      	ands	r3, r2
 8002942:	d007      	beq.n	8002954 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	2220      	movs	r2, #32
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e072      	b.n	8002a3a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002954:	2304      	movs	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002958:	f7ff fc66 	bl	8002228 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002960:	e01f      	b.n	80029a2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	d01c      	beq.n	80029a2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002968:	f7ff fc5e 	bl	8002228 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <HAL_ADC_PollForConversion+0x5e>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d111      	bne.n	80029a2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	2204      	movs	r2, #4
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2254      	movs	r2, #84	@ 0x54
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04b      	b.n	8002a3a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	d0d9      	beq.n	8002962 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	2280      	movs	r2, #128	@ 0x80
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff fcb4 	bl	800232e <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d02e      	beq.n	8002a28 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7e9b      	ldrb	r3, [r3, #26]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d12a      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	4013      	ands	r3, r2
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d123      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fd93 	bl	8002510 <LL_ADC_REG_IsConversionOngoing>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d110      	bne.n	8002a10 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	210c      	movs	r1, #12
 80029fa:	438a      	bics	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <HAL_ADC_PollForConversion+0x124>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	2201      	movs	r2, #1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a0e:	e00b      	b.n	8002a28 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	2220      	movs	r2, #32
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2201      	movs	r2, #1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e1b      	ldrb	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	220c      	movs	r2, #12
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	fffffefe 	.word	0xfffffefe

08002a48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2317      	movs	r3, #23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2254      	movs	r2, #84	@ 0x54
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x24>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e1c0      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3a6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2254      	movs	r2, #84	@ 0x54
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff fd3d 	bl	8002510 <LL_ADC_REG_IsConversionOngoing>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d000      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x3c>
 8002a9a:	e1a3      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x46>
 8002aa4:	e143      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d004      	beq.n	8002abc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ab6:	4ac1      	ldr	r2, [pc, #772]	@ (8002dbc <HAL_ADC_ConfigChannel+0x35c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f7ff fc62 	bl	8002390 <LL_ADC_REG_SetSequencerChAdd>
 8002acc:	e0c9      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	211f      	movs	r1, #31
 8002ad8:	400b      	ands	r3, r1
 8002ada:	210f      	movs	r1, #15
 8002adc:	4099      	lsls	r1, r3
 8002ade:	000b      	movs	r3, r1
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	035b      	lsls	r3, r3, #13
 8002aec:	0b5b      	lsrs	r3, r3, #13
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x9c>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	221f      	movs	r2, #31
 8002af8:	4013      	ands	r3, r2
 8002afa:	e098      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d000      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0xa8>
 8002b06:	e091      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1cc>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d000      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0xb4>
 8002b12:	e089      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1c8>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d000      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0xc0>
 8002b1e:	e081      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x1c4>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2208      	movs	r2, #8
 8002b26:	4013      	ands	r3, r2
 8002b28:	d000      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0xcc>
 8002b2a:	e079      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x1c0>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	4013      	ands	r3, r2
 8002b34:	d000      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0xd8>
 8002b36:	e071      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1bc>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d000      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0xe4>
 8002b42:	e069      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1b8>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d000      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0xf0>
 8002b4e:	e061      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1b4>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	4013      	ands	r3, r2
 8002b58:	d000      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0xfc>
 8002b5a:	e059      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1b0>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d151      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1ac>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d149      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1a8>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d141      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1a4>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d139      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1a0>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	015b      	lsls	r3, r3, #5
 8002b94:	4013      	ands	r3, r2
 8002b96:	d131      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x19c>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d129      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x198>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	d121      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x194>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d119      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x190>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	025b      	lsls	r3, r3, #9
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d111      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x18c>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d109      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x188>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	02db      	lsls	r3, r3, #11
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d001      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x184>
 8002be0:	2312      	movs	r3, #18
 8002be2:	e024      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002be4:	2300      	movs	r3, #0
 8002be6:	e022      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002be8:	2311      	movs	r3, #17
 8002bea:	e020      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002bec:	2310      	movs	r3, #16
 8002bee:	e01e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	e01c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002bf4:	230e      	movs	r3, #14
 8002bf6:	e01a      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002bf8:	230d      	movs	r3, #13
 8002bfa:	e018      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	e016      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c00:	230b      	movs	r3, #11
 8002c02:	e014      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c04:	230a      	movs	r3, #10
 8002c06:	e012      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c08:	2309      	movs	r3, #9
 8002c0a:	e010      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	e00e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c10:	2307      	movs	r3, #7
 8002c12:	e00c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c14:	2306      	movs	r3, #6
 8002c16:	e00a      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c18:	2305      	movs	r3, #5
 8002c1a:	e008      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e006      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c20:	2303      	movs	r3, #3
 8002c22:	e004      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ce>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6852      	ldr	r2, [r2, #4]
 8002c32:	201f      	movs	r0, #31
 8002c34:	4002      	ands	r2, r0
 8002c36:	4093      	lsls	r3, r2
 8002c38:	000a      	movs	r2, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d808      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	f7ff fb77 	bl	8002350 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	001a      	movs	r2, r3
 8002c70:	f7ff fbb2 	bl	80023d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db00      	blt.n	8002c7e <HAL_ADC_ConfigChannel+0x21e>
 8002c7c:	e0bc      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c7e:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff fb13 	bl	80022ac <LL_ADC_GetCommonPathInternalCh>
 8002c86:	0003      	movs	r3, r0
 8002c88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x364>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d122      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c9c:	d11d      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2280      	movs	r2, #128	@ 0x80
 8002ca2:	0412      	lsls	r2, r2, #16
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	4a46      	ldr	r2, [pc, #280]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002ca8:	0019      	movs	r1, r3
 8002caa:	0010      	movs	r0, r2
 8002cac:	f7ff faea 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x368>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4945      	ldr	r1, [pc, #276]	@ (8002dcc <HAL_ADC_ConfigChannel+0x36c>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7fd fa2a 	bl	8000110 <__udivsi3>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	189b      	adds	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f9      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cd8:	e08e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x370>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10e      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	045b      	lsls	r3, r3, #17
 8002cea:	4013      	ands	r3, r2
 8002cec:	d109      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2280      	movs	r2, #128	@ 0x80
 8002cf2:	0452      	lsls	r2, r2, #17
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	4a32      	ldr	r2, [pc, #200]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	f7ff fac2 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
 8002d00:	e07a      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a33      	ldr	r2, [pc, #204]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x374>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d000      	beq.n	8002d0e <HAL_ADC_ConfigChannel+0x2ae>
 8002d0c:	e074      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	03db      	lsls	r3, r3, #15
 8002d14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d16:	d000      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0x2ba>
 8002d18:	e06e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	03d2      	lsls	r2, r2, #15
 8002d20:	4313      	orrs	r3, r2
 8002d22:	4a27      	ldr	r2, [pc, #156]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002d24:	0019      	movs	r1, r3
 8002d26:	0010      	movs	r0, r2
 8002d28:	f7ff faac 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
 8002d2c:	e064      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_ADC_ConfigChannel+0x35c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d107      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	0010      	movs	r0, r2
 8002d50:	f7ff fb2f 	bl	80023b2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da4d      	bge.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d5c:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff faa4 	bl	80022ac <LL_ADC_GetCommonPathInternalCh>
 8002d64:	0003      	movs	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x364>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x378>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7ff fa81 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
 8002d82:	e039      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a11      	ldr	r2, [pc, #68]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x370>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <HAL_ADC_ConfigChannel+0x37c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002d96:	0019      	movs	r1, r3
 8002d98:	0010      	movs	r0, r2
 8002d9a:	f7ff fa73 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
 8002d9e:	e02b      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x374>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d126      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4a0c      	ldr	r2, [pc, #48]	@ (8002de0 <HAL_ADC_ConfigChannel+0x380>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	4a03      	ldr	r2, [pc, #12]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x360>)
 8002db2:	0019      	movs	r1, r3
 8002db4:	0010      	movs	r0, r2
 8002db6:	f7ff fa65 	bl	8002284 <LL_ADC_SetCommonPathInternalCh>
 8002dba:	e01d      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x398>
 8002dbc:	80000004 	.word	0x80000004
 8002dc0:	40012708 	.word	0x40012708
 8002dc4:	b0001000 	.word	0xb0001000
 8002dc8:	20000018 	.word	0x20000018
 8002dcc:	00030d40 	.word	0x00030d40
 8002dd0:	b8004000 	.word	0xb8004000
 8002dd4:	b4002000 	.word	0xb4002000
 8002dd8:	ff7fffff 	.word	0xff7fffff
 8002ddc:	feffffff 	.word	0xfeffffff
 8002de0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	2220      	movs	r2, #32
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002df0:	2317      	movs	r3, #23
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2254      	movs	r2, #84	@ 0x54
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e00:	2317      	movs	r3, #23
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	781b      	ldrb	r3, [r3, #0]
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b006      	add	sp, #24
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			@ (mov r8, r8)

08002e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff fb41 	bl	80024a8 <LL_ADC_IsEnabled>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d000      	beq.n	8002e2c <ADC_Enable+0x1c>
 8002e2a:	e069      	b.n	8002f00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a36      	ldr	r2, [pc, #216]	@ (8002f0c <ADC_Enable+0xfc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	d00d      	beq.n	8002e54 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e056      	b.n	8002f02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fb01 	bl	8002460 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <ADC_Enable+0x100>)
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff fa23 	bl	80022ac <LL_ADC_GetCommonPathInternalCh>
 8002e66:	0002      	movs	r2, r0
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00f      	beq.n	8002e90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e70:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <ADC_Enable+0x104>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4928      	ldr	r1, [pc, #160]	@ (8002f18 <ADC_Enable+0x108>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f94a 	bl	8000110 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002e80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e82:	e002      	b.n	8002e8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e5b      	ldrb	r3, [r3, #25]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d033      	beq.n	8002f00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e98:	f7ff f9c6 	bl	8002228 <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea0:	e027      	b.n	8002ef2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff fafe 	bl	80024a8 <LL_ADC_IsEnabled>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d104      	bne.n	8002eba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fad3 	bl	8002460 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eba:	f7ff f9b5 	bl	8002228 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d914      	bls.n	8002ef2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	2210      	movs	r2, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e007      	b.n	8002f02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d1d0      	bne.n	8002ea2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b004      	add	sp, #16
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	80000017 	.word	0x80000017
 8002f10:	40012708 	.word	0x40012708
 8002f14:	20000018 	.word	0x20000018
 8002f18:	00030d40 	.word	0x00030d40

08002f1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff face 	bl	80024ca <LL_ADC_IsDisableOngoing>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff fab6 	bl	80024a8 <LL_ADC_IsEnabled>
 8002f3c:	1e03      	subs	r3, r0, #0
 8002f3e:	d046      	beq.n	8002fce <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d143      	bne.n	8002fce <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10d      	bne.n	8002f70 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff fa93 	bl	8002484 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2203      	movs	r2, #3
 8002f64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f66:	f7ff f95f 	bl	8002228 <HAL_GetTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f6e:	e028      	b.n	8002fc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	2210      	movs	r2, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	2201      	movs	r2, #1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e021      	b.n	8002fd0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f8c:	f7ff f94c 	bl	8002228 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d913      	bls.n	8002fc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	2210      	movs	r2, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e006      	b.n	8002fd0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d1de      	bne.n	8002f8c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b004      	add	sp, #16
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <LL_ADC_GetCommonClock>:
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	23f0      	movs	r3, #240	@ 0xf0
 8002fe6:	039b      	lsls	r3, r3, #14
 8002fe8:	4013      	ands	r3, r2
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <LL_ADC_GetClock>:
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	0f9b      	lsrs	r3, r3, #30
 8003000:	079b      	lsls	r3, r3, #30
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b002      	add	sp, #8
 8003008:	bd80      	pop	{r7, pc}

0800300a <LL_ADC_SetCalibrationFactor>:
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	22b4      	movs	r2, #180	@ 0xb4
 8003018:	589b      	ldr	r3, [r3, r2]
 800301a:	227f      	movs	r2, #127	@ 0x7f
 800301c:	4393      	bics	r3, r2
 800301e:	001a      	movs	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	21b4      	movs	r1, #180	@ 0xb4
 8003028:	505a      	str	r2, [r3, r1]
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_ADC_GetCalibrationFactor>:
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	22b4      	movs	r2, #180	@ 0xb4
 800303e:	589b      	ldr	r3, [r3, r2]
 8003040:	227f      	movs	r2, #127	@ 0x7f
 8003042:	4013      	ands	r3, r2
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <LL_ADC_Enable>:
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <LL_ADC_Enable+0x20>)
 800305a:	4013      	ands	r3, r2
 800305c:	2201      	movs	r2, #1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	7fffffe8 	.word	0x7fffffe8

08003070 <LL_ADC_Disable>:
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <LL_ADC_Disable+0x20>)
 800307e:	4013      	ands	r3, r2
 8003080:	2202      	movs	r2, #2
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	46c0      	nop			@ (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}
 8003090:	7fffffe8 	.word	0x7fffffe8

08003094 <LL_ADC_IsEnabled>:
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2201      	movs	r2, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <LL_ADC_IsEnabled+0x18>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <LL_ADC_IsEnabled+0x1a>
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <LL_ADC_StartCalibration>:
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a05      	ldr	r2, [pc, #20]	@ (80030dc <LL_ADC_StartCalibration+0x24>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	2280      	movs	r2, #128	@ 0x80
 80030ca:	0612      	lsls	r2, r2, #24
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	7fffffe8 	.word	0x7fffffe8

080030e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	0fdb      	lsrs	r3, r3, #31
 80030ee:	07da      	lsls	r2, r3, #31
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d101      	bne.n	80030fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_ADC_IsCalibrationOnGoing+0x1e>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b08b      	sub	sp, #44	@ 0x2c
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2254      	movs	r2, #84	@ 0x54
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADCEx_Calibration_Start+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0dd      	b.n	80032e2 <HAL_ADCEx_Calibration_Start+0x1da>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2254      	movs	r2, #84	@ 0x54
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800312e:	231f      	movs	r3, #31
 8003130:	18fc      	adds	r4, r7, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fef1 	bl	8002f1c <ADC_Disable>
 800313a:	0003      	movs	r3, r0
 800313c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff ffa6 	bl	8003094 <LL_ADC_IsEnabled>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d000      	beq.n	800314e <HAL_ADCEx_Calibration_Start+0x46>
 800314c:	e0bc      	b.n	80032c8 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	4a66      	ldr	r2, [pc, #408]	@ (80032ec <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003154:	4013      	ands	r3, r2
 8003156:	2202      	movs	r2, #2
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a62      	ldr	r2, [pc, #392]	@ (80032f0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	495f      	ldr	r1, [pc, #380]	@ (80032f4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003176:	400a      	ands	r2, r1
 8003178:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
 800317e:	e02d      	b.n	80031dc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff ff97 	bl	80030b8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800318a:	e014      	b.n	80031b6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d90d      	bls.n	80031b6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	2212      	movs	r2, #18
 80031a0:	4393      	bics	r3, r2
 80031a2:	2210      	movs	r2, #16
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2254      	movs	r2, #84	@ 0x54
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e095      	b.n	80032e2 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7ff ff90 	bl	80030e0 <LL_ADC_IsCalibrationOnGoing>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d1e3      	bne.n	800318c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff ff32 	bl	8003032 <LL_ADC_GetCalibrationFactor>
 80031ce:	0002      	movs	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	2b07      	cmp	r3, #7
 80031e0:	d9ce      	bls.n	8003180 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80031e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031e4:	6a38      	ldr	r0, [r7, #32]
 80031e6:	f7fc ff93 	bl	8000110 <__udivsi3>
 80031ea:	0003      	movs	r3, r0
 80031ec:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff ff2a 	bl	800304c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fef8 	bl	8002ff2 <LL_ADC_GetClock>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d11b      	bne.n	800323e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003206:	4b3d      	ldr	r3, [pc, #244]	@ (80032fc <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff fee5 	bl	8002fd8 <LL_ADC_GetCommonClock>
 800320e:	0003      	movs	r3, r0
 8003210:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	23e0      	movs	r3, #224	@ 0xe0
 8003216:	035b      	lsls	r3, r3, #13
 8003218:	429a      	cmp	r2, r3
 800321a:	d310      	bcc.n	800323e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	0c9b      	lsrs	r3, r3, #18
 8003220:	3b03      	subs	r3, #3
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	0013      	movs	r3, r2
 8003228:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8003230:	e002      	b.n	8003238 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3b01      	subs	r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f9      	bne.n	8003232 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff fedf 	bl	800300a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff ff0d 	bl	8003070 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003256:	f7fe ffe7 	bl	8002228 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800325e:	e01b      	b.n	8003298 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003260:	f7fe ffe2 	bl	8002228 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d914      	bls.n	8003298 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff0e 	bl	8003094 <LL_ADC_IsEnabled>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d00d      	beq.n	8003298 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	2210      	movs	r2, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2201      	movs	r2, #1
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e024      	b.n	80032e2 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fef9 	bl	8003094 <LL_ADC_IsEnabled>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d1dc      	bne.n	8003260 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68d9      	ldr	r1, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	2203      	movs	r2, #3
 80032bc:	4393      	bics	r3, r2
 80032be:	2201      	movs	r2, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80032c6:	e005      	b.n	80032d4 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	2210      	movs	r2, #16
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2254      	movs	r2, #84	@ 0x54
 80032d8:	2100      	movs	r1, #0
 80032da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80032dc:	231f      	movs	r3, #31
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b00b      	add	sp, #44	@ 0x2c
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	fffffefd 	.word	0xfffffefd
 80032f0:	00008003 	.word	0x00008003
 80032f4:	ffff7ffc 	.word	0xffff7ffc
 80032f8:	0002f1ff 	.word	0x0002f1ff
 80032fc:	40012708 	.word	0x40012708

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	0002      	movs	r2, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b7f      	cmp	r3, #127	@ 0x7f
 8003314:	d828      	bhi.n	8003368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003316:	4a2f      	ldr	r2, [pc, #188]	@ (80033d4 <__NVIC_SetPriority+0xd4>)
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	33c0      	adds	r3, #192	@ 0xc0
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	589b      	ldr	r3, [r3, r2]
 8003326:	1dfa      	adds	r2, r7, #7
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	0011      	movs	r1, r2
 800332c:	2203      	movs	r2, #3
 800332e:	400a      	ands	r2, r1
 8003330:	00d2      	lsls	r2, r2, #3
 8003332:	21ff      	movs	r1, #255	@ 0xff
 8003334:	4091      	lsls	r1, r2
 8003336:	000a      	movs	r2, r1
 8003338:	43d2      	mvns	r2, r2
 800333a:	401a      	ands	r2, r3
 800333c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	22ff      	movs	r2, #255	@ 0xff
 8003344:	401a      	ands	r2, r3
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	0018      	movs	r0, r3
 800334c:	2303      	movs	r3, #3
 800334e:	4003      	ands	r3, r0
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003354:	481f      	ldr	r0, [pc, #124]	@ (80033d4 <__NVIC_SetPriority+0xd4>)
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b25b      	sxtb	r3, r3
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	430a      	orrs	r2, r1
 8003360:	33c0      	adds	r3, #192	@ 0xc0
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003366:	e031      	b.n	80033cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003368:	4a1b      	ldr	r2, [pc, #108]	@ (80033d8 <__NVIC_SetPriority+0xd8>)
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	0019      	movs	r1, r3
 8003370:	230f      	movs	r3, #15
 8003372:	400b      	ands	r3, r1
 8003374:	3b08      	subs	r3, #8
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	3304      	adds	r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	1dfa      	adds	r2, r7, #7
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	0011      	movs	r1, r2
 8003388:	2203      	movs	r2, #3
 800338a:	400a      	ands	r2, r1
 800338c:	00d2      	lsls	r2, r2, #3
 800338e:	21ff      	movs	r1, #255	@ 0xff
 8003390:	4091      	lsls	r1, r2
 8003392:	000a      	movs	r2, r1
 8003394:	43d2      	mvns	r2, r2
 8003396:	401a      	ands	r2, r3
 8003398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	22ff      	movs	r2, #255	@ 0xff
 80033a0:	401a      	ands	r2, r3
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	0018      	movs	r0, r3
 80033a8:	2303      	movs	r3, #3
 80033aa:	4003      	ands	r3, r0
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b0:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <__NVIC_SetPriority+0xd8>)
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	001c      	movs	r4, r3
 80033b8:	230f      	movs	r3, #15
 80033ba:	4023      	ands	r3, r4
 80033bc:	3b08      	subs	r3, #8
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	430a      	orrs	r2, r1
 80033c2:	3306      	adds	r3, #6
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	18c3      	adds	r3, r0, r3
 80033c8:	3304      	adds	r3, #4
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b003      	add	sp, #12
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1e5a      	subs	r2, r3, #1
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	045b      	lsls	r3, r3, #17
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d301      	bcc.n	80033f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f0:	2301      	movs	r3, #1
 80033f2:	e010      	b.n	8003416 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <SysTick_Config+0x44>)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	3a01      	subs	r2, #1
 80033fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fc:	2301      	movs	r3, #1
 80033fe:	425b      	negs	r3, r3
 8003400:	2103      	movs	r1, #3
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff ff7c 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <SysTick_Config+0x44>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <SysTick_Config+0x44>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	210f      	movs	r1, #15
 8003430:	187b      	adds	r3, r7, r1
 8003432:	1c02      	adds	r2, r0, #0
 8003434:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	187b      	adds	r3, r7, r1
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b25b      	sxtb	r3, r3
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff ffbf 	bl	80033dc <SysTick_Config>
 800345e:	0003      	movs	r3, r0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603a      	str	r2, [r7, #0]
 8003474:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003476:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <HAL_FLASH_Program+0x94>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_FLASH_Program+0x1a>
 800347e:	2302      	movs	r3, #2
 8003480:	e038      	b.n	80034f4 <HAL_FLASH_Program+0x8c>
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_FLASH_Program+0x94>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003488:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_FLASH_Program+0x94>)
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800348e:	2517      	movs	r5, #23
 8003490:	197c      	adds	r4, r7, r5
 8003492:	23fa      	movs	r3, #250	@ 0xfa
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f87a 	bl	8003590 <FLASH_WaitForLastOperation>
 800349c:	0003      	movs	r3, r0
 800349e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11f      	bne.n	80034e8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	0008      	movs	r0, r1
 80034b6:	f000 f8b9 	bl	800362c <FLASH_Program_DoubleWord>
 80034ba:	e005      	b.n	80034c8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f001 fb00 	bl	8004ac8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034c8:	2317      	movs	r3, #23
 80034ca:	18fc      	adds	r4, r7, r3
 80034cc:	23fa      	movs	r3, #250	@ 0xfa
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f85d 	bl	8003590 <FLASH_WaitForLastOperation>
 80034d6:	0003      	movs	r3, r0
 80034d8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_FLASH_Program+0x98>)
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43d9      	mvns	r1, r3
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <HAL_FLASH_Program+0x98>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <HAL_FLASH_Program+0x94>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80034ee:	2317      	movs	r3, #23
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b006      	add	sp, #24
 80034fa:	bdb0      	pop	{r4, r5, r7, pc}
 80034fc:	200001e8 	.word	0x200001e8
 8003500:	40022000 	.word	0x40022000

08003504 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_FLASH_Unlock+0x3c>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da0c      	bge.n	8003532 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_FLASH_Unlock+0x3c>)
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_FLASH_Unlock+0x40>)
 800351c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <HAL_FLASH_Unlock+0x3c>)
 8003520:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_FLASH_Unlock+0x44>)
 8003522:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_FLASH_Unlock+0x3c>)
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da02      	bge.n	8003532 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003532:	1dfb      	adds	r3, r7, #7
 8003534:	781b      	ldrb	r3, [r3, #0]
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	40022000 	.word	0x40022000
 8003544:	45670123 	.word	0x45670123
 8003548:	cdef89ab 	.word	0xcdef89ab

0800354c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003558:	23fa      	movs	r3, #250	@ 0xfa
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f817 	bl	8003590 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_FLASH_Lock+0x40>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_FLASH_Lock+0x40>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	0609      	lsls	r1, r1, #24
 800356c:	430a      	orrs	r2, r1
 800356e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_FLASH_Lock+0x40>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da02      	bge.n	800357e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	781b      	ldrb	r3, [r3, #0]
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	40022000 	.word	0x40022000

08003590 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7fe fe46 	bl	8002228 <HAL_GetTick>
 800359c:	0003      	movs	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	025b      	lsls	r3, r3, #9
 80035a4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80035a6:	e00c      	b.n	80035c2 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3301      	adds	r3, #1
 80035ac:	d009      	beq.n	80035c2 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80035ae:	f7fe fe3b 	bl	8002228 <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d801      	bhi.n	80035c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e028      	b.n	8003614 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80035c2:	4b16      	ldr	r3, [pc, #88]	@ (800361c <FLASH_WaitForLastOperation+0x8c>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1ed      	bne.n	80035a8 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <FLASH_WaitForLastOperation+0x8c>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <FLASH_WaitForLastOperation+0x90>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <FLASH_WaitForLastOperation+0x8c>)
 80035d8:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <FLASH_WaitForLastOperation+0x94>)
 80035da:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d011      	beq.n	8003606 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <FLASH_WaitForLastOperation+0x98>)
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e013      	b.n	8003614 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	d009      	beq.n	8003606 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80035f2:	f7fe fe19 	bl	8002228 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d801      	bhi.n	8003606 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e006      	b.n	8003614 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003606:	4b05      	ldr	r3, [pc, #20]	@ (800361c <FLASH_WaitForLastOperation+0x8c>)
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	02db      	lsls	r3, r3, #11
 800360e:	4013      	ands	r3, r2
 8003610:	d1ec      	bne.n	80035ec <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b004      	add	sp, #16
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40022000 	.word	0x40022000
 8003620:	000083fa 	.word	0x000083fa
 8003624:	000083fb 	.word	0x000083fb
 8003628:	200001e8 	.word	0x200001e8

0800362c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	603a      	str	r2, [r7, #0]
 8003636:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <FLASH_Program_DoubleWord+0x3c>)
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <FLASH_Program_DoubleWord+0x3c>)
 800363e:	2101      	movs	r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800364a:	f3bf 8f6f 	isb	sy
}
 800364e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	001c      	movs	r4, r3
 8003654:	2300      	movs	r3, #0
 8003656:	001d      	movs	r5, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3304      	adds	r3, #4
 800365c:	0022      	movs	r2, r4
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bdb0      	pop	{r4, r5, r7, pc}
 8003668:	40022000 	.word	0x40022000

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	e147      	b.n	800390c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4091      	lsls	r1, r2
 8003686:	000a      	movs	r2, r1
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d100      	bne.n	8003694 <HAL_GPIO_Init+0x28>
 8003692:	e138      	b.n	8003906 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	4013      	ands	r3, r2
 800369c:	2b01      	cmp	r3, #1
 800369e:	d005      	beq.n	80036ac <HAL_GPIO_Init+0x40>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d130      	bne.n	800370e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	409a      	lsls	r2, r3
 80036ba:	0013      	movs	r3, r2
 80036bc:	43da      	mvns	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	0013      	movs	r3, r2
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036e2:	2201      	movs	r2, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
 80036e8:	0013      	movs	r3, r2
 80036ea:	43da      	mvns	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	2201      	movs	r2, #1
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2203      	movs	r2, #3
 8003714:	4013      	ands	r3, r2
 8003716:	2b03      	cmp	r3, #3
 8003718:	d017      	beq.n	800374a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	409a      	lsls	r2, r3
 8003728:	0013      	movs	r3, r2
 800372a:	43da      	mvns	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	0013      	movs	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2203      	movs	r2, #3
 8003750:	4013      	ands	r3, r2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d123      	bne.n	800379e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	58d3      	ldr	r3, [r2, r3]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2207      	movs	r2, #7
 8003768:	4013      	ands	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	220f      	movs	r2, #15
 800376e:	409a      	lsls	r2, r3
 8003770:	0013      	movs	r3, r2
 8003772:	43da      	mvns	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2107      	movs	r1, #7
 8003782:	400b      	ands	r3, r1
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	08da      	lsrs	r2, r3, #3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3208      	adds	r2, #8
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	6939      	ldr	r1, [r7, #16]
 800379c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	43da      	mvns	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	401a      	ands	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	0013      	movs	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	23c0      	movs	r3, #192	@ 0xc0
 80037d8:	029b      	lsls	r3, r3, #10
 80037da:	4013      	ands	r3, r2
 80037dc:	d100      	bne.n	80037e0 <HAL_GPIO_Init+0x174>
 80037de:	e092      	b.n	8003906 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80037e0:	4a50      	ldr	r2, [pc, #320]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3318      	adds	r3, #24
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4013      	ands	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	220f      	movs	r2, #15
 80037f8:	409a      	lsls	r2, r3
 80037fa:	0013      	movs	r3, r2
 80037fc:	43da      	mvns	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	23a0      	movs	r3, #160	@ 0xa0
 8003808:	05db      	lsls	r3, r3, #23
 800380a:	429a      	cmp	r2, r3
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x1ca>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a45      	ldr	r2, [pc, #276]	@ (8003928 <HAL_GPIO_Init+0x2bc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_GPIO_Init+0x1c6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a44      	ldr	r2, [pc, #272]	@ (800392c <HAL_GPIO_Init+0x2c0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x1c2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a43      	ldr	r2, [pc, #268]	@ (8003930 <HAL_GPIO_Init+0x2c4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_GPIO_Init+0x1be>
 8003826:	2303      	movs	r3, #3
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x1cc>
 800382a:	2305      	movs	r3, #5
 800382c:	e004      	b.n	8003838 <HAL_GPIO_Init+0x1cc>
 800382e:	2302      	movs	r3, #2
 8003830:	e002      	b.n	8003838 <HAL_GPIO_Init+0x1cc>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_GPIO_Init+0x1cc>
 8003836:	2300      	movs	r3, #0
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	2103      	movs	r1, #3
 800383c:	400a      	ands	r2, r1
 800383e:	00d2      	lsls	r2, r2, #3
 8003840:	4093      	lsls	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003848:	4936      	ldr	r1, [pc, #216]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3318      	adds	r3, #24
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003856:	4b33      	ldr	r3, [pc, #204]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	43da      	mvns	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	035b      	lsls	r3, r3, #13
 800386e:	4013      	ands	r3, r2
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800387a:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	43da      	mvns	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	2380      	movs	r3, #128	@ 0x80
 8003896:	039b      	lsls	r3, r3, #14
 8003898:	4013      	ands	r3, r2
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 80038ac:	2384      	movs	r3, #132	@ 0x84
 80038ae:	58d3      	ldr	r3, [r2, r3]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	4013      	ands	r3, r2
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038d0:	4914      	ldr	r1, [pc, #80]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 80038d2:	2284      	movs	r2, #132	@ 0x84
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80038d8:	4a12      	ldr	r2, [pc, #72]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 80038da:	2380      	movs	r3, #128	@ 0x80
 80038dc:	58d3      	ldr	r3, [r2, r3]
 80038de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	43da      	mvns	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	4013      	ands	r3, r2
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038fe:	4909      	ldr	r1, [pc, #36]	@ (8003924 <HAL_GPIO_Init+0x2b8>)
 8003900:	2280      	movs	r2, #128	@ 0x80
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3301      	adds	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	40da      	lsrs	r2, r3
 8003914:	1e13      	subs	r3, r2, #0
 8003916:	d000      	beq.n	800391a <HAL_GPIO_Init+0x2ae>
 8003918:	e6b0      	b.n	800367c <HAL_GPIO_Init+0x10>
  }
}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021800 	.word	0x40021800
 8003928:	50000400 	.word	0x50000400
 800392c:	50000800 	.word	0x50000800
 8003930:	50000c00 	.word	0x50000c00

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	0008      	movs	r0, r1
 800393e:	0011      	movs	r1, r2
 8003940:	1cbb      	adds	r3, r7, #2
 8003942:	1c02      	adds	r2, r0, #0
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	1c7b      	adds	r3, r7, #1
 8003948:	1c0a      	adds	r2, r1, #0
 800394a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800394c:	1c7b      	adds	r3, r7, #1
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003954:	1cbb      	adds	r3, r7, #2
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800395c:	e003      	b.n	8003966 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d11f      	bne.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003994:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	0013      	movs	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	189b      	adds	r3, r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4912      	ldr	r1, [pc, #72]	@ (80039ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7fc fbb4 	bl	8000110 <__udivsi3>
 80039a8:	0003      	movs	r3, r0
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ae:	e008      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e001      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e009      	b.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039c2:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	401a      	ands	r2, r3
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d0ed      	beq.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b004      	add	sp, #16
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	40007000 	.word	0x40007000
 80039e4:	fffff9ff 	.word	0xfffff9ff
 80039e8:	20000018 	.word	0x20000018
 80039ec:	000f4240 	.word	0x000f4240

080039f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e2f3      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <HAL_RCC_OscConfig+0x1e>
 8003a0c:	e07c      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4bc3      	ldr	r3, [pc, #780]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2238      	movs	r2, #56	@ 0x38
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4bc0      	ldr	r3, [pc, #768]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3e>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4bb9      	ldr	r3, [pc, #740]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d062      	beq.n	8003b06 <HAL_RCC_OscConfig+0x116>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d15e      	bne.n	8003b06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e2ce      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	025b      	lsls	r3, r3, #9
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x78>
 8003a58:	4bb0      	ldr	r3, [pc, #704]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4baf      	ldr	r3, [pc, #700]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	0249      	lsls	r1, r1, #9
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e020      	b.n	8003aaa <HAL_RCC_OscConfig+0xba>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	23a0      	movs	r3, #160	@ 0xa0
 8003a6e:	02db      	lsls	r3, r3, #11
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10e      	bne.n	8003a92 <HAL_RCC_OscConfig+0xa2>
 8003a74:	4ba9      	ldr	r3, [pc, #676]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4ba8      	ldr	r3, [pc, #672]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	2180      	movs	r1, #128	@ 0x80
 8003a7c:	02c9      	lsls	r1, r1, #11
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	4ba6      	ldr	r3, [pc, #664]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba5      	ldr	r3, [pc, #660]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0249      	lsls	r1, r1, #9
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0xba>
 8003a92:	4ba2      	ldr	r3, [pc, #648]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4ba1      	ldr	r3, [pc, #644]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a98:	49a1      	ldr	r1, [pc, #644]	@ (8003d20 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	4b9f      	ldr	r3, [pc, #636]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b9e      	ldr	r3, [pc, #632]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	499f      	ldr	r1, [pc, #636]	@ (8003d24 <HAL_RCC_OscConfig+0x334>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d014      	beq.n	8003adc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fbb9 	bl	8002228 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fbb4 	bl	8002228 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e28d      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	4b93      	ldr	r3, [pc, #588]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	029b      	lsls	r3, r3, #10
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xcc>
 8003ada:	e015      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fba4 	bl	8002228 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae6:	f7fe fb9f 	bl	8002228 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	@ 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e278      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af8:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	4013      	ands	r3, r2
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xf6>
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b06:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d100      	bne.n	8003b14 <HAL_RCC_OscConfig+0x124>
 8003b12:	e099      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b14:	4b81      	ldr	r3, [pc, #516]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2238      	movs	r2, #56	@ 0x38
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0x144>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d002      	beq.n	8003b3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d135      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	4b78      	ldr	r3, [pc, #480]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4013      	ands	r3, r2
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x162>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e24b      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b72      	ldr	r3, [pc, #456]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a74      	ldr	r2, [pc, #464]	@ (8003d28 <HAL_RCC_OscConfig+0x338>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	4b6e      	ldr	r3, [pc, #440]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6e      	ldr	r2, [pc, #440]	@ (8003d2c <HAL_RCC_OscConfig+0x33c>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	4b67      	ldr	r3, [pc, #412]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b82:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	2207      	movs	r2, #7
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a68      	ldr	r2, [pc, #416]	@ (8003d30 <HAL_RCC_OscConfig+0x340>)
 8003b8e:	40da      	lsrs	r2, r3
 8003b90:	4b68      	ldr	r3, [pc, #416]	@ (8003d34 <HAL_RCC_OscConfig+0x344>)
 8003b92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b94:	4b68      	ldr	r3, [pc, #416]	@ (8003d38 <HAL_RCC_OscConfig+0x348>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fe fae9 	bl	8002170 <HAL_InitTick>
 8003b9e:	1e03      	subs	r3, r0, #0
 8003ba0:	d051      	beq.n	8003c46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e221      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d030      	beq.n	8003c10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bae:	4b5b      	ldr	r3, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x33c>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	4b57      	ldr	r3, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b56      	ldr	r3, [pc, #344]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bc8:	2180      	movs	r1, #128	@ 0x80
 8003bca:	0049      	lsls	r1, r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fb2a 	bl	8002228 <HAL_GetTick>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fe fb25 	bl	8002228 <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1fe      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003d28 <HAL_RCC_OscConfig+0x338>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e01b      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c10:	4b42      	ldr	r3, [pc, #264]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c16:	4949      	ldr	r1, [pc, #292]	@ (8003d3c <HAL_RCC_OscConfig+0x34c>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fb04 	bl	8002228 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fe faff 	bl	8002228 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e1d8      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4013      	ands	r3, r2
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x236>
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c52:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2238      	movs	r2, #56	@ 0x38
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b18      	cmp	r3, #24
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d03c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d138      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e1ba      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c7c:	4b27      	ldr	r3, [pc, #156]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe face 	bl	8002228 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fe fac9 	bl	8002228 <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1a2      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
 8003cac:	d0f1      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2a2>
 8003cae:	e018      	b.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cb4:	4b19      	ldr	r3, [pc, #100]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fab4 	bl	8002228 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe faaf 	bl	8002228 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e188      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cdc:	2202      	movs	r2, #2
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d1f1      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d100      	bne.n	8003cee <HAL_RCC_OscConfig+0x2fe>
 8003cec:	e0c6      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	231f      	movs	r3, #31
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2238      	movs	r2, #56	@ 0x38
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d11e      	bne.n	8003d40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <HAL_RCC_OscConfig+0x31e>
 8003d0c:	e0b6      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d000      	beq.n	8003d18 <HAL_RCC_OscConfig+0x328>
 8003d16:	e0b1      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e166      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	fffeffff 	.word	0xfffeffff
 8003d24:	fffbffff 	.word	0xfffbffff
 8003d28:	ffff80ff 	.word	0xffff80ff
 8003d2c:	ffffc7ff 	.word	0xffffc7ff
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	20000018 	.word	0x20000018
 8003d38:	2000001c 	.word	0x2000001c
 8003d3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d40:	4bac      	ldr	r3, [pc, #688]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	055b      	lsls	r3, r3, #21
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x360>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x362>
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d011      	beq.n	8003d7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4ba7      	ldr	r3, [pc, #668]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d5a:	4ba6      	ldr	r3, [pc, #664]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	0549      	lsls	r1, r1, #21
 8003d60:	430a      	orrs	r2, r1
 8003d62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d64:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	055b      	lsls	r3, r3, #21
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d72:	231f      	movs	r3, #31
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4013      	ands	r3, r2
 8003d84:	d11a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d86:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d8c:	2180      	movs	r1, #128	@ 0x80
 8003d8e:	0049      	lsls	r1, r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fa48 	bl	8002228 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fe fa43 	bl	8002228 <HAL_GetTick>
 8003da2:	0002      	movs	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e11c      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b91      	ldr	r3, [pc, #580]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3e2>
 8003dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dc8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x41c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x404>
 8003dda:	4b86      	ldr	r3, [pc, #536]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dde:	4b85      	ldr	r3, [pc, #532]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003de0:	2104      	movs	r1, #4
 8003de2:	430a      	orrs	r2, r1
 8003de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003de6:	4b83      	ldr	r3, [pc, #524]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003de8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dea:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x41c>
 8003df4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003df6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e00:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e04:	4b7b      	ldr	r3, [pc, #492]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e06:	2104      	movs	r1, #4
 8003e08:	438a      	bics	r2, r1
 8003e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe fa08 	bl	8002228 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	e009      	b.n	8003e32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe fa03 	bl	8002228 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4a74      	ldr	r2, [pc, #464]	@ (8003ffc <HAL_RCC_OscConfig+0x60c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0db      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b70      	ldr	r3, [pc, #448]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x42e>
 8003e3c:	e013      	b.n	8003e66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fe f9f3 	bl	8002228 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fe f9ee 	bl	8002228 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a6a      	ldr	r2, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x60c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0c6      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	4b65      	ldr	r3, [pc, #404]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b60      	ldr	r3, [pc, #384]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e74:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e76:	4962      	ldr	r1, [pc, #392]	@ (8004000 <HAL_RCC_OscConfig+0x610>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d100      	bne.n	8003e86 <HAL_RCC_OscConfig+0x496>
 8003e84:	e0b0      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2238      	movs	r2, #56	@ 0x38
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d100      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4a4>
 8003e92:	e078      	b.n	8003f86 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d153      	bne.n	8003f44 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b54      	ldr	r3, [pc, #336]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ea2:	4958      	ldr	r1, [pc, #352]	@ (8004004 <HAL_RCC_OscConfig+0x614>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f9be 	bl	8002228 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fe f9b9 	bl	8002228 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e092      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	049b      	lsls	r3, r3, #18
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4b48      	ldr	r3, [pc, #288]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8004008 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b3c      	ldr	r3, [pc, #240]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	0449      	lsls	r1, r1, #17
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	0549      	lsls	r1, r1, #21
 8003f16:	430a      	orrs	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fe f985 	bl	8002228 <HAL_GetTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fe f980 	bl	8002228 <HAL_GetTick>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e059      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	049b      	lsls	r3, r3, #18
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x534>
 8003f42:	e051      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f4a:	492e      	ldr	r1, [pc, #184]	@ (8004004 <HAL_RCC_OscConfig+0x614>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f96a 	bl	8002228 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f965 	bl	8002228 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e03e      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f7e:	4923      	ldr	r1, [pc, #140]	@ (800400c <HAL_RCC_OscConfig+0x61c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e030      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e02b      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2270      	movs	r2, #112	@ 0x70
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d117      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	23fe      	movs	r3, #254	@ 0xfe
 8003fb8:	01db      	lsls	r3, r3, #7
 8003fba:	401a      	ands	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	23f8      	movs	r3, #248	@ 0xf8
 8003fca:	039b      	lsls	r3, r3, #14
 8003fcc:	401a      	ands	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	0f5b      	lsrs	r3, r3, #29
 8003fda:	075a      	lsls	r2, r3, #29
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b008      	add	sp, #32
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	00001388 	.word	0x00001388
 8004000:	efffffff 	.word	0xefffffff
 8004004:	feffffff 	.word	0xfeffffff
 8004008:	1fc1808c 	.word	0x1fc1808c
 800400c:	effefffc 	.word	0xeffefffc

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0e9      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b76      	ldr	r3, [pc, #472]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2207      	movs	r2, #7
 800402a:	4013      	ands	r3, r2
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d91e      	bls.n	8004070 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b73      	ldr	r3, [pc, #460]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2207      	movs	r2, #7
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	4b70      	ldr	r3, [pc, #448]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004044:	f7fe f8f0 	bl	8002228 <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800404c:	e009      	b.n	8004062 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404e:	f7fe f8eb 	bl	8002228 <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0ca      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004062:	4b67      	ldr	r3, [pc, #412]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d1ee      	bne.n	800404e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d015      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2204      	movs	r2, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d006      	beq.n	8004092 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004084:	4b60      	ldr	r3, [pc, #384]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800408a:	21e0      	movs	r1, #224	@ 0xe0
 800408c:	01c9      	lsls	r1, r1, #7
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004092:	4b5d      	ldr	r3, [pc, #372]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4a5d      	ldr	r2, [pc, #372]	@ (800420c <HAL_RCC_ClockConfig+0x1fc>)
 8004098:	4013      	ands	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	d057      	beq.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b8:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	4013      	ands	r3, r2
 80040c2:	d12b      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e097      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	049b      	lsls	r3, r3, #18
 80040d8:	4013      	ands	r3, r2
 80040da:	d11f      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e08b      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e8:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4013      	ands	r3, r2
 80040f2:	d113      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e07f      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d106      	bne.n	800410e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004100:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d108      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e074      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410e:	4b3e      	ldr	r3, [pc, #248]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	2202      	movs	r2, #2
 8004114:	4013      	ands	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e06d      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800411c:	4b3a      	ldr	r3, [pc, #232]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2207      	movs	r2, #7
 8004122:	4393      	bics	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004130:	f7fe f87a 	bl	8002228 <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004138:	e009      	b.n	800414e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413a:	f7fe f875 	bl	8002228 <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	4a2f      	ldr	r2, [pc, #188]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e054      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	@ 0x38
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	429a      	cmp	r2, r3
 800415e:	d1ec      	bne.n	800413a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004160:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2207      	movs	r2, #7
 8004166:	4013      	ands	r3, r2
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d21e      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2207      	movs	r2, #7
 8004174:	4393      	bics	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004180:	f7fe f852 	bl	8002228 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004188:	e009      	b.n	800419e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418a:	f7fe f84d 	bl	8002228 <HAL_GetTick>
 800418e:	0002      	movs	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e02c      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800419e:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2207      	movs	r2, #7
 80041a4:	4013      	ands	r3, r2
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1ee      	bne.n	800418a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2204      	movs	r2, #4
 80041b2:	4013      	ands	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_RCC_ClockConfig+0x200>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041ca:	f000 f829 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041ce:	0001      	movs	r1, r0
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	220f      	movs	r2, #15
 80041d8:	401a      	ands	r2, r3
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <HAL_RCC_ClockConfig+0x204>)
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	58d3      	ldr	r3, [r2, r3]
 80041e0:	221f      	movs	r2, #31
 80041e2:	4013      	ands	r3, r2
 80041e4:	000a      	movs	r2, r1
 80041e6:	40da      	lsrs	r2, r3
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_ClockConfig+0x208>)
 80041ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_ClockConfig+0x20c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fd ffbd 	bl	8002170 <HAL_InitTick>
 80041f6:	0003      	movs	r3, r0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40022000 	.word	0x40022000
 8004204:	00001388 	.word	0x00001388
 8004208:	40021000 	.word	0x40021000
 800420c:	fffff0ff 	.word	0xfffff0ff
 8004210:	ffff8fff 	.word	0xffff8fff
 8004214:	08004da8 	.word	0x08004da8
 8004218:	20000018 	.word	0x20000018
 800421c:	2000001c 	.word	0x2000001c

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	4b3c      	ldr	r3, [pc, #240]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2238      	movs	r2, #56	@ 0x38
 800422c:	4013      	ands	r3, r2
 800422e:	d10f      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004230:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0adb      	lsrs	r3, r3, #11
 8004236:	2207      	movs	r2, #7
 8004238:	4013      	ands	r3, r2
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	0013      	movs	r3, r2
 8004240:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4835      	ldr	r0, [pc, #212]	@ (800431c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004246:	f7fb ff63 	bl	8000110 <__udivsi3>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e05d      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004250:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2238      	movs	r2, #56	@ 0x38
 8004256:	4013      	ands	r3, r2
 8004258:	2b08      	cmp	r3, #8
 800425a:	d102      	bne.n	8004262 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b30      	ldr	r3, [pc, #192]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x100>)
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e054      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004262:	4b2d      	ldr	r3, [pc, #180]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2238      	movs	r2, #56	@ 0x38
 8004268:	4013      	ands	r3, r2
 800426a:	2b10      	cmp	r3, #16
 800426c:	d138      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800426e:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2203      	movs	r2, #3
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004278:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	2207      	movs	r2, #7
 8004280:	4013      	ands	r3, r2
 8004282:	3301      	adds	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d10d      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4824      	ldr	r0, [pc, #144]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x100>)
 8004290:	f7fb ff3e 	bl	8000110 <__udivsi3>
 8004294:	0003      	movs	r3, r0
 8004296:	0019      	movs	r1, r3
 8004298:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	227f      	movs	r2, #127	@ 0x7f
 80042a0:	4013      	ands	r3, r2
 80042a2:	434b      	muls	r3, r1
 80042a4:	617b      	str	r3, [r7, #20]
        break;
 80042a6:	e00d      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	481c      	ldr	r0, [pc, #112]	@ (800431c <HAL_RCC_GetSysClockFreq+0xfc>)
 80042ac:	f7fb ff30 	bl	8000110 <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	0019      	movs	r1, r3
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	227f      	movs	r2, #127	@ 0x7f
 80042bc:	4013      	ands	r3, r2
 80042be:	434b      	muls	r3, r1
 80042c0:	617b      	str	r3, [r7, #20]
        break;
 80042c2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0f5b      	lsrs	r3, r3, #29
 80042ca:	2207      	movs	r2, #7
 80042cc:	4013      	ands	r3, r2
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f7fb ff1b 	bl	8000110 <__udivsi3>
 80042da:	0003      	movs	r3, r0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	e015      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2238      	movs	r2, #56	@ 0x38
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d103      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042f4:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2238      	movs	r2, #56	@ 0x38
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b18      	cmp	r3, #24
 80042fe:	d103      	bne.n	8004308 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004300:	23fa      	movs	r3, #250	@ 0xfa
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e001      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800430c:	693b      	ldr	r3, [r7, #16]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	40021000 	.word	0x40021000
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0a8      	b.n	8004488 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	2382      	movs	r3, #130	@ 0x82
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	429a      	cmp	r2, r3
 8004348:	d009      	beq.n	800435e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	61da      	str	r2, [r3, #28]
 8004350:	e005      	b.n	800435e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	225d      	movs	r2, #93	@ 0x5d
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	225c      	movs	r2, #92	@ 0x5c
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f7fd fe30 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	225d      	movs	r2, #93	@ 0x5d
 8004384:	2102      	movs	r1, #2
 8004386:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2140      	movs	r1, #64	@ 0x40
 8004394:	438a      	bics	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	23e0      	movs	r3, #224	@ 0xe0
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d902      	bls.n	80043aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e002      	b.n	80043b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043aa:	2380      	movs	r3, #128	@ 0x80
 80043ac:	015b      	lsls	r3, r3, #5
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	23f0      	movs	r3, #240	@ 0xf0
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d008      	beq.n	80043ce <HAL_SPI_Init+0xaa>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	23e0      	movs	r3, #224	@ 0xe0
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	2382      	movs	r3, #130	@ 0x82
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	2384      	movs	r3, #132	@ 0x84
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	400b      	ands	r3, r1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2102      	movs	r1, #2
 80043ea:	400b      	ands	r3, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2101      	movs	r1, #1
 80043f4:	400b      	ands	r3, r1
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6999      	ldr	r1, [r3, #24]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	400b      	ands	r3, r1
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2138      	movs	r1, #56	@ 0x38
 800440a:	400b      	ands	r3, r1
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	2180      	movs	r1, #128	@ 0x80
 8004414:	400b      	ands	r3, r1
 8004416:	431a      	orrs	r2, r3
 8004418:	0011      	movs	r1, r2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	2204      	movs	r2, #4
 8004434:	401a      	ands	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	2110      	movs	r1, #16
 800443c:	400b      	ands	r3, r1
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	2108      	movs	r1, #8
 8004446:	400b      	ands	r3, r1
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68d9      	ldr	r1, [r3, #12]
 800444e:	23f0      	movs	r3, #240	@ 0xf0
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	400b      	ands	r3, r1
 8004454:	431a      	orrs	r2, r3
 8004456:	0011      	movs	r1, r2
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	015b      	lsls	r3, r3, #5
 800445e:	401a      	ands	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4907      	ldr	r1, [pc, #28]	@ (8004490 <HAL_SPI_Init+0x16c>)
 8004474:	400a      	ands	r2, r1
 8004476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	225d      	movs	r2, #93	@ 0x5d
 8004482:	2101      	movs	r1, #1
 8004484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}
 8004490:	fffff7ff 	.word	0xfffff7ff

08004494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	1dbb      	adds	r3, r7, #6
 80044a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a4:	231f      	movs	r3, #31
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	225c      	movs	r2, #92	@ 0x5c
 80044b0:	5c9b      	ldrb	r3, [r3, r2]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Transmit+0x26>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e147      	b.n	800474a <HAL_SPI_Transmit+0x2b6>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	225c      	movs	r2, #92	@ 0x5c
 80044be:	2101      	movs	r1, #1
 80044c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c2:	f7fd feb1 	bl	8002228 <HAL_GetTick>
 80044c6:	0003      	movs	r3, r0
 80044c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044ca:	2316      	movs	r3, #22
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	1dba      	adds	r2, r7, #6
 80044d0:	8812      	ldrh	r2, [r2, #0]
 80044d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	225d      	movs	r2, #93	@ 0x5d
 80044d8:	5c9b      	ldrb	r3, [r3, r2]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d004      	beq.n	80044ea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80044e0:	231f      	movs	r3, #31
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	2202      	movs	r2, #2
 80044e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80044e8:	e128      	b.n	800473c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_SPI_Transmit+0x64>
 80044f0:	1dbb      	adds	r3, r7, #6
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80044f8:	231f      	movs	r3, #31
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8004500:	e11c      	b.n	800473c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	225d      	movs	r2, #93	@ 0x5d
 8004506:	2103      	movs	r1, #3
 8004508:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1dba      	adds	r2, r7, #6
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1dba      	adds	r2, r7, #6
 8004522:	8812      	ldrh	r2, [r2, #0]
 8004524:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2244      	movs	r2, #68	@ 0x44
 8004530:	2100      	movs	r1, #0
 8004532:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2246      	movs	r2, #70	@ 0x46
 8004538:	2100      	movs	r1, #0
 800453a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	429a      	cmp	r2, r3
 8004552:	d110      	bne.n	8004576 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2140      	movs	r1, #64	@ 0x40
 8004560:	438a      	bics	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2180      	movs	r1, #128	@ 0x80
 8004570:	01c9      	lsls	r1, r1, #7
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2240      	movs	r2, #64	@ 0x40
 800457e:	4013      	ands	r3, r2
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d007      	beq.n	8004594 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2140      	movs	r1, #64	@ 0x40
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	23e0      	movs	r3, #224	@ 0xe0
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	429a      	cmp	r2, r3
 800459e:	d952      	bls.n	8004646 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_SPI_Transmit+0x11e>
 80045a8:	2316      	movs	r3, #22
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d143      	bne.n	800463a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	1c9a      	adds	r2, r3, #2
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045d6:	e030      	b.n	800463a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d112      	bne.n	800460c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800460a:	e016      	b.n	800463a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800460c:	f7fd fe0c 	bl	8002228 <HAL_GetTick>
 8004610:	0002      	movs	r2, r0
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d802      	bhi.n	8004622 <HAL_SPI_Transmit+0x18e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	d102      	bne.n	8004628 <HAL_SPI_Transmit+0x194>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004628:	231f      	movs	r3, #31
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2203      	movs	r2, #3
 800462e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	225d      	movs	r2, #93	@ 0x5d
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]
          goto error;
 8004638:	e080      	b.n	800473c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1c9      	bne.n	80045d8 <HAL_SPI_Transmit+0x144>
 8004644:	e053      	b.n	80046ee <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_SPI_Transmit+0x1c4>
 800464e:	2316      	movs	r3, #22
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d145      	bne.n	80046e4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800467e:	e031      	b.n	80046e4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2202      	movs	r2, #2
 8004688:	4013      	ands	r3, r2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d113      	bne.n	80046b6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046b4:	e016      	b.n	80046e4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b6:	f7fd fdb7 	bl	8002228 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d802      	bhi.n	80046cc <HAL_SPI_Transmit+0x238>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Transmit+0x23e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80046d2:	231f      	movs	r3, #31
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2203      	movs	r2, #3
 80046d8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	225d      	movs	r2, #93	@ 0x5d
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
          goto error;
 80046e2:	e02b      	b.n	800473c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1c8      	bne.n	8004680 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 f95d 	bl	80049b4 <SPI_EndRxTxTransaction>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800472a:	231f      	movs	r3, #31
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e003      	b.n	800473c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	225d      	movs	r2, #93	@ 0x5d
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	225c      	movs	r2, #92	@ 0x5c
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004744:	231f      	movs	r3, #31
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	781b      	ldrb	r3, [r3, #0]
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b008      	add	sp, #32
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004764:	f7fd fd60 	bl	8002228 <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004774:	f7fd fd58 	bl	8002228 <HAL_GetTick>
 8004778:	0003      	movs	r3, r0
 800477a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800477c:	4b3a      	ldr	r3, [pc, #232]	@ (8004868 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	0d1b      	lsrs	r3, r3, #20
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	4353      	muls	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478a:	e058      	b.n	800483e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	3301      	adds	r3, #1
 8004790:	d055      	beq.n	800483e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004792:	f7fd fd49 	bl	8002228 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d902      	bls.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d142      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	21e0      	movs	r1, #224	@ 0xe0
 80047b4:	438a      	bics	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	2382      	movs	r3, #130	@ 0x82
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d113      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d005      	beq.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	429a      	cmp	r2, r3
 80047da:	d107      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2140      	movs	r1, #64	@ 0x40
 80047e8:	438a      	bics	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	019b      	lsls	r3, r3, #6
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d110      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	491a      	ldr	r1, [pc, #104]	@ (800486c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	0189      	lsls	r1, r1, #6
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	225d      	movs	r2, #93	@ 0x5d
 800481e:	2101      	movs	r1, #1
 8004820:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	225c      	movs	r2, #92	@ 0x5c
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e017      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3b01      	subs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	425a      	negs	r2, r3
 800484e:	4153      	adcs	r3, r2
 8004850:	b2db      	uxtb	r3, r3
 8004852:	001a      	movs	r2, r3
 8004854:	1dfb      	adds	r3, r7, #7
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d197      	bne.n	800478c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b008      	add	sp, #32
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	20000018 	.word	0x20000018
 800486c:	ffffdfff 	.word	0xffffdfff

08004870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004886:	f7fd fccf 	bl	8002228 <HAL_GetTick>
 800488a:	0002      	movs	r2, r0
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004896:	f7fd fcc7 	bl	8002228 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048a6:	4b41      	ldr	r3, [pc, #260]	@ (80049ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	0013      	movs	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	00da      	lsls	r2, r3, #3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	0d1b      	lsrs	r3, r3, #20
 80048b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b8:	4353      	muls	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048bc:	e068      	b.n	8004990 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	23c0      	movs	r3, #192	@ 0xc0
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d10a      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x6e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	2117      	movs	r1, #23
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	d055      	beq.n	8004990 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e4:	f7fd fca0 	bl	8002228 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d902      	bls.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d142      	bne.n	8004980 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	21e0      	movs	r1, #224	@ 0xe0
 8004906:	438a      	bics	r2, r1
 8004908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	2382      	movs	r3, #130	@ 0x82
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	429a      	cmp	r2, r3
 8004914:	d113      	bne.n	800493e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	429a      	cmp	r2, r3
 8004920:	d005      	beq.n	800492e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	429a      	cmp	r2, r3
 800492c:	d107      	bne.n	800493e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2140      	movs	r1, #64	@ 0x40
 800493a:	438a      	bics	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	429a      	cmp	r2, r3
 8004948:	d110      	bne.n	800496c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4916      	ldr	r1, [pc, #88]	@ (80049b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004956:	400a      	ands	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2180      	movs	r1, #128	@ 0x80
 8004966:	0189      	lsls	r1, r1, #6
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	225d      	movs	r2, #93	@ 0x5d
 8004970:	2101      	movs	r1, #1
 8004972:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	225c      	movs	r2, #92	@ 0x5c
 8004978:	2100      	movs	r1, #0
 800497a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e010      	b.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3b01      	subs	r3, #1
 800498e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d18e      	bne.n	80048be <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	0018      	movs	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b00a      	add	sp, #40	@ 0x28
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	20000018 	.word	0x20000018
 80049b0:	ffffdfff 	.word	0xffffdfff

080049b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	23c0      	movs	r3, #192	@ 0xc0
 80049c4:	0159      	lsls	r1, r3, #5
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	0013      	movs	r3, r2
 80049ce:	2200      	movs	r2, #0
 80049d0:	f7ff ff4e 	bl	8004870 <SPI_WaitFifoStateUntilTimeout>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d007      	beq.n	80049e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	2220      	movs	r2, #32
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e027      	b.n	8004a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	0013      	movs	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	2180      	movs	r1, #128	@ 0x80
 80049f6:	f7ff fead 	bl	8004754 <SPI_WaitFlagStateUntilTimeout>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d007      	beq.n	8004a0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a02:	2220      	movs	r2, #32
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e014      	b.n	8004a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	23c0      	movs	r3, #192	@ 0xc0
 8004a12:	00d9      	lsls	r1, r3, #3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f7ff ff27 	bl	8004870 <SPI_WaitFifoStateUntilTimeout>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	d007      	beq.n	8004a36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e000      	b.n	8004a38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b004      	add	sp, #16
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <memset>:
 8004a40:	0003      	movs	r3, r0
 8004a42:	1882      	adds	r2, r0, r2
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d100      	bne.n	8004a4a <memset+0xa>
 8004a48:	4770      	bx	lr
 8004a4a:	7019      	strb	r1, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	e7f9      	b.n	8004a44 <memset+0x4>

08004a50 <__libc_init_array>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2600      	movs	r6, #0
 8004a54:	4c0c      	ldr	r4, [pc, #48]	@ (8004a88 <__libc_init_array+0x38>)
 8004a56:	4d0d      	ldr	r5, [pc, #52]	@ (8004a8c <__libc_init_array+0x3c>)
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	42a6      	cmp	r6, r4
 8004a5e:	d109      	bne.n	8004a74 <__libc_init_array+0x24>
 8004a60:	2600      	movs	r6, #0
 8004a62:	f000 f823 	bl	8004aac <_init>
 8004a66:	4c0a      	ldr	r4, [pc, #40]	@ (8004a90 <__libc_init_array+0x40>)
 8004a68:	4d0a      	ldr	r5, [pc, #40]	@ (8004a94 <__libc_init_array+0x44>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	42a6      	cmp	r6, r4
 8004a70:	d105      	bne.n	8004a7e <__libc_init_array+0x2e>
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	00b3      	lsls	r3, r6, #2
 8004a76:	58eb      	ldr	r3, [r5, r3]
 8004a78:	4798      	blx	r3
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	e7ee      	b.n	8004a5c <__libc_init_array+0xc>
 8004a7e:	00b3      	lsls	r3, r6, #2
 8004a80:	58eb      	ldr	r3, [r5, r3]
 8004a82:	4798      	blx	r3
 8004a84:	3601      	adds	r6, #1
 8004a86:	e7f2      	b.n	8004a6e <__libc_init_array+0x1e>
 8004a88:	08004de8 	.word	0x08004de8
 8004a8c:	08004de8 	.word	0x08004de8
 8004a90:	08004dec 	.word	0x08004dec
 8004a94:	08004de8 	.word	0x08004de8

08004a98 <memcpy>:
 8004a98:	2300      	movs	r3, #0
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d100      	bne.n	8004aa2 <memcpy+0xa>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	5ccc      	ldrb	r4, [r1, r3]
 8004aa4:	54c4      	strb	r4, [r0, r3]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	e7f8      	b.n	8004a9c <memcpy+0x4>
	...

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
 8004ac4:	0000      	movs	r0, r0
	...

08004ac8 <__FLASH_Program_Fast_veneer>:
 8004ac8:	b401      	push	{r0}
 8004aca:	4802      	ldr	r0, [pc, #8]	@ (8004ad4 <__FLASH_Program_Fast_veneer+0xc>)
 8004acc:	4684      	mov	ip, r0
 8004ace:	bc01      	pop	{r0}
 8004ad0:	4760      	bx	ip
 8004ad2:	bf00      	nop
 8004ad4:	20000025 	.word	0x20000025

Disassembly of section .data:

20000000 <g_unit_symbols>:
20000000:	08004ae0 08004ae4                       .J...J..

20000008 <g_headers>:
20000008:	08004d5c 08004d6c 08004d80 08004d90     \M..lM...M...M..

20000018 <SystemCoreClock>:
20000018:	00f42400                                .$..

2000001c <uwTickPrio>:
2000001c:	00000004                                ....

20000020 <uwTickFreq>:
20000020:	00000001                                ....

20000024 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000024:	b580      	push	{r7, lr}
20000026:	b088      	sub	sp, #32
20000028:	af00      	add	r7, sp, #0
2000002a:	6078      	str	r0, [r7, #4]
2000002c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000002e:	231f      	movs	r3, #31
20000030:	18fb      	adds	r3, r7, r3
20000032:	2200      	movs	r2, #0
20000034:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000036:	687b      	ldr	r3, [r7, #4]
20000038:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000003a:	683b      	ldr	r3, [r7, #0]
2000003c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000003e:	4b1a      	ldr	r3, [pc, #104]	@ (200000a8 <FLASH_Program_Fast+0x84>)
20000040:	695a      	ldr	r2, [r3, #20]
20000042:	4b19      	ldr	r3, [pc, #100]	@ (200000a8 <FLASH_Program_Fast+0x84>)
20000044:	2180      	movs	r1, #128	@ 0x80
20000046:	02c9      	lsls	r1, r1, #11
20000048:	430a      	orrs	r2, r1
2000004a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000004c:	f3ef 8310 	mrs	r3, PRIMASK
20000050:	60fb      	str	r3, [r7, #12]
  return(result);
20000052:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000056:	b672      	cpsid	i
}
20000058:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000005a:	e00f      	b.n	2000007c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000005c:	697a      	ldr	r2, [r7, #20]
2000005e:	69bb      	ldr	r3, [r7, #24]
20000060:	6812      	ldr	r2, [r2, #0]
20000062:	601a      	str	r2, [r3, #0]
    src += 4U;
20000064:	697b      	ldr	r3, [r7, #20]
20000066:	3304      	adds	r3, #4
20000068:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000006a:	69bb      	ldr	r3, [r7, #24]
2000006c:	3304      	adds	r3, #4
2000006e:	61bb      	str	r3, [r7, #24]
    index++;
20000070:	211f      	movs	r1, #31
20000072:	187b      	adds	r3, r7, r1
20000074:	781a      	ldrb	r2, [r3, #0]
20000076:	187b      	adds	r3, r7, r1
20000078:	3201      	adds	r2, #1
2000007a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000007c:	231f      	movs	r3, #31
2000007e:	18fb      	adds	r3, r7, r3
20000080:	781b      	ldrb	r3, [r3, #0]
20000082:	2b3f      	cmp	r3, #63	@ 0x3f
20000084:	d9ea      	bls.n	2000005c <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000086:	46c0      	nop			@ (mov r8, r8)
20000088:	4b07      	ldr	r3, [pc, #28]	@ (200000a8 <FLASH_Program_Fast+0x84>)
2000008a:	691a      	ldr	r2, [r3, #16]
2000008c:	2380      	movs	r3, #128	@ 0x80
2000008e:	025b      	lsls	r3, r3, #9
20000090:	4013      	ands	r3, r2
20000092:	d1f9      	bne.n	20000088 <FLASH_Program_Fast+0x64>
20000094:	693b      	ldr	r3, [r7, #16]
20000096:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000098:	68bb      	ldr	r3, [r7, #8]
2000009a:	f383 8810 	msr	PRIMASK, r3
}
2000009e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000a0:	46c0      	nop			@ (mov r8, r8)
200000a2:	46bd      	mov	sp, r7
200000a4:	b008      	add	sp, #32
200000a6:	bd80      	pop	{r7, pc}
200000a8:	40022000 	.word	0x40022000
