
VVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006d30  08006d30  00007d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007048  08007048  00009070  2**0
                  CONTENTS
  4 .ARM          00000000  08007048  08007048  00009070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007048  08007048  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007048  08007048  00008048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800704c  0800704c  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007050  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  080070c0  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080070c0  00009298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008590  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00013058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000153b1  00000000  00000000  000139c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000aa1d  00000000  00000000  00028d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086380  00000000  00000000  00033796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b9b16  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000070b  00000000  00000000  000b9b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027cc  00000000  00000000  000ba264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000bca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006d14 	.word	0x08006d14

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006d14 	.word	0x08006d14

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 fc19 	bl	8001c34 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f001 fb59 	bl	8001ac4 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 fc0b 	bl	8001c34 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fc01 	bl	8001c34 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fb83 	bl	8001b4c <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fb79 	bl	8001b4c <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fdiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	0244      	lsls	r4, r0, #9
 8000472:	b5c0      	push	{r6, r7, lr}
 8000474:	0047      	lsls	r7, r0, #1
 8000476:	1c0e      	adds	r6, r1, #0
 8000478:	0a64      	lsrs	r4, r4, #9
 800047a:	0e3f      	lsrs	r7, r7, #24
 800047c:	0fc5      	lsrs	r5, r0, #31
 800047e:	2f00      	cmp	r7, #0
 8000480:	d03c      	beq.n	80004fc <__aeabi_fdiv+0x94>
 8000482:	2fff      	cmp	r7, #255	@ 0xff
 8000484:	d042      	beq.n	800050c <__aeabi_fdiv+0xa4>
 8000486:	2300      	movs	r3, #0
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	4699      	mov	r9, r3
 800048c:	469a      	mov	sl, r3
 800048e:	00e4      	lsls	r4, r4, #3
 8000490:	04d2      	lsls	r2, r2, #19
 8000492:	4314      	orrs	r4, r2
 8000494:	3f7f      	subs	r7, #127	@ 0x7f
 8000496:	0273      	lsls	r3, r6, #9
 8000498:	0a5b      	lsrs	r3, r3, #9
 800049a:	4698      	mov	r8, r3
 800049c:	0073      	lsls	r3, r6, #1
 800049e:	0e1b      	lsrs	r3, r3, #24
 80004a0:	0ff6      	lsrs	r6, r6, #31
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d01b      	beq.n	80004de <__aeabi_fdiv+0x76>
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d013      	beq.n	80004d2 <__aeabi_fdiv+0x6a>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	00d2      	lsls	r2, r2, #3
 80004b0:	04c9      	lsls	r1, r1, #19
 80004b2:	4311      	orrs	r1, r2
 80004b4:	4688      	mov	r8, r1
 80004b6:	2000      	movs	r0, #0
 80004b8:	3b7f      	subs	r3, #127	@ 0x7f
 80004ba:	0029      	movs	r1, r5
 80004bc:	1aff      	subs	r7, r7, r3
 80004be:	464b      	mov	r3, r9
 80004c0:	4071      	eors	r1, r6
 80004c2:	b2c9      	uxtb	r1, r1
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d900      	bls.n	80004ca <__aeabi_fdiv+0x62>
 80004c8:	e0b5      	b.n	8000636 <__aeabi_fdiv+0x1ce>
 80004ca:	4a74      	ldr	r2, [pc, #464]	@ (800069c <__aeabi_fdiv+0x234>)
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	58d3      	ldr	r3, [r2, r3]
 80004d0:	469f      	mov	pc, r3
 80004d2:	4643      	mov	r3, r8
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d13f      	bne.n	8000558 <__aeabi_fdiv+0xf0>
 80004d8:	3fff      	subs	r7, #255	@ 0xff
 80004da:	3302      	adds	r3, #2
 80004dc:	e003      	b.n	80004e6 <__aeabi_fdiv+0x7e>
 80004de:	4643      	mov	r3, r8
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d12d      	bne.n	8000540 <__aeabi_fdiv+0xd8>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0029      	movs	r1, r5
 80004e8:	464a      	mov	r2, r9
 80004ea:	4071      	eors	r1, r6
 80004ec:	b2c9      	uxtb	r1, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	2a0e      	cmp	r2, #14
 80004f2:	d838      	bhi.n	8000566 <__aeabi_fdiv+0xfe>
 80004f4:	486a      	ldr	r0, [pc, #424]	@ (80006a0 <__aeabi_fdiv+0x238>)
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	5882      	ldr	r2, [r0, r2]
 80004fa:	4697      	mov	pc, r2
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d113      	bne.n	8000528 <__aeabi_fdiv+0xc0>
 8000500:	2304      	movs	r3, #4
 8000502:	4699      	mov	r9, r3
 8000504:	3b03      	subs	r3, #3
 8000506:	2700      	movs	r7, #0
 8000508:	469a      	mov	sl, r3
 800050a:	e7c4      	b.n	8000496 <__aeabi_fdiv+0x2e>
 800050c:	2c00      	cmp	r4, #0
 800050e:	d105      	bne.n	800051c <__aeabi_fdiv+0xb4>
 8000510:	2308      	movs	r3, #8
 8000512:	4699      	mov	r9, r3
 8000514:	3b06      	subs	r3, #6
 8000516:	27ff      	movs	r7, #255	@ 0xff
 8000518:	469a      	mov	sl, r3
 800051a:	e7bc      	b.n	8000496 <__aeabi_fdiv+0x2e>
 800051c:	230c      	movs	r3, #12
 800051e:	4699      	mov	r9, r3
 8000520:	3b09      	subs	r3, #9
 8000522:	27ff      	movs	r7, #255	@ 0xff
 8000524:	469a      	mov	sl, r3
 8000526:	e7b6      	b.n	8000496 <__aeabi_fdiv+0x2e>
 8000528:	0020      	movs	r0, r4
 800052a:	f002 fb75 	bl	8002c18 <__clzsi2>
 800052e:	2776      	movs	r7, #118	@ 0x76
 8000530:	1f43      	subs	r3, r0, #5
 8000532:	409c      	lsls	r4, r3
 8000534:	2300      	movs	r3, #0
 8000536:	427f      	negs	r7, r7
 8000538:	4699      	mov	r9, r3
 800053a:	469a      	mov	sl, r3
 800053c:	1a3f      	subs	r7, r7, r0
 800053e:	e7aa      	b.n	8000496 <__aeabi_fdiv+0x2e>
 8000540:	4640      	mov	r0, r8
 8000542:	f002 fb69 	bl	8002c18 <__clzsi2>
 8000546:	4642      	mov	r2, r8
 8000548:	1f43      	subs	r3, r0, #5
 800054a:	409a      	lsls	r2, r3
 800054c:	2376      	movs	r3, #118	@ 0x76
 800054e:	425b      	negs	r3, r3
 8000550:	1a1b      	subs	r3, r3, r0
 8000552:	4690      	mov	r8, r2
 8000554:	2000      	movs	r0, #0
 8000556:	e7b0      	b.n	80004ba <__aeabi_fdiv+0x52>
 8000558:	2303      	movs	r3, #3
 800055a:	464a      	mov	r2, r9
 800055c:	431a      	orrs	r2, r3
 800055e:	4691      	mov	r9, r2
 8000560:	2003      	movs	r0, #3
 8000562:	33fc      	adds	r3, #252	@ 0xfc
 8000564:	e7a9      	b.n	80004ba <__aeabi_fdiv+0x52>
 8000566:	000d      	movs	r5, r1
 8000568:	20ff      	movs	r0, #255	@ 0xff
 800056a:	2200      	movs	r2, #0
 800056c:	05c0      	lsls	r0, r0, #23
 800056e:	07ed      	lsls	r5, r5, #31
 8000570:	4310      	orrs	r0, r2
 8000572:	4328      	orrs	r0, r5
 8000574:	bce0      	pop	{r5, r6, r7}
 8000576:	46ba      	mov	sl, r7
 8000578:	46b1      	mov	r9, r6
 800057a:	46a8      	mov	r8, r5
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	000d      	movs	r5, r1
 8000580:	2000      	movs	r0, #0
 8000582:	2200      	movs	r2, #0
 8000584:	e7f2      	b.n	800056c <__aeabi_fdiv+0x104>
 8000586:	4653      	mov	r3, sl
 8000588:	2b02      	cmp	r3, #2
 800058a:	d0ed      	beq.n	8000568 <__aeabi_fdiv+0x100>
 800058c:	2b03      	cmp	r3, #3
 800058e:	d033      	beq.n	80005f8 <__aeabi_fdiv+0x190>
 8000590:	46a0      	mov	r8, r4
 8000592:	2b01      	cmp	r3, #1
 8000594:	d105      	bne.n	80005a2 <__aeabi_fdiv+0x13a>
 8000596:	2000      	movs	r0, #0
 8000598:	2200      	movs	r2, #0
 800059a:	e7e7      	b.n	800056c <__aeabi_fdiv+0x104>
 800059c:	0035      	movs	r5, r6
 800059e:	2803      	cmp	r0, #3
 80005a0:	d07a      	beq.n	8000698 <__aeabi_fdiv+0x230>
 80005a2:	003b      	movs	r3, r7
 80005a4:	337f      	adds	r3, #127	@ 0x7f
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd2d      	ble.n	8000606 <__aeabi_fdiv+0x19e>
 80005aa:	4642      	mov	r2, r8
 80005ac:	0752      	lsls	r2, r2, #29
 80005ae:	d007      	beq.n	80005c0 <__aeabi_fdiv+0x158>
 80005b0:	220f      	movs	r2, #15
 80005b2:	4641      	mov	r1, r8
 80005b4:	400a      	ands	r2, r1
 80005b6:	2a04      	cmp	r2, #4
 80005b8:	d002      	beq.n	80005c0 <__aeabi_fdiv+0x158>
 80005ba:	2204      	movs	r2, #4
 80005bc:	4694      	mov	ip, r2
 80005be:	44e0      	add	r8, ip
 80005c0:	4642      	mov	r2, r8
 80005c2:	0112      	lsls	r2, r2, #4
 80005c4:	d505      	bpl.n	80005d2 <__aeabi_fdiv+0x16a>
 80005c6:	4642      	mov	r2, r8
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <__aeabi_fdiv+0x23c>)
 80005ca:	401a      	ands	r2, r3
 80005cc:	003b      	movs	r3, r7
 80005ce:	4690      	mov	r8, r2
 80005d0:	3380      	adds	r3, #128	@ 0x80
 80005d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80005d4:	dcc8      	bgt.n	8000568 <__aeabi_fdiv+0x100>
 80005d6:	4642      	mov	r2, r8
 80005d8:	0192      	lsls	r2, r2, #6
 80005da:	0a52      	lsrs	r2, r2, #9
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	e7c5      	b.n	800056c <__aeabi_fdiv+0x104>
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	2500      	movs	r5, #0
 80005e4:	20ff      	movs	r0, #255	@ 0xff
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	e7c0      	b.n	800056c <__aeabi_fdiv+0x104>
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	03d2      	lsls	r2, r2, #15
 80005ee:	4214      	tst	r4, r2
 80005f0:	d002      	beq.n	80005f8 <__aeabi_fdiv+0x190>
 80005f2:	4643      	mov	r3, r8
 80005f4:	4213      	tst	r3, r2
 80005f6:	d049      	beq.n	800068c <__aeabi_fdiv+0x224>
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	03d2      	lsls	r2, r2, #15
 80005fc:	4322      	orrs	r2, r4
 80005fe:	0252      	lsls	r2, r2, #9
 8000600:	20ff      	movs	r0, #255	@ 0xff
 8000602:	0a52      	lsrs	r2, r2, #9
 8000604:	e7b2      	b.n	800056c <__aeabi_fdiv+0x104>
 8000606:	2201      	movs	r2, #1
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dcc3      	bgt.n	8000596 <__aeabi_fdiv+0x12e>
 800060e:	4642      	mov	r2, r8
 8000610:	40da      	lsrs	r2, r3
 8000612:	4643      	mov	r3, r8
 8000614:	379e      	adds	r7, #158	@ 0x9e
 8000616:	40bb      	lsls	r3, r7
 8000618:	1e59      	subs	r1, r3, #1
 800061a:	418b      	sbcs	r3, r1
 800061c:	431a      	orrs	r2, r3
 800061e:	0753      	lsls	r3, r2, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fdiv+0x1c4>
 8000622:	230f      	movs	r3, #15
 8000624:	4013      	ands	r3, r2
 8000626:	2b04      	cmp	r3, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fdiv+0x1c4>
 800062a:	3204      	adds	r2, #4
 800062c:	0153      	lsls	r3, r2, #5
 800062e:	d529      	bpl.n	8000684 <__aeabi_fdiv+0x21c>
 8000630:	2001      	movs	r0, #1
 8000632:	2200      	movs	r2, #0
 8000634:	e79a      	b.n	800056c <__aeabi_fdiv+0x104>
 8000636:	4642      	mov	r2, r8
 8000638:	0163      	lsls	r3, r4, #5
 800063a:	0155      	lsls	r5, r2, #5
 800063c:	42ab      	cmp	r3, r5
 800063e:	d215      	bcs.n	800066c <__aeabi_fdiv+0x204>
 8000640:	201b      	movs	r0, #27
 8000642:	2200      	movs	r2, #0
 8000644:	3f01      	subs	r7, #1
 8000646:	2601      	movs	r6, #1
 8000648:	001c      	movs	r4, r3
 800064a:	0052      	lsls	r2, r2, #1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	2c00      	cmp	r4, #0
 8000650:	db01      	blt.n	8000656 <__aeabi_fdiv+0x1ee>
 8000652:	429d      	cmp	r5, r3
 8000654:	d801      	bhi.n	800065a <__aeabi_fdiv+0x1f2>
 8000656:	1b5b      	subs	r3, r3, r5
 8000658:	4332      	orrs	r2, r6
 800065a:	3801      	subs	r0, #1
 800065c:	2800      	cmp	r0, #0
 800065e:	d1f3      	bne.n	8000648 <__aeabi_fdiv+0x1e0>
 8000660:	1e58      	subs	r0, r3, #1
 8000662:	4183      	sbcs	r3, r0
 8000664:	4313      	orrs	r3, r2
 8000666:	4698      	mov	r8, r3
 8000668:	000d      	movs	r5, r1
 800066a:	e79a      	b.n	80005a2 <__aeabi_fdiv+0x13a>
 800066c:	201a      	movs	r0, #26
 800066e:	2201      	movs	r2, #1
 8000670:	1b5b      	subs	r3, r3, r5
 8000672:	e7e8      	b.n	8000646 <__aeabi_fdiv+0x1de>
 8000674:	3b02      	subs	r3, #2
 8000676:	425a      	negs	r2, r3
 8000678:	4153      	adcs	r3, r2
 800067a:	425b      	negs	r3, r3
 800067c:	0035      	movs	r5, r6
 800067e:	2200      	movs	r2, #0
 8000680:	b2d8      	uxtb	r0, r3
 8000682:	e773      	b.n	800056c <__aeabi_fdiv+0x104>
 8000684:	0192      	lsls	r2, r2, #6
 8000686:	2000      	movs	r0, #0
 8000688:	0a52      	lsrs	r2, r2, #9
 800068a:	e76f      	b.n	800056c <__aeabi_fdiv+0x104>
 800068c:	431a      	orrs	r2, r3
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	0035      	movs	r5, r6
 8000692:	20ff      	movs	r0, #255	@ 0xff
 8000694:	0a52      	lsrs	r2, r2, #9
 8000696:	e769      	b.n	800056c <__aeabi_fdiv+0x104>
 8000698:	4644      	mov	r4, r8
 800069a:	e7ad      	b.n	80005f8 <__aeabi_fdiv+0x190>
 800069c:	08006d30 	.word	0x08006d30
 80006a0:	08006d70 	.word	0x08006d70
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_fmul>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	464f      	mov	r7, r9
 80006ac:	4646      	mov	r6, r8
 80006ae:	46d6      	mov	lr, sl
 80006b0:	0243      	lsls	r3, r0, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	0045      	lsls	r5, r0, #1
 80006b6:	b5c0      	push	{r6, r7, lr}
 80006b8:	4699      	mov	r9, r3
 80006ba:	1c0f      	adds	r7, r1, #0
 80006bc:	0e2d      	lsrs	r5, r5, #24
 80006be:	0fc6      	lsrs	r6, r0, #31
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fmul+0x1e>
 80006c4:	e088      	b.n	80007d8 <__aeabi_fmul+0x130>
 80006c6:	2dff      	cmp	r5, #255	@ 0xff
 80006c8:	d100      	bne.n	80006cc <__aeabi_fmul+0x24>
 80006ca:	e08d      	b.n	80007e8 <__aeabi_fmul+0x140>
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	04d2      	lsls	r2, r2, #19
 80006d2:	431a      	orrs	r2, r3
 80006d4:	2300      	movs	r3, #0
 80006d6:	4691      	mov	r9, r2
 80006d8:	4698      	mov	r8, r3
 80006da:	469a      	mov	sl, r3
 80006dc:	3d7f      	subs	r5, #127	@ 0x7f
 80006de:	027c      	lsls	r4, r7, #9
 80006e0:	007b      	lsls	r3, r7, #1
 80006e2:	0a64      	lsrs	r4, r4, #9
 80006e4:	0e1b      	lsrs	r3, r3, #24
 80006e6:	0fff      	lsrs	r7, r7, #31
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d068      	beq.n	80007be <__aeabi_fmul+0x116>
 80006ec:	2bff      	cmp	r3, #255	@ 0xff
 80006ee:	d021      	beq.n	8000734 <__aeabi_fmul+0x8c>
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	00e4      	lsls	r4, r4, #3
 80006f4:	04d2      	lsls	r2, r2, #19
 80006f6:	4314      	orrs	r4, r2
 80006f8:	4642      	mov	r2, r8
 80006fa:	3b7f      	subs	r3, #127	@ 0x7f
 80006fc:	195b      	adds	r3, r3, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	1c5d      	adds	r5, r3, #1
 8000702:	2a0a      	cmp	r2, #10
 8000704:	dc2e      	bgt.n	8000764 <__aeabi_fmul+0xbc>
 8000706:	407e      	eors	r6, r7
 8000708:	4642      	mov	r2, r8
 800070a:	2a02      	cmp	r2, #2
 800070c:	dc23      	bgt.n	8000756 <__aeabi_fmul+0xae>
 800070e:	3a01      	subs	r2, #1
 8000710:	2a01      	cmp	r2, #1
 8000712:	d900      	bls.n	8000716 <__aeabi_fmul+0x6e>
 8000714:	e0bd      	b.n	8000892 <__aeabi_fmul+0x1ea>
 8000716:	2902      	cmp	r1, #2
 8000718:	d06e      	beq.n	80007f8 <__aeabi_fmul+0x150>
 800071a:	2901      	cmp	r1, #1
 800071c:	d12c      	bne.n	8000778 <__aeabi_fmul+0xd0>
 800071e:	2000      	movs	r0, #0
 8000720:	2200      	movs	r2, #0
 8000722:	05c0      	lsls	r0, r0, #23
 8000724:	07f6      	lsls	r6, r6, #31
 8000726:	4310      	orrs	r0, r2
 8000728:	4330      	orrs	r0, r6
 800072a:	bce0      	pop	{r5, r6, r7}
 800072c:	46ba      	mov	sl, r7
 800072e:	46b1      	mov	r9, r6
 8000730:	46a8      	mov	r8, r5
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	002b      	movs	r3, r5
 8000736:	33ff      	adds	r3, #255	@ 0xff
 8000738:	2c00      	cmp	r4, #0
 800073a:	d065      	beq.n	8000808 <__aeabi_fmul+0x160>
 800073c:	2203      	movs	r2, #3
 800073e:	4641      	mov	r1, r8
 8000740:	4311      	orrs	r1, r2
 8000742:	0032      	movs	r2, r6
 8000744:	3501      	adds	r5, #1
 8000746:	4688      	mov	r8, r1
 8000748:	407a      	eors	r2, r7
 800074a:	35ff      	adds	r5, #255	@ 0xff
 800074c:	290a      	cmp	r1, #10
 800074e:	dd00      	ble.n	8000752 <__aeabi_fmul+0xaa>
 8000750:	e0d8      	b.n	8000904 <__aeabi_fmul+0x25c>
 8000752:	0016      	movs	r6, r2
 8000754:	2103      	movs	r1, #3
 8000756:	4640      	mov	r0, r8
 8000758:	2201      	movs	r2, #1
 800075a:	4082      	lsls	r2, r0
 800075c:	20a6      	movs	r0, #166	@ 0xa6
 800075e:	00c0      	lsls	r0, r0, #3
 8000760:	4202      	tst	r2, r0
 8000762:	d020      	beq.n	80007a6 <__aeabi_fmul+0xfe>
 8000764:	4653      	mov	r3, sl
 8000766:	2b02      	cmp	r3, #2
 8000768:	d046      	beq.n	80007f8 <__aeabi_fmul+0x150>
 800076a:	2b03      	cmp	r3, #3
 800076c:	d100      	bne.n	8000770 <__aeabi_fmul+0xc8>
 800076e:	e0bb      	b.n	80008e8 <__aeabi_fmul+0x240>
 8000770:	4651      	mov	r1, sl
 8000772:	464c      	mov	r4, r9
 8000774:	2901      	cmp	r1, #1
 8000776:	d0d2      	beq.n	800071e <__aeabi_fmul+0x76>
 8000778:	002b      	movs	r3, r5
 800077a:	337f      	adds	r3, #127	@ 0x7f
 800077c:	2b00      	cmp	r3, #0
 800077e:	dd70      	ble.n	8000862 <__aeabi_fmul+0x1ba>
 8000780:	0762      	lsls	r2, r4, #29
 8000782:	d004      	beq.n	800078e <__aeabi_fmul+0xe6>
 8000784:	220f      	movs	r2, #15
 8000786:	4022      	ands	r2, r4
 8000788:	2a04      	cmp	r2, #4
 800078a:	d000      	beq.n	800078e <__aeabi_fmul+0xe6>
 800078c:	3404      	adds	r4, #4
 800078e:	0122      	lsls	r2, r4, #4
 8000790:	d503      	bpl.n	800079a <__aeabi_fmul+0xf2>
 8000792:	4b63      	ldr	r3, [pc, #396]	@ (8000920 <__aeabi_fmul+0x278>)
 8000794:	401c      	ands	r4, r3
 8000796:	002b      	movs	r3, r5
 8000798:	3380      	adds	r3, #128	@ 0x80
 800079a:	2bfe      	cmp	r3, #254	@ 0xfe
 800079c:	dc2c      	bgt.n	80007f8 <__aeabi_fmul+0x150>
 800079e:	01a2      	lsls	r2, r4, #6
 80007a0:	0a52      	lsrs	r2, r2, #9
 80007a2:	b2d8      	uxtb	r0, r3
 80007a4:	e7bd      	b.n	8000722 <__aeabi_fmul+0x7a>
 80007a6:	2090      	movs	r0, #144	@ 0x90
 80007a8:	0080      	lsls	r0, r0, #2
 80007aa:	4202      	tst	r2, r0
 80007ac:	d127      	bne.n	80007fe <__aeabi_fmul+0x156>
 80007ae:	38b9      	subs	r0, #185	@ 0xb9
 80007b0:	38ff      	subs	r0, #255	@ 0xff
 80007b2:	4210      	tst	r0, r2
 80007b4:	d06d      	beq.n	8000892 <__aeabi_fmul+0x1ea>
 80007b6:	003e      	movs	r6, r7
 80007b8:	46a1      	mov	r9, r4
 80007ba:	468a      	mov	sl, r1
 80007bc:	e7d2      	b.n	8000764 <__aeabi_fmul+0xbc>
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d141      	bne.n	8000846 <__aeabi_fmul+0x19e>
 80007c2:	2301      	movs	r3, #1
 80007c4:	4642      	mov	r2, r8
 80007c6:	431a      	orrs	r2, r3
 80007c8:	4690      	mov	r8, r2
 80007ca:	002b      	movs	r3, r5
 80007cc:	4642      	mov	r2, r8
 80007ce:	2101      	movs	r1, #1
 80007d0:	1c5d      	adds	r5, r3, #1
 80007d2:	2a0a      	cmp	r2, #10
 80007d4:	dd97      	ble.n	8000706 <__aeabi_fmul+0x5e>
 80007d6:	e7c5      	b.n	8000764 <__aeabi_fmul+0xbc>
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d126      	bne.n	800082a <__aeabi_fmul+0x182>
 80007dc:	2304      	movs	r3, #4
 80007de:	4698      	mov	r8, r3
 80007e0:	3b03      	subs	r3, #3
 80007e2:	2500      	movs	r5, #0
 80007e4:	469a      	mov	sl, r3
 80007e6:	e77a      	b.n	80006de <__aeabi_fmul+0x36>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d118      	bne.n	800081e <__aeabi_fmul+0x176>
 80007ec:	2308      	movs	r3, #8
 80007ee:	4698      	mov	r8, r3
 80007f0:	3b06      	subs	r3, #6
 80007f2:	25ff      	movs	r5, #255	@ 0xff
 80007f4:	469a      	mov	sl, r3
 80007f6:	e772      	b.n	80006de <__aeabi_fmul+0x36>
 80007f8:	20ff      	movs	r0, #255	@ 0xff
 80007fa:	2200      	movs	r2, #0
 80007fc:	e791      	b.n	8000722 <__aeabi_fmul+0x7a>
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	2600      	movs	r6, #0
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	03d2      	lsls	r2, r2, #15
 8000806:	e78c      	b.n	8000722 <__aeabi_fmul+0x7a>
 8000808:	4641      	mov	r1, r8
 800080a:	2202      	movs	r2, #2
 800080c:	3501      	adds	r5, #1
 800080e:	4311      	orrs	r1, r2
 8000810:	4688      	mov	r8, r1
 8000812:	35ff      	adds	r5, #255	@ 0xff
 8000814:	290a      	cmp	r1, #10
 8000816:	dca5      	bgt.n	8000764 <__aeabi_fmul+0xbc>
 8000818:	2102      	movs	r1, #2
 800081a:	407e      	eors	r6, r7
 800081c:	e774      	b.n	8000708 <__aeabi_fmul+0x60>
 800081e:	230c      	movs	r3, #12
 8000820:	4698      	mov	r8, r3
 8000822:	3b09      	subs	r3, #9
 8000824:	25ff      	movs	r5, #255	@ 0xff
 8000826:	469a      	mov	sl, r3
 8000828:	e759      	b.n	80006de <__aeabi_fmul+0x36>
 800082a:	0018      	movs	r0, r3
 800082c:	f002 f9f4 	bl	8002c18 <__clzsi2>
 8000830:	464a      	mov	r2, r9
 8000832:	1f43      	subs	r3, r0, #5
 8000834:	2576      	movs	r5, #118	@ 0x76
 8000836:	409a      	lsls	r2, r3
 8000838:	2300      	movs	r3, #0
 800083a:	426d      	negs	r5, r5
 800083c:	4691      	mov	r9, r2
 800083e:	4698      	mov	r8, r3
 8000840:	469a      	mov	sl, r3
 8000842:	1a2d      	subs	r5, r5, r0
 8000844:	e74b      	b.n	80006de <__aeabi_fmul+0x36>
 8000846:	0020      	movs	r0, r4
 8000848:	f002 f9e6 	bl	8002c18 <__clzsi2>
 800084c:	4642      	mov	r2, r8
 800084e:	1f43      	subs	r3, r0, #5
 8000850:	409c      	lsls	r4, r3
 8000852:	1a2b      	subs	r3, r5, r0
 8000854:	3b76      	subs	r3, #118	@ 0x76
 8000856:	2100      	movs	r1, #0
 8000858:	1c5d      	adds	r5, r3, #1
 800085a:	2a0a      	cmp	r2, #10
 800085c:	dc00      	bgt.n	8000860 <__aeabi_fmul+0x1b8>
 800085e:	e752      	b.n	8000706 <__aeabi_fmul+0x5e>
 8000860:	e780      	b.n	8000764 <__aeabi_fmul+0xbc>
 8000862:	2201      	movs	r2, #1
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	2b1b      	cmp	r3, #27
 8000868:	dd00      	ble.n	800086c <__aeabi_fmul+0x1c4>
 800086a:	e758      	b.n	800071e <__aeabi_fmul+0x76>
 800086c:	359e      	adds	r5, #158	@ 0x9e
 800086e:	0022      	movs	r2, r4
 8000870:	40ac      	lsls	r4, r5
 8000872:	40da      	lsrs	r2, r3
 8000874:	1e63      	subs	r3, r4, #1
 8000876:	419c      	sbcs	r4, r3
 8000878:	4322      	orrs	r2, r4
 800087a:	0753      	lsls	r3, r2, #29
 800087c:	d004      	beq.n	8000888 <__aeabi_fmul+0x1e0>
 800087e:	230f      	movs	r3, #15
 8000880:	4013      	ands	r3, r2
 8000882:	2b04      	cmp	r3, #4
 8000884:	d000      	beq.n	8000888 <__aeabi_fmul+0x1e0>
 8000886:	3204      	adds	r2, #4
 8000888:	0153      	lsls	r3, r2, #5
 800088a:	d537      	bpl.n	80008fc <__aeabi_fmul+0x254>
 800088c:	2001      	movs	r0, #1
 800088e:	2200      	movs	r2, #0
 8000890:	e747      	b.n	8000722 <__aeabi_fmul+0x7a>
 8000892:	0c21      	lsrs	r1, r4, #16
 8000894:	464a      	mov	r2, r9
 8000896:	0424      	lsls	r4, r4, #16
 8000898:	0c24      	lsrs	r4, r4, #16
 800089a:	0027      	movs	r7, r4
 800089c:	0c10      	lsrs	r0, r2, #16
 800089e:	0412      	lsls	r2, r2, #16
 80008a0:	0c12      	lsrs	r2, r2, #16
 80008a2:	4344      	muls	r4, r0
 80008a4:	4357      	muls	r7, r2
 80008a6:	4348      	muls	r0, r1
 80008a8:	4351      	muls	r1, r2
 80008aa:	0c3a      	lsrs	r2, r7, #16
 80008ac:	1909      	adds	r1, r1, r4
 80008ae:	1852      	adds	r2, r2, r1
 80008b0:	4294      	cmp	r4, r2
 80008b2:	d903      	bls.n	80008bc <__aeabi_fmul+0x214>
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	0249      	lsls	r1, r1, #9
 80008b8:	468c      	mov	ip, r1
 80008ba:	4460      	add	r0, ip
 80008bc:	043f      	lsls	r7, r7, #16
 80008be:	0411      	lsls	r1, r2, #16
 80008c0:	0c3f      	lsrs	r7, r7, #16
 80008c2:	19c9      	adds	r1, r1, r7
 80008c4:	018c      	lsls	r4, r1, #6
 80008c6:	1e67      	subs	r7, r4, #1
 80008c8:	41bc      	sbcs	r4, r7
 80008ca:	0c12      	lsrs	r2, r2, #16
 80008cc:	0e89      	lsrs	r1, r1, #26
 80008ce:	1812      	adds	r2, r2, r0
 80008d0:	430c      	orrs	r4, r1
 80008d2:	0192      	lsls	r2, r2, #6
 80008d4:	4314      	orrs	r4, r2
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	d50e      	bpl.n	80008f8 <__aeabi_fmul+0x250>
 80008da:	2301      	movs	r3, #1
 80008dc:	0862      	lsrs	r2, r4, #1
 80008de:	401c      	ands	r4, r3
 80008e0:	4314      	orrs	r4, r2
 80008e2:	e749      	b.n	8000778 <__aeabi_fmul+0xd0>
 80008e4:	003e      	movs	r6, r7
 80008e6:	46a1      	mov	r9, r4
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	464b      	mov	r3, r9
 80008ec:	03d2      	lsls	r2, r2, #15
 80008ee:	431a      	orrs	r2, r3
 80008f0:	0252      	lsls	r2, r2, #9
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	0a52      	lsrs	r2, r2, #9
 80008f6:	e714      	b.n	8000722 <__aeabi_fmul+0x7a>
 80008f8:	001d      	movs	r5, r3
 80008fa:	e73d      	b.n	8000778 <__aeabi_fmul+0xd0>
 80008fc:	0192      	lsls	r2, r2, #6
 80008fe:	2000      	movs	r0, #0
 8000900:	0a52      	lsrs	r2, r2, #9
 8000902:	e70e      	b.n	8000722 <__aeabi_fmul+0x7a>
 8000904:	290f      	cmp	r1, #15
 8000906:	d1ed      	bne.n	80008e4 <__aeabi_fmul+0x23c>
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	464b      	mov	r3, r9
 800090c:	03d2      	lsls	r2, r2, #15
 800090e:	4213      	tst	r3, r2
 8000910:	d0ea      	beq.n	80008e8 <__aeabi_fmul+0x240>
 8000912:	4214      	tst	r4, r2
 8000914:	d1e8      	bne.n	80008e8 <__aeabi_fmul+0x240>
 8000916:	003e      	movs	r6, r7
 8000918:	20ff      	movs	r0, #255	@ 0xff
 800091a:	4322      	orrs	r2, r4
 800091c:	e701      	b.n	8000722 <__aeabi_fmul+0x7a>
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_fsub>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	4647      	mov	r7, r8
 8000928:	46ce      	mov	lr, r9
 800092a:	024e      	lsls	r6, r1, #9
 800092c:	0243      	lsls	r3, r0, #9
 800092e:	0045      	lsls	r5, r0, #1
 8000930:	0a72      	lsrs	r2, r6, #9
 8000932:	0fc4      	lsrs	r4, r0, #31
 8000934:	0048      	lsls	r0, r1, #1
 8000936:	b580      	push	{r7, lr}
 8000938:	4694      	mov	ip, r2
 800093a:	0a5f      	lsrs	r7, r3, #9
 800093c:	0e2d      	lsrs	r5, r5, #24
 800093e:	099b      	lsrs	r3, r3, #6
 8000940:	0e00      	lsrs	r0, r0, #24
 8000942:	0fc9      	lsrs	r1, r1, #31
 8000944:	09b6      	lsrs	r6, r6, #6
 8000946:	28ff      	cmp	r0, #255	@ 0xff
 8000948:	d024      	beq.n	8000994 <__aeabi_fsub+0x70>
 800094a:	2201      	movs	r2, #1
 800094c:	4051      	eors	r1, r2
 800094e:	1a2a      	subs	r2, r5, r0
 8000950:	428c      	cmp	r4, r1
 8000952:	d00f      	beq.n	8000974 <__aeabi_fsub+0x50>
 8000954:	2a00      	cmp	r2, #0
 8000956:	dc00      	bgt.n	800095a <__aeabi_fsub+0x36>
 8000958:	e16a      	b.n	8000c30 <__aeabi_fsub+0x30c>
 800095a:	2800      	cmp	r0, #0
 800095c:	d135      	bne.n	80009ca <__aeabi_fsub+0xa6>
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x40>
 8000962:	e0a2      	b.n	8000aaa <__aeabi_fsub+0x186>
 8000964:	1e51      	subs	r1, r2, #1
 8000966:	2a01      	cmp	r2, #1
 8000968:	d100      	bne.n	800096c <__aeabi_fsub+0x48>
 800096a:	e124      	b.n	8000bb6 <__aeabi_fsub+0x292>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d021      	beq.n	80009b4 <__aeabi_fsub+0x90>
 8000970:	000a      	movs	r2, r1
 8000972:	e02f      	b.n	80009d4 <__aeabi_fsub+0xb0>
 8000974:	2a00      	cmp	r2, #0
 8000976:	dc00      	bgt.n	800097a <__aeabi_fsub+0x56>
 8000978:	e167      	b.n	8000c4a <__aeabi_fsub+0x326>
 800097a:	2800      	cmp	r0, #0
 800097c:	d05e      	beq.n	8000a3c <__aeabi_fsub+0x118>
 800097e:	2dff      	cmp	r5, #255	@ 0xff
 8000980:	d018      	beq.n	80009b4 <__aeabi_fsub+0x90>
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	04c9      	lsls	r1, r1, #19
 8000986:	430e      	orrs	r6, r1
 8000988:	2a1b      	cmp	r2, #27
 800098a:	dc00      	bgt.n	800098e <__aeabi_fsub+0x6a>
 800098c:	e076      	b.n	8000a7c <__aeabi_fsub+0x158>
 800098e:	002a      	movs	r2, r5
 8000990:	3301      	adds	r3, #1
 8000992:	e032      	b.n	80009fa <__aeabi_fsub+0xd6>
 8000994:	002a      	movs	r2, r5
 8000996:	3aff      	subs	r2, #255	@ 0xff
 8000998:	4691      	mov	r9, r2
 800099a:	2e00      	cmp	r6, #0
 800099c:	d042      	beq.n	8000a24 <__aeabi_fsub+0x100>
 800099e:	428c      	cmp	r4, r1
 80009a0:	d055      	beq.n	8000a4e <__aeabi_fsub+0x12a>
 80009a2:	464a      	mov	r2, r9
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x86>
 80009a8:	e09c      	b.n	8000ae4 <__aeabi_fsub+0x1c0>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fsub+0x8c>
 80009ae:	e077      	b.n	8000aa0 <__aeabi_fsub+0x17c>
 80009b0:	000c      	movs	r4, r1
 80009b2:	0033      	movs	r3, r6
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d100      	bne.n	80009bc <__aeabi_fsub+0x98>
 80009ba:	e06e      	b.n	8000a9a <__aeabi_fsub+0x176>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	03d2      	lsls	r2, r2, #15
 80009c0:	4313      	orrs	r3, r2
 80009c2:	025b      	lsls	r3, r3, #9
 80009c4:	20ff      	movs	r0, #255	@ 0xff
 80009c6:	0a5b      	lsrs	r3, r3, #9
 80009c8:	e024      	b.n	8000a14 <__aeabi_fsub+0xf0>
 80009ca:	2dff      	cmp	r5, #255	@ 0xff
 80009cc:	d0f2      	beq.n	80009b4 <__aeabi_fsub+0x90>
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	04c9      	lsls	r1, r1, #19
 80009d2:	430e      	orrs	r6, r1
 80009d4:	2101      	movs	r1, #1
 80009d6:	2a1b      	cmp	r2, #27
 80009d8:	dc08      	bgt.n	80009ec <__aeabi_fsub+0xc8>
 80009da:	0031      	movs	r1, r6
 80009dc:	2020      	movs	r0, #32
 80009de:	40d1      	lsrs	r1, r2
 80009e0:	1a82      	subs	r2, r0, r2
 80009e2:	4096      	lsls	r6, r2
 80009e4:	0032      	movs	r2, r6
 80009e6:	1e50      	subs	r0, r2, #1
 80009e8:	4182      	sbcs	r2, r0
 80009ea:	4311      	orrs	r1, r2
 80009ec:	1a5b      	subs	r3, r3, r1
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	d460      	bmi.n	8000ab4 <__aeabi_fsub+0x190>
 80009f2:	2107      	movs	r1, #7
 80009f4:	002a      	movs	r2, r5
 80009f6:	4019      	ands	r1, r3
 80009f8:	d057      	beq.n	8000aaa <__aeabi_fsub+0x186>
 80009fa:	210f      	movs	r1, #15
 80009fc:	4019      	ands	r1, r3
 80009fe:	2904      	cmp	r1, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fsub+0xe0>
 8000a02:	3304      	adds	r3, #4
 8000a04:	0159      	lsls	r1, r3, #5
 8000a06:	d550      	bpl.n	8000aaa <__aeabi_fsub+0x186>
 8000a08:	1c50      	adds	r0, r2, #1
 8000a0a:	2afe      	cmp	r2, #254	@ 0xfe
 8000a0c:	d045      	beq.n	8000a9a <__aeabi_fsub+0x176>
 8000a0e:	019b      	lsls	r3, r3, #6
 8000a10:	b2c0      	uxtb	r0, r0
 8000a12:	0a5b      	lsrs	r3, r3, #9
 8000a14:	05c0      	lsls	r0, r0, #23
 8000a16:	4318      	orrs	r0, r3
 8000a18:	07e4      	lsls	r4, r4, #31
 8000a1a:	4320      	orrs	r0, r4
 8000a1c:	bcc0      	pop	{r6, r7}
 8000a1e:	46b9      	mov	r9, r7
 8000a20:	46b0      	mov	r8, r6
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a24:	2201      	movs	r2, #1
 8000a26:	4051      	eors	r1, r2
 8000a28:	428c      	cmp	r4, r1
 8000a2a:	d1ba      	bne.n	80009a2 <__aeabi_fsub+0x7e>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d010      	beq.n	8000a54 <__aeabi_fsub+0x130>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x114>
 8000a36:	e098      	b.n	8000b6a <__aeabi_fsub+0x246>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e7bb      	b.n	80009b4 <__aeabi_fsub+0x90>
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d034      	beq.n	8000aaa <__aeabi_fsub+0x186>
 8000a40:	1e51      	subs	r1, r2, #1
 8000a42:	2a01      	cmp	r2, #1
 8000a44:	d06e      	beq.n	8000b24 <__aeabi_fsub+0x200>
 8000a46:	2aff      	cmp	r2, #255	@ 0xff
 8000a48:	d0b4      	beq.n	80009b4 <__aeabi_fsub+0x90>
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	e79c      	b.n	8000988 <__aeabi_fsub+0x64>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fsub+0x130>
 8000a52:	e088      	b.n	8000b66 <__aeabi_fsub+0x242>
 8000a54:	20fe      	movs	r0, #254	@ 0xfe
 8000a56:	1c6a      	adds	r2, r5, #1
 8000a58:	4210      	tst	r0, r2
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fsub+0x13a>
 8000a5c:	e092      	b.n	8000b84 <__aeabi_fsub+0x260>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fsub+0x140>
 8000a62:	e0a4      	b.n	8000bae <__aeabi_fsub+0x28a>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_fsub+0x146>
 8000a68:	e0cb      	b.n	8000c02 <__aeabi_fsub+0x2de>
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fsub+0x14c>
 8000a6e:	e0ca      	b.n	8000c06 <__aeabi_fsub+0x2e2>
 8000a70:	2200      	movs	r2, #0
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	0a5b      	lsrs	r3, r3, #9
 8000a78:	b2d0      	uxtb	r0, r2
 8000a7a:	e7cb      	b.n	8000a14 <__aeabi_fsub+0xf0>
 8000a7c:	0031      	movs	r1, r6
 8000a7e:	2020      	movs	r0, #32
 8000a80:	40d1      	lsrs	r1, r2
 8000a82:	1a82      	subs	r2, r0, r2
 8000a84:	4096      	lsls	r6, r2
 8000a86:	0032      	movs	r2, r6
 8000a88:	1e50      	subs	r0, r2, #1
 8000a8a:	4182      	sbcs	r2, r0
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	189b      	adds	r3, r3, r2
 8000a90:	015a      	lsls	r2, r3, #5
 8000a92:	d5ae      	bpl.n	80009f2 <__aeabi_fsub+0xce>
 8000a94:	1c6a      	adds	r2, r5, #1
 8000a96:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a98:	d14a      	bne.n	8000b30 <__aeabi_fsub+0x20c>
 8000a9a:	20ff      	movs	r0, #255	@ 0xff
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e7b9      	b.n	8000a14 <__aeabi_fsub+0xf0>
 8000aa0:	22ff      	movs	r2, #255	@ 0xff
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d14b      	bne.n	8000b3e <__aeabi_fsub+0x21a>
 8000aa6:	000c      	movs	r4, r1
 8000aa8:	0033      	movs	r3, r6
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	2aff      	cmp	r2, #255	@ 0xff
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fsub+0x18e>
 8000ab0:	e781      	b.n	80009b6 <__aeabi_fsub+0x92>
 8000ab2:	e7df      	b.n	8000a74 <__aeabi_fsub+0x150>
 8000ab4:	019f      	lsls	r7, r3, #6
 8000ab6:	09bf      	lsrs	r7, r7, #6
 8000ab8:	0038      	movs	r0, r7
 8000aba:	f002 f8ad 	bl	8002c18 <__clzsi2>
 8000abe:	3805      	subs	r0, #5
 8000ac0:	4087      	lsls	r7, r0
 8000ac2:	4285      	cmp	r5, r0
 8000ac4:	dc21      	bgt.n	8000b0a <__aeabi_fsub+0x1e6>
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2120      	movs	r1, #32
 8000aca:	1b42      	subs	r2, r0, r5
 8000acc:	3201      	adds	r2, #1
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	1e7a      	subs	r2, r7, #1
 8000ad6:	4197      	sbcs	r7, r2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	433b      	orrs	r3, r7
 8000adc:	0759      	lsls	r1, r3, #29
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x1be>
 8000ae0:	e78b      	b.n	80009fa <__aeabi_fsub+0xd6>
 8000ae2:	e78f      	b.n	8000a04 <__aeabi_fsub+0xe0>
 8000ae4:	20fe      	movs	r0, #254	@ 0xfe
 8000ae6:	1c6a      	adds	r2, r5, #1
 8000ae8:	4210      	tst	r0, r2
 8000aea:	d112      	bne.n	8000b12 <__aeabi_fsub+0x1ee>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d152      	bne.n	8000b96 <__aeabi_fsub+0x272>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d07c      	beq.n	8000bee <__aeabi_fsub+0x2ca>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d0bb      	beq.n	8000a70 <__aeabi_fsub+0x14c>
 8000af8:	1b9a      	subs	r2, r3, r6
 8000afa:	0150      	lsls	r0, r2, #5
 8000afc:	d400      	bmi.n	8000b00 <__aeabi_fsub+0x1dc>
 8000afe:	e08b      	b.n	8000c18 <__aeabi_fsub+0x2f4>
 8000b00:	2401      	movs	r4, #1
 8000b02:	2200      	movs	r2, #0
 8000b04:	1af3      	subs	r3, r6, r3
 8000b06:	400c      	ands	r4, r1
 8000b08:	e7e8      	b.n	8000adc <__aeabi_fsub+0x1b8>
 8000b0a:	4b56      	ldr	r3, [pc, #344]	@ (8000c64 <__aeabi_fsub+0x340>)
 8000b0c:	1a2a      	subs	r2, r5, r0
 8000b0e:	403b      	ands	r3, r7
 8000b10:	e7e4      	b.n	8000adc <__aeabi_fsub+0x1b8>
 8000b12:	1b9f      	subs	r7, r3, r6
 8000b14:	017a      	lsls	r2, r7, #5
 8000b16:	d446      	bmi.n	8000ba6 <__aeabi_fsub+0x282>
 8000b18:	2f00      	cmp	r7, #0
 8000b1a:	d1cd      	bne.n	8000ab8 <__aeabi_fsub+0x194>
 8000b1c:	2400      	movs	r4, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	2300      	movs	r3, #0
 8000b22:	e777      	b.n	8000a14 <__aeabi_fsub+0xf0>
 8000b24:	199b      	adds	r3, r3, r6
 8000b26:	2501      	movs	r5, #1
 8000b28:	3201      	adds	r2, #1
 8000b2a:	0159      	lsls	r1, r3, #5
 8000b2c:	d400      	bmi.n	8000b30 <__aeabi_fsub+0x20c>
 8000b2e:	e760      	b.n	80009f2 <__aeabi_fsub+0xce>
 8000b30:	2101      	movs	r1, #1
 8000b32:	484d      	ldr	r0, [pc, #308]	@ (8000c68 <__aeabi_fsub+0x344>)
 8000b34:	4019      	ands	r1, r3
 8000b36:	085b      	lsrs	r3, r3, #1
 8000b38:	4003      	ands	r3, r0
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	e7ce      	b.n	8000adc <__aeabi_fsub+0x1b8>
 8000b3e:	1e57      	subs	r7, r2, #1
 8000b40:	2a01      	cmp	r2, #1
 8000b42:	d05a      	beq.n	8000bfa <__aeabi_fsub+0x2d6>
 8000b44:	000c      	movs	r4, r1
 8000b46:	2aff      	cmp	r2, #255	@ 0xff
 8000b48:	d033      	beq.n	8000bb2 <__aeabi_fsub+0x28e>
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2f1b      	cmp	r7, #27
 8000b4e:	dc07      	bgt.n	8000b60 <__aeabi_fsub+0x23c>
 8000b50:	2120      	movs	r1, #32
 8000b52:	1bc9      	subs	r1, r1, r7
 8000b54:	001a      	movs	r2, r3
 8000b56:	408b      	lsls	r3, r1
 8000b58:	40fa      	lsrs	r2, r7
 8000b5a:	1e59      	subs	r1, r3, #1
 8000b5c:	418b      	sbcs	r3, r1
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	0005      	movs	r5, r0
 8000b62:	1ab3      	subs	r3, r6, r2
 8000b64:	e743      	b.n	80009ee <__aeabi_fsub+0xca>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d123      	bne.n	8000bb2 <__aeabi_fsub+0x28e>
 8000b6a:	22ff      	movs	r2, #255	@ 0xff
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d09b      	beq.n	8000aa8 <__aeabi_fsub+0x184>
 8000b70:	1e51      	subs	r1, r2, #1
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d0d6      	beq.n	8000b24 <__aeabi_fsub+0x200>
 8000b76:	2aff      	cmp	r2, #255	@ 0xff
 8000b78:	d01b      	beq.n	8000bb2 <__aeabi_fsub+0x28e>
 8000b7a:	291b      	cmp	r1, #27
 8000b7c:	dd2c      	ble.n	8000bd8 <__aeabi_fsub+0x2b4>
 8000b7e:	0002      	movs	r2, r0
 8000b80:	1c73      	adds	r3, r6, #1
 8000b82:	e73a      	b.n	80009fa <__aeabi_fsub+0xd6>
 8000b84:	2aff      	cmp	r2, #255	@ 0xff
 8000b86:	d088      	beq.n	8000a9a <__aeabi_fsub+0x176>
 8000b88:	199b      	adds	r3, r3, r6
 8000b8a:	085b      	lsrs	r3, r3, #1
 8000b8c:	0759      	lsls	r1, r3, #29
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_fsub+0x26e>
 8000b90:	e733      	b.n	80009fa <__aeabi_fsub+0xd6>
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	e76e      	b.n	8000a74 <__aeabi_fsub+0x150>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d110      	bne.n	8000bbc <__aeabi_fsub+0x298>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d043      	beq.n	8000c26 <__aeabi_fsub+0x302>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	e706      	b.n	80009b4 <__aeabi_fsub+0x90>
 8000ba6:	2401      	movs	r4, #1
 8000ba8:	1af7      	subs	r7, r6, r3
 8000baa:	400c      	ands	r4, r1
 8000bac:	e784      	b.n	8000ab8 <__aeabi_fsub+0x194>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d104      	bne.n	8000bbc <__aeabi_fsub+0x298>
 8000bb2:	0033      	movs	r3, r6
 8000bb4:	e6fe      	b.n	80009b4 <__aeabi_fsub+0x90>
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1b9b      	subs	r3, r3, r6
 8000bba:	e718      	b.n	80009ee <__aeabi_fsub+0xca>
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x29e>
 8000bc0:	e6f8      	b.n	80009b4 <__aeabi_fsub+0x90>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	03d2      	lsls	r2, r2, #15
 8000bc6:	4297      	cmp	r7, r2
 8000bc8:	d304      	bcc.n	8000bd4 <__aeabi_fsub+0x2b0>
 8000bca:	4594      	cmp	ip, r2
 8000bcc:	d202      	bcs.n	8000bd4 <__aeabi_fsub+0x2b0>
 8000bce:	2401      	movs	r4, #1
 8000bd0:	0033      	movs	r3, r6
 8000bd2:	400c      	ands	r4, r1
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	e6f1      	b.n	80009bc <__aeabi_fsub+0x98>
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2520      	movs	r5, #32
 8000bdc:	40ca      	lsrs	r2, r1
 8000bde:	1a69      	subs	r1, r5, r1
 8000be0:	408b      	lsls	r3, r1
 8000be2:	1e59      	subs	r1, r3, #1
 8000be4:	418b      	sbcs	r3, r1
 8000be6:	4313      	orrs	r3, r2
 8000be8:	0005      	movs	r5, r0
 8000bea:	199b      	adds	r3, r3, r6
 8000bec:	e750      	b.n	8000a90 <__aeabi_fsub+0x16c>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d094      	beq.n	8000b1c <__aeabi_fsub+0x1f8>
 8000bf2:	2401      	movs	r4, #1
 8000bf4:	0033      	movs	r3, r6
 8000bf6:	400c      	ands	r4, r1
 8000bf8:	e73a      	b.n	8000a70 <__aeabi_fsub+0x14c>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	2501      	movs	r5, #1
 8000bfe:	1af3      	subs	r3, r6, r3
 8000c00:	e6f5      	b.n	80009ee <__aeabi_fsub+0xca>
 8000c02:	0033      	movs	r3, r6
 8000c04:	e734      	b.n	8000a70 <__aeabi_fsub+0x14c>
 8000c06:	199b      	adds	r3, r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0159      	lsls	r1, r3, #5
 8000c0c:	d5c1      	bpl.n	8000b92 <__aeabi_fsub+0x26e>
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <__aeabi_fsub+0x340>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	2201      	movs	r2, #1
 8000c16:	e72d      	b.n	8000a74 <__aeabi_fsub+0x150>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_fsub+0x2fa>
 8000c1c:	e77e      	b.n	8000b1c <__aeabi_fsub+0x1f8>
 8000c1e:	0013      	movs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	e726      	b.n	8000a74 <__aeabi_fsub+0x150>
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	2400      	movs	r4, #0
 8000c2a:	20ff      	movs	r0, #255	@ 0xff
 8000c2c:	03db      	lsls	r3, r3, #15
 8000c2e:	e6f1      	b.n	8000a14 <__aeabi_fsub+0xf0>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x312>
 8000c34:	e756      	b.n	8000ae4 <__aeabi_fsub+0x1c0>
 8000c36:	1b47      	subs	r7, r0, r5
 8000c38:	003a      	movs	r2, r7
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x31c>
 8000c3e:	e730      	b.n	8000aa2 <__aeabi_fsub+0x17e>
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	04d2      	lsls	r2, r2, #19
 8000c44:	000c      	movs	r4, r1
 8000c46:	4313      	orrs	r3, r2
 8000c48:	e77f      	b.n	8000b4a <__aeabi_fsub+0x226>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x32c>
 8000c4e:	e701      	b.n	8000a54 <__aeabi_fsub+0x130>
 8000c50:	1b41      	subs	r1, r0, r5
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d101      	bne.n	8000c5a <__aeabi_fsub+0x336>
 8000c56:	000a      	movs	r2, r1
 8000c58:	e788      	b.n	8000b6c <__aeabi_fsub+0x248>
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	04d2      	lsls	r2, r2, #19
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	e78b      	b.n	8000b7a <__aeabi_fsub+0x256>
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	fbffffff 	.word	0xfbffffff
 8000c68:	7dffffff 	.word	0x7dffffff

08000c6c <__aeabi_f2iz>:
 8000c6c:	0241      	lsls	r1, r0, #9
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	0fc3      	lsrs	r3, r0, #31
 8000c72:	0a49      	lsrs	r1, r1, #9
 8000c74:	2000      	movs	r0, #0
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c7a:	dd03      	ble.n	8000c84 <__aeabi_f2iz+0x18>
 8000c7c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c7e:	dd02      	ble.n	8000c86 <__aeabi_f2iz+0x1a>
 8000c80:	4a09      	ldr	r2, [pc, #36]	@ (8000ca8 <__aeabi_f2iz+0x3c>)
 8000c82:	1898      	adds	r0, r3, r2
 8000c84:	4770      	bx	lr
 8000c86:	2080      	movs	r0, #128	@ 0x80
 8000c88:	0400      	lsls	r0, r0, #16
 8000c8a:	4301      	orrs	r1, r0
 8000c8c:	2a95      	cmp	r2, #149	@ 0x95
 8000c8e:	dc07      	bgt.n	8000ca0 <__aeabi_f2iz+0x34>
 8000c90:	2096      	movs	r0, #150	@ 0x96
 8000c92:	1a82      	subs	r2, r0, r2
 8000c94:	40d1      	lsrs	r1, r2
 8000c96:	4248      	negs	r0, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f3      	bne.n	8000c84 <__aeabi_f2iz+0x18>
 8000c9c:	0008      	movs	r0, r1
 8000c9e:	e7f1      	b.n	8000c84 <__aeabi_f2iz+0x18>
 8000ca0:	3a96      	subs	r2, #150	@ 0x96
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	e7f7      	b.n	8000c96 <__aeabi_f2iz+0x2a>
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	7fffffff 	.word	0x7fffffff

08000cac <__aeabi_i2f>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d013      	beq.n	8000cda <__aeabi_i2f+0x2e>
 8000cb2:	17c3      	asrs	r3, r0, #31
 8000cb4:	18c5      	adds	r5, r0, r3
 8000cb6:	405d      	eors	r5, r3
 8000cb8:	0fc4      	lsrs	r4, r0, #31
 8000cba:	0028      	movs	r0, r5
 8000cbc:	f001 ffac 	bl	8002c18 <__clzsi2>
 8000cc0:	239e      	movs	r3, #158	@ 0x9e
 8000cc2:	0001      	movs	r1, r0
 8000cc4:	1a1b      	subs	r3, r3, r0
 8000cc6:	2b96      	cmp	r3, #150	@ 0x96
 8000cc8:	dc0f      	bgt.n	8000cea <__aeabi_i2f+0x3e>
 8000cca:	2808      	cmp	r0, #8
 8000ccc:	d034      	beq.n	8000d38 <__aeabi_i2f+0x8c>
 8000cce:	3908      	subs	r1, #8
 8000cd0:	408d      	lsls	r5, r1
 8000cd2:	026d      	lsls	r5, r5, #9
 8000cd4:	0a6d      	lsrs	r5, r5, #9
 8000cd6:	b2d8      	uxtb	r0, r3
 8000cd8:	e002      	b.n	8000ce0 <__aeabi_i2f+0x34>
 8000cda:	2400      	movs	r4, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2500      	movs	r5, #0
 8000ce0:	05c0      	lsls	r0, r0, #23
 8000ce2:	4328      	orrs	r0, r5
 8000ce4:	07e4      	lsls	r4, r4, #31
 8000ce6:	4320      	orrs	r0, r4
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
 8000cea:	2b99      	cmp	r3, #153	@ 0x99
 8000cec:	dc16      	bgt.n	8000d1c <__aeabi_i2f+0x70>
 8000cee:	1f42      	subs	r2, r0, #5
 8000cf0:	2805      	cmp	r0, #5
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_i2f+0x4a>
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	002a      	movs	r2, r5
 8000cf8:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <__aeabi_i2f+0x94>)
 8000cfa:	4002      	ands	r2, r0
 8000cfc:	076e      	lsls	r6, r5, #29
 8000cfe:	d009      	beq.n	8000d14 <__aeabi_i2f+0x68>
 8000d00:	260f      	movs	r6, #15
 8000d02:	4035      	ands	r5, r6
 8000d04:	2d04      	cmp	r5, #4
 8000d06:	d005      	beq.n	8000d14 <__aeabi_i2f+0x68>
 8000d08:	3204      	adds	r2, #4
 8000d0a:	0155      	lsls	r5, r2, #5
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_i2f+0x68>
 8000d0e:	239f      	movs	r3, #159	@ 0x9f
 8000d10:	4002      	ands	r2, r0
 8000d12:	1a5b      	subs	r3, r3, r1
 8000d14:	0192      	lsls	r2, r2, #6
 8000d16:	0a55      	lsrs	r5, r2, #9
 8000d18:	b2d8      	uxtb	r0, r3
 8000d1a:	e7e1      	b.n	8000ce0 <__aeabi_i2f+0x34>
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	0028      	movs	r0, r5
 8000d22:	40d0      	lsrs	r0, r2
 8000d24:	0002      	movs	r2, r0
 8000d26:	0008      	movs	r0, r1
 8000d28:	301b      	adds	r0, #27
 8000d2a:	4085      	lsls	r5, r0
 8000d2c:	0028      	movs	r0, r5
 8000d2e:	1e45      	subs	r5, r0, #1
 8000d30:	41a8      	sbcs	r0, r5
 8000d32:	4302      	orrs	r2, r0
 8000d34:	0015      	movs	r5, r2
 8000d36:	e7de      	b.n	8000cf6 <__aeabi_i2f+0x4a>
 8000d38:	026d      	lsls	r5, r5, #9
 8000d3a:	2096      	movs	r0, #150	@ 0x96
 8000d3c:	0a6d      	lsrs	r5, r5, #9
 8000d3e:	e7cf      	b.n	8000ce0 <__aeabi_i2f+0x34>
 8000d40:	fbffffff 	.word	0xfbffffff

08000d44 <__aeabi_ui2f>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	1e04      	subs	r4, r0, #0
 8000d48:	d00e      	beq.n	8000d68 <__aeabi_ui2f+0x24>
 8000d4a:	f001 ff65 	bl	8002c18 <__clzsi2>
 8000d4e:	239e      	movs	r3, #158	@ 0x9e
 8000d50:	0001      	movs	r1, r0
 8000d52:	1a1b      	subs	r3, r3, r0
 8000d54:	2b96      	cmp	r3, #150	@ 0x96
 8000d56:	dc0c      	bgt.n	8000d72 <__aeabi_ui2f+0x2e>
 8000d58:	2808      	cmp	r0, #8
 8000d5a:	d02f      	beq.n	8000dbc <__aeabi_ui2f+0x78>
 8000d5c:	3908      	subs	r1, #8
 8000d5e:	408c      	lsls	r4, r1
 8000d60:	0264      	lsls	r4, r4, #9
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	e001      	b.n	8000d6c <__aeabi_ui2f+0x28>
 8000d68:	2000      	movs	r0, #0
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	05c0      	lsls	r0, r0, #23
 8000d6e:	4320      	orrs	r0, r4
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
 8000d72:	2b99      	cmp	r3, #153	@ 0x99
 8000d74:	dc16      	bgt.n	8000da4 <__aeabi_ui2f+0x60>
 8000d76:	1f42      	subs	r2, r0, #5
 8000d78:	2805      	cmp	r0, #5
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_ui2f+0x3a>
 8000d7c:	4094      	lsls	r4, r2
 8000d7e:	0022      	movs	r2, r4
 8000d80:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <__aeabi_ui2f+0x80>)
 8000d82:	4002      	ands	r2, r0
 8000d84:	0765      	lsls	r5, r4, #29
 8000d86:	d009      	beq.n	8000d9c <__aeabi_ui2f+0x58>
 8000d88:	250f      	movs	r5, #15
 8000d8a:	402c      	ands	r4, r5
 8000d8c:	2c04      	cmp	r4, #4
 8000d8e:	d005      	beq.n	8000d9c <__aeabi_ui2f+0x58>
 8000d90:	3204      	adds	r2, #4
 8000d92:	0154      	lsls	r4, r2, #5
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_ui2f+0x58>
 8000d96:	239f      	movs	r3, #159	@ 0x9f
 8000d98:	4002      	ands	r2, r0
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	0a54      	lsrs	r4, r2, #9
 8000da0:	b2d8      	uxtb	r0, r3
 8000da2:	e7e3      	b.n	8000d6c <__aeabi_ui2f+0x28>
 8000da4:	0002      	movs	r2, r0
 8000da6:	0020      	movs	r0, r4
 8000da8:	321b      	adds	r2, #27
 8000daa:	4090      	lsls	r0, r2
 8000dac:	0002      	movs	r2, r0
 8000dae:	1e50      	subs	r0, r2, #1
 8000db0:	4182      	sbcs	r2, r0
 8000db2:	2005      	movs	r0, #5
 8000db4:	1a40      	subs	r0, r0, r1
 8000db6:	40c4      	lsrs	r4, r0
 8000db8:	4314      	orrs	r4, r2
 8000dba:	e7e0      	b.n	8000d7e <__aeabi_ui2f+0x3a>
 8000dbc:	0264      	lsls	r4, r4, #9
 8000dbe:	2096      	movs	r0, #150	@ 0x96
 8000dc0:	0a64      	lsrs	r4, r4, #9
 8000dc2:	e7d3      	b.n	8000d6c <__aeabi_ui2f+0x28>
 8000dc4:	fbffffff 	.word	0xfbffffff

08000dc8 <__aeabi_dadd>:
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	4657      	mov	r7, sl
 8000dcc:	464e      	mov	r6, r9
 8000dce:	4645      	mov	r5, r8
 8000dd0:	46de      	mov	lr, fp
 8000dd2:	b5e0      	push	{r5, r6, r7, lr}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	9000      	str	r0, [sp, #0]
 8000dd8:	9101      	str	r1, [sp, #4]
 8000dda:	030c      	lsls	r4, r1, #12
 8000ddc:	004f      	lsls	r7, r1, #1
 8000dde:	0fce      	lsrs	r6, r1, #31
 8000de0:	0a61      	lsrs	r1, r4, #9
 8000de2:	9c00      	ldr	r4, [sp, #0]
 8000de4:	031d      	lsls	r5, r3, #12
 8000de6:	0f64      	lsrs	r4, r4, #29
 8000de8:	430c      	orrs	r4, r1
 8000dea:	9900      	ldr	r1, [sp, #0]
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	00c8      	lsls	r0, r1, #3
 8000df2:	0059      	lsls	r1, r3, #1
 8000df4:	0d4b      	lsrs	r3, r1, #21
 8000df6:	4699      	mov	r9, r3
 8000df8:	9a00      	ldr	r2, [sp, #0]
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	0a6d      	lsrs	r5, r5, #9
 8000dfe:	0fd9      	lsrs	r1, r3, #31
 8000e00:	0f53      	lsrs	r3, r2, #29
 8000e02:	432b      	orrs	r3, r5
 8000e04:	469a      	mov	sl, r3
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	0d7f      	lsrs	r7, r7, #21
 8000e0a:	00da      	lsls	r2, r3, #3
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	464a      	mov	r2, r9
 8000e10:	46b0      	mov	r8, r6
 8000e12:	1aba      	subs	r2, r7, r2
 8000e14:	428e      	cmp	r6, r1
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x52>
 8000e18:	e0b0      	b.n	8000f7c <__aeabi_dadd+0x1b4>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	dc00      	bgt.n	8000e20 <__aeabi_dadd+0x58>
 8000e1e:	e078      	b.n	8000f12 <__aeabi_dadd+0x14a>
 8000e20:	4649      	mov	r1, r9
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_dadd+0x60>
 8000e26:	e0e9      	b.n	8000ffc <__aeabi_dadd+0x234>
 8000e28:	49c9      	ldr	r1, [pc, #804]	@ (8001150 <__aeabi_dadd+0x388>)
 8000e2a:	428f      	cmp	r7, r1
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dadd+0x68>
 8000e2e:	e195      	b.n	800115c <__aeabi_dadd+0x394>
 8000e30:	2501      	movs	r5, #1
 8000e32:	2a38      	cmp	r2, #56	@ 0x38
 8000e34:	dc16      	bgt.n	8000e64 <__aeabi_dadd+0x9c>
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	4653      	mov	r3, sl
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	469a      	mov	sl, r3
 8000e40:	2a1f      	cmp	r2, #31
 8000e42:	dd00      	ble.n	8000e46 <__aeabi_dadd+0x7e>
 8000e44:	e1e7      	b.n	8001216 <__aeabi_dadd+0x44e>
 8000e46:	2120      	movs	r1, #32
 8000e48:	4655      	mov	r5, sl
 8000e4a:	1a8b      	subs	r3, r1, r2
 8000e4c:	4661      	mov	r1, ip
 8000e4e:	409d      	lsls	r5, r3
 8000e50:	40d1      	lsrs	r1, r2
 8000e52:	430d      	orrs	r5, r1
 8000e54:	4661      	mov	r1, ip
 8000e56:	4099      	lsls	r1, r3
 8000e58:	1e4b      	subs	r3, r1, #1
 8000e5a:	4199      	sbcs	r1, r3
 8000e5c:	4653      	mov	r3, sl
 8000e5e:	40d3      	lsrs	r3, r2
 8000e60:	430d      	orrs	r5, r1
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	1b45      	subs	r5, r0, r5
 8000e66:	42a8      	cmp	r0, r5
 8000e68:	4180      	sbcs	r0, r0
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	1a24      	subs	r4, r4, r0
 8000e6e:	0223      	lsls	r3, r4, #8
 8000e70:	d400      	bmi.n	8000e74 <__aeabi_dadd+0xac>
 8000e72:	e10f      	b.n	8001094 <__aeabi_dadd+0x2cc>
 8000e74:	0264      	lsls	r4, r4, #9
 8000e76:	0a64      	lsrs	r4, r4, #9
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0xb6>
 8000e7c:	e139      	b.n	80010f2 <__aeabi_dadd+0x32a>
 8000e7e:	0020      	movs	r0, r4
 8000e80:	f001 feca 	bl	8002c18 <__clzsi2>
 8000e84:	0003      	movs	r3, r0
 8000e86:	3b08      	subs	r3, #8
 8000e88:	2120      	movs	r1, #32
 8000e8a:	0028      	movs	r0, r5
 8000e8c:	1aca      	subs	r2, r1, r3
 8000e8e:	40d0      	lsrs	r0, r2
 8000e90:	409c      	lsls	r4, r3
 8000e92:	0002      	movs	r2, r0
 8000e94:	409d      	lsls	r5, r3
 8000e96:	4322      	orrs	r2, r4
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	dd00      	ble.n	8000e9e <__aeabi_dadd+0xd6>
 8000e9c:	e173      	b.n	8001186 <__aeabi_dadd+0x3be>
 8000e9e:	1bd8      	subs	r0, r3, r7
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	1a09      	subs	r1, r1, r0
 8000ea4:	002c      	movs	r4, r5
 8000ea6:	408d      	lsls	r5, r1
 8000ea8:	40c4      	lsrs	r4, r0
 8000eaa:	1e6b      	subs	r3, r5, #1
 8000eac:	419d      	sbcs	r5, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	40c2      	lsrs	r2, r0
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	4325      	orrs	r5, r4
 8000eb6:	2700      	movs	r7, #0
 8000eb8:	0014      	movs	r4, r2
 8000eba:	431d      	orrs	r5, r3
 8000ebc:	076b      	lsls	r3, r5, #29
 8000ebe:	d009      	beq.n	8000ed4 <__aeabi_dadd+0x10c>
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	402b      	ands	r3, r5
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d005      	beq.n	8000ed4 <__aeabi_dadd+0x10c>
 8000ec8:	1d2b      	adds	r3, r5, #4
 8000eca:	42ab      	cmp	r3, r5
 8000ecc:	41ad      	sbcs	r5, r5
 8000ece:	426d      	negs	r5, r5
 8000ed0:	1964      	adds	r4, r4, r5
 8000ed2:	001d      	movs	r5, r3
 8000ed4:	0223      	lsls	r3, r4, #8
 8000ed6:	d400      	bmi.n	8000eda <__aeabi_dadd+0x112>
 8000ed8:	e12d      	b.n	8001136 <__aeabi_dadd+0x36e>
 8000eda:	4a9d      	ldr	r2, [pc, #628]	@ (8001150 <__aeabi_dadd+0x388>)
 8000edc:	3701      	adds	r7, #1
 8000ede:	4297      	cmp	r7, r2
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x11c>
 8000ee2:	e0d3      	b.n	800108c <__aeabi_dadd+0x2c4>
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	499b      	ldr	r1, [pc, #620]	@ (8001154 <__aeabi_dadd+0x38c>)
 8000ee8:	08ed      	lsrs	r5, r5, #3
 8000eea:	4021      	ands	r1, r4
 8000eec:	074a      	lsls	r2, r1, #29
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	057c      	lsls	r4, r7, #21
 8000ef2:	024d      	lsls	r5, r1, #9
 8000ef4:	0b2d      	lsrs	r5, r5, #12
 8000ef6:	0d64      	lsrs	r4, r4, #21
 8000ef8:	0524      	lsls	r4, r4, #20
 8000efa:	432c      	orrs	r4, r5
 8000efc:	07f6      	lsls	r6, r6, #31
 8000efe:	4334      	orrs	r4, r6
 8000f00:	0010      	movs	r0, r2
 8000f02:	0021      	movs	r1, r4
 8000f04:	b003      	add	sp, #12
 8000f06:	bcf0      	pop	{r4, r5, r6, r7}
 8000f08:	46bb      	mov	fp, r7
 8000f0a:	46b2      	mov	sl, r6
 8000f0c:	46a9      	mov	r9, r5
 8000f0e:	46a0      	mov	r8, r4
 8000f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dadd+0x150>
 8000f16:	e084      	b.n	8001022 <__aeabi_dadd+0x25a>
 8000f18:	464a      	mov	r2, r9
 8000f1a:	1bd2      	subs	r2, r2, r7
 8000f1c:	2f00      	cmp	r7, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_dadd+0x15a>
 8000f20:	e16d      	b.n	80011fe <__aeabi_dadd+0x436>
 8000f22:	0025      	movs	r5, r4
 8000f24:	4305      	orrs	r5, r0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x162>
 8000f28:	e127      	b.n	800117a <__aeabi_dadd+0x3b2>
 8000f2a:	1e56      	subs	r6, r2, #1
 8000f2c:	2a01      	cmp	r2, #1
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x16a>
 8000f30:	e23b      	b.n	80013aa <__aeabi_dadd+0x5e2>
 8000f32:	4d87      	ldr	r5, [pc, #540]	@ (8001150 <__aeabi_dadd+0x388>)
 8000f34:	42aa      	cmp	r2, r5
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x172>
 8000f38:	e26a      	b.n	8001410 <__aeabi_dadd+0x648>
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	2e38      	cmp	r6, #56	@ 0x38
 8000f3e:	dc12      	bgt.n	8000f66 <__aeabi_dadd+0x19e>
 8000f40:	0032      	movs	r2, r6
 8000f42:	2a1f      	cmp	r2, #31
 8000f44:	dd00      	ble.n	8000f48 <__aeabi_dadd+0x180>
 8000f46:	e1f8      	b.n	800133a <__aeabi_dadd+0x572>
 8000f48:	2620      	movs	r6, #32
 8000f4a:	0025      	movs	r5, r4
 8000f4c:	1ab6      	subs	r6, r6, r2
 8000f4e:	0007      	movs	r7, r0
 8000f50:	4653      	mov	r3, sl
 8000f52:	40b0      	lsls	r0, r6
 8000f54:	40d4      	lsrs	r4, r2
 8000f56:	40b5      	lsls	r5, r6
 8000f58:	40d7      	lsrs	r7, r2
 8000f5a:	1e46      	subs	r6, r0, #1
 8000f5c:	41b0      	sbcs	r0, r6
 8000f5e:	1b1b      	subs	r3, r3, r4
 8000f60:	469a      	mov	sl, r3
 8000f62:	433d      	orrs	r5, r7
 8000f64:	4305      	orrs	r5, r0
 8000f66:	4662      	mov	r2, ip
 8000f68:	1b55      	subs	r5, r2, r5
 8000f6a:	45ac      	cmp	ip, r5
 8000f6c:	4192      	sbcs	r2, r2
 8000f6e:	4653      	mov	r3, sl
 8000f70:	4252      	negs	r2, r2
 8000f72:	000e      	movs	r6, r1
 8000f74:	464f      	mov	r7, r9
 8000f76:	4688      	mov	r8, r1
 8000f78:	1a9c      	subs	r4, r3, r2
 8000f7a:	e778      	b.n	8000e6e <__aeabi_dadd+0xa6>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	dc00      	bgt.n	8000f82 <__aeabi_dadd+0x1ba>
 8000f80:	e08e      	b.n	80010a0 <__aeabi_dadd+0x2d8>
 8000f82:	4649      	mov	r1, r9
 8000f84:	2900      	cmp	r1, #0
 8000f86:	d175      	bne.n	8001074 <__aeabi_dadd+0x2ac>
 8000f88:	4661      	mov	r1, ip
 8000f8a:	4653      	mov	r3, sl
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dadd+0x1ca>
 8000f90:	e0f6      	b.n	8001180 <__aeabi_dadd+0x3b8>
 8000f92:	1e51      	subs	r1, r2, #1
 8000f94:	2a01      	cmp	r2, #1
 8000f96:	d100      	bne.n	8000f9a <__aeabi_dadd+0x1d2>
 8000f98:	e191      	b.n	80012be <__aeabi_dadd+0x4f6>
 8000f9a:	4d6d      	ldr	r5, [pc, #436]	@ (8001150 <__aeabi_dadd+0x388>)
 8000f9c:	42aa      	cmp	r2, r5
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x1da>
 8000fa0:	e0dc      	b.n	800115c <__aeabi_dadd+0x394>
 8000fa2:	2501      	movs	r5, #1
 8000fa4:	2938      	cmp	r1, #56	@ 0x38
 8000fa6:	dc14      	bgt.n	8000fd2 <__aeabi_dadd+0x20a>
 8000fa8:	000a      	movs	r2, r1
 8000faa:	2a1f      	cmp	r2, #31
 8000fac:	dd00      	ble.n	8000fb0 <__aeabi_dadd+0x1e8>
 8000fae:	e1a2      	b.n	80012f6 <__aeabi_dadd+0x52e>
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	1a89      	subs	r1, r1, r2
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	001d      	movs	r5, r3
 8000fba:	4663      	mov	r3, ip
 8000fbc:	40d3      	lsrs	r3, r2
 8000fbe:	431d      	orrs	r5, r3
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	408b      	lsls	r3, r1
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	1e4b      	subs	r3, r1, #1
 8000fc8:	4199      	sbcs	r1, r3
 8000fca:	4653      	mov	r3, sl
 8000fcc:	40d3      	lsrs	r3, r2
 8000fce:	430d      	orrs	r5, r1
 8000fd0:	18e4      	adds	r4, r4, r3
 8000fd2:	182d      	adds	r5, r5, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	4180      	sbcs	r0, r0
 8000fd8:	4240      	negs	r0, r0
 8000fda:	1824      	adds	r4, r4, r0
 8000fdc:	0223      	lsls	r3, r4, #8
 8000fde:	d559      	bpl.n	8001094 <__aeabi_dadd+0x2cc>
 8000fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8001150 <__aeabi_dadd+0x388>)
 8000fe2:	3701      	adds	r7, #1
 8000fe4:	429f      	cmp	r7, r3
 8000fe6:	d051      	beq.n	800108c <__aeabi_dadd+0x2c4>
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4b5a      	ldr	r3, [pc, #360]	@ (8001154 <__aeabi_dadd+0x38c>)
 8000fec:	086a      	lsrs	r2, r5, #1
 8000fee:	401c      	ands	r4, r3
 8000ff0:	4029      	ands	r1, r5
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	07e5      	lsls	r5, r4, #31
 8000ff6:	4315      	orrs	r5, r2
 8000ff8:	0864      	lsrs	r4, r4, #1
 8000ffa:	e75f      	b.n	8000ebc <__aeabi_dadd+0xf4>
 8000ffc:	4661      	mov	r1, ip
 8000ffe:	4653      	mov	r3, sl
 8001000:	4319      	orrs	r1, r3
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x23e>
 8001004:	e0bc      	b.n	8001180 <__aeabi_dadd+0x3b8>
 8001006:	1e51      	subs	r1, r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d100      	bne.n	800100e <__aeabi_dadd+0x246>
 800100c:	e164      	b.n	80012d8 <__aeabi_dadd+0x510>
 800100e:	4d50      	ldr	r5, [pc, #320]	@ (8001150 <__aeabi_dadd+0x388>)
 8001010:	42aa      	cmp	r2, r5
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x24e>
 8001014:	e16a      	b.n	80012ec <__aeabi_dadd+0x524>
 8001016:	2501      	movs	r5, #1
 8001018:	2938      	cmp	r1, #56	@ 0x38
 800101a:	dd00      	ble.n	800101e <__aeabi_dadd+0x256>
 800101c:	e722      	b.n	8000e64 <__aeabi_dadd+0x9c>
 800101e:	000a      	movs	r2, r1
 8001020:	e70e      	b.n	8000e40 <__aeabi_dadd+0x78>
 8001022:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <__aeabi_dadd+0x390>)
 8001024:	1c7d      	adds	r5, r7, #1
 8001026:	4215      	tst	r5, r2
 8001028:	d000      	beq.n	800102c <__aeabi_dadd+0x264>
 800102a:	e0d0      	b.n	80011ce <__aeabi_dadd+0x406>
 800102c:	0025      	movs	r5, r4
 800102e:	4662      	mov	r2, ip
 8001030:	4653      	mov	r3, sl
 8001032:	4305      	orrs	r5, r0
 8001034:	431a      	orrs	r2, r3
 8001036:	2f00      	cmp	r7, #0
 8001038:	d000      	beq.n	800103c <__aeabi_dadd+0x274>
 800103a:	e137      	b.n	80012ac <__aeabi_dadd+0x4e4>
 800103c:	2d00      	cmp	r5, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x27a>
 8001040:	e1a8      	b.n	8001394 <__aeabi_dadd+0x5cc>
 8001042:	2a00      	cmp	r2, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x280>
 8001046:	e16a      	b.n	800131e <__aeabi_dadd+0x556>
 8001048:	4663      	mov	r3, ip
 800104a:	1ac5      	subs	r5, r0, r3
 800104c:	4653      	mov	r3, sl
 800104e:	1ae2      	subs	r2, r4, r3
 8001050:	42a8      	cmp	r0, r5
 8001052:	419b      	sbcs	r3, r3
 8001054:	425b      	negs	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	021a      	lsls	r2, r3, #8
 800105a:	d400      	bmi.n	800105e <__aeabi_dadd+0x296>
 800105c:	e203      	b.n	8001466 <__aeabi_dadd+0x69e>
 800105e:	4663      	mov	r3, ip
 8001060:	1a1d      	subs	r5, r3, r0
 8001062:	45ac      	cmp	ip, r5
 8001064:	4192      	sbcs	r2, r2
 8001066:	4653      	mov	r3, sl
 8001068:	4252      	negs	r2, r2
 800106a:	1b1c      	subs	r4, r3, r4
 800106c:	000e      	movs	r6, r1
 800106e:	4688      	mov	r8, r1
 8001070:	1aa4      	subs	r4, r4, r2
 8001072:	e723      	b.n	8000ebc <__aeabi_dadd+0xf4>
 8001074:	4936      	ldr	r1, [pc, #216]	@ (8001150 <__aeabi_dadd+0x388>)
 8001076:	428f      	cmp	r7, r1
 8001078:	d070      	beq.n	800115c <__aeabi_dadd+0x394>
 800107a:	2501      	movs	r5, #1
 800107c:	2a38      	cmp	r2, #56	@ 0x38
 800107e:	dca8      	bgt.n	8000fd2 <__aeabi_dadd+0x20a>
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	4653      	mov	r3, sl
 8001084:	0409      	lsls	r1, r1, #16
 8001086:	430b      	orrs	r3, r1
 8001088:	469a      	mov	sl, r3
 800108a:	e78e      	b.n	8000faa <__aeabi_dadd+0x1e2>
 800108c:	003c      	movs	r4, r7
 800108e:	2500      	movs	r5, #0
 8001090:	2200      	movs	r2, #0
 8001092:	e731      	b.n	8000ef8 <__aeabi_dadd+0x130>
 8001094:	2307      	movs	r3, #7
 8001096:	402b      	ands	r3, r5
 8001098:	2b00      	cmp	r3, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dadd+0x2d6>
 800109c:	e710      	b.n	8000ec0 <__aeabi_dadd+0xf8>
 800109e:	e093      	b.n	80011c8 <__aeabi_dadd+0x400>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d074      	beq.n	800118e <__aeabi_dadd+0x3c6>
 80010a4:	464a      	mov	r2, r9
 80010a6:	1bd2      	subs	r2, r2, r7
 80010a8:	2f00      	cmp	r7, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x2e6>
 80010ac:	e0c7      	b.n	800123e <__aeabi_dadd+0x476>
 80010ae:	4928      	ldr	r1, [pc, #160]	@ (8001150 <__aeabi_dadd+0x388>)
 80010b0:	4589      	cmp	r9, r1
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2ee>
 80010b4:	e185      	b.n	80013c2 <__aeabi_dadd+0x5fa>
 80010b6:	2501      	movs	r5, #1
 80010b8:	2a38      	cmp	r2, #56	@ 0x38
 80010ba:	dc12      	bgt.n	80010e2 <__aeabi_dadd+0x31a>
 80010bc:	2180      	movs	r1, #128	@ 0x80
 80010be:	0409      	lsls	r1, r1, #16
 80010c0:	430c      	orrs	r4, r1
 80010c2:	2a1f      	cmp	r2, #31
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_dadd+0x300>
 80010c6:	e1ab      	b.n	8001420 <__aeabi_dadd+0x658>
 80010c8:	2120      	movs	r1, #32
 80010ca:	0025      	movs	r5, r4
 80010cc:	1a89      	subs	r1, r1, r2
 80010ce:	0007      	movs	r7, r0
 80010d0:	4088      	lsls	r0, r1
 80010d2:	408d      	lsls	r5, r1
 80010d4:	40d7      	lsrs	r7, r2
 80010d6:	1e41      	subs	r1, r0, #1
 80010d8:	4188      	sbcs	r0, r1
 80010da:	40d4      	lsrs	r4, r2
 80010dc:	433d      	orrs	r5, r7
 80010de:	4305      	orrs	r5, r0
 80010e0:	44a2      	add	sl, r4
 80010e2:	4465      	add	r5, ip
 80010e4:	4565      	cmp	r5, ip
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	4452      	add	r2, sl
 80010ec:	0014      	movs	r4, r2
 80010ee:	464f      	mov	r7, r9
 80010f0:	e774      	b.n	8000fdc <__aeabi_dadd+0x214>
 80010f2:	0028      	movs	r0, r5
 80010f4:	f001 fd90 	bl	8002c18 <__clzsi2>
 80010f8:	0003      	movs	r3, r0
 80010fa:	3318      	adds	r3, #24
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_dadd+0x33a>
 8001100:	e6c2      	b.n	8000e88 <__aeabi_dadd+0xc0>
 8001102:	002a      	movs	r2, r5
 8001104:	3808      	subs	r0, #8
 8001106:	4082      	lsls	r2, r0
 8001108:	429f      	cmp	r7, r3
 800110a:	dd00      	ble.n	800110e <__aeabi_dadd+0x346>
 800110c:	e0a9      	b.n	8001262 <__aeabi_dadd+0x49a>
 800110e:	1bdb      	subs	r3, r3, r7
 8001110:	1c58      	adds	r0, r3, #1
 8001112:	281f      	cmp	r0, #31
 8001114:	dc00      	bgt.n	8001118 <__aeabi_dadd+0x350>
 8001116:	e1ac      	b.n	8001472 <__aeabi_dadd+0x6aa>
 8001118:	0015      	movs	r5, r2
 800111a:	3b1f      	subs	r3, #31
 800111c:	40dd      	lsrs	r5, r3
 800111e:	2820      	cmp	r0, #32
 8001120:	d005      	beq.n	800112e <__aeabi_dadd+0x366>
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	1a1b      	subs	r3, r3, r0
 8001126:	409a      	lsls	r2, r3
 8001128:	1e53      	subs	r3, r2, #1
 800112a:	419a      	sbcs	r2, r3
 800112c:	4315      	orrs	r5, r2
 800112e:	2307      	movs	r3, #7
 8001130:	2700      	movs	r7, #0
 8001132:	402b      	ands	r3, r5
 8001134:	e7b0      	b.n	8001098 <__aeabi_dadd+0x2d0>
 8001136:	08ed      	lsrs	r5, r5, #3
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <__aeabi_dadd+0x388>)
 800113a:	0762      	lsls	r2, r4, #29
 800113c:	432a      	orrs	r2, r5
 800113e:	08e4      	lsrs	r4, r4, #3
 8001140:	429f      	cmp	r7, r3
 8001142:	d00f      	beq.n	8001164 <__aeabi_dadd+0x39c>
 8001144:	0324      	lsls	r4, r4, #12
 8001146:	0b25      	lsrs	r5, r4, #12
 8001148:	057c      	lsls	r4, r7, #21
 800114a:	0d64      	lsrs	r4, r4, #21
 800114c:	e6d4      	b.n	8000ef8 <__aeabi_dadd+0x130>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	000007ff 	.word	0x000007ff
 8001154:	ff7fffff 	.word	0xff7fffff
 8001158:	000007fe 	.word	0x000007fe
 800115c:	08c0      	lsrs	r0, r0, #3
 800115e:	0762      	lsls	r2, r4, #29
 8001160:	4302      	orrs	r2, r0
 8001162:	08e4      	lsrs	r4, r4, #3
 8001164:	0013      	movs	r3, r2
 8001166:	4323      	orrs	r3, r4
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x3a4>
 800116a:	e186      	b.n	800147a <__aeabi_dadd+0x6b2>
 800116c:	2580      	movs	r5, #128	@ 0x80
 800116e:	032d      	lsls	r5, r5, #12
 8001170:	4325      	orrs	r5, r4
 8001172:	032d      	lsls	r5, r5, #12
 8001174:	4cc3      	ldr	r4, [pc, #780]	@ (8001484 <__aeabi_dadd+0x6bc>)
 8001176:	0b2d      	lsrs	r5, r5, #12
 8001178:	e6be      	b.n	8000ef8 <__aeabi_dadd+0x130>
 800117a:	4660      	mov	r0, ip
 800117c:	4654      	mov	r4, sl
 800117e:	000e      	movs	r6, r1
 8001180:	0017      	movs	r7, r2
 8001182:	08c5      	lsrs	r5, r0, #3
 8001184:	e7d8      	b.n	8001138 <__aeabi_dadd+0x370>
 8001186:	4cc0      	ldr	r4, [pc, #768]	@ (8001488 <__aeabi_dadd+0x6c0>)
 8001188:	1aff      	subs	r7, r7, r3
 800118a:	4014      	ands	r4, r2
 800118c:	e696      	b.n	8000ebc <__aeabi_dadd+0xf4>
 800118e:	4abf      	ldr	r2, [pc, #764]	@ (800148c <__aeabi_dadd+0x6c4>)
 8001190:	1c79      	adds	r1, r7, #1
 8001192:	4211      	tst	r1, r2
 8001194:	d16b      	bne.n	800126e <__aeabi_dadd+0x4a6>
 8001196:	0022      	movs	r2, r4
 8001198:	4302      	orrs	r2, r0
 800119a:	2f00      	cmp	r7, #0
 800119c:	d000      	beq.n	80011a0 <__aeabi_dadd+0x3d8>
 800119e:	e0db      	b.n	8001358 <__aeabi_dadd+0x590>
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x3de>
 80011a4:	e12d      	b.n	8001402 <__aeabi_dadd+0x63a>
 80011a6:	4662      	mov	r2, ip
 80011a8:	4653      	mov	r3, sl
 80011aa:	431a      	orrs	r2, r3
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dadd+0x3e8>
 80011ae:	e0b6      	b.n	800131e <__aeabi_dadd+0x556>
 80011b0:	4663      	mov	r3, ip
 80011b2:	18c5      	adds	r5, r0, r3
 80011b4:	4285      	cmp	r5, r0
 80011b6:	4180      	sbcs	r0, r0
 80011b8:	4454      	add	r4, sl
 80011ba:	4240      	negs	r0, r0
 80011bc:	1824      	adds	r4, r4, r0
 80011be:	0223      	lsls	r3, r4, #8
 80011c0:	d502      	bpl.n	80011c8 <__aeabi_dadd+0x400>
 80011c2:	000f      	movs	r7, r1
 80011c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001488 <__aeabi_dadd+0x6c0>)
 80011c6:	401c      	ands	r4, r3
 80011c8:	003a      	movs	r2, r7
 80011ca:	0028      	movs	r0, r5
 80011cc:	e7d8      	b.n	8001180 <__aeabi_dadd+0x3b8>
 80011ce:	4662      	mov	r2, ip
 80011d0:	1a85      	subs	r5, r0, r2
 80011d2:	42a8      	cmp	r0, r5
 80011d4:	4192      	sbcs	r2, r2
 80011d6:	4653      	mov	r3, sl
 80011d8:	4252      	negs	r2, r2
 80011da:	4691      	mov	r9, r2
 80011dc:	1ae3      	subs	r3, r4, r3
 80011de:	001a      	movs	r2, r3
 80011e0:	464b      	mov	r3, r9
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	4691      	mov	r9, r2
 80011e8:	021a      	lsls	r2, r3, #8
 80011ea:	d454      	bmi.n	8001296 <__aeabi_dadd+0x4ce>
 80011ec:	464a      	mov	r2, r9
 80011ee:	464c      	mov	r4, r9
 80011f0:	432a      	orrs	r2, r5
 80011f2:	d000      	beq.n	80011f6 <__aeabi_dadd+0x42e>
 80011f4:	e640      	b.n	8000e78 <__aeabi_dadd+0xb0>
 80011f6:	2600      	movs	r6, #0
 80011f8:	2400      	movs	r4, #0
 80011fa:	2500      	movs	r5, #0
 80011fc:	e67c      	b.n	8000ef8 <__aeabi_dadd+0x130>
 80011fe:	4da1      	ldr	r5, [pc, #644]	@ (8001484 <__aeabi_dadd+0x6bc>)
 8001200:	45a9      	cmp	r9, r5
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x43e>
 8001204:	e090      	b.n	8001328 <__aeabi_dadd+0x560>
 8001206:	2501      	movs	r5, #1
 8001208:	2a38      	cmp	r2, #56	@ 0x38
 800120a:	dd00      	ble.n	800120e <__aeabi_dadd+0x446>
 800120c:	e6ab      	b.n	8000f66 <__aeabi_dadd+0x19e>
 800120e:	2580      	movs	r5, #128	@ 0x80
 8001210:	042d      	lsls	r5, r5, #16
 8001212:	432c      	orrs	r4, r5
 8001214:	e695      	b.n	8000f42 <__aeabi_dadd+0x17a>
 8001216:	0011      	movs	r1, r2
 8001218:	4655      	mov	r5, sl
 800121a:	3920      	subs	r1, #32
 800121c:	40cd      	lsrs	r5, r1
 800121e:	46a9      	mov	r9, r5
 8001220:	2a20      	cmp	r2, #32
 8001222:	d006      	beq.n	8001232 <__aeabi_dadd+0x46a>
 8001224:	2140      	movs	r1, #64	@ 0x40
 8001226:	4653      	mov	r3, sl
 8001228:	1a8a      	subs	r2, r1, r2
 800122a:	4093      	lsls	r3, r2
 800122c:	4662      	mov	r2, ip
 800122e:	431a      	orrs	r2, r3
 8001230:	4694      	mov	ip, r2
 8001232:	4665      	mov	r5, ip
 8001234:	1e6b      	subs	r3, r5, #1
 8001236:	419d      	sbcs	r5, r3
 8001238:	464b      	mov	r3, r9
 800123a:	431d      	orrs	r5, r3
 800123c:	e612      	b.n	8000e64 <__aeabi_dadd+0x9c>
 800123e:	0021      	movs	r1, r4
 8001240:	4301      	orrs	r1, r0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0x47e>
 8001244:	e0c4      	b.n	80013d0 <__aeabi_dadd+0x608>
 8001246:	1e51      	subs	r1, r2, #1
 8001248:	2a01      	cmp	r2, #1
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x486>
 800124c:	e0fb      	b.n	8001446 <__aeabi_dadd+0x67e>
 800124e:	4d8d      	ldr	r5, [pc, #564]	@ (8001484 <__aeabi_dadd+0x6bc>)
 8001250:	42aa      	cmp	r2, r5
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x48e>
 8001254:	e0b5      	b.n	80013c2 <__aeabi_dadd+0x5fa>
 8001256:	2501      	movs	r5, #1
 8001258:	2938      	cmp	r1, #56	@ 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dadd+0x496>
 800125c:	e741      	b.n	80010e2 <__aeabi_dadd+0x31a>
 800125e:	000a      	movs	r2, r1
 8001260:	e72f      	b.n	80010c2 <__aeabi_dadd+0x2fa>
 8001262:	4c89      	ldr	r4, [pc, #548]	@ (8001488 <__aeabi_dadd+0x6c0>)
 8001264:	1aff      	subs	r7, r7, r3
 8001266:	4014      	ands	r4, r2
 8001268:	0762      	lsls	r2, r4, #29
 800126a:	08e4      	lsrs	r4, r4, #3
 800126c:	e76a      	b.n	8001144 <__aeabi_dadd+0x37c>
 800126e:	4a85      	ldr	r2, [pc, #532]	@ (8001484 <__aeabi_dadd+0x6bc>)
 8001270:	4291      	cmp	r1, r2
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x4ae>
 8001274:	e0e3      	b.n	800143e <__aeabi_dadd+0x676>
 8001276:	4663      	mov	r3, ip
 8001278:	18c2      	adds	r2, r0, r3
 800127a:	4282      	cmp	r2, r0
 800127c:	4180      	sbcs	r0, r0
 800127e:	0023      	movs	r3, r4
 8001280:	4240      	negs	r0, r0
 8001282:	4453      	add	r3, sl
 8001284:	181b      	adds	r3, r3, r0
 8001286:	07dd      	lsls	r5, r3, #31
 8001288:	085c      	lsrs	r4, r3, #1
 800128a:	2307      	movs	r3, #7
 800128c:	0852      	lsrs	r2, r2, #1
 800128e:	4315      	orrs	r5, r2
 8001290:	000f      	movs	r7, r1
 8001292:	402b      	ands	r3, r5
 8001294:	e700      	b.n	8001098 <__aeabi_dadd+0x2d0>
 8001296:	4663      	mov	r3, ip
 8001298:	1a1d      	subs	r5, r3, r0
 800129a:	45ac      	cmp	ip, r5
 800129c:	4192      	sbcs	r2, r2
 800129e:	4653      	mov	r3, sl
 80012a0:	4252      	negs	r2, r2
 80012a2:	1b1c      	subs	r4, r3, r4
 80012a4:	000e      	movs	r6, r1
 80012a6:	4688      	mov	r8, r1
 80012a8:	1aa4      	subs	r4, r4, r2
 80012aa:	e5e5      	b.n	8000e78 <__aeabi_dadd+0xb0>
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	d000      	beq.n	80012b2 <__aeabi_dadd+0x4ea>
 80012b0:	e091      	b.n	80013d6 <__aeabi_dadd+0x60e>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d138      	bne.n	8001328 <__aeabi_dadd+0x560>
 80012b6:	2480      	movs	r4, #128	@ 0x80
 80012b8:	2600      	movs	r6, #0
 80012ba:	0324      	lsls	r4, r4, #12
 80012bc:	e756      	b.n	800116c <__aeabi_dadd+0x3a4>
 80012be:	4663      	mov	r3, ip
 80012c0:	18c5      	adds	r5, r0, r3
 80012c2:	4285      	cmp	r5, r0
 80012c4:	4180      	sbcs	r0, r0
 80012c6:	4454      	add	r4, sl
 80012c8:	4240      	negs	r0, r0
 80012ca:	1824      	adds	r4, r4, r0
 80012cc:	2701      	movs	r7, #1
 80012ce:	0223      	lsls	r3, r4, #8
 80012d0:	d400      	bmi.n	80012d4 <__aeabi_dadd+0x50c>
 80012d2:	e6df      	b.n	8001094 <__aeabi_dadd+0x2cc>
 80012d4:	2702      	movs	r7, #2
 80012d6:	e687      	b.n	8000fe8 <__aeabi_dadd+0x220>
 80012d8:	4663      	mov	r3, ip
 80012da:	1ac5      	subs	r5, r0, r3
 80012dc:	42a8      	cmp	r0, r5
 80012de:	4180      	sbcs	r0, r0
 80012e0:	4653      	mov	r3, sl
 80012e2:	4240      	negs	r0, r0
 80012e4:	1ae4      	subs	r4, r4, r3
 80012e6:	2701      	movs	r7, #1
 80012e8:	1a24      	subs	r4, r4, r0
 80012ea:	e5c0      	b.n	8000e6e <__aeabi_dadd+0xa6>
 80012ec:	0762      	lsls	r2, r4, #29
 80012ee:	08c0      	lsrs	r0, r0, #3
 80012f0:	4302      	orrs	r2, r0
 80012f2:	08e4      	lsrs	r4, r4, #3
 80012f4:	e736      	b.n	8001164 <__aeabi_dadd+0x39c>
 80012f6:	0011      	movs	r1, r2
 80012f8:	4653      	mov	r3, sl
 80012fa:	3920      	subs	r1, #32
 80012fc:	40cb      	lsrs	r3, r1
 80012fe:	4699      	mov	r9, r3
 8001300:	2a20      	cmp	r2, #32
 8001302:	d006      	beq.n	8001312 <__aeabi_dadd+0x54a>
 8001304:	2140      	movs	r1, #64	@ 0x40
 8001306:	4653      	mov	r3, sl
 8001308:	1a8a      	subs	r2, r1, r2
 800130a:	4093      	lsls	r3, r2
 800130c:	4662      	mov	r2, ip
 800130e:	431a      	orrs	r2, r3
 8001310:	4694      	mov	ip, r2
 8001312:	4665      	mov	r5, ip
 8001314:	1e6b      	subs	r3, r5, #1
 8001316:	419d      	sbcs	r5, r3
 8001318:	464b      	mov	r3, r9
 800131a:	431d      	orrs	r5, r3
 800131c:	e659      	b.n	8000fd2 <__aeabi_dadd+0x20a>
 800131e:	0762      	lsls	r2, r4, #29
 8001320:	08c0      	lsrs	r0, r0, #3
 8001322:	4302      	orrs	r2, r0
 8001324:	08e4      	lsrs	r4, r4, #3
 8001326:	e70d      	b.n	8001144 <__aeabi_dadd+0x37c>
 8001328:	4653      	mov	r3, sl
 800132a:	075a      	lsls	r2, r3, #29
 800132c:	4663      	mov	r3, ip
 800132e:	08d8      	lsrs	r0, r3, #3
 8001330:	4653      	mov	r3, sl
 8001332:	000e      	movs	r6, r1
 8001334:	4302      	orrs	r2, r0
 8001336:	08dc      	lsrs	r4, r3, #3
 8001338:	e714      	b.n	8001164 <__aeabi_dadd+0x39c>
 800133a:	0015      	movs	r5, r2
 800133c:	0026      	movs	r6, r4
 800133e:	3d20      	subs	r5, #32
 8001340:	40ee      	lsrs	r6, r5
 8001342:	2a20      	cmp	r2, #32
 8001344:	d003      	beq.n	800134e <__aeabi_dadd+0x586>
 8001346:	2540      	movs	r5, #64	@ 0x40
 8001348:	1aaa      	subs	r2, r5, r2
 800134a:	4094      	lsls	r4, r2
 800134c:	4320      	orrs	r0, r4
 800134e:	1e42      	subs	r2, r0, #1
 8001350:	4190      	sbcs	r0, r2
 8001352:	0005      	movs	r5, r0
 8001354:	4335      	orrs	r5, r6
 8001356:	e606      	b.n	8000f66 <__aeabi_dadd+0x19e>
 8001358:	2a00      	cmp	r2, #0
 800135a:	d07c      	beq.n	8001456 <__aeabi_dadd+0x68e>
 800135c:	4662      	mov	r2, ip
 800135e:	4653      	mov	r3, sl
 8001360:	08c0      	lsrs	r0, r0, #3
 8001362:	431a      	orrs	r2, r3
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x5a0>
 8001366:	e6fa      	b.n	800115e <__aeabi_dadd+0x396>
 8001368:	0762      	lsls	r2, r4, #29
 800136a:	4310      	orrs	r0, r2
 800136c:	2280      	movs	r2, #128	@ 0x80
 800136e:	08e4      	lsrs	r4, r4, #3
 8001370:	0312      	lsls	r2, r2, #12
 8001372:	4214      	tst	r4, r2
 8001374:	d008      	beq.n	8001388 <__aeabi_dadd+0x5c0>
 8001376:	08d9      	lsrs	r1, r3, #3
 8001378:	4211      	tst	r1, r2
 800137a:	d105      	bne.n	8001388 <__aeabi_dadd+0x5c0>
 800137c:	4663      	mov	r3, ip
 800137e:	08d8      	lsrs	r0, r3, #3
 8001380:	4653      	mov	r3, sl
 8001382:	000c      	movs	r4, r1
 8001384:	075b      	lsls	r3, r3, #29
 8001386:	4318      	orrs	r0, r3
 8001388:	0f42      	lsrs	r2, r0, #29
 800138a:	00c0      	lsls	r0, r0, #3
 800138c:	08c0      	lsrs	r0, r0, #3
 800138e:	0752      	lsls	r2, r2, #29
 8001390:	4302      	orrs	r2, r0
 8001392:	e6e7      	b.n	8001164 <__aeabi_dadd+0x39c>
 8001394:	2a00      	cmp	r2, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dadd+0x5d2>
 8001398:	e72d      	b.n	80011f6 <__aeabi_dadd+0x42e>
 800139a:	4663      	mov	r3, ip
 800139c:	08d8      	lsrs	r0, r3, #3
 800139e:	4653      	mov	r3, sl
 80013a0:	075a      	lsls	r2, r3, #29
 80013a2:	000e      	movs	r6, r1
 80013a4:	4302      	orrs	r2, r0
 80013a6:	08dc      	lsrs	r4, r3, #3
 80013a8:	e6cc      	b.n	8001144 <__aeabi_dadd+0x37c>
 80013aa:	4663      	mov	r3, ip
 80013ac:	1a1d      	subs	r5, r3, r0
 80013ae:	45ac      	cmp	ip, r5
 80013b0:	4192      	sbcs	r2, r2
 80013b2:	4653      	mov	r3, sl
 80013b4:	4252      	negs	r2, r2
 80013b6:	1b1c      	subs	r4, r3, r4
 80013b8:	000e      	movs	r6, r1
 80013ba:	4688      	mov	r8, r1
 80013bc:	1aa4      	subs	r4, r4, r2
 80013be:	3701      	adds	r7, #1
 80013c0:	e555      	b.n	8000e6e <__aeabi_dadd+0xa6>
 80013c2:	4663      	mov	r3, ip
 80013c4:	08d9      	lsrs	r1, r3, #3
 80013c6:	4653      	mov	r3, sl
 80013c8:	075a      	lsls	r2, r3, #29
 80013ca:	430a      	orrs	r2, r1
 80013cc:	08dc      	lsrs	r4, r3, #3
 80013ce:	e6c9      	b.n	8001164 <__aeabi_dadd+0x39c>
 80013d0:	4660      	mov	r0, ip
 80013d2:	4654      	mov	r4, sl
 80013d4:	e6d4      	b.n	8001180 <__aeabi_dadd+0x3b8>
 80013d6:	08c0      	lsrs	r0, r0, #3
 80013d8:	2a00      	cmp	r2, #0
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x616>
 80013dc:	e6bf      	b.n	800115e <__aeabi_dadd+0x396>
 80013de:	0762      	lsls	r2, r4, #29
 80013e0:	4310      	orrs	r0, r2
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	08e4      	lsrs	r4, r4, #3
 80013e6:	0312      	lsls	r2, r2, #12
 80013e8:	4214      	tst	r4, r2
 80013ea:	d0cd      	beq.n	8001388 <__aeabi_dadd+0x5c0>
 80013ec:	08dd      	lsrs	r5, r3, #3
 80013ee:	4215      	tst	r5, r2
 80013f0:	d1ca      	bne.n	8001388 <__aeabi_dadd+0x5c0>
 80013f2:	4663      	mov	r3, ip
 80013f4:	08d8      	lsrs	r0, r3, #3
 80013f6:	4653      	mov	r3, sl
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	000e      	movs	r6, r1
 80013fc:	002c      	movs	r4, r5
 80013fe:	4318      	orrs	r0, r3
 8001400:	e7c2      	b.n	8001388 <__aeabi_dadd+0x5c0>
 8001402:	4663      	mov	r3, ip
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	4653      	mov	r3, sl
 8001408:	075a      	lsls	r2, r3, #29
 800140a:	430a      	orrs	r2, r1
 800140c:	08dc      	lsrs	r4, r3, #3
 800140e:	e699      	b.n	8001144 <__aeabi_dadd+0x37c>
 8001410:	4663      	mov	r3, ip
 8001412:	08d8      	lsrs	r0, r3, #3
 8001414:	4653      	mov	r3, sl
 8001416:	075a      	lsls	r2, r3, #29
 8001418:	000e      	movs	r6, r1
 800141a:	4302      	orrs	r2, r0
 800141c:	08dc      	lsrs	r4, r3, #3
 800141e:	e6a1      	b.n	8001164 <__aeabi_dadd+0x39c>
 8001420:	0011      	movs	r1, r2
 8001422:	0027      	movs	r7, r4
 8001424:	3920      	subs	r1, #32
 8001426:	40cf      	lsrs	r7, r1
 8001428:	2a20      	cmp	r2, #32
 800142a:	d003      	beq.n	8001434 <__aeabi_dadd+0x66c>
 800142c:	2140      	movs	r1, #64	@ 0x40
 800142e:	1a8a      	subs	r2, r1, r2
 8001430:	4094      	lsls	r4, r2
 8001432:	4320      	orrs	r0, r4
 8001434:	1e42      	subs	r2, r0, #1
 8001436:	4190      	sbcs	r0, r2
 8001438:	0005      	movs	r5, r0
 800143a:	433d      	orrs	r5, r7
 800143c:	e651      	b.n	80010e2 <__aeabi_dadd+0x31a>
 800143e:	000c      	movs	r4, r1
 8001440:	2500      	movs	r5, #0
 8001442:	2200      	movs	r2, #0
 8001444:	e558      	b.n	8000ef8 <__aeabi_dadd+0x130>
 8001446:	4460      	add	r0, ip
 8001448:	4560      	cmp	r0, ip
 800144a:	4192      	sbcs	r2, r2
 800144c:	4454      	add	r4, sl
 800144e:	4252      	negs	r2, r2
 8001450:	0005      	movs	r5, r0
 8001452:	18a4      	adds	r4, r4, r2
 8001454:	e73a      	b.n	80012cc <__aeabi_dadd+0x504>
 8001456:	4653      	mov	r3, sl
 8001458:	075a      	lsls	r2, r3, #29
 800145a:	4663      	mov	r3, ip
 800145c:	08d9      	lsrs	r1, r3, #3
 800145e:	4653      	mov	r3, sl
 8001460:	430a      	orrs	r2, r1
 8001462:	08dc      	lsrs	r4, r3, #3
 8001464:	e67e      	b.n	8001164 <__aeabi_dadd+0x39c>
 8001466:	001a      	movs	r2, r3
 8001468:	001c      	movs	r4, r3
 800146a:	432a      	orrs	r2, r5
 800146c:	d000      	beq.n	8001470 <__aeabi_dadd+0x6a8>
 800146e:	e6ab      	b.n	80011c8 <__aeabi_dadd+0x400>
 8001470:	e6c1      	b.n	80011f6 <__aeabi_dadd+0x42e>
 8001472:	2120      	movs	r1, #32
 8001474:	2500      	movs	r5, #0
 8001476:	1a09      	subs	r1, r1, r0
 8001478:	e519      	b.n	8000eae <__aeabi_dadd+0xe6>
 800147a:	2200      	movs	r2, #0
 800147c:	2500      	movs	r5, #0
 800147e:	4c01      	ldr	r4, [pc, #4]	@ (8001484 <__aeabi_dadd+0x6bc>)
 8001480:	e53a      	b.n	8000ef8 <__aeabi_dadd+0x130>
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	000007ff 	.word	0x000007ff
 8001488:	ff7fffff 	.word	0xff7fffff
 800148c:	000007fe 	.word	0x000007fe

08001490 <__aeabi_ddiv>:
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	46de      	mov	lr, fp
 8001494:	4645      	mov	r5, r8
 8001496:	4657      	mov	r7, sl
 8001498:	464e      	mov	r6, r9
 800149a:	b5e0      	push	{r5, r6, r7, lr}
 800149c:	b087      	sub	sp, #28
 800149e:	9200      	str	r2, [sp, #0]
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	030b      	lsls	r3, r1, #12
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	469b      	mov	fp, r3
 80014a8:	0fca      	lsrs	r2, r1, #31
 80014aa:	004b      	lsls	r3, r1, #1
 80014ac:	0004      	movs	r4, r0
 80014ae:	4680      	mov	r8, r0
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	9202      	str	r2, [sp, #8]
 80014b4:	d100      	bne.n	80014b8 <__aeabi_ddiv+0x28>
 80014b6:	e16a      	b.n	800178e <__aeabi_ddiv+0x2fe>
 80014b8:	4ad4      	ldr	r2, [pc, #848]	@ (800180c <__aeabi_ddiv+0x37c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d100      	bne.n	80014c0 <__aeabi_ddiv+0x30>
 80014be:	e18c      	b.n	80017da <__aeabi_ddiv+0x34a>
 80014c0:	4659      	mov	r1, fp
 80014c2:	0f42      	lsrs	r2, r0, #29
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	430a      	orrs	r2, r1
 80014c8:	2180      	movs	r1, #128	@ 0x80
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	4311      	orrs	r1, r2
 80014ce:	00c2      	lsls	r2, r0, #3
 80014d0:	4690      	mov	r8, r2
 80014d2:	4acf      	ldr	r2, [pc, #828]	@ (8001810 <__aeabi_ddiv+0x380>)
 80014d4:	4689      	mov	r9, r1
 80014d6:	4692      	mov	sl, r2
 80014d8:	449a      	add	sl, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	2400      	movs	r4, #0
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	9e00      	ldr	r6, [sp, #0]
 80014e2:	9f01      	ldr	r7, [sp, #4]
 80014e4:	033b      	lsls	r3, r7, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	469b      	mov	fp, r3
 80014ea:	007b      	lsls	r3, r7, #1
 80014ec:	0030      	movs	r0, r6
 80014ee:	0d5b      	lsrs	r3, r3, #21
 80014f0:	0ffd      	lsrs	r5, r7, #31
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_ddiv+0x68>
 80014f6:	e128      	b.n	800174a <__aeabi_ddiv+0x2ba>
 80014f8:	4ac4      	ldr	r2, [pc, #784]	@ (800180c <__aeabi_ddiv+0x37c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d100      	bne.n	8001500 <__aeabi_ddiv+0x70>
 80014fe:	e177      	b.n	80017f0 <__aeabi_ddiv+0x360>
 8001500:	4659      	mov	r1, fp
 8001502:	0f72      	lsrs	r2, r6, #29
 8001504:	00c9      	lsls	r1, r1, #3
 8001506:	430a      	orrs	r2, r1
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	0409      	lsls	r1, r1, #16
 800150c:	4311      	orrs	r1, r2
 800150e:	468b      	mov	fp, r1
 8001510:	49bf      	ldr	r1, [pc, #764]	@ (8001810 <__aeabi_ddiv+0x380>)
 8001512:	00f2      	lsls	r2, r6, #3
 8001514:	468c      	mov	ip, r1
 8001516:	4651      	mov	r1, sl
 8001518:	4463      	add	r3, ip
 800151a:	1acb      	subs	r3, r1, r3
 800151c:	469a      	mov	sl, r3
 800151e:	2300      	movs	r3, #0
 8001520:	9e02      	ldr	r6, [sp, #8]
 8001522:	406e      	eors	r6, r5
 8001524:	2c0f      	cmp	r4, #15
 8001526:	d827      	bhi.n	8001578 <__aeabi_ddiv+0xe8>
 8001528:	49ba      	ldr	r1, [pc, #744]	@ (8001814 <__aeabi_ddiv+0x384>)
 800152a:	00a4      	lsls	r4, r4, #2
 800152c:	5909      	ldr	r1, [r1, r4]
 800152e:	468f      	mov	pc, r1
 8001530:	46cb      	mov	fp, r9
 8001532:	4642      	mov	r2, r8
 8001534:	9e02      	ldr	r6, [sp, #8]
 8001536:	9b03      	ldr	r3, [sp, #12]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d016      	beq.n	800156a <__aeabi_ddiv+0xda>
 800153c:	2b03      	cmp	r3, #3
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0xb2>
 8001540:	e2a6      	b.n	8001a90 <__aeabi_ddiv+0x600>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d000      	beq.n	8001548 <__aeabi_ddiv+0xb8>
 8001546:	e0df      	b.n	8001708 <__aeabi_ddiv+0x278>
 8001548:	2200      	movs	r2, #0
 800154a:	2300      	movs	r3, #0
 800154c:	2400      	movs	r4, #0
 800154e:	4690      	mov	r8, r2
 8001550:	051b      	lsls	r3, r3, #20
 8001552:	4323      	orrs	r3, r4
 8001554:	07f6      	lsls	r6, r6, #31
 8001556:	4333      	orrs	r3, r6
 8001558:	4640      	mov	r0, r8
 800155a:	0019      	movs	r1, r3
 800155c:	b007      	add	sp, #28
 800155e:	bcf0      	pop	{r4, r5, r6, r7}
 8001560:	46bb      	mov	fp, r7
 8001562:	46b2      	mov	sl, r6
 8001564:	46a9      	mov	r9, r5
 8001566:	46a0      	mov	r8, r4
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	2200      	movs	r2, #0
 800156c:	2400      	movs	r4, #0
 800156e:	4690      	mov	r8, r2
 8001570:	4ba6      	ldr	r3, [pc, #664]	@ (800180c <__aeabi_ddiv+0x37c>)
 8001572:	e7ed      	b.n	8001550 <__aeabi_ddiv+0xc0>
 8001574:	002e      	movs	r6, r5
 8001576:	e7df      	b.n	8001538 <__aeabi_ddiv+0xa8>
 8001578:	45cb      	cmp	fp, r9
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0xee>
 800157c:	e1d4      	b.n	8001928 <__aeabi_ddiv+0x498>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0xf2>
 8001580:	e1cf      	b.n	8001922 <__aeabi_ddiv+0x492>
 8001582:	2301      	movs	r3, #1
 8001584:	425b      	negs	r3, r3
 8001586:	469c      	mov	ip, r3
 8001588:	4644      	mov	r4, r8
 800158a:	4648      	mov	r0, r9
 800158c:	2700      	movs	r7, #0
 800158e:	44e2      	add	sl, ip
 8001590:	465b      	mov	r3, fp
 8001592:	0e15      	lsrs	r5, r2, #24
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	431d      	orrs	r5, r3
 8001598:	0c19      	lsrs	r1, r3, #16
 800159a:	042b      	lsls	r3, r5, #16
 800159c:	0212      	lsls	r2, r2, #8
 800159e:	9500      	str	r5, [sp, #0]
 80015a0:	0c1d      	lsrs	r5, r3, #16
 80015a2:	4691      	mov	r9, r2
 80015a4:	9102      	str	r1, [sp, #8]
 80015a6:	9503      	str	r5, [sp, #12]
 80015a8:	f7fe fe30 	bl	800020c <__aeabi_uidivmod>
 80015ac:	0002      	movs	r2, r0
 80015ae:	436a      	muls	r2, r5
 80015b0:	040b      	lsls	r3, r1, #16
 80015b2:	0c21      	lsrs	r1, r4, #16
 80015b4:	4680      	mov	r8, r0
 80015b6:	4319      	orrs	r1, r3
 80015b8:	428a      	cmp	r2, r1
 80015ba:	d909      	bls.n	80015d0 <__aeabi_ddiv+0x140>
 80015bc:	9d00      	ldr	r5, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	46ac      	mov	ip, r5
 80015c2:	425b      	negs	r3, r3
 80015c4:	4461      	add	r1, ip
 80015c6:	469c      	mov	ip, r3
 80015c8:	44e0      	add	r8, ip
 80015ca:	428d      	cmp	r5, r1
 80015cc:	d800      	bhi.n	80015d0 <__aeabi_ddiv+0x140>
 80015ce:	e1fb      	b.n	80019c8 <__aeabi_ddiv+0x538>
 80015d0:	1a88      	subs	r0, r1, r2
 80015d2:	9902      	ldr	r1, [sp, #8]
 80015d4:	f7fe fe1a 	bl	800020c <__aeabi_uidivmod>
 80015d8:	9a03      	ldr	r2, [sp, #12]
 80015da:	0424      	lsls	r4, r4, #16
 80015dc:	4342      	muls	r2, r0
 80015de:	0409      	lsls	r1, r1, #16
 80015e0:	0c24      	lsrs	r4, r4, #16
 80015e2:	0003      	movs	r3, r0
 80015e4:	430c      	orrs	r4, r1
 80015e6:	42a2      	cmp	r2, r4
 80015e8:	d906      	bls.n	80015f8 <__aeabi_ddiv+0x168>
 80015ea:	9900      	ldr	r1, [sp, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	468c      	mov	ip, r1
 80015f0:	4464      	add	r4, ip
 80015f2:	42a1      	cmp	r1, r4
 80015f4:	d800      	bhi.n	80015f8 <__aeabi_ddiv+0x168>
 80015f6:	e1e1      	b.n	80019bc <__aeabi_ddiv+0x52c>
 80015f8:	1aa0      	subs	r0, r4, r2
 80015fa:	4642      	mov	r2, r8
 80015fc:	0412      	lsls	r2, r2, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	4693      	mov	fp, r2
 8001602:	464b      	mov	r3, r9
 8001604:	4659      	mov	r1, fp
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	001d      	movs	r5, r3
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	040b      	lsls	r3, r1, #16
 800160e:	4649      	mov	r1, r9
 8001610:	0409      	lsls	r1, r1, #16
 8001612:	0c09      	lsrs	r1, r1, #16
 8001614:	000c      	movs	r4, r1
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	435c      	muls	r4, r3
 800161a:	0c12      	lsrs	r2, r2, #16
 800161c:	436b      	muls	r3, r5
 800161e:	4688      	mov	r8, r1
 8001620:	4351      	muls	r1, r2
 8001622:	436a      	muls	r2, r5
 8001624:	0c25      	lsrs	r5, r4, #16
 8001626:	46ac      	mov	ip, r5
 8001628:	185b      	adds	r3, r3, r1
 800162a:	4463      	add	r3, ip
 800162c:	4299      	cmp	r1, r3
 800162e:	d903      	bls.n	8001638 <__aeabi_ddiv+0x1a8>
 8001630:	2180      	movs	r1, #128	@ 0x80
 8001632:	0249      	lsls	r1, r1, #9
 8001634:	468c      	mov	ip, r1
 8001636:	4462      	add	r2, ip
 8001638:	0c19      	lsrs	r1, r3, #16
 800163a:	0424      	lsls	r4, r4, #16
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	0c24      	lsrs	r4, r4, #16
 8001640:	188a      	adds	r2, r1, r2
 8001642:	191c      	adds	r4, r3, r4
 8001644:	4290      	cmp	r0, r2
 8001646:	d302      	bcc.n	800164e <__aeabi_ddiv+0x1be>
 8001648:	d116      	bne.n	8001678 <__aeabi_ddiv+0x1e8>
 800164a:	42a7      	cmp	r7, r4
 800164c:	d214      	bcs.n	8001678 <__aeabi_ddiv+0x1e8>
 800164e:	465b      	mov	r3, fp
 8001650:	9d00      	ldr	r5, [sp, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	444f      	add	r7, r9
 8001656:	9305      	str	r3, [sp, #20]
 8001658:	454f      	cmp	r7, r9
 800165a:	419b      	sbcs	r3, r3
 800165c:	46ac      	mov	ip, r5
 800165e:	425b      	negs	r3, r3
 8001660:	4463      	add	r3, ip
 8001662:	18c0      	adds	r0, r0, r3
 8001664:	4285      	cmp	r5, r0
 8001666:	d300      	bcc.n	800166a <__aeabi_ddiv+0x1da>
 8001668:	e1a1      	b.n	80019ae <__aeabi_ddiv+0x51e>
 800166a:	4282      	cmp	r2, r0
 800166c:	d900      	bls.n	8001670 <__aeabi_ddiv+0x1e0>
 800166e:	e1f6      	b.n	8001a5e <__aeabi_ddiv+0x5ce>
 8001670:	d100      	bne.n	8001674 <__aeabi_ddiv+0x1e4>
 8001672:	e1f1      	b.n	8001a58 <__aeabi_ddiv+0x5c8>
 8001674:	9b05      	ldr	r3, [sp, #20]
 8001676:	469b      	mov	fp, r3
 8001678:	1b3c      	subs	r4, r7, r4
 800167a:	42a7      	cmp	r7, r4
 800167c:	41bf      	sbcs	r7, r7
 800167e:	9d00      	ldr	r5, [sp, #0]
 8001680:	1a80      	subs	r0, r0, r2
 8001682:	427f      	negs	r7, r7
 8001684:	1bc0      	subs	r0, r0, r7
 8001686:	4285      	cmp	r5, r0
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x1fc>
 800168a:	e1d0      	b.n	8001a2e <__aeabi_ddiv+0x59e>
 800168c:	9902      	ldr	r1, [sp, #8]
 800168e:	f7fe fdbd 	bl	800020c <__aeabi_uidivmod>
 8001692:	9a03      	ldr	r2, [sp, #12]
 8001694:	040b      	lsls	r3, r1, #16
 8001696:	4342      	muls	r2, r0
 8001698:	0c21      	lsrs	r1, r4, #16
 800169a:	0007      	movs	r7, r0
 800169c:	4319      	orrs	r1, r3
 800169e:	428a      	cmp	r2, r1
 80016a0:	d900      	bls.n	80016a4 <__aeabi_ddiv+0x214>
 80016a2:	e178      	b.n	8001996 <__aeabi_ddiv+0x506>
 80016a4:	1a88      	subs	r0, r1, r2
 80016a6:	9902      	ldr	r1, [sp, #8]
 80016a8:	f7fe fdb0 	bl	800020c <__aeabi_uidivmod>
 80016ac:	9a03      	ldr	r2, [sp, #12]
 80016ae:	0424      	lsls	r4, r4, #16
 80016b0:	4342      	muls	r2, r0
 80016b2:	0409      	lsls	r1, r1, #16
 80016b4:	0c24      	lsrs	r4, r4, #16
 80016b6:	0003      	movs	r3, r0
 80016b8:	430c      	orrs	r4, r1
 80016ba:	42a2      	cmp	r2, r4
 80016bc:	d900      	bls.n	80016c0 <__aeabi_ddiv+0x230>
 80016be:	e15d      	b.n	800197c <__aeabi_ddiv+0x4ec>
 80016c0:	4641      	mov	r1, r8
 80016c2:	1aa4      	subs	r4, r4, r2
 80016c4:	043a      	lsls	r2, r7, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	9d04      	ldr	r5, [sp, #16]
 80016ca:	0413      	lsls	r3, r2, #16
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	4359      	muls	r1, r3
 80016d0:	4647      	mov	r7, r8
 80016d2:	436b      	muls	r3, r5
 80016d4:	469c      	mov	ip, r3
 80016d6:	0c10      	lsrs	r0, r2, #16
 80016d8:	4347      	muls	r7, r0
 80016da:	0c0b      	lsrs	r3, r1, #16
 80016dc:	44bc      	add	ip, r7
 80016de:	4463      	add	r3, ip
 80016e0:	4368      	muls	r0, r5
 80016e2:	429f      	cmp	r7, r3
 80016e4:	d903      	bls.n	80016ee <__aeabi_ddiv+0x25e>
 80016e6:	2580      	movs	r5, #128	@ 0x80
 80016e8:	026d      	lsls	r5, r5, #9
 80016ea:	46ac      	mov	ip, r5
 80016ec:	4460      	add	r0, ip
 80016ee:	0c1f      	lsrs	r7, r3, #16
 80016f0:	0409      	lsls	r1, r1, #16
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	0c09      	lsrs	r1, r1, #16
 80016f6:	183f      	adds	r7, r7, r0
 80016f8:	185b      	adds	r3, r3, r1
 80016fa:	42bc      	cmp	r4, r7
 80016fc:	d200      	bcs.n	8001700 <__aeabi_ddiv+0x270>
 80016fe:	e102      	b.n	8001906 <__aeabi_ddiv+0x476>
 8001700:	d100      	bne.n	8001704 <__aeabi_ddiv+0x274>
 8001702:	e0fd      	b.n	8001900 <__aeabi_ddiv+0x470>
 8001704:	2301      	movs	r3, #1
 8001706:	431a      	orrs	r2, r3
 8001708:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <__aeabi_ddiv+0x388>)
 800170a:	4453      	add	r3, sl
 800170c:	2b00      	cmp	r3, #0
 800170e:	dc00      	bgt.n	8001712 <__aeabi_ddiv+0x282>
 8001710:	e0ae      	b.n	8001870 <__aeabi_ddiv+0x3e0>
 8001712:	0751      	lsls	r1, r2, #29
 8001714:	d000      	beq.n	8001718 <__aeabi_ddiv+0x288>
 8001716:	e198      	b.n	8001a4a <__aeabi_ddiv+0x5ba>
 8001718:	4659      	mov	r1, fp
 800171a:	01c9      	lsls	r1, r1, #7
 800171c:	d506      	bpl.n	800172c <__aeabi_ddiv+0x29c>
 800171e:	4659      	mov	r1, fp
 8001720:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <__aeabi_ddiv+0x38c>)
 8001722:	4019      	ands	r1, r3
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	468b      	mov	fp, r1
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4453      	add	r3, sl
 800172c:	493c      	ldr	r1, [pc, #240]	@ (8001820 <__aeabi_ddiv+0x390>)
 800172e:	428b      	cmp	r3, r1
 8001730:	dd00      	ble.n	8001734 <__aeabi_ddiv+0x2a4>
 8001732:	e71a      	b.n	800156a <__aeabi_ddiv+0xda>
 8001734:	4659      	mov	r1, fp
 8001736:	08d2      	lsrs	r2, r2, #3
 8001738:	0749      	lsls	r1, r1, #29
 800173a:	4311      	orrs	r1, r2
 800173c:	465a      	mov	r2, fp
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	0254      	lsls	r4, r2, #9
 8001742:	4688      	mov	r8, r1
 8001744:	0b24      	lsrs	r4, r4, #12
 8001746:	0d5b      	lsrs	r3, r3, #21
 8001748:	e702      	b.n	8001550 <__aeabi_ddiv+0xc0>
 800174a:	465a      	mov	r2, fp
 800174c:	9b00      	ldr	r3, [sp, #0]
 800174e:	431a      	orrs	r2, r3
 8001750:	d100      	bne.n	8001754 <__aeabi_ddiv+0x2c4>
 8001752:	e07e      	b.n	8001852 <__aeabi_ddiv+0x3c2>
 8001754:	465b      	mov	r3, fp
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <__aeabi_ddiv+0x2cc>
 800175a:	e100      	b.n	800195e <__aeabi_ddiv+0x4ce>
 800175c:	4658      	mov	r0, fp
 800175e:	f001 fa5b 	bl	8002c18 <__clzsi2>
 8001762:	0002      	movs	r2, r0
 8001764:	0003      	movs	r3, r0
 8001766:	3a0b      	subs	r2, #11
 8001768:	271d      	movs	r7, #29
 800176a:	9e00      	ldr	r6, [sp, #0]
 800176c:	1aba      	subs	r2, r7, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4658      	mov	r0, fp
 8001772:	40d6      	lsrs	r6, r2
 8001774:	3908      	subs	r1, #8
 8001776:	4088      	lsls	r0, r1
 8001778:	0032      	movs	r2, r6
 800177a:	4302      	orrs	r2, r0
 800177c:	4693      	mov	fp, r2
 800177e:	9a00      	ldr	r2, [sp, #0]
 8001780:	408a      	lsls	r2, r1
 8001782:	4928      	ldr	r1, [pc, #160]	@ (8001824 <__aeabi_ddiv+0x394>)
 8001784:	4453      	add	r3, sl
 8001786:	468a      	mov	sl, r1
 8001788:	449a      	add	sl, r3
 800178a:	2300      	movs	r3, #0
 800178c:	e6c8      	b.n	8001520 <__aeabi_ddiv+0x90>
 800178e:	465b      	mov	r3, fp
 8001790:	4303      	orrs	r3, r0
 8001792:	4699      	mov	r9, r3
 8001794:	d056      	beq.n	8001844 <__aeabi_ddiv+0x3b4>
 8001796:	465b      	mov	r3, fp
 8001798:	2b00      	cmp	r3, #0
 800179a:	d100      	bne.n	800179e <__aeabi_ddiv+0x30e>
 800179c:	e0cd      	b.n	800193a <__aeabi_ddiv+0x4aa>
 800179e:	4658      	mov	r0, fp
 80017a0:	f001 fa3a 	bl	8002c18 <__clzsi2>
 80017a4:	230b      	movs	r3, #11
 80017a6:	425b      	negs	r3, r3
 80017a8:	469c      	mov	ip, r3
 80017aa:	0002      	movs	r2, r0
 80017ac:	4484      	add	ip, r0
 80017ae:	4666      	mov	r6, ip
 80017b0:	231d      	movs	r3, #29
 80017b2:	1b9b      	subs	r3, r3, r6
 80017b4:	0026      	movs	r6, r4
 80017b6:	0011      	movs	r1, r2
 80017b8:	4658      	mov	r0, fp
 80017ba:	40de      	lsrs	r6, r3
 80017bc:	3908      	subs	r1, #8
 80017be:	4088      	lsls	r0, r1
 80017c0:	0033      	movs	r3, r6
 80017c2:	4303      	orrs	r3, r0
 80017c4:	4699      	mov	r9, r3
 80017c6:	0023      	movs	r3, r4
 80017c8:	408b      	lsls	r3, r1
 80017ca:	4698      	mov	r8, r3
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <__aeabi_ddiv+0x398>)
 80017ce:	2400      	movs	r4, #0
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	469a      	mov	sl, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	9303      	str	r3, [sp, #12]
 80017d8:	e682      	b.n	80014e0 <__aeabi_ddiv+0x50>
 80017da:	465a      	mov	r2, fp
 80017dc:	4302      	orrs	r2, r0
 80017de:	4691      	mov	r9, r2
 80017e0:	d12a      	bne.n	8001838 <__aeabi_ddiv+0x3a8>
 80017e2:	2200      	movs	r2, #0
 80017e4:	469a      	mov	sl, r3
 80017e6:	2302      	movs	r3, #2
 80017e8:	4690      	mov	r8, r2
 80017ea:	2408      	movs	r4, #8
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	e677      	b.n	80014e0 <__aeabi_ddiv+0x50>
 80017f0:	465a      	mov	r2, fp
 80017f2:	9b00      	ldr	r3, [sp, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <__aeabi_ddiv+0x39c>)
 80017f8:	469c      	mov	ip, r3
 80017fa:	44e2      	add	sl, ip
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d117      	bne.n	8001830 <__aeabi_ddiv+0x3a0>
 8001800:	2302      	movs	r3, #2
 8001802:	431c      	orrs	r4, r3
 8001804:	2300      	movs	r3, #0
 8001806:	469b      	mov	fp, r3
 8001808:	3302      	adds	r3, #2
 800180a:	e689      	b.n	8001520 <__aeabi_ddiv+0x90>
 800180c:	000007ff 	.word	0x000007ff
 8001810:	fffffc01 	.word	0xfffffc01
 8001814:	08006dac 	.word	0x08006dac
 8001818:	000003ff 	.word	0x000003ff
 800181c:	feffffff 	.word	0xfeffffff
 8001820:	000007fe 	.word	0x000007fe
 8001824:	000003f3 	.word	0x000003f3
 8001828:	fffffc0d 	.word	0xfffffc0d
 800182c:	fffff801 	.word	0xfffff801
 8001830:	2303      	movs	r3, #3
 8001832:	0032      	movs	r2, r6
 8001834:	431c      	orrs	r4, r3
 8001836:	e673      	b.n	8001520 <__aeabi_ddiv+0x90>
 8001838:	469a      	mov	sl, r3
 800183a:	2303      	movs	r3, #3
 800183c:	46d9      	mov	r9, fp
 800183e:	240c      	movs	r4, #12
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	e64d      	b.n	80014e0 <__aeabi_ddiv+0x50>
 8001844:	2300      	movs	r3, #0
 8001846:	4698      	mov	r8, r3
 8001848:	469a      	mov	sl, r3
 800184a:	3301      	adds	r3, #1
 800184c:	2404      	movs	r4, #4
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	e646      	b.n	80014e0 <__aeabi_ddiv+0x50>
 8001852:	2301      	movs	r3, #1
 8001854:	431c      	orrs	r4, r3
 8001856:	2300      	movs	r3, #0
 8001858:	469b      	mov	fp, r3
 800185a:	3301      	adds	r3, #1
 800185c:	e660      	b.n	8001520 <__aeabi_ddiv+0x90>
 800185e:	2300      	movs	r3, #0
 8001860:	2480      	movs	r4, #128	@ 0x80
 8001862:	4698      	mov	r8, r3
 8001864:	2600      	movs	r6, #0
 8001866:	4b92      	ldr	r3, [pc, #584]	@ (8001ab0 <__aeabi_ddiv+0x620>)
 8001868:	0324      	lsls	r4, r4, #12
 800186a:	e671      	b.n	8001550 <__aeabi_ddiv+0xc0>
 800186c:	2201      	movs	r2, #1
 800186e:	4252      	negs	r2, r2
 8001870:	2101      	movs	r1, #1
 8001872:	1ac9      	subs	r1, r1, r3
 8001874:	2938      	cmp	r1, #56	@ 0x38
 8001876:	dd00      	ble.n	800187a <__aeabi_ddiv+0x3ea>
 8001878:	e666      	b.n	8001548 <__aeabi_ddiv+0xb8>
 800187a:	291f      	cmp	r1, #31
 800187c:	dc00      	bgt.n	8001880 <__aeabi_ddiv+0x3f0>
 800187e:	e0ab      	b.n	80019d8 <__aeabi_ddiv+0x548>
 8001880:	201f      	movs	r0, #31
 8001882:	4240      	negs	r0, r0
 8001884:	1ac3      	subs	r3, r0, r3
 8001886:	4658      	mov	r0, fp
 8001888:	40d8      	lsrs	r0, r3
 800188a:	0003      	movs	r3, r0
 800188c:	2920      	cmp	r1, #32
 800188e:	d004      	beq.n	800189a <__aeabi_ddiv+0x40a>
 8001890:	4658      	mov	r0, fp
 8001892:	4988      	ldr	r1, [pc, #544]	@ (8001ab4 <__aeabi_ddiv+0x624>)
 8001894:	4451      	add	r1, sl
 8001896:	4088      	lsls	r0, r1
 8001898:	4302      	orrs	r2, r0
 800189a:	1e51      	subs	r1, r2, #1
 800189c:	418a      	sbcs	r2, r1
 800189e:	431a      	orrs	r2, r3
 80018a0:	2307      	movs	r3, #7
 80018a2:	0019      	movs	r1, r3
 80018a4:	2400      	movs	r4, #0
 80018a6:	4011      	ands	r1, r2
 80018a8:	4213      	tst	r3, r2
 80018aa:	d00c      	beq.n	80018c6 <__aeabi_ddiv+0x436>
 80018ac:	230f      	movs	r3, #15
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d100      	bne.n	80018b6 <__aeabi_ddiv+0x426>
 80018b4:	e0f9      	b.n	8001aaa <__aeabi_ddiv+0x61a>
 80018b6:	1d11      	adds	r1, r2, #4
 80018b8:	4291      	cmp	r1, r2
 80018ba:	419b      	sbcs	r3, r3
 80018bc:	000a      	movs	r2, r1
 80018be:	425b      	negs	r3, r3
 80018c0:	0759      	lsls	r1, r3, #29
 80018c2:	025b      	lsls	r3, r3, #9
 80018c4:	0b1c      	lsrs	r4, r3, #12
 80018c6:	08d2      	lsrs	r2, r2, #3
 80018c8:	430a      	orrs	r2, r1
 80018ca:	4690      	mov	r8, r2
 80018cc:	2300      	movs	r3, #0
 80018ce:	e63f      	b.n	8001550 <__aeabi_ddiv+0xc0>
 80018d0:	2480      	movs	r4, #128	@ 0x80
 80018d2:	464b      	mov	r3, r9
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	4223      	tst	r3, r4
 80018d8:	d009      	beq.n	80018ee <__aeabi_ddiv+0x45e>
 80018da:	465b      	mov	r3, fp
 80018dc:	4223      	tst	r3, r4
 80018de:	d106      	bne.n	80018ee <__aeabi_ddiv+0x45e>
 80018e0:	431c      	orrs	r4, r3
 80018e2:	0324      	lsls	r4, r4, #12
 80018e4:	002e      	movs	r6, r5
 80018e6:	4690      	mov	r8, r2
 80018e8:	4b71      	ldr	r3, [pc, #452]	@ (8001ab0 <__aeabi_ddiv+0x620>)
 80018ea:	0b24      	lsrs	r4, r4, #12
 80018ec:	e630      	b.n	8001550 <__aeabi_ddiv+0xc0>
 80018ee:	2480      	movs	r4, #128	@ 0x80
 80018f0:	464b      	mov	r3, r9
 80018f2:	0324      	lsls	r4, r4, #12
 80018f4:	431c      	orrs	r4, r3
 80018f6:	0324      	lsls	r4, r4, #12
 80018f8:	9e02      	ldr	r6, [sp, #8]
 80018fa:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab0 <__aeabi_ddiv+0x620>)
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	e627      	b.n	8001550 <__aeabi_ddiv+0xc0>
 8001900:	2b00      	cmp	r3, #0
 8001902:	d100      	bne.n	8001906 <__aeabi_ddiv+0x476>
 8001904:	e700      	b.n	8001708 <__aeabi_ddiv+0x278>
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	1e51      	subs	r1, r2, #1
 800190a:	4684      	mov	ip, r0
 800190c:	4464      	add	r4, ip
 800190e:	4284      	cmp	r4, r0
 8001910:	d200      	bcs.n	8001914 <__aeabi_ddiv+0x484>
 8001912:	e084      	b.n	8001a1e <__aeabi_ddiv+0x58e>
 8001914:	42bc      	cmp	r4, r7
 8001916:	d200      	bcs.n	800191a <__aeabi_ddiv+0x48a>
 8001918:	e0ae      	b.n	8001a78 <__aeabi_ddiv+0x5e8>
 800191a:	d100      	bne.n	800191e <__aeabi_ddiv+0x48e>
 800191c:	e0c1      	b.n	8001aa2 <__aeabi_ddiv+0x612>
 800191e:	000a      	movs	r2, r1
 8001920:	e6f0      	b.n	8001704 <__aeabi_ddiv+0x274>
 8001922:	4542      	cmp	r2, r8
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x498>
 8001926:	e62c      	b.n	8001582 <__aeabi_ddiv+0xf2>
 8001928:	464b      	mov	r3, r9
 800192a:	07dc      	lsls	r4, r3, #31
 800192c:	0858      	lsrs	r0, r3, #1
 800192e:	4643      	mov	r3, r8
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	431c      	orrs	r4, r3
 8001934:	4643      	mov	r3, r8
 8001936:	07df      	lsls	r7, r3, #31
 8001938:	e62a      	b.n	8001590 <__aeabi_ddiv+0x100>
 800193a:	f001 f96d 	bl	8002c18 <__clzsi2>
 800193e:	2315      	movs	r3, #21
 8001940:	469c      	mov	ip, r3
 8001942:	4484      	add	ip, r0
 8001944:	0002      	movs	r2, r0
 8001946:	4663      	mov	r3, ip
 8001948:	3220      	adds	r2, #32
 800194a:	2b1c      	cmp	r3, #28
 800194c:	dc00      	bgt.n	8001950 <__aeabi_ddiv+0x4c0>
 800194e:	e72e      	b.n	80017ae <__aeabi_ddiv+0x31e>
 8001950:	0023      	movs	r3, r4
 8001952:	3808      	subs	r0, #8
 8001954:	4083      	lsls	r3, r0
 8001956:	4699      	mov	r9, r3
 8001958:	2300      	movs	r3, #0
 800195a:	4698      	mov	r8, r3
 800195c:	e736      	b.n	80017cc <__aeabi_ddiv+0x33c>
 800195e:	f001 f95b 	bl	8002c18 <__clzsi2>
 8001962:	0002      	movs	r2, r0
 8001964:	0003      	movs	r3, r0
 8001966:	3215      	adds	r2, #21
 8001968:	3320      	adds	r3, #32
 800196a:	2a1c      	cmp	r2, #28
 800196c:	dc00      	bgt.n	8001970 <__aeabi_ddiv+0x4e0>
 800196e:	e6fb      	b.n	8001768 <__aeabi_ddiv+0x2d8>
 8001970:	9900      	ldr	r1, [sp, #0]
 8001972:	3808      	subs	r0, #8
 8001974:	4081      	lsls	r1, r0
 8001976:	2200      	movs	r2, #0
 8001978:	468b      	mov	fp, r1
 800197a:	e702      	b.n	8001782 <__aeabi_ddiv+0x2f2>
 800197c:	9900      	ldr	r1, [sp, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	468c      	mov	ip, r1
 8001982:	4464      	add	r4, ip
 8001984:	42a1      	cmp	r1, r4
 8001986:	d900      	bls.n	800198a <__aeabi_ddiv+0x4fa>
 8001988:	e69a      	b.n	80016c0 <__aeabi_ddiv+0x230>
 800198a:	42a2      	cmp	r2, r4
 800198c:	d800      	bhi.n	8001990 <__aeabi_ddiv+0x500>
 800198e:	e697      	b.n	80016c0 <__aeabi_ddiv+0x230>
 8001990:	1e83      	subs	r3, r0, #2
 8001992:	4464      	add	r4, ip
 8001994:	e694      	b.n	80016c0 <__aeabi_ddiv+0x230>
 8001996:	46ac      	mov	ip, r5
 8001998:	4461      	add	r1, ip
 800199a:	3f01      	subs	r7, #1
 800199c:	428d      	cmp	r5, r1
 800199e:	d900      	bls.n	80019a2 <__aeabi_ddiv+0x512>
 80019a0:	e680      	b.n	80016a4 <__aeabi_ddiv+0x214>
 80019a2:	428a      	cmp	r2, r1
 80019a4:	d800      	bhi.n	80019a8 <__aeabi_ddiv+0x518>
 80019a6:	e67d      	b.n	80016a4 <__aeabi_ddiv+0x214>
 80019a8:	1e87      	subs	r7, r0, #2
 80019aa:	4461      	add	r1, ip
 80019ac:	e67a      	b.n	80016a4 <__aeabi_ddiv+0x214>
 80019ae:	4285      	cmp	r5, r0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_ddiv+0x524>
 80019b2:	e65f      	b.n	8001674 <__aeabi_ddiv+0x1e4>
 80019b4:	45b9      	cmp	r9, r7
 80019b6:	d900      	bls.n	80019ba <__aeabi_ddiv+0x52a>
 80019b8:	e65c      	b.n	8001674 <__aeabi_ddiv+0x1e4>
 80019ba:	e656      	b.n	800166a <__aeabi_ddiv+0x1da>
 80019bc:	42a2      	cmp	r2, r4
 80019be:	d800      	bhi.n	80019c2 <__aeabi_ddiv+0x532>
 80019c0:	e61a      	b.n	80015f8 <__aeabi_ddiv+0x168>
 80019c2:	1e83      	subs	r3, r0, #2
 80019c4:	4464      	add	r4, ip
 80019c6:	e617      	b.n	80015f8 <__aeabi_ddiv+0x168>
 80019c8:	428a      	cmp	r2, r1
 80019ca:	d800      	bhi.n	80019ce <__aeabi_ddiv+0x53e>
 80019cc:	e600      	b.n	80015d0 <__aeabi_ddiv+0x140>
 80019ce:	46ac      	mov	ip, r5
 80019d0:	1e83      	subs	r3, r0, #2
 80019d2:	4698      	mov	r8, r3
 80019d4:	4461      	add	r1, ip
 80019d6:	e5fb      	b.n	80015d0 <__aeabi_ddiv+0x140>
 80019d8:	4837      	ldr	r0, [pc, #220]	@ (8001ab8 <__aeabi_ddiv+0x628>)
 80019da:	0014      	movs	r4, r2
 80019dc:	4450      	add	r0, sl
 80019de:	4082      	lsls	r2, r0
 80019e0:	465b      	mov	r3, fp
 80019e2:	0017      	movs	r7, r2
 80019e4:	4083      	lsls	r3, r0
 80019e6:	40cc      	lsrs	r4, r1
 80019e8:	1e7a      	subs	r2, r7, #1
 80019ea:	4197      	sbcs	r7, r2
 80019ec:	4323      	orrs	r3, r4
 80019ee:	433b      	orrs	r3, r7
 80019f0:	001a      	movs	r2, r3
 80019f2:	465b      	mov	r3, fp
 80019f4:	40cb      	lsrs	r3, r1
 80019f6:	0751      	lsls	r1, r2, #29
 80019f8:	d009      	beq.n	8001a0e <__aeabi_ddiv+0x57e>
 80019fa:	210f      	movs	r1, #15
 80019fc:	4011      	ands	r1, r2
 80019fe:	2904      	cmp	r1, #4
 8001a00:	d005      	beq.n	8001a0e <__aeabi_ddiv+0x57e>
 8001a02:	1d11      	adds	r1, r2, #4
 8001a04:	4291      	cmp	r1, r2
 8001a06:	4192      	sbcs	r2, r2
 8001a08:	4252      	negs	r2, r2
 8001a0a:	189b      	adds	r3, r3, r2
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	0219      	lsls	r1, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_ddiv+0x584>
 8001a12:	e755      	b.n	80018c0 <__aeabi_ddiv+0x430>
 8001a14:	2200      	movs	r2, #0
 8001a16:	2301      	movs	r3, #1
 8001a18:	2400      	movs	r4, #0
 8001a1a:	4690      	mov	r8, r2
 8001a1c:	e598      	b.n	8001550 <__aeabi_ddiv+0xc0>
 8001a1e:	000a      	movs	r2, r1
 8001a20:	42bc      	cmp	r4, r7
 8001a22:	d000      	beq.n	8001a26 <__aeabi_ddiv+0x596>
 8001a24:	e66e      	b.n	8001704 <__aeabi_ddiv+0x274>
 8001a26:	454b      	cmp	r3, r9
 8001a28:	d000      	beq.n	8001a2c <__aeabi_ddiv+0x59c>
 8001a2a:	e66b      	b.n	8001704 <__aeabi_ddiv+0x274>
 8001a2c:	e66c      	b.n	8001708 <__aeabi_ddiv+0x278>
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <__aeabi_ddiv+0x62c>)
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <__aeabi_ddiv+0x630>)
 8001a32:	4453      	add	r3, sl
 8001a34:	4592      	cmp	sl, r2
 8001a36:	da00      	bge.n	8001a3a <__aeabi_ddiv+0x5aa>
 8001a38:	e718      	b.n	800186c <__aeabi_ddiv+0x3dc>
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4249      	negs	r1, r1
 8001a3e:	1d0a      	adds	r2, r1, #4
 8001a40:	428a      	cmp	r2, r1
 8001a42:	4189      	sbcs	r1, r1
 8001a44:	4249      	negs	r1, r1
 8001a46:	448b      	add	fp, r1
 8001a48:	e666      	b.n	8001718 <__aeabi_ddiv+0x288>
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	4011      	ands	r1, r2
 8001a4e:	2904      	cmp	r1, #4
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x5c4>
 8001a52:	e661      	b.n	8001718 <__aeabi_ddiv+0x288>
 8001a54:	0011      	movs	r1, r2
 8001a56:	e7f2      	b.n	8001a3e <__aeabi_ddiv+0x5ae>
 8001a58:	42bc      	cmp	r4, r7
 8001a5a:	d800      	bhi.n	8001a5e <__aeabi_ddiv+0x5ce>
 8001a5c:	e60a      	b.n	8001674 <__aeabi_ddiv+0x1e4>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	425b      	negs	r3, r3
 8001a62:	469c      	mov	ip, r3
 8001a64:	9900      	ldr	r1, [sp, #0]
 8001a66:	444f      	add	r7, r9
 8001a68:	454f      	cmp	r7, r9
 8001a6a:	419b      	sbcs	r3, r3
 8001a6c:	44e3      	add	fp, ip
 8001a6e:	468c      	mov	ip, r1
 8001a70:	425b      	negs	r3, r3
 8001a72:	4463      	add	r3, ip
 8001a74:	18c0      	adds	r0, r0, r3
 8001a76:	e5ff      	b.n	8001678 <__aeabi_ddiv+0x1e8>
 8001a78:	4649      	mov	r1, r9
 8001a7a:	9d00      	ldr	r5, [sp, #0]
 8001a7c:	0048      	lsls	r0, r1, #1
 8001a7e:	4548      	cmp	r0, r9
 8001a80:	4189      	sbcs	r1, r1
 8001a82:	46ac      	mov	ip, r5
 8001a84:	4249      	negs	r1, r1
 8001a86:	4461      	add	r1, ip
 8001a88:	4681      	mov	r9, r0
 8001a8a:	3a02      	subs	r2, #2
 8001a8c:	1864      	adds	r4, r4, r1
 8001a8e:	e7c7      	b.n	8001a20 <__aeabi_ddiv+0x590>
 8001a90:	2480      	movs	r4, #128	@ 0x80
 8001a92:	465b      	mov	r3, fp
 8001a94:	0324      	lsls	r4, r4, #12
 8001a96:	431c      	orrs	r4, r3
 8001a98:	0324      	lsls	r4, r4, #12
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__aeabi_ddiv+0x620>)
 8001a9e:	0b24      	lsrs	r4, r4, #12
 8001aa0:	e556      	b.n	8001550 <__aeabi_ddiv+0xc0>
 8001aa2:	4599      	cmp	r9, r3
 8001aa4:	d3e8      	bcc.n	8001a78 <__aeabi_ddiv+0x5e8>
 8001aa6:	000a      	movs	r2, r1
 8001aa8:	e7bd      	b.n	8001a26 <__aeabi_ddiv+0x596>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e708      	b.n	80018c0 <__aeabi_ddiv+0x430>
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	000007ff 	.word	0x000007ff
 8001ab4:	0000043e 	.word	0x0000043e
 8001ab8:	0000041e 	.word	0x0000041e
 8001abc:	000003ff 	.word	0x000003ff
 8001ac0:	fffffc02 	.word	0xfffffc02

08001ac4 <__eqdf2>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	4657      	mov	r7, sl
 8001ac8:	46de      	mov	lr, fp
 8001aca:	464e      	mov	r6, r9
 8001acc:	4645      	mov	r5, r8
 8001ace:	b5e0      	push	{r5, r6, r7, lr}
 8001ad0:	000d      	movs	r5, r1
 8001ad2:	0004      	movs	r4, r0
 8001ad4:	0fe8      	lsrs	r0, r5, #31
 8001ad6:	4683      	mov	fp, r0
 8001ad8:	0309      	lsls	r1, r1, #12
 8001ada:	0fd8      	lsrs	r0, r3, #31
 8001adc:	0b09      	lsrs	r1, r1, #12
 8001ade:	4682      	mov	sl, r0
 8001ae0:	4819      	ldr	r0, [pc, #100]	@ (8001b48 <__eqdf2+0x84>)
 8001ae2:	468c      	mov	ip, r1
 8001ae4:	031f      	lsls	r7, r3, #12
 8001ae6:	0069      	lsls	r1, r5, #1
 8001ae8:	005e      	lsls	r6, r3, #1
 8001aea:	0d49      	lsrs	r1, r1, #21
 8001aec:	0b3f      	lsrs	r7, r7, #12
 8001aee:	0d76      	lsrs	r6, r6, #21
 8001af0:	4281      	cmp	r1, r0
 8001af2:	d018      	beq.n	8001b26 <__eqdf2+0x62>
 8001af4:	4286      	cmp	r6, r0
 8001af6:	d00f      	beq.n	8001b18 <__eqdf2+0x54>
 8001af8:	2001      	movs	r0, #1
 8001afa:	42b1      	cmp	r1, r6
 8001afc:	d10d      	bne.n	8001b1a <__eqdf2+0x56>
 8001afe:	45bc      	cmp	ip, r7
 8001b00:	d10b      	bne.n	8001b1a <__eqdf2+0x56>
 8001b02:	4294      	cmp	r4, r2
 8001b04:	d109      	bne.n	8001b1a <__eqdf2+0x56>
 8001b06:	45d3      	cmp	fp, sl
 8001b08:	d01c      	beq.n	8001b44 <__eqdf2+0x80>
 8001b0a:	2900      	cmp	r1, #0
 8001b0c:	d105      	bne.n	8001b1a <__eqdf2+0x56>
 8001b0e:	4660      	mov	r0, ip
 8001b10:	4320      	orrs	r0, r4
 8001b12:	1e43      	subs	r3, r0, #1
 8001b14:	4198      	sbcs	r0, r3
 8001b16:	e000      	b.n	8001b1a <__eqdf2+0x56>
 8001b18:	2001      	movs	r0, #1
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2001      	movs	r0, #1
 8001b28:	428e      	cmp	r6, r1
 8001b2a:	d1f6      	bne.n	8001b1a <__eqdf2+0x56>
 8001b2c:	4661      	mov	r1, ip
 8001b2e:	4339      	orrs	r1, r7
 8001b30:	000f      	movs	r7, r1
 8001b32:	4317      	orrs	r7, r2
 8001b34:	4327      	orrs	r7, r4
 8001b36:	d1f0      	bne.n	8001b1a <__eqdf2+0x56>
 8001b38:	465b      	mov	r3, fp
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	1a98      	subs	r0, r3, r2
 8001b3e:	1e43      	subs	r3, r0, #1
 8001b40:	4198      	sbcs	r0, r3
 8001b42:	e7ea      	b.n	8001b1a <__eqdf2+0x56>
 8001b44:	2000      	movs	r0, #0
 8001b46:	e7e8      	b.n	8001b1a <__eqdf2+0x56>
 8001b48:	000007ff 	.word	0x000007ff

08001b4c <__gedf2>:
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	4657      	mov	r7, sl
 8001b50:	464e      	mov	r6, r9
 8001b52:	4645      	mov	r5, r8
 8001b54:	46de      	mov	lr, fp
 8001b56:	b5e0      	push	{r5, r6, r7, lr}
 8001b58:	000d      	movs	r5, r1
 8001b5a:	030f      	lsls	r7, r1, #12
 8001b5c:	0b39      	lsrs	r1, r7, #12
 8001b5e:	b083      	sub	sp, #12
 8001b60:	0004      	movs	r4, r0
 8001b62:	4680      	mov	r8, r0
 8001b64:	9101      	str	r1, [sp, #4]
 8001b66:	0058      	lsls	r0, r3, #1
 8001b68:	0fe9      	lsrs	r1, r5, #31
 8001b6a:	4f31      	ldr	r7, [pc, #196]	@ (8001c30 <__gedf2+0xe4>)
 8001b6c:	0d40      	lsrs	r0, r0, #21
 8001b6e:	468c      	mov	ip, r1
 8001b70:	006e      	lsls	r6, r5, #1
 8001b72:	0319      	lsls	r1, r3, #12
 8001b74:	4682      	mov	sl, r0
 8001b76:	4691      	mov	r9, r2
 8001b78:	0d76      	lsrs	r6, r6, #21
 8001b7a:	0b09      	lsrs	r1, r1, #12
 8001b7c:	0fd8      	lsrs	r0, r3, #31
 8001b7e:	42be      	cmp	r6, r7
 8001b80:	d01f      	beq.n	8001bc2 <__gedf2+0x76>
 8001b82:	45ba      	cmp	sl, r7
 8001b84:	d00f      	beq.n	8001ba6 <__gedf2+0x5a>
 8001b86:	2e00      	cmp	r6, #0
 8001b88:	d12f      	bne.n	8001bea <__gedf2+0x9e>
 8001b8a:	4655      	mov	r5, sl
 8001b8c:	9e01      	ldr	r6, [sp, #4]
 8001b8e:	4334      	orrs	r4, r6
 8001b90:	2d00      	cmp	r5, #0
 8001b92:	d127      	bne.n	8001be4 <__gedf2+0x98>
 8001b94:	430a      	orrs	r2, r1
 8001b96:	d03a      	beq.n	8001c0e <__gedf2+0xc2>
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d145      	bne.n	8001c28 <__gedf2+0xdc>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d11a      	bne.n	8001bd6 <__gedf2+0x8a>
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	4240      	negs	r0, r0
 8001ba4:	e017      	b.n	8001bd6 <__gedf2+0x8a>
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	d13b      	bne.n	8001c22 <__gedf2+0xd6>
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	d102      	bne.n	8001bb4 <__gedf2+0x68>
 8001bae:	9f01      	ldr	r7, [sp, #4]
 8001bb0:	4327      	orrs	r7, r4
 8001bb2:	d0f3      	beq.n	8001b9c <__gedf2+0x50>
 8001bb4:	4584      	cmp	ip, r0
 8001bb6:	d109      	bne.n	8001bcc <__gedf2+0x80>
 8001bb8:	4663      	mov	r3, ip
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <__gedf2+0x54>
 8001bbe:	4660      	mov	r0, ip
 8001bc0:	e009      	b.n	8001bd6 <__gedf2+0x8a>
 8001bc2:	9f01      	ldr	r7, [sp, #4]
 8001bc4:	4327      	orrs	r7, r4
 8001bc6:	d12c      	bne.n	8001c22 <__gedf2+0xd6>
 8001bc8:	45b2      	cmp	sl, r6
 8001bca:	d024      	beq.n	8001c16 <__gedf2+0xca>
 8001bcc:	4663      	mov	r3, ip
 8001bce:	2002      	movs	r0, #2
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	4018      	ands	r0, r3
 8001bd4:	3801      	subs	r0, #1
 8001bd6:	b003      	add	sp, #12
 8001bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8001bda:	46bb      	mov	fp, r7
 8001bdc:	46b2      	mov	sl, r6
 8001bde:	46a9      	mov	r9, r5
 8001be0:	46a0      	mov	r8, r4
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d0d9      	beq.n	8001b9c <__gedf2+0x50>
 8001be8:	e7e4      	b.n	8001bb4 <__gedf2+0x68>
 8001bea:	4654      	mov	r4, sl
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d0ed      	beq.n	8001bcc <__gedf2+0x80>
 8001bf0:	4584      	cmp	ip, r0
 8001bf2:	d1eb      	bne.n	8001bcc <__gedf2+0x80>
 8001bf4:	4556      	cmp	r6, sl
 8001bf6:	dce9      	bgt.n	8001bcc <__gedf2+0x80>
 8001bf8:	dbde      	blt.n	8001bb8 <__gedf2+0x6c>
 8001bfa:	9b01      	ldr	r3, [sp, #4]
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	d8e5      	bhi.n	8001bcc <__gedf2+0x80>
 8001c00:	d1da      	bne.n	8001bb8 <__gedf2+0x6c>
 8001c02:	45c8      	cmp	r8, r9
 8001c04:	d8e2      	bhi.n	8001bcc <__gedf2+0x80>
 8001c06:	2000      	movs	r0, #0
 8001c08:	45c8      	cmp	r8, r9
 8001c0a:	d2e4      	bcs.n	8001bd6 <__gedf2+0x8a>
 8001c0c:	e7d4      	b.n	8001bb8 <__gedf2+0x6c>
 8001c0e:	2000      	movs	r0, #0
 8001c10:	2c00      	cmp	r4, #0
 8001c12:	d0e0      	beq.n	8001bd6 <__gedf2+0x8a>
 8001c14:	e7da      	b.n	8001bcc <__gedf2+0x80>
 8001c16:	4311      	orrs	r1, r2
 8001c18:	d103      	bne.n	8001c22 <__gedf2+0xd6>
 8001c1a:	4584      	cmp	ip, r0
 8001c1c:	d1d6      	bne.n	8001bcc <__gedf2+0x80>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e7d9      	b.n	8001bd6 <__gedf2+0x8a>
 8001c22:	2002      	movs	r0, #2
 8001c24:	4240      	negs	r0, r0
 8001c26:	e7d6      	b.n	8001bd6 <__gedf2+0x8a>
 8001c28:	4584      	cmp	ip, r0
 8001c2a:	d0e6      	beq.n	8001bfa <__gedf2+0xae>
 8001c2c:	e7ce      	b.n	8001bcc <__gedf2+0x80>
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	000007ff 	.word	0x000007ff

08001c34 <__ledf2>:
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	4657      	mov	r7, sl
 8001c38:	464e      	mov	r6, r9
 8001c3a:	4645      	mov	r5, r8
 8001c3c:	46de      	mov	lr, fp
 8001c3e:	b5e0      	push	{r5, r6, r7, lr}
 8001c40:	000d      	movs	r5, r1
 8001c42:	030f      	lsls	r7, r1, #12
 8001c44:	0004      	movs	r4, r0
 8001c46:	4680      	mov	r8, r0
 8001c48:	0fe8      	lsrs	r0, r5, #31
 8001c4a:	0b39      	lsrs	r1, r7, #12
 8001c4c:	4684      	mov	ip, r0
 8001c4e:	b083      	sub	sp, #12
 8001c50:	0058      	lsls	r0, r3, #1
 8001c52:	4f30      	ldr	r7, [pc, #192]	@ (8001d14 <__ledf2+0xe0>)
 8001c54:	0d40      	lsrs	r0, r0, #21
 8001c56:	9101      	str	r1, [sp, #4]
 8001c58:	031e      	lsls	r6, r3, #12
 8001c5a:	0069      	lsls	r1, r5, #1
 8001c5c:	4682      	mov	sl, r0
 8001c5e:	4691      	mov	r9, r2
 8001c60:	0d49      	lsrs	r1, r1, #21
 8001c62:	0b36      	lsrs	r6, r6, #12
 8001c64:	0fd8      	lsrs	r0, r3, #31
 8001c66:	42b9      	cmp	r1, r7
 8001c68:	d020      	beq.n	8001cac <__ledf2+0x78>
 8001c6a:	45ba      	cmp	sl, r7
 8001c6c:	d00f      	beq.n	8001c8e <__ledf2+0x5a>
 8001c6e:	2900      	cmp	r1, #0
 8001c70:	d12b      	bne.n	8001cca <__ledf2+0x96>
 8001c72:	9901      	ldr	r1, [sp, #4]
 8001c74:	430c      	orrs	r4, r1
 8001c76:	4651      	mov	r1, sl
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d137      	bne.n	8001cec <__ledf2+0xb8>
 8001c7c:	4332      	orrs	r2, r6
 8001c7e:	d038      	beq.n	8001cf2 <__ledf2+0xbe>
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d144      	bne.n	8001d0e <__ledf2+0xda>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d119      	bne.n	8001cbc <__ledf2+0x88>
 8001c88:	2001      	movs	r0, #1
 8001c8a:	4240      	negs	r0, r0
 8001c8c:	e016      	b.n	8001cbc <__ledf2+0x88>
 8001c8e:	4316      	orrs	r6, r2
 8001c90:	d113      	bne.n	8001cba <__ledf2+0x86>
 8001c92:	2900      	cmp	r1, #0
 8001c94:	d102      	bne.n	8001c9c <__ledf2+0x68>
 8001c96:	9f01      	ldr	r7, [sp, #4]
 8001c98:	4327      	orrs	r7, r4
 8001c9a:	d0f3      	beq.n	8001c84 <__ledf2+0x50>
 8001c9c:	4584      	cmp	ip, r0
 8001c9e:	d020      	beq.n	8001ce2 <__ledf2+0xae>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	4018      	ands	r0, r3
 8001ca8:	3801      	subs	r0, #1
 8001caa:	e007      	b.n	8001cbc <__ledf2+0x88>
 8001cac:	9f01      	ldr	r7, [sp, #4]
 8001cae:	4327      	orrs	r7, r4
 8001cb0:	d103      	bne.n	8001cba <__ledf2+0x86>
 8001cb2:	458a      	cmp	sl, r1
 8001cb4:	d1f4      	bne.n	8001ca0 <__ledf2+0x6c>
 8001cb6:	4316      	orrs	r6, r2
 8001cb8:	d01f      	beq.n	8001cfa <__ledf2+0xc6>
 8001cba:	2002      	movs	r0, #2
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc0:	46bb      	mov	fp, r7
 8001cc2:	46b2      	mov	sl, r6
 8001cc4:	46a9      	mov	r9, r5
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	4654      	mov	r4, sl
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d0e7      	beq.n	8001ca0 <__ledf2+0x6c>
 8001cd0:	4584      	cmp	ip, r0
 8001cd2:	d1e5      	bne.n	8001ca0 <__ledf2+0x6c>
 8001cd4:	4551      	cmp	r1, sl
 8001cd6:	dce3      	bgt.n	8001ca0 <__ledf2+0x6c>
 8001cd8:	db03      	blt.n	8001ce2 <__ledf2+0xae>
 8001cda:	9b01      	ldr	r3, [sp, #4]
 8001cdc:	42b3      	cmp	r3, r6
 8001cde:	d8df      	bhi.n	8001ca0 <__ledf2+0x6c>
 8001ce0:	d00f      	beq.n	8001d02 <__ledf2+0xce>
 8001ce2:	4663      	mov	r3, ip
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0cf      	beq.n	8001c88 <__ledf2+0x54>
 8001ce8:	4660      	mov	r0, ip
 8001cea:	e7e7      	b.n	8001cbc <__ledf2+0x88>
 8001cec:	2c00      	cmp	r4, #0
 8001cee:	d0c9      	beq.n	8001c84 <__ledf2+0x50>
 8001cf0:	e7d4      	b.n	8001c9c <__ledf2+0x68>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d0e1      	beq.n	8001cbc <__ledf2+0x88>
 8001cf8:	e7d2      	b.n	8001ca0 <__ledf2+0x6c>
 8001cfa:	4584      	cmp	ip, r0
 8001cfc:	d1d0      	bne.n	8001ca0 <__ledf2+0x6c>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e7dc      	b.n	8001cbc <__ledf2+0x88>
 8001d02:	45c8      	cmp	r8, r9
 8001d04:	d8cc      	bhi.n	8001ca0 <__ledf2+0x6c>
 8001d06:	2000      	movs	r0, #0
 8001d08:	45c8      	cmp	r8, r9
 8001d0a:	d2d7      	bcs.n	8001cbc <__ledf2+0x88>
 8001d0c:	e7e9      	b.n	8001ce2 <__ledf2+0xae>
 8001d0e:	4584      	cmp	ip, r0
 8001d10:	d0e3      	beq.n	8001cda <__ledf2+0xa6>
 8001d12:	e7c5      	b.n	8001ca0 <__ledf2+0x6c>
 8001d14:	000007ff 	.word	0x000007ff

08001d18 <__aeabi_dmul>:
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	46de      	mov	lr, fp
 8001d1e:	464e      	mov	r6, r9
 8001d20:	4645      	mov	r5, r8
 8001d22:	b5e0      	push	{r5, r6, r7, lr}
 8001d24:	001f      	movs	r7, r3
 8001d26:	030b      	lsls	r3, r1, #12
 8001d28:	0b1b      	lsrs	r3, r3, #12
 8001d2a:	0016      	movs	r6, r2
 8001d2c:	469a      	mov	sl, r3
 8001d2e:	0fca      	lsrs	r2, r1, #31
 8001d30:	004b      	lsls	r3, r1, #1
 8001d32:	0004      	movs	r4, r0
 8001d34:	4693      	mov	fp, r2
 8001d36:	b087      	sub	sp, #28
 8001d38:	0d5b      	lsrs	r3, r3, #21
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dmul+0x26>
 8001d3c:	e0d5      	b.n	8001eea <__aeabi_dmul+0x1d2>
 8001d3e:	4abb      	ldr	r2, [pc, #748]	@ (800202c <__aeabi_dmul+0x314>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dmul+0x2e>
 8001d44:	e0f8      	b.n	8001f38 <__aeabi_dmul+0x220>
 8001d46:	4651      	mov	r1, sl
 8001d48:	0f42      	lsrs	r2, r0, #29
 8001d4a:	00c9      	lsls	r1, r1, #3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	0409      	lsls	r1, r1, #16
 8001d52:	4311      	orrs	r1, r2
 8001d54:	00c2      	lsls	r2, r0, #3
 8001d56:	4691      	mov	r9, r2
 8001d58:	4ab5      	ldr	r2, [pc, #724]	@ (8002030 <__aeabi_dmul+0x318>)
 8001d5a:	468a      	mov	sl, r1
 8001d5c:	189d      	adds	r5, r3, r2
 8001d5e:	2300      	movs	r3, #0
 8001d60:	4698      	mov	r8, r3
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	033c      	lsls	r4, r7, #12
 8001d66:	007b      	lsls	r3, r7, #1
 8001d68:	0ffa      	lsrs	r2, r7, #31
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	0b24      	lsrs	r4, r4, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	9200      	str	r2, [sp, #0]
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dmul+0x5e>
 8001d74:	e096      	b.n	8001ea4 <__aeabi_dmul+0x18c>
 8001d76:	4aad      	ldr	r2, [pc, #692]	@ (800202c <__aeabi_dmul+0x314>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d031      	beq.n	8001de0 <__aeabi_dmul+0xc8>
 8001d7c:	0f72      	lsrs	r2, r6, #29
 8001d7e:	00e4      	lsls	r4, r4, #3
 8001d80:	4322      	orrs	r2, r4
 8001d82:	2480      	movs	r4, #128	@ 0x80
 8001d84:	0424      	lsls	r4, r4, #16
 8001d86:	4314      	orrs	r4, r2
 8001d88:	4aa9      	ldr	r2, [pc, #676]	@ (8002030 <__aeabi_dmul+0x318>)
 8001d8a:	00f0      	lsls	r0, r6, #3
 8001d8c:	4694      	mov	ip, r2
 8001d8e:	4463      	add	r3, ip
 8001d90:	195b      	adds	r3, r3, r5
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	9201      	str	r2, [sp, #4]
 8001d96:	4642      	mov	r2, r8
 8001d98:	2600      	movs	r6, #0
 8001d9a:	2a0a      	cmp	r2, #10
 8001d9c:	dc42      	bgt.n	8001e24 <__aeabi_dmul+0x10c>
 8001d9e:	465a      	mov	r2, fp
 8001da0:	9900      	ldr	r1, [sp, #0]
 8001da2:	404a      	eors	r2, r1
 8001da4:	4693      	mov	fp, r2
 8001da6:	4642      	mov	r2, r8
 8001da8:	2a02      	cmp	r2, #2
 8001daa:	dc32      	bgt.n	8001e12 <__aeabi_dmul+0xfa>
 8001dac:	3a01      	subs	r2, #1
 8001dae:	2a01      	cmp	r2, #1
 8001db0:	d900      	bls.n	8001db4 <__aeabi_dmul+0x9c>
 8001db2:	e149      	b.n	8002048 <__aeabi_dmul+0x330>
 8001db4:	2e02      	cmp	r6, #2
 8001db6:	d100      	bne.n	8001dba <__aeabi_dmul+0xa2>
 8001db8:	e0ca      	b.n	8001f50 <__aeabi_dmul+0x238>
 8001dba:	2e01      	cmp	r6, #1
 8001dbc:	d13d      	bne.n	8001e3a <__aeabi_dmul+0x122>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	0010      	movs	r0, r2
 8001dc6:	465a      	mov	r2, fp
 8001dc8:	051b      	lsls	r3, r3, #20
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	07d2      	lsls	r2, r2, #31
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	b007      	add	sp, #28
 8001dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd6:	46bb      	mov	fp, r7
 8001dd8:	46b2      	mov	sl, r6
 8001dda:	46a9      	mov	r9, r5
 8001ddc:	46a0      	mov	r8, r4
 8001dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <__aeabi_dmul+0x314>)
 8001de2:	4326      	orrs	r6, r4
 8001de4:	18eb      	adds	r3, r5, r3
 8001de6:	2e00      	cmp	r6, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dmul+0xd4>
 8001dea:	e0bb      	b.n	8001f64 <__aeabi_dmul+0x24c>
 8001dec:	2203      	movs	r2, #3
 8001dee:	4641      	mov	r1, r8
 8001df0:	4311      	orrs	r1, r2
 8001df2:	465a      	mov	r2, fp
 8001df4:	4688      	mov	r8, r1
 8001df6:	9900      	ldr	r1, [sp, #0]
 8001df8:	404a      	eors	r2, r1
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	0109      	lsls	r1, r1, #4
 8001dfe:	468c      	mov	ip, r1
 8001e00:	0029      	movs	r1, r5
 8001e02:	4461      	add	r1, ip
 8001e04:	9101      	str	r1, [sp, #4]
 8001e06:	4641      	mov	r1, r8
 8001e08:	290a      	cmp	r1, #10
 8001e0a:	dd00      	ble.n	8001e0e <__aeabi_dmul+0xf6>
 8001e0c:	e233      	b.n	8002276 <__aeabi_dmul+0x55e>
 8001e0e:	4693      	mov	fp, r2
 8001e10:	2603      	movs	r6, #3
 8001e12:	4642      	mov	r2, r8
 8001e14:	2701      	movs	r7, #1
 8001e16:	4097      	lsls	r7, r2
 8001e18:	21a6      	movs	r1, #166	@ 0xa6
 8001e1a:	003a      	movs	r2, r7
 8001e1c:	00c9      	lsls	r1, r1, #3
 8001e1e:	400a      	ands	r2, r1
 8001e20:	420f      	tst	r7, r1
 8001e22:	d031      	beq.n	8001e88 <__aeabi_dmul+0x170>
 8001e24:	9e02      	ldr	r6, [sp, #8]
 8001e26:	2e02      	cmp	r6, #2
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dmul+0x114>
 8001e2a:	e235      	b.n	8002298 <__aeabi_dmul+0x580>
 8001e2c:	2e03      	cmp	r6, #3
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dmul+0x11a>
 8001e30:	e1d2      	b.n	80021d8 <__aeabi_dmul+0x4c0>
 8001e32:	4654      	mov	r4, sl
 8001e34:	4648      	mov	r0, r9
 8001e36:	2e01      	cmp	r6, #1
 8001e38:	d0c1      	beq.n	8001dbe <__aeabi_dmul+0xa6>
 8001e3a:	9a01      	ldr	r2, [sp, #4]
 8001e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <__aeabi_dmul+0x31c>)
 8001e3e:	4694      	mov	ip, r2
 8001e40:	4463      	add	r3, ip
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dc00      	bgt.n	8001e48 <__aeabi_dmul+0x130>
 8001e46:	e0c0      	b.n	8001fca <__aeabi_dmul+0x2b2>
 8001e48:	0742      	lsls	r2, r0, #29
 8001e4a:	d009      	beq.n	8001e60 <__aeabi_dmul+0x148>
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	4002      	ands	r2, r0
 8001e50:	2a04      	cmp	r2, #4
 8001e52:	d005      	beq.n	8001e60 <__aeabi_dmul+0x148>
 8001e54:	1d02      	adds	r2, r0, #4
 8001e56:	4282      	cmp	r2, r0
 8001e58:	4180      	sbcs	r0, r0
 8001e5a:	4240      	negs	r0, r0
 8001e5c:	1824      	adds	r4, r4, r0
 8001e5e:	0010      	movs	r0, r2
 8001e60:	01e2      	lsls	r2, r4, #7
 8001e62:	d506      	bpl.n	8001e72 <__aeabi_dmul+0x15a>
 8001e64:	4b74      	ldr	r3, [pc, #464]	@ (8002038 <__aeabi_dmul+0x320>)
 8001e66:	9a01      	ldr	r2, [sp, #4]
 8001e68:	401c      	ands	r4, r3
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	4694      	mov	ip, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4463      	add	r3, ip
 8001e72:	4a72      	ldr	r2, [pc, #456]	@ (800203c <__aeabi_dmul+0x324>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	dc6b      	bgt.n	8001f50 <__aeabi_dmul+0x238>
 8001e78:	0762      	lsls	r2, r4, #29
 8001e7a:	08c0      	lsrs	r0, r0, #3
 8001e7c:	0264      	lsls	r4, r4, #9
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	4302      	orrs	r2, r0
 8001e82:	0b24      	lsrs	r4, r4, #12
 8001e84:	0d5b      	lsrs	r3, r3, #21
 8001e86:	e79d      	b.n	8001dc4 <__aeabi_dmul+0xac>
 8001e88:	2190      	movs	r1, #144	@ 0x90
 8001e8a:	0089      	lsls	r1, r1, #2
 8001e8c:	420f      	tst	r7, r1
 8001e8e:	d163      	bne.n	8001f58 <__aeabi_dmul+0x240>
 8001e90:	2288      	movs	r2, #136	@ 0x88
 8001e92:	423a      	tst	r2, r7
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x180>
 8001e96:	e0d7      	b.n	8002048 <__aeabi_dmul+0x330>
 8001e98:	9b00      	ldr	r3, [sp, #0]
 8001e9a:	46a2      	mov	sl, r4
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	4681      	mov	r9, r0
 8001ea0:	9602      	str	r6, [sp, #8]
 8001ea2:	e7bf      	b.n	8001e24 <__aeabi_dmul+0x10c>
 8001ea4:	0023      	movs	r3, r4
 8001ea6:	4333      	orrs	r3, r6
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dmul+0x194>
 8001eaa:	e07f      	b.n	8001fac <__aeabi_dmul+0x294>
 8001eac:	2c00      	cmp	r4, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dmul+0x19a>
 8001eb0:	e1ad      	b.n	800220e <__aeabi_dmul+0x4f6>
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f000 feb0 	bl	8002c18 <__clzsi2>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	0003      	movs	r3, r0
 8001ebc:	3a0b      	subs	r2, #11
 8001ebe:	201d      	movs	r0, #29
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	1a82      	subs	r2, r0, r2
 8001ec4:	0030      	movs	r0, r6
 8001ec6:	3908      	subs	r1, #8
 8001ec8:	40d0      	lsrs	r0, r2
 8001eca:	408c      	lsls	r4, r1
 8001ecc:	4304      	orrs	r4, r0
 8001ece:	0030      	movs	r0, r6
 8001ed0:	4088      	lsls	r0, r1
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8002040 <__aeabi_dmul+0x328>)
 8001ed4:	1aeb      	subs	r3, r5, r3
 8001ed6:	4694      	mov	ip, r2
 8001ed8:	4463      	add	r3, ip
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	9201      	str	r2, [sp, #4]
 8001ede:	4642      	mov	r2, r8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	2a0a      	cmp	r2, #10
 8001ee4:	dc00      	bgt.n	8001ee8 <__aeabi_dmul+0x1d0>
 8001ee6:	e75a      	b.n	8001d9e <__aeabi_dmul+0x86>
 8001ee8:	e79c      	b.n	8001e24 <__aeabi_dmul+0x10c>
 8001eea:	4653      	mov	r3, sl
 8001eec:	4303      	orrs	r3, r0
 8001eee:	4699      	mov	r9, r3
 8001ef0:	d054      	beq.n	8001f9c <__aeabi_dmul+0x284>
 8001ef2:	4653      	mov	r3, sl
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dmul+0x1e2>
 8001ef8:	e177      	b.n	80021ea <__aeabi_dmul+0x4d2>
 8001efa:	4650      	mov	r0, sl
 8001efc:	f000 fe8c 	bl	8002c18 <__clzsi2>
 8001f00:	230b      	movs	r3, #11
 8001f02:	425b      	negs	r3, r3
 8001f04:	469c      	mov	ip, r3
 8001f06:	0002      	movs	r2, r0
 8001f08:	4484      	add	ip, r0
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	4650      	mov	r0, sl
 8001f0e:	3908      	subs	r1, #8
 8001f10:	4088      	lsls	r0, r1
 8001f12:	231d      	movs	r3, #29
 8001f14:	4680      	mov	r8, r0
 8001f16:	4660      	mov	r0, ip
 8001f18:	1a1b      	subs	r3, r3, r0
 8001f1a:	0020      	movs	r0, r4
 8001f1c:	40d8      	lsrs	r0, r3
 8001f1e:	0003      	movs	r3, r0
 8001f20:	4640      	mov	r0, r8
 8001f22:	4303      	orrs	r3, r0
 8001f24:	469a      	mov	sl, r3
 8001f26:	0023      	movs	r3, r4
 8001f28:	408b      	lsls	r3, r1
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4d44      	ldr	r5, [pc, #272]	@ (8002040 <__aeabi_dmul+0x328>)
 8001f30:	4698      	mov	r8, r3
 8001f32:	1aad      	subs	r5, r5, r2
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	e715      	b.n	8001d64 <__aeabi_dmul+0x4c>
 8001f38:	4652      	mov	r2, sl
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	4691      	mov	r9, r2
 8001f3e:	d126      	bne.n	8001f8e <__aeabi_dmul+0x276>
 8001f40:	2200      	movs	r2, #0
 8001f42:	001d      	movs	r5, r3
 8001f44:	2302      	movs	r3, #2
 8001f46:	4692      	mov	sl, r2
 8001f48:	3208      	adds	r2, #8
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	e709      	b.n	8001d64 <__aeabi_dmul+0x4c>
 8001f50:	2400      	movs	r4, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	4b35      	ldr	r3, [pc, #212]	@ (800202c <__aeabi_dmul+0x314>)
 8001f56:	e735      	b.n	8001dc4 <__aeabi_dmul+0xac>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2480      	movs	r4, #128	@ 0x80
 8001f5c:	469b      	mov	fp, r3
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	4b32      	ldr	r3, [pc, #200]	@ (800202c <__aeabi_dmul+0x314>)
 8001f62:	e72f      	b.n	8001dc4 <__aeabi_dmul+0xac>
 8001f64:	2202      	movs	r2, #2
 8001f66:	4641      	mov	r1, r8
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	2280      	movs	r2, #128	@ 0x80
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	4694      	mov	ip, r2
 8001f70:	002a      	movs	r2, r5
 8001f72:	4462      	add	r2, ip
 8001f74:	4688      	mov	r8, r1
 8001f76:	9201      	str	r2, [sp, #4]
 8001f78:	290a      	cmp	r1, #10
 8001f7a:	dd00      	ble.n	8001f7e <__aeabi_dmul+0x266>
 8001f7c:	e752      	b.n	8001e24 <__aeabi_dmul+0x10c>
 8001f7e:	465a      	mov	r2, fp
 8001f80:	2000      	movs	r0, #0
 8001f82:	9900      	ldr	r1, [sp, #0]
 8001f84:	0004      	movs	r4, r0
 8001f86:	404a      	eors	r2, r1
 8001f88:	4693      	mov	fp, r2
 8001f8a:	2602      	movs	r6, #2
 8001f8c:	e70b      	b.n	8001da6 <__aeabi_dmul+0x8e>
 8001f8e:	220c      	movs	r2, #12
 8001f90:	001d      	movs	r5, r3
 8001f92:	2303      	movs	r3, #3
 8001f94:	4681      	mov	r9, r0
 8001f96:	4690      	mov	r8, r2
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	e6e3      	b.n	8001d64 <__aeabi_dmul+0x4c>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	469a      	mov	sl, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4698      	mov	r8, r3
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	e6db      	b.n	8001d64 <__aeabi_dmul+0x4c>
 8001fac:	4642      	mov	r2, r8
 8001fae:	3301      	adds	r3, #1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	002b      	movs	r3, r5
 8001fb4:	4690      	mov	r8, r2
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	4642      	mov	r2, r8
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	2601      	movs	r6, #1
 8001fc2:	2a0a      	cmp	r2, #10
 8001fc4:	dc00      	bgt.n	8001fc8 <__aeabi_dmul+0x2b0>
 8001fc6:	e6ea      	b.n	8001d9e <__aeabi_dmul+0x86>
 8001fc8:	e72c      	b.n	8001e24 <__aeabi_dmul+0x10c>
 8001fca:	2201      	movs	r2, #1
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	2a38      	cmp	r2, #56	@ 0x38
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0x2bc>
 8001fd2:	e6f4      	b.n	8001dbe <__aeabi_dmul+0xa6>
 8001fd4:	2a1f      	cmp	r2, #31
 8001fd6:	dc00      	bgt.n	8001fda <__aeabi_dmul+0x2c2>
 8001fd8:	e12a      	b.n	8002230 <__aeabi_dmul+0x518>
 8001fda:	211f      	movs	r1, #31
 8001fdc:	4249      	negs	r1, r1
 8001fde:	1acb      	subs	r3, r1, r3
 8001fe0:	0021      	movs	r1, r4
 8001fe2:	40d9      	lsrs	r1, r3
 8001fe4:	000b      	movs	r3, r1
 8001fe6:	2a20      	cmp	r2, #32
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dmul+0x2de>
 8001fea:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <__aeabi_dmul+0x32c>)
 8001fec:	9d01      	ldr	r5, [sp, #4]
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4465      	add	r5, ip
 8001ff2:	40ac      	lsls	r4, r5
 8001ff4:	4320      	orrs	r0, r4
 8001ff6:	1e42      	subs	r2, r0, #1
 8001ff8:	4190      	sbcs	r0, r2
 8001ffa:	4318      	orrs	r0, r3
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	0019      	movs	r1, r3
 8002000:	2400      	movs	r4, #0
 8002002:	4001      	ands	r1, r0
 8002004:	4203      	tst	r3, r0
 8002006:	d00c      	beq.n	8002022 <__aeabi_dmul+0x30a>
 8002008:	230f      	movs	r3, #15
 800200a:	4003      	ands	r3, r0
 800200c:	2b04      	cmp	r3, #4
 800200e:	d100      	bne.n	8002012 <__aeabi_dmul+0x2fa>
 8002010:	e140      	b.n	8002294 <__aeabi_dmul+0x57c>
 8002012:	1d03      	adds	r3, r0, #4
 8002014:	4283      	cmp	r3, r0
 8002016:	41a4      	sbcs	r4, r4
 8002018:	0018      	movs	r0, r3
 800201a:	4264      	negs	r4, r4
 800201c:	0761      	lsls	r1, r4, #29
 800201e:	0264      	lsls	r4, r4, #9
 8002020:	0b24      	lsrs	r4, r4, #12
 8002022:	08c2      	lsrs	r2, r0, #3
 8002024:	2300      	movs	r3, #0
 8002026:	430a      	orrs	r2, r1
 8002028:	e6cc      	b.n	8001dc4 <__aeabi_dmul+0xac>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	000003ff 	.word	0x000003ff
 8002038:	feffffff 	.word	0xfeffffff
 800203c:	000007fe 	.word	0x000007fe
 8002040:	fffffc0d 	.word	0xfffffc0d
 8002044:	0000043e 	.word	0x0000043e
 8002048:	4649      	mov	r1, r9
 800204a:	464a      	mov	r2, r9
 800204c:	0409      	lsls	r1, r1, #16
 800204e:	0c09      	lsrs	r1, r1, #16
 8002050:	000d      	movs	r5, r1
 8002052:	0c16      	lsrs	r6, r2, #16
 8002054:	0c02      	lsrs	r2, r0, #16
 8002056:	0400      	lsls	r0, r0, #16
 8002058:	0c00      	lsrs	r0, r0, #16
 800205a:	4345      	muls	r5, r0
 800205c:	46ac      	mov	ip, r5
 800205e:	0005      	movs	r5, r0
 8002060:	4375      	muls	r5, r6
 8002062:	46a8      	mov	r8, r5
 8002064:	0015      	movs	r5, r2
 8002066:	000f      	movs	r7, r1
 8002068:	4375      	muls	r5, r6
 800206a:	9200      	str	r2, [sp, #0]
 800206c:	9502      	str	r5, [sp, #8]
 800206e:	002a      	movs	r2, r5
 8002070:	9d00      	ldr	r5, [sp, #0]
 8002072:	436f      	muls	r7, r5
 8002074:	4665      	mov	r5, ip
 8002076:	0c2d      	lsrs	r5, r5, #16
 8002078:	46a9      	mov	r9, r5
 800207a:	4447      	add	r7, r8
 800207c:	444f      	add	r7, r9
 800207e:	45b8      	cmp	r8, r7
 8002080:	d905      	bls.n	800208e <__aeabi_dmul+0x376>
 8002082:	0015      	movs	r5, r2
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	0252      	lsls	r2, r2, #9
 8002088:	4690      	mov	r8, r2
 800208a:	4445      	add	r5, r8
 800208c:	9502      	str	r5, [sp, #8]
 800208e:	0c3d      	lsrs	r5, r7, #16
 8002090:	9503      	str	r5, [sp, #12]
 8002092:	4665      	mov	r5, ip
 8002094:	042d      	lsls	r5, r5, #16
 8002096:	043f      	lsls	r7, r7, #16
 8002098:	0c2d      	lsrs	r5, r5, #16
 800209a:	46ac      	mov	ip, r5
 800209c:	003d      	movs	r5, r7
 800209e:	4465      	add	r5, ip
 80020a0:	9504      	str	r5, [sp, #16]
 80020a2:	0c25      	lsrs	r5, r4, #16
 80020a4:	0424      	lsls	r4, r4, #16
 80020a6:	0c24      	lsrs	r4, r4, #16
 80020a8:	46ac      	mov	ip, r5
 80020aa:	0025      	movs	r5, r4
 80020ac:	4375      	muls	r5, r6
 80020ae:	46a8      	mov	r8, r5
 80020b0:	4665      	mov	r5, ip
 80020b2:	000f      	movs	r7, r1
 80020b4:	4369      	muls	r1, r5
 80020b6:	4441      	add	r1, r8
 80020b8:	4689      	mov	r9, r1
 80020ba:	4367      	muls	r7, r4
 80020bc:	0c39      	lsrs	r1, r7, #16
 80020be:	4449      	add	r1, r9
 80020c0:	436e      	muls	r6, r5
 80020c2:	4588      	cmp	r8, r1
 80020c4:	d903      	bls.n	80020ce <__aeabi_dmul+0x3b6>
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	0252      	lsls	r2, r2, #9
 80020ca:	4690      	mov	r8, r2
 80020cc:	4446      	add	r6, r8
 80020ce:	0c0d      	lsrs	r5, r1, #16
 80020d0:	46a8      	mov	r8, r5
 80020d2:	0035      	movs	r5, r6
 80020d4:	4445      	add	r5, r8
 80020d6:	9505      	str	r5, [sp, #20]
 80020d8:	9d03      	ldr	r5, [sp, #12]
 80020da:	043f      	lsls	r7, r7, #16
 80020dc:	46a8      	mov	r8, r5
 80020de:	0c3f      	lsrs	r7, r7, #16
 80020e0:	0409      	lsls	r1, r1, #16
 80020e2:	19c9      	adds	r1, r1, r7
 80020e4:	4488      	add	r8, r1
 80020e6:	4645      	mov	r5, r8
 80020e8:	9503      	str	r5, [sp, #12]
 80020ea:	4655      	mov	r5, sl
 80020ec:	042e      	lsls	r6, r5, #16
 80020ee:	0c36      	lsrs	r6, r6, #16
 80020f0:	0c2f      	lsrs	r7, r5, #16
 80020f2:	0035      	movs	r5, r6
 80020f4:	4345      	muls	r5, r0
 80020f6:	4378      	muls	r0, r7
 80020f8:	4681      	mov	r9, r0
 80020fa:	0038      	movs	r0, r7
 80020fc:	46a8      	mov	r8, r5
 80020fe:	0c2d      	lsrs	r5, r5, #16
 8002100:	46aa      	mov	sl, r5
 8002102:	9a00      	ldr	r2, [sp, #0]
 8002104:	4350      	muls	r0, r2
 8002106:	4372      	muls	r2, r6
 8002108:	444a      	add	r2, r9
 800210a:	4452      	add	r2, sl
 800210c:	4591      	cmp	r9, r2
 800210e:	d903      	bls.n	8002118 <__aeabi_dmul+0x400>
 8002110:	2580      	movs	r5, #128	@ 0x80
 8002112:	026d      	lsls	r5, r5, #9
 8002114:	46a9      	mov	r9, r5
 8002116:	4448      	add	r0, r9
 8002118:	0c15      	lsrs	r5, r2, #16
 800211a:	46a9      	mov	r9, r5
 800211c:	4645      	mov	r5, r8
 800211e:	042d      	lsls	r5, r5, #16
 8002120:	0c2d      	lsrs	r5, r5, #16
 8002122:	46a8      	mov	r8, r5
 8002124:	4665      	mov	r5, ip
 8002126:	437d      	muls	r5, r7
 8002128:	0412      	lsls	r2, r2, #16
 800212a:	4448      	add	r0, r9
 800212c:	4490      	add	r8, r2
 800212e:	46a9      	mov	r9, r5
 8002130:	0032      	movs	r2, r6
 8002132:	4665      	mov	r5, ip
 8002134:	4362      	muls	r2, r4
 8002136:	436e      	muls	r6, r5
 8002138:	437c      	muls	r4, r7
 800213a:	0c17      	lsrs	r7, r2, #16
 800213c:	1936      	adds	r6, r6, r4
 800213e:	19bf      	adds	r7, r7, r6
 8002140:	42bc      	cmp	r4, r7
 8002142:	d903      	bls.n	800214c <__aeabi_dmul+0x434>
 8002144:	2480      	movs	r4, #128	@ 0x80
 8002146:	0264      	lsls	r4, r4, #9
 8002148:	46a4      	mov	ip, r4
 800214a:	44e1      	add	r9, ip
 800214c:	9c02      	ldr	r4, [sp, #8]
 800214e:	9e03      	ldr	r6, [sp, #12]
 8002150:	46a4      	mov	ip, r4
 8002152:	9d05      	ldr	r5, [sp, #20]
 8002154:	4466      	add	r6, ip
 8002156:	428e      	cmp	r6, r1
 8002158:	4189      	sbcs	r1, r1
 800215a:	46ac      	mov	ip, r5
 800215c:	0412      	lsls	r2, r2, #16
 800215e:	043c      	lsls	r4, r7, #16
 8002160:	0c12      	lsrs	r2, r2, #16
 8002162:	18a2      	adds	r2, r4, r2
 8002164:	4462      	add	r2, ip
 8002166:	4249      	negs	r1, r1
 8002168:	1854      	adds	r4, r2, r1
 800216a:	4446      	add	r6, r8
 800216c:	46a4      	mov	ip, r4
 800216e:	4546      	cmp	r6, r8
 8002170:	41a4      	sbcs	r4, r4
 8002172:	4682      	mov	sl, r0
 8002174:	4264      	negs	r4, r4
 8002176:	46a0      	mov	r8, r4
 8002178:	42aa      	cmp	r2, r5
 800217a:	4192      	sbcs	r2, r2
 800217c:	458c      	cmp	ip, r1
 800217e:	4189      	sbcs	r1, r1
 8002180:	44e2      	add	sl, ip
 8002182:	44d0      	add	r8, sl
 8002184:	4249      	negs	r1, r1
 8002186:	4252      	negs	r2, r2
 8002188:	430a      	orrs	r2, r1
 800218a:	45a0      	cmp	r8, r4
 800218c:	41a4      	sbcs	r4, r4
 800218e:	4582      	cmp	sl, r0
 8002190:	4189      	sbcs	r1, r1
 8002192:	4264      	negs	r4, r4
 8002194:	4249      	negs	r1, r1
 8002196:	430c      	orrs	r4, r1
 8002198:	4641      	mov	r1, r8
 800219a:	0c3f      	lsrs	r7, r7, #16
 800219c:	19d2      	adds	r2, r2, r7
 800219e:	1912      	adds	r2, r2, r4
 80021a0:	0dcc      	lsrs	r4, r1, #23
 80021a2:	9904      	ldr	r1, [sp, #16]
 80021a4:	0270      	lsls	r0, r6, #9
 80021a6:	4308      	orrs	r0, r1
 80021a8:	1e41      	subs	r1, r0, #1
 80021aa:	4188      	sbcs	r0, r1
 80021ac:	4641      	mov	r1, r8
 80021ae:	444a      	add	r2, r9
 80021b0:	0df6      	lsrs	r6, r6, #23
 80021b2:	0252      	lsls	r2, r2, #9
 80021b4:	4330      	orrs	r0, r6
 80021b6:	0249      	lsls	r1, r1, #9
 80021b8:	4314      	orrs	r4, r2
 80021ba:	4308      	orrs	r0, r1
 80021bc:	01d2      	lsls	r2, r2, #7
 80021be:	d535      	bpl.n	800222c <__aeabi_dmul+0x514>
 80021c0:	2201      	movs	r2, #1
 80021c2:	0843      	lsrs	r3, r0, #1
 80021c4:	4002      	ands	r2, r0
 80021c6:	4313      	orrs	r3, r2
 80021c8:	07e0      	lsls	r0, r4, #31
 80021ca:	4318      	orrs	r0, r3
 80021cc:	0864      	lsrs	r4, r4, #1
 80021ce:	e634      	b.n	8001e3a <__aeabi_dmul+0x122>
 80021d0:	9b00      	ldr	r3, [sp, #0]
 80021d2:	46a2      	mov	sl, r4
 80021d4:	469b      	mov	fp, r3
 80021d6:	4681      	mov	r9, r0
 80021d8:	2480      	movs	r4, #128	@ 0x80
 80021da:	4653      	mov	r3, sl
 80021dc:	0324      	lsls	r4, r4, #12
 80021de:	431c      	orrs	r4, r3
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	464a      	mov	r2, r9
 80021e4:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <__aeabi_dmul+0x588>)
 80021e6:	0b24      	lsrs	r4, r4, #12
 80021e8:	e5ec      	b.n	8001dc4 <__aeabi_dmul+0xac>
 80021ea:	f000 fd15 	bl	8002c18 <__clzsi2>
 80021ee:	2315      	movs	r3, #21
 80021f0:	469c      	mov	ip, r3
 80021f2:	4484      	add	ip, r0
 80021f4:	0002      	movs	r2, r0
 80021f6:	4663      	mov	r3, ip
 80021f8:	3220      	adds	r2, #32
 80021fa:	2b1c      	cmp	r3, #28
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_dmul+0x4e8>
 80021fe:	e684      	b.n	8001f0a <__aeabi_dmul+0x1f2>
 8002200:	2300      	movs	r3, #0
 8002202:	4699      	mov	r9, r3
 8002204:	0023      	movs	r3, r4
 8002206:	3808      	subs	r0, #8
 8002208:	4083      	lsls	r3, r0
 800220a:	469a      	mov	sl, r3
 800220c:	e68e      	b.n	8001f2c <__aeabi_dmul+0x214>
 800220e:	f000 fd03 	bl	8002c18 <__clzsi2>
 8002212:	0002      	movs	r2, r0
 8002214:	0003      	movs	r3, r0
 8002216:	3215      	adds	r2, #21
 8002218:	3320      	adds	r3, #32
 800221a:	2a1c      	cmp	r2, #28
 800221c:	dc00      	bgt.n	8002220 <__aeabi_dmul+0x508>
 800221e:	e64e      	b.n	8001ebe <__aeabi_dmul+0x1a6>
 8002220:	0002      	movs	r2, r0
 8002222:	0034      	movs	r4, r6
 8002224:	3a08      	subs	r2, #8
 8002226:	2000      	movs	r0, #0
 8002228:	4094      	lsls	r4, r2
 800222a:	e652      	b.n	8001ed2 <__aeabi_dmul+0x1ba>
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	e604      	b.n	8001e3a <__aeabi_dmul+0x122>
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <__aeabi_dmul+0x58c>)
 8002232:	0021      	movs	r1, r4
 8002234:	469c      	mov	ip, r3
 8002236:	0003      	movs	r3, r0
 8002238:	9d01      	ldr	r5, [sp, #4]
 800223a:	40d3      	lsrs	r3, r2
 800223c:	4465      	add	r5, ip
 800223e:	40a9      	lsls	r1, r5
 8002240:	4319      	orrs	r1, r3
 8002242:	0003      	movs	r3, r0
 8002244:	40ab      	lsls	r3, r5
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	4183      	sbcs	r3, r0
 800224a:	4319      	orrs	r1, r3
 800224c:	0008      	movs	r0, r1
 800224e:	40d4      	lsrs	r4, r2
 8002250:	074b      	lsls	r3, r1, #29
 8002252:	d009      	beq.n	8002268 <__aeabi_dmul+0x550>
 8002254:	230f      	movs	r3, #15
 8002256:	400b      	ands	r3, r1
 8002258:	2b04      	cmp	r3, #4
 800225a:	d005      	beq.n	8002268 <__aeabi_dmul+0x550>
 800225c:	1d0b      	adds	r3, r1, #4
 800225e:	428b      	cmp	r3, r1
 8002260:	4180      	sbcs	r0, r0
 8002262:	4240      	negs	r0, r0
 8002264:	1824      	adds	r4, r4, r0
 8002266:	0018      	movs	r0, r3
 8002268:	0223      	lsls	r3, r4, #8
 800226a:	d400      	bmi.n	800226e <__aeabi_dmul+0x556>
 800226c:	e6d6      	b.n	800201c <__aeabi_dmul+0x304>
 800226e:	2301      	movs	r3, #1
 8002270:	2400      	movs	r4, #0
 8002272:	2200      	movs	r2, #0
 8002274:	e5a6      	b.n	8001dc4 <__aeabi_dmul+0xac>
 8002276:	290f      	cmp	r1, #15
 8002278:	d1aa      	bne.n	80021d0 <__aeabi_dmul+0x4b8>
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	4652      	mov	r2, sl
 800227e:	031b      	lsls	r3, r3, #12
 8002280:	421a      	tst	r2, r3
 8002282:	d0a9      	beq.n	80021d8 <__aeabi_dmul+0x4c0>
 8002284:	421c      	tst	r4, r3
 8002286:	d1a7      	bne.n	80021d8 <__aeabi_dmul+0x4c0>
 8002288:	431c      	orrs	r4, r3
 800228a:	9b00      	ldr	r3, [sp, #0]
 800228c:	0002      	movs	r2, r0
 800228e:	469b      	mov	fp, r3
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <__aeabi_dmul+0x588>)
 8002292:	e597      	b.n	8001dc4 <__aeabi_dmul+0xac>
 8002294:	2400      	movs	r4, #0
 8002296:	e6c1      	b.n	800201c <__aeabi_dmul+0x304>
 8002298:	2400      	movs	r4, #0
 800229a:	4b01      	ldr	r3, [pc, #4]	@ (80022a0 <__aeabi_dmul+0x588>)
 800229c:	0022      	movs	r2, r4
 800229e:	e591      	b.n	8001dc4 <__aeabi_dmul+0xac>
 80022a0:	000007ff 	.word	0x000007ff
 80022a4:	0000041e 	.word	0x0000041e

080022a8 <__aeabi_dsub>:
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	464e      	mov	r6, r9
 80022ac:	4645      	mov	r5, r8
 80022ae:	46de      	mov	lr, fp
 80022b0:	4657      	mov	r7, sl
 80022b2:	b5e0      	push	{r5, r6, r7, lr}
 80022b4:	b085      	sub	sp, #20
 80022b6:	9000      	str	r0, [sp, #0]
 80022b8:	9101      	str	r1, [sp, #4]
 80022ba:	030c      	lsls	r4, r1, #12
 80022bc:	004f      	lsls	r7, r1, #1
 80022be:	0fce      	lsrs	r6, r1, #31
 80022c0:	0a61      	lsrs	r1, r4, #9
 80022c2:	9c00      	ldr	r4, [sp, #0]
 80022c4:	46b0      	mov	r8, r6
 80022c6:	0f64      	lsrs	r4, r4, #29
 80022c8:	430c      	orrs	r4, r1
 80022ca:	9900      	ldr	r1, [sp, #0]
 80022cc:	0d7f      	lsrs	r7, r7, #21
 80022ce:	00c8      	lsls	r0, r1, #3
 80022d0:	0011      	movs	r1, r2
 80022d2:	001a      	movs	r2, r3
 80022d4:	031b      	lsls	r3, r3, #12
 80022d6:	469c      	mov	ip, r3
 80022d8:	9100      	str	r1, [sp, #0]
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	0051      	lsls	r1, r2, #1
 80022de:	0d4b      	lsrs	r3, r1, #21
 80022e0:	4699      	mov	r9, r3
 80022e2:	9b01      	ldr	r3, [sp, #4]
 80022e4:	9d00      	ldr	r5, [sp, #0]
 80022e6:	0fd9      	lsrs	r1, r3, #31
 80022e8:	4663      	mov	r3, ip
 80022ea:	0f6a      	lsrs	r2, r5, #29
 80022ec:	0a5b      	lsrs	r3, r3, #9
 80022ee:	4313      	orrs	r3, r2
 80022f0:	00ea      	lsls	r2, r5, #3
 80022f2:	4694      	mov	ip, r2
 80022f4:	4693      	mov	fp, r2
 80022f6:	4ac1      	ldr	r2, [pc, #772]	@ (80025fc <__aeabi_dsub+0x354>)
 80022f8:	9003      	str	r0, [sp, #12]
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	4591      	cmp	r9, r2
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x5a>
 8002300:	e0cd      	b.n	800249e <__aeabi_dsub+0x1f6>
 8002302:	2501      	movs	r5, #1
 8002304:	4069      	eors	r1, r5
 8002306:	464d      	mov	r5, r9
 8002308:	1b7d      	subs	r5, r7, r5
 800230a:	46aa      	mov	sl, r5
 800230c:	428e      	cmp	r6, r1
 800230e:	d100      	bne.n	8002312 <__aeabi_dsub+0x6a>
 8002310:	e080      	b.n	8002414 <__aeabi_dsub+0x16c>
 8002312:	2d00      	cmp	r5, #0
 8002314:	dc00      	bgt.n	8002318 <__aeabi_dsub+0x70>
 8002316:	e335      	b.n	8002984 <__aeabi_dsub+0x6dc>
 8002318:	4649      	mov	r1, r9
 800231a:	2900      	cmp	r1, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x78>
 800231e:	e0df      	b.n	80024e0 <__aeabi_dsub+0x238>
 8002320:	4297      	cmp	r7, r2
 8002322:	d100      	bne.n	8002326 <__aeabi_dsub+0x7e>
 8002324:	e194      	b.n	8002650 <__aeabi_dsub+0x3a8>
 8002326:	4652      	mov	r2, sl
 8002328:	2501      	movs	r5, #1
 800232a:	2a38      	cmp	r2, #56	@ 0x38
 800232c:	dc19      	bgt.n	8002362 <__aeabi_dsub+0xba>
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	9b02      	ldr	r3, [sp, #8]
 8002332:	0412      	lsls	r2, r2, #16
 8002334:	4313      	orrs	r3, r2
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	4652      	mov	r2, sl
 800233a:	2a1f      	cmp	r2, #31
 800233c:	dd00      	ble.n	8002340 <__aeabi_dsub+0x98>
 800233e:	e1e3      	b.n	8002708 <__aeabi_dsub+0x460>
 8002340:	4653      	mov	r3, sl
 8002342:	2220      	movs	r2, #32
 8002344:	4661      	mov	r1, ip
 8002346:	9d02      	ldr	r5, [sp, #8]
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	4095      	lsls	r5, r2
 800234c:	40d9      	lsrs	r1, r3
 800234e:	430d      	orrs	r5, r1
 8002350:	4661      	mov	r1, ip
 8002352:	4091      	lsls	r1, r2
 8002354:	000a      	movs	r2, r1
 8002356:	1e51      	subs	r1, r2, #1
 8002358:	418a      	sbcs	r2, r1
 800235a:	4315      	orrs	r5, r2
 800235c:	9a02      	ldr	r2, [sp, #8]
 800235e:	40da      	lsrs	r2, r3
 8002360:	1aa4      	subs	r4, r4, r2
 8002362:	1b45      	subs	r5, r0, r5
 8002364:	42a8      	cmp	r0, r5
 8002366:	4180      	sbcs	r0, r0
 8002368:	4240      	negs	r0, r0
 800236a:	1a24      	subs	r4, r4, r0
 800236c:	0223      	lsls	r3, r4, #8
 800236e:	d400      	bmi.n	8002372 <__aeabi_dsub+0xca>
 8002370:	e13d      	b.n	80025ee <__aeabi_dsub+0x346>
 8002372:	0264      	lsls	r4, r4, #9
 8002374:	0a64      	lsrs	r4, r4, #9
 8002376:	2c00      	cmp	r4, #0
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0xd4>
 800237a:	e147      	b.n	800260c <__aeabi_dsub+0x364>
 800237c:	0020      	movs	r0, r4
 800237e:	f000 fc4b 	bl	8002c18 <__clzsi2>
 8002382:	0003      	movs	r3, r0
 8002384:	3b08      	subs	r3, #8
 8002386:	2120      	movs	r1, #32
 8002388:	0028      	movs	r0, r5
 800238a:	1aca      	subs	r2, r1, r3
 800238c:	40d0      	lsrs	r0, r2
 800238e:	409c      	lsls	r4, r3
 8002390:	0002      	movs	r2, r0
 8002392:	409d      	lsls	r5, r3
 8002394:	4322      	orrs	r2, r4
 8002396:	429f      	cmp	r7, r3
 8002398:	dd00      	ble.n	800239c <__aeabi_dsub+0xf4>
 800239a:	e177      	b.n	800268c <__aeabi_dsub+0x3e4>
 800239c:	1bd8      	subs	r0, r3, r7
 800239e:	3001      	adds	r0, #1
 80023a0:	1a09      	subs	r1, r1, r0
 80023a2:	002c      	movs	r4, r5
 80023a4:	408d      	lsls	r5, r1
 80023a6:	40c4      	lsrs	r4, r0
 80023a8:	1e6b      	subs	r3, r5, #1
 80023aa:	419d      	sbcs	r5, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	40c2      	lsrs	r2, r0
 80023b0:	408b      	lsls	r3, r1
 80023b2:	4325      	orrs	r5, r4
 80023b4:	2700      	movs	r7, #0
 80023b6:	0014      	movs	r4, r2
 80023b8:	431d      	orrs	r5, r3
 80023ba:	076b      	lsls	r3, r5, #29
 80023bc:	d009      	beq.n	80023d2 <__aeabi_dsub+0x12a>
 80023be:	230f      	movs	r3, #15
 80023c0:	402b      	ands	r3, r5
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d005      	beq.n	80023d2 <__aeabi_dsub+0x12a>
 80023c6:	1d2b      	adds	r3, r5, #4
 80023c8:	42ab      	cmp	r3, r5
 80023ca:	41ad      	sbcs	r5, r5
 80023cc:	426d      	negs	r5, r5
 80023ce:	1964      	adds	r4, r4, r5
 80023d0:	001d      	movs	r5, r3
 80023d2:	0223      	lsls	r3, r4, #8
 80023d4:	d400      	bmi.n	80023d8 <__aeabi_dsub+0x130>
 80023d6:	e140      	b.n	800265a <__aeabi_dsub+0x3b2>
 80023d8:	4a88      	ldr	r2, [pc, #544]	@ (80025fc <__aeabi_dsub+0x354>)
 80023da:	3701      	adds	r7, #1
 80023dc:	4297      	cmp	r7, r2
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x13a>
 80023e0:	e101      	b.n	80025e6 <__aeabi_dsub+0x33e>
 80023e2:	2601      	movs	r6, #1
 80023e4:	4643      	mov	r3, r8
 80023e6:	4986      	ldr	r1, [pc, #536]	@ (8002600 <__aeabi_dsub+0x358>)
 80023e8:	08ed      	lsrs	r5, r5, #3
 80023ea:	4021      	ands	r1, r4
 80023ec:	074a      	lsls	r2, r1, #29
 80023ee:	432a      	orrs	r2, r5
 80023f0:	057c      	lsls	r4, r7, #21
 80023f2:	024d      	lsls	r5, r1, #9
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d64      	lsrs	r4, r4, #21
 80023f8:	401e      	ands	r6, r3
 80023fa:	0524      	lsls	r4, r4, #20
 80023fc:	432c      	orrs	r4, r5
 80023fe:	07f6      	lsls	r6, r6, #31
 8002400:	4334      	orrs	r4, r6
 8002402:	0010      	movs	r0, r2
 8002404:	0021      	movs	r1, r4
 8002406:	b005      	add	sp, #20
 8002408:	bcf0      	pop	{r4, r5, r6, r7}
 800240a:	46bb      	mov	fp, r7
 800240c:	46b2      	mov	sl, r6
 800240e:	46a9      	mov	r9, r5
 8002410:	46a0      	mov	r8, r4
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002414:	2d00      	cmp	r5, #0
 8002416:	dc00      	bgt.n	800241a <__aeabi_dsub+0x172>
 8002418:	e2d0      	b.n	80029bc <__aeabi_dsub+0x714>
 800241a:	4649      	mov	r1, r9
 800241c:	2900      	cmp	r1, #0
 800241e:	d000      	beq.n	8002422 <__aeabi_dsub+0x17a>
 8002420:	e0d4      	b.n	80025cc <__aeabi_dsub+0x324>
 8002422:	4661      	mov	r1, ip
 8002424:	9b02      	ldr	r3, [sp, #8]
 8002426:	4319      	orrs	r1, r3
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x184>
 800242a:	e12b      	b.n	8002684 <__aeabi_dsub+0x3dc>
 800242c:	1e69      	subs	r1, r5, #1
 800242e:	2d01      	cmp	r5, #1
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x18c>
 8002432:	e1d9      	b.n	80027e8 <__aeabi_dsub+0x540>
 8002434:	4295      	cmp	r5, r2
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x192>
 8002438:	e10a      	b.n	8002650 <__aeabi_dsub+0x3a8>
 800243a:	2501      	movs	r5, #1
 800243c:	2938      	cmp	r1, #56	@ 0x38
 800243e:	dc17      	bgt.n	8002470 <__aeabi_dsub+0x1c8>
 8002440:	468a      	mov	sl, r1
 8002442:	4653      	mov	r3, sl
 8002444:	2b1f      	cmp	r3, #31
 8002446:	dd00      	ble.n	800244a <__aeabi_dsub+0x1a2>
 8002448:	e1e7      	b.n	800281a <__aeabi_dsub+0x572>
 800244a:	2220      	movs	r2, #32
 800244c:	1ad2      	subs	r2, r2, r3
 800244e:	9b02      	ldr	r3, [sp, #8]
 8002450:	4661      	mov	r1, ip
 8002452:	4093      	lsls	r3, r2
 8002454:	001d      	movs	r5, r3
 8002456:	4653      	mov	r3, sl
 8002458:	40d9      	lsrs	r1, r3
 800245a:	4663      	mov	r3, ip
 800245c:	4093      	lsls	r3, r2
 800245e:	001a      	movs	r2, r3
 8002460:	430d      	orrs	r5, r1
 8002462:	1e51      	subs	r1, r2, #1
 8002464:	418a      	sbcs	r2, r1
 8002466:	4653      	mov	r3, sl
 8002468:	4315      	orrs	r5, r2
 800246a:	9a02      	ldr	r2, [sp, #8]
 800246c:	40da      	lsrs	r2, r3
 800246e:	18a4      	adds	r4, r4, r2
 8002470:	182d      	adds	r5, r5, r0
 8002472:	4285      	cmp	r5, r0
 8002474:	4180      	sbcs	r0, r0
 8002476:	4240      	negs	r0, r0
 8002478:	1824      	adds	r4, r4, r0
 800247a:	0223      	lsls	r3, r4, #8
 800247c:	d400      	bmi.n	8002480 <__aeabi_dsub+0x1d8>
 800247e:	e0b6      	b.n	80025ee <__aeabi_dsub+0x346>
 8002480:	4b5e      	ldr	r3, [pc, #376]	@ (80025fc <__aeabi_dsub+0x354>)
 8002482:	3701      	adds	r7, #1
 8002484:	429f      	cmp	r7, r3
 8002486:	d100      	bne.n	800248a <__aeabi_dsub+0x1e2>
 8002488:	e0ad      	b.n	80025e6 <__aeabi_dsub+0x33e>
 800248a:	2101      	movs	r1, #1
 800248c:	4b5c      	ldr	r3, [pc, #368]	@ (8002600 <__aeabi_dsub+0x358>)
 800248e:	086a      	lsrs	r2, r5, #1
 8002490:	401c      	ands	r4, r3
 8002492:	4029      	ands	r1, r5
 8002494:	430a      	orrs	r2, r1
 8002496:	07e5      	lsls	r5, r4, #31
 8002498:	4315      	orrs	r5, r2
 800249a:	0864      	lsrs	r4, r4, #1
 800249c:	e78d      	b.n	80023ba <__aeabi_dsub+0x112>
 800249e:	4a59      	ldr	r2, [pc, #356]	@ (8002604 <__aeabi_dsub+0x35c>)
 80024a0:	9b02      	ldr	r3, [sp, #8]
 80024a2:	4692      	mov	sl, r2
 80024a4:	4662      	mov	r2, ip
 80024a6:	44ba      	add	sl, r7
 80024a8:	431a      	orrs	r2, r3
 80024aa:	d02c      	beq.n	8002506 <__aeabi_dsub+0x25e>
 80024ac:	428e      	cmp	r6, r1
 80024ae:	d02e      	beq.n	800250e <__aeabi_dsub+0x266>
 80024b0:	4652      	mov	r2, sl
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d060      	beq.n	8002578 <__aeabi_dsub+0x2d0>
 80024b6:	2f00      	cmp	r7, #0
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x214>
 80024ba:	e0db      	b.n	8002674 <__aeabi_dsub+0x3cc>
 80024bc:	4663      	mov	r3, ip
 80024be:	000e      	movs	r6, r1
 80024c0:	9c02      	ldr	r4, [sp, #8]
 80024c2:	08d8      	lsrs	r0, r3, #3
 80024c4:	0762      	lsls	r2, r4, #29
 80024c6:	4302      	orrs	r2, r0
 80024c8:	08e4      	lsrs	r4, r4, #3
 80024ca:	0013      	movs	r3, r2
 80024cc:	4323      	orrs	r3, r4
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x22a>
 80024d0:	e254      	b.n	800297c <__aeabi_dsub+0x6d4>
 80024d2:	2580      	movs	r5, #128	@ 0x80
 80024d4:	032d      	lsls	r5, r5, #12
 80024d6:	4325      	orrs	r5, r4
 80024d8:	032d      	lsls	r5, r5, #12
 80024da:	4c48      	ldr	r4, [pc, #288]	@ (80025fc <__aeabi_dsub+0x354>)
 80024dc:	0b2d      	lsrs	r5, r5, #12
 80024de:	e78c      	b.n	80023fa <__aeabi_dsub+0x152>
 80024e0:	4661      	mov	r1, ip
 80024e2:	9b02      	ldr	r3, [sp, #8]
 80024e4:	4319      	orrs	r1, r3
 80024e6:	d100      	bne.n	80024ea <__aeabi_dsub+0x242>
 80024e8:	e0cc      	b.n	8002684 <__aeabi_dsub+0x3dc>
 80024ea:	0029      	movs	r1, r5
 80024ec:	3901      	subs	r1, #1
 80024ee:	2d01      	cmp	r5, #1
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x24c>
 80024f2:	e188      	b.n	8002806 <__aeabi_dsub+0x55e>
 80024f4:	4295      	cmp	r5, r2
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x252>
 80024f8:	e0aa      	b.n	8002650 <__aeabi_dsub+0x3a8>
 80024fa:	2501      	movs	r5, #1
 80024fc:	2938      	cmp	r1, #56	@ 0x38
 80024fe:	dd00      	ble.n	8002502 <__aeabi_dsub+0x25a>
 8002500:	e72f      	b.n	8002362 <__aeabi_dsub+0xba>
 8002502:	468a      	mov	sl, r1
 8002504:	e718      	b.n	8002338 <__aeabi_dsub+0x90>
 8002506:	2201      	movs	r2, #1
 8002508:	4051      	eors	r1, r2
 800250a:	428e      	cmp	r6, r1
 800250c:	d1d0      	bne.n	80024b0 <__aeabi_dsub+0x208>
 800250e:	4653      	mov	r3, sl
 8002510:	2b00      	cmp	r3, #0
 8002512:	d100      	bne.n	8002516 <__aeabi_dsub+0x26e>
 8002514:	e0be      	b.n	8002694 <__aeabi_dsub+0x3ec>
 8002516:	2f00      	cmp	r7, #0
 8002518:	d000      	beq.n	800251c <__aeabi_dsub+0x274>
 800251a:	e138      	b.n	800278e <__aeabi_dsub+0x4e6>
 800251c:	46ca      	mov	sl, r9
 800251e:	0022      	movs	r2, r4
 8002520:	4302      	orrs	r2, r0
 8002522:	d100      	bne.n	8002526 <__aeabi_dsub+0x27e>
 8002524:	e1e2      	b.n	80028ec <__aeabi_dsub+0x644>
 8002526:	4653      	mov	r3, sl
 8002528:	1e59      	subs	r1, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x288>
 800252e:	e20d      	b.n	800294c <__aeabi_dsub+0x6a4>
 8002530:	4a32      	ldr	r2, [pc, #200]	@ (80025fc <__aeabi_dsub+0x354>)
 8002532:	4592      	cmp	sl, r2
 8002534:	d100      	bne.n	8002538 <__aeabi_dsub+0x290>
 8002536:	e1d2      	b.n	80028de <__aeabi_dsub+0x636>
 8002538:	2701      	movs	r7, #1
 800253a:	2938      	cmp	r1, #56	@ 0x38
 800253c:	dc13      	bgt.n	8002566 <__aeabi_dsub+0x2be>
 800253e:	291f      	cmp	r1, #31
 8002540:	dd00      	ble.n	8002544 <__aeabi_dsub+0x29c>
 8002542:	e1ee      	b.n	8002922 <__aeabi_dsub+0x67a>
 8002544:	2220      	movs	r2, #32
 8002546:	9b02      	ldr	r3, [sp, #8]
 8002548:	1a52      	subs	r2, r2, r1
 800254a:	0025      	movs	r5, r4
 800254c:	0007      	movs	r7, r0
 800254e:	469a      	mov	sl, r3
 8002550:	40cc      	lsrs	r4, r1
 8002552:	4090      	lsls	r0, r2
 8002554:	4095      	lsls	r5, r2
 8002556:	40cf      	lsrs	r7, r1
 8002558:	44a2      	add	sl, r4
 800255a:	1e42      	subs	r2, r0, #1
 800255c:	4190      	sbcs	r0, r2
 800255e:	4653      	mov	r3, sl
 8002560:	432f      	orrs	r7, r5
 8002562:	4307      	orrs	r7, r0
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	003d      	movs	r5, r7
 8002568:	4465      	add	r5, ip
 800256a:	4565      	cmp	r5, ip
 800256c:	4192      	sbcs	r2, r2
 800256e:	9b02      	ldr	r3, [sp, #8]
 8002570:	4252      	negs	r2, r2
 8002572:	464f      	mov	r7, r9
 8002574:	18d4      	adds	r4, r2, r3
 8002576:	e780      	b.n	800247a <__aeabi_dsub+0x1d2>
 8002578:	4a23      	ldr	r2, [pc, #140]	@ (8002608 <__aeabi_dsub+0x360>)
 800257a:	1c7d      	adds	r5, r7, #1
 800257c:	4215      	tst	r5, r2
 800257e:	d000      	beq.n	8002582 <__aeabi_dsub+0x2da>
 8002580:	e0aa      	b.n	80026d8 <__aeabi_dsub+0x430>
 8002582:	4662      	mov	r2, ip
 8002584:	0025      	movs	r5, r4
 8002586:	9b02      	ldr	r3, [sp, #8]
 8002588:	4305      	orrs	r5, r0
 800258a:	431a      	orrs	r2, r3
 800258c:	2f00      	cmp	r7, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dsub+0x2ea>
 8002590:	e0f5      	b.n	800277e <__aeabi_dsub+0x4d6>
 8002592:	2d00      	cmp	r5, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x2f0>
 8002596:	e16b      	b.n	8002870 <__aeabi_dsub+0x5c8>
 8002598:	2a00      	cmp	r2, #0
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x2f6>
 800259c:	e152      	b.n	8002844 <__aeabi_dsub+0x59c>
 800259e:	4663      	mov	r3, ip
 80025a0:	1ac5      	subs	r5, r0, r3
 80025a2:	9b02      	ldr	r3, [sp, #8]
 80025a4:	1ae2      	subs	r2, r4, r3
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	419b      	sbcs	r3, r3
 80025aa:	425b      	negs	r3, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_dsub+0x30c>
 80025b2:	e1d5      	b.n	8002960 <__aeabi_dsub+0x6b8>
 80025b4:	4663      	mov	r3, ip
 80025b6:	1a1d      	subs	r5, r3, r0
 80025b8:	45ac      	cmp	ip, r5
 80025ba:	4192      	sbcs	r2, r2
 80025bc:	2601      	movs	r6, #1
 80025be:	9b02      	ldr	r3, [sp, #8]
 80025c0:	4252      	negs	r2, r2
 80025c2:	1b1c      	subs	r4, r3, r4
 80025c4:	4688      	mov	r8, r1
 80025c6:	1aa4      	subs	r4, r4, r2
 80025c8:	400e      	ands	r6, r1
 80025ca:	e6f6      	b.n	80023ba <__aeabi_dsub+0x112>
 80025cc:	4297      	cmp	r7, r2
 80025ce:	d03f      	beq.n	8002650 <__aeabi_dsub+0x3a8>
 80025d0:	4652      	mov	r2, sl
 80025d2:	2501      	movs	r5, #1
 80025d4:	2a38      	cmp	r2, #56	@ 0x38
 80025d6:	dd00      	ble.n	80025da <__aeabi_dsub+0x332>
 80025d8:	e74a      	b.n	8002470 <__aeabi_dsub+0x1c8>
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	9b02      	ldr	r3, [sp, #8]
 80025de:	0412      	lsls	r2, r2, #16
 80025e0:	4313      	orrs	r3, r2
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	e72d      	b.n	8002442 <__aeabi_dsub+0x19a>
 80025e6:	003c      	movs	r4, r7
 80025e8:	2500      	movs	r5, #0
 80025ea:	2200      	movs	r2, #0
 80025ec:	e705      	b.n	80023fa <__aeabi_dsub+0x152>
 80025ee:	2307      	movs	r3, #7
 80025f0:	402b      	ands	r3, r5
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d000      	beq.n	80025f8 <__aeabi_dsub+0x350>
 80025f6:	e6e2      	b.n	80023be <__aeabi_dsub+0x116>
 80025f8:	e06b      	b.n	80026d2 <__aeabi_dsub+0x42a>
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	000007ff 	.word	0x000007ff
 8002600:	ff7fffff 	.word	0xff7fffff
 8002604:	fffff801 	.word	0xfffff801
 8002608:	000007fe 	.word	0x000007fe
 800260c:	0028      	movs	r0, r5
 800260e:	f000 fb03 	bl	8002c18 <__clzsi2>
 8002612:	0003      	movs	r3, r0
 8002614:	3318      	adds	r3, #24
 8002616:	2b1f      	cmp	r3, #31
 8002618:	dc00      	bgt.n	800261c <__aeabi_dsub+0x374>
 800261a:	e6b4      	b.n	8002386 <__aeabi_dsub+0xde>
 800261c:	002a      	movs	r2, r5
 800261e:	3808      	subs	r0, #8
 8002620:	4082      	lsls	r2, r0
 8002622:	429f      	cmp	r7, r3
 8002624:	dd00      	ble.n	8002628 <__aeabi_dsub+0x380>
 8002626:	e0b9      	b.n	800279c <__aeabi_dsub+0x4f4>
 8002628:	1bdb      	subs	r3, r3, r7
 800262a:	1c58      	adds	r0, r3, #1
 800262c:	281f      	cmp	r0, #31
 800262e:	dc00      	bgt.n	8002632 <__aeabi_dsub+0x38a>
 8002630:	e1a0      	b.n	8002974 <__aeabi_dsub+0x6cc>
 8002632:	0015      	movs	r5, r2
 8002634:	3b1f      	subs	r3, #31
 8002636:	40dd      	lsrs	r5, r3
 8002638:	2820      	cmp	r0, #32
 800263a:	d005      	beq.n	8002648 <__aeabi_dsub+0x3a0>
 800263c:	2340      	movs	r3, #64	@ 0x40
 800263e:	1a1b      	subs	r3, r3, r0
 8002640:	409a      	lsls	r2, r3
 8002642:	1e53      	subs	r3, r2, #1
 8002644:	419a      	sbcs	r2, r3
 8002646:	4315      	orrs	r5, r2
 8002648:	2307      	movs	r3, #7
 800264a:	2700      	movs	r7, #0
 800264c:	402b      	ands	r3, r5
 800264e:	e7d0      	b.n	80025f2 <__aeabi_dsub+0x34a>
 8002650:	08c0      	lsrs	r0, r0, #3
 8002652:	0762      	lsls	r2, r4, #29
 8002654:	4302      	orrs	r2, r0
 8002656:	08e4      	lsrs	r4, r4, #3
 8002658:	e737      	b.n	80024ca <__aeabi_dsub+0x222>
 800265a:	08ea      	lsrs	r2, r5, #3
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	431a      	orrs	r2, r3
 8002660:	4bd3      	ldr	r3, [pc, #844]	@ (80029b0 <__aeabi_dsub+0x708>)
 8002662:	08e4      	lsrs	r4, r4, #3
 8002664:	429f      	cmp	r7, r3
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x3c2>
 8002668:	e72f      	b.n	80024ca <__aeabi_dsub+0x222>
 800266a:	0324      	lsls	r4, r4, #12
 800266c:	0b25      	lsrs	r5, r4, #12
 800266e:	057c      	lsls	r4, r7, #21
 8002670:	0d64      	lsrs	r4, r4, #21
 8002672:	e6c2      	b.n	80023fa <__aeabi_dsub+0x152>
 8002674:	46ca      	mov	sl, r9
 8002676:	0022      	movs	r2, r4
 8002678:	4302      	orrs	r2, r0
 800267a:	d158      	bne.n	800272e <__aeabi_dsub+0x486>
 800267c:	4663      	mov	r3, ip
 800267e:	000e      	movs	r6, r1
 8002680:	9c02      	ldr	r4, [sp, #8]
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	9b03      	ldr	r3, [sp, #12]
 8002686:	4657      	mov	r7, sl
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	e7e7      	b.n	800265c <__aeabi_dsub+0x3b4>
 800268c:	4cc9      	ldr	r4, [pc, #804]	@ (80029b4 <__aeabi_dsub+0x70c>)
 800268e:	1aff      	subs	r7, r7, r3
 8002690:	4014      	ands	r4, r2
 8002692:	e692      	b.n	80023ba <__aeabi_dsub+0x112>
 8002694:	4dc8      	ldr	r5, [pc, #800]	@ (80029b8 <__aeabi_dsub+0x710>)
 8002696:	1c7a      	adds	r2, r7, #1
 8002698:	422a      	tst	r2, r5
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x3f6>
 800269c:	e084      	b.n	80027a8 <__aeabi_dsub+0x500>
 800269e:	0022      	movs	r2, r4
 80026a0:	4302      	orrs	r2, r0
 80026a2:	2f00      	cmp	r7, #0
 80026a4:	d000      	beq.n	80026a8 <__aeabi_dsub+0x400>
 80026a6:	e0ef      	b.n	8002888 <__aeabi_dsub+0x5e0>
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dsub+0x406>
 80026ac:	e0e5      	b.n	800287a <__aeabi_dsub+0x5d2>
 80026ae:	4662      	mov	r2, ip
 80026b0:	9902      	ldr	r1, [sp, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0x410>
 80026b6:	e0c5      	b.n	8002844 <__aeabi_dsub+0x59c>
 80026b8:	4663      	mov	r3, ip
 80026ba:	18c5      	adds	r5, r0, r3
 80026bc:	468c      	mov	ip, r1
 80026be:	4285      	cmp	r5, r0
 80026c0:	4180      	sbcs	r0, r0
 80026c2:	4464      	add	r4, ip
 80026c4:	4240      	negs	r0, r0
 80026c6:	1824      	adds	r4, r4, r0
 80026c8:	0223      	lsls	r3, r4, #8
 80026ca:	d502      	bpl.n	80026d2 <__aeabi_dsub+0x42a>
 80026cc:	4bb9      	ldr	r3, [pc, #740]	@ (80029b4 <__aeabi_dsub+0x70c>)
 80026ce:	3701      	adds	r7, #1
 80026d0:	401c      	ands	r4, r3
 80026d2:	46ba      	mov	sl, r7
 80026d4:	9503      	str	r5, [sp, #12]
 80026d6:	e7d5      	b.n	8002684 <__aeabi_dsub+0x3dc>
 80026d8:	4662      	mov	r2, ip
 80026da:	1a85      	subs	r5, r0, r2
 80026dc:	42a8      	cmp	r0, r5
 80026de:	4192      	sbcs	r2, r2
 80026e0:	4252      	negs	r2, r2
 80026e2:	4691      	mov	r9, r2
 80026e4:	9b02      	ldr	r3, [sp, #8]
 80026e6:	1ae3      	subs	r3, r4, r3
 80026e8:	001a      	movs	r2, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	4691      	mov	r9, r2
 80026f2:	021a      	lsls	r2, r3, #8
 80026f4:	d46c      	bmi.n	80027d0 <__aeabi_dsub+0x528>
 80026f6:	464a      	mov	r2, r9
 80026f8:	464c      	mov	r4, r9
 80026fa:	432a      	orrs	r2, r5
 80026fc:	d000      	beq.n	8002700 <__aeabi_dsub+0x458>
 80026fe:	e63a      	b.n	8002376 <__aeabi_dsub+0xce>
 8002700:	2600      	movs	r6, #0
 8002702:	2400      	movs	r4, #0
 8002704:	2500      	movs	r5, #0
 8002706:	e678      	b.n	80023fa <__aeabi_dsub+0x152>
 8002708:	9902      	ldr	r1, [sp, #8]
 800270a:	4653      	mov	r3, sl
 800270c:	000d      	movs	r5, r1
 800270e:	3a20      	subs	r2, #32
 8002710:	40d5      	lsrs	r5, r2
 8002712:	2b20      	cmp	r3, #32
 8002714:	d006      	beq.n	8002724 <__aeabi_dsub+0x47c>
 8002716:	2240      	movs	r2, #64	@ 0x40
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	000b      	movs	r3, r1
 800271c:	4093      	lsls	r3, r2
 800271e:	4662      	mov	r2, ip
 8002720:	431a      	orrs	r2, r3
 8002722:	4693      	mov	fp, r2
 8002724:	465b      	mov	r3, fp
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	4193      	sbcs	r3, r2
 800272a:	431d      	orrs	r5, r3
 800272c:	e619      	b.n	8002362 <__aeabi_dsub+0xba>
 800272e:	4653      	mov	r3, sl
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x490>
 8002736:	e0c6      	b.n	80028c6 <__aeabi_dsub+0x61e>
 8002738:	4e9d      	ldr	r6, [pc, #628]	@ (80029b0 <__aeabi_dsub+0x708>)
 800273a:	45b2      	cmp	sl, r6
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x498>
 800273e:	e6bd      	b.n	80024bc <__aeabi_dsub+0x214>
 8002740:	4688      	mov	r8, r1
 8002742:	000e      	movs	r6, r1
 8002744:	2501      	movs	r5, #1
 8002746:	2a38      	cmp	r2, #56	@ 0x38
 8002748:	dc10      	bgt.n	800276c <__aeabi_dsub+0x4c4>
 800274a:	2a1f      	cmp	r2, #31
 800274c:	dc7f      	bgt.n	800284e <__aeabi_dsub+0x5a6>
 800274e:	2120      	movs	r1, #32
 8002750:	0025      	movs	r5, r4
 8002752:	1a89      	subs	r1, r1, r2
 8002754:	0007      	movs	r7, r0
 8002756:	4088      	lsls	r0, r1
 8002758:	408d      	lsls	r5, r1
 800275a:	40d7      	lsrs	r7, r2
 800275c:	40d4      	lsrs	r4, r2
 800275e:	1e41      	subs	r1, r0, #1
 8002760:	4188      	sbcs	r0, r1
 8002762:	9b02      	ldr	r3, [sp, #8]
 8002764:	433d      	orrs	r5, r7
 8002766:	1b1b      	subs	r3, r3, r4
 8002768:	4305      	orrs	r5, r0
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	4662      	mov	r2, ip
 800276e:	1b55      	subs	r5, r2, r5
 8002770:	45ac      	cmp	ip, r5
 8002772:	4192      	sbcs	r2, r2
 8002774:	9b02      	ldr	r3, [sp, #8]
 8002776:	4252      	negs	r2, r2
 8002778:	464f      	mov	r7, r9
 800277a:	1a9c      	subs	r4, r3, r2
 800277c:	e5f6      	b.n	800236c <__aeabi_dsub+0xc4>
 800277e:	2d00      	cmp	r5, #0
 8002780:	d000      	beq.n	8002784 <__aeabi_dsub+0x4dc>
 8002782:	e0b7      	b.n	80028f4 <__aeabi_dsub+0x64c>
 8002784:	2a00      	cmp	r2, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x4e2>
 8002788:	e0f0      	b.n	800296c <__aeabi_dsub+0x6c4>
 800278a:	2601      	movs	r6, #1
 800278c:	400e      	ands	r6, r1
 800278e:	4663      	mov	r3, ip
 8002790:	9802      	ldr	r0, [sp, #8]
 8002792:	08d9      	lsrs	r1, r3, #3
 8002794:	0742      	lsls	r2, r0, #29
 8002796:	430a      	orrs	r2, r1
 8002798:	08c4      	lsrs	r4, r0, #3
 800279a:	e696      	b.n	80024ca <__aeabi_dsub+0x222>
 800279c:	4c85      	ldr	r4, [pc, #532]	@ (80029b4 <__aeabi_dsub+0x70c>)
 800279e:	1aff      	subs	r7, r7, r3
 80027a0:	4014      	ands	r4, r2
 80027a2:	0762      	lsls	r2, r4, #29
 80027a4:	08e4      	lsrs	r4, r4, #3
 80027a6:	e760      	b.n	800266a <__aeabi_dsub+0x3c2>
 80027a8:	4981      	ldr	r1, [pc, #516]	@ (80029b0 <__aeabi_dsub+0x708>)
 80027aa:	428a      	cmp	r2, r1
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x508>
 80027ae:	e0c9      	b.n	8002944 <__aeabi_dsub+0x69c>
 80027b0:	4663      	mov	r3, ip
 80027b2:	18c1      	adds	r1, r0, r3
 80027b4:	4281      	cmp	r1, r0
 80027b6:	4180      	sbcs	r0, r0
 80027b8:	9b02      	ldr	r3, [sp, #8]
 80027ba:	4240      	negs	r0, r0
 80027bc:	18e3      	adds	r3, r4, r3
 80027be:	181b      	adds	r3, r3, r0
 80027c0:	07dd      	lsls	r5, r3, #31
 80027c2:	085c      	lsrs	r4, r3, #1
 80027c4:	2307      	movs	r3, #7
 80027c6:	0849      	lsrs	r1, r1, #1
 80027c8:	430d      	orrs	r5, r1
 80027ca:	0017      	movs	r7, r2
 80027cc:	402b      	ands	r3, r5
 80027ce:	e710      	b.n	80025f2 <__aeabi_dsub+0x34a>
 80027d0:	4663      	mov	r3, ip
 80027d2:	1a1d      	subs	r5, r3, r0
 80027d4:	45ac      	cmp	ip, r5
 80027d6:	4192      	sbcs	r2, r2
 80027d8:	2601      	movs	r6, #1
 80027da:	9b02      	ldr	r3, [sp, #8]
 80027dc:	4252      	negs	r2, r2
 80027de:	1b1c      	subs	r4, r3, r4
 80027e0:	4688      	mov	r8, r1
 80027e2:	1aa4      	subs	r4, r4, r2
 80027e4:	400e      	ands	r6, r1
 80027e6:	e5c6      	b.n	8002376 <__aeabi_dsub+0xce>
 80027e8:	4663      	mov	r3, ip
 80027ea:	18c5      	adds	r5, r0, r3
 80027ec:	9b02      	ldr	r3, [sp, #8]
 80027ee:	4285      	cmp	r5, r0
 80027f0:	4180      	sbcs	r0, r0
 80027f2:	469c      	mov	ip, r3
 80027f4:	4240      	negs	r0, r0
 80027f6:	4464      	add	r4, ip
 80027f8:	1824      	adds	r4, r4, r0
 80027fa:	2701      	movs	r7, #1
 80027fc:	0223      	lsls	r3, r4, #8
 80027fe:	d400      	bmi.n	8002802 <__aeabi_dsub+0x55a>
 8002800:	e6f5      	b.n	80025ee <__aeabi_dsub+0x346>
 8002802:	2702      	movs	r7, #2
 8002804:	e641      	b.n	800248a <__aeabi_dsub+0x1e2>
 8002806:	4663      	mov	r3, ip
 8002808:	1ac5      	subs	r5, r0, r3
 800280a:	42a8      	cmp	r0, r5
 800280c:	4180      	sbcs	r0, r0
 800280e:	9b02      	ldr	r3, [sp, #8]
 8002810:	4240      	negs	r0, r0
 8002812:	1ae4      	subs	r4, r4, r3
 8002814:	2701      	movs	r7, #1
 8002816:	1a24      	subs	r4, r4, r0
 8002818:	e5a8      	b.n	800236c <__aeabi_dsub+0xc4>
 800281a:	9d02      	ldr	r5, [sp, #8]
 800281c:	4652      	mov	r2, sl
 800281e:	002b      	movs	r3, r5
 8002820:	3a20      	subs	r2, #32
 8002822:	40d3      	lsrs	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	4653      	mov	r3, sl
 8002828:	2b20      	cmp	r3, #32
 800282a:	d006      	beq.n	800283a <__aeabi_dsub+0x592>
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	002b      	movs	r3, r5
 8002832:	4093      	lsls	r3, r2
 8002834:	4662      	mov	r2, ip
 8002836:	431a      	orrs	r2, r3
 8002838:	4693      	mov	fp, r2
 800283a:	465d      	mov	r5, fp
 800283c:	1e6b      	subs	r3, r5, #1
 800283e:	419d      	sbcs	r5, r3
 8002840:	430d      	orrs	r5, r1
 8002842:	e615      	b.n	8002470 <__aeabi_dsub+0x1c8>
 8002844:	0762      	lsls	r2, r4, #29
 8002846:	08c0      	lsrs	r0, r0, #3
 8002848:	4302      	orrs	r2, r0
 800284a:	08e4      	lsrs	r4, r4, #3
 800284c:	e70d      	b.n	800266a <__aeabi_dsub+0x3c2>
 800284e:	0011      	movs	r1, r2
 8002850:	0027      	movs	r7, r4
 8002852:	3920      	subs	r1, #32
 8002854:	40cf      	lsrs	r7, r1
 8002856:	2a20      	cmp	r2, #32
 8002858:	d005      	beq.n	8002866 <__aeabi_dsub+0x5be>
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	1a8a      	subs	r2, r1, r2
 800285e:	4094      	lsls	r4, r2
 8002860:	0025      	movs	r5, r4
 8002862:	4305      	orrs	r5, r0
 8002864:	9503      	str	r5, [sp, #12]
 8002866:	9d03      	ldr	r5, [sp, #12]
 8002868:	1e6a      	subs	r2, r5, #1
 800286a:	4195      	sbcs	r5, r2
 800286c:	433d      	orrs	r5, r7
 800286e:	e77d      	b.n	800276c <__aeabi_dsub+0x4c4>
 8002870:	2a00      	cmp	r2, #0
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x5ce>
 8002874:	e744      	b.n	8002700 <__aeabi_dsub+0x458>
 8002876:	2601      	movs	r6, #1
 8002878:	400e      	ands	r6, r1
 800287a:	4663      	mov	r3, ip
 800287c:	08d9      	lsrs	r1, r3, #3
 800287e:	9b02      	ldr	r3, [sp, #8]
 8002880:	075a      	lsls	r2, r3, #29
 8002882:	430a      	orrs	r2, r1
 8002884:	08dc      	lsrs	r4, r3, #3
 8002886:	e6f0      	b.n	800266a <__aeabi_dsub+0x3c2>
 8002888:	2a00      	cmp	r2, #0
 800288a:	d028      	beq.n	80028de <__aeabi_dsub+0x636>
 800288c:	4662      	mov	r2, ip
 800288e:	9f02      	ldr	r7, [sp, #8]
 8002890:	08c0      	lsrs	r0, r0, #3
 8002892:	433a      	orrs	r2, r7
 8002894:	d100      	bne.n	8002898 <__aeabi_dsub+0x5f0>
 8002896:	e6dc      	b.n	8002652 <__aeabi_dsub+0x3aa>
 8002898:	0762      	lsls	r2, r4, #29
 800289a:	4310      	orrs	r0, r2
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	08e4      	lsrs	r4, r4, #3
 80028a0:	0312      	lsls	r2, r2, #12
 80028a2:	4214      	tst	r4, r2
 80028a4:	d009      	beq.n	80028ba <__aeabi_dsub+0x612>
 80028a6:	08fd      	lsrs	r5, r7, #3
 80028a8:	4215      	tst	r5, r2
 80028aa:	d106      	bne.n	80028ba <__aeabi_dsub+0x612>
 80028ac:	4663      	mov	r3, ip
 80028ae:	2601      	movs	r6, #1
 80028b0:	002c      	movs	r4, r5
 80028b2:	08d8      	lsrs	r0, r3, #3
 80028b4:	077b      	lsls	r3, r7, #29
 80028b6:	4318      	orrs	r0, r3
 80028b8:	400e      	ands	r6, r1
 80028ba:	0f42      	lsrs	r2, r0, #29
 80028bc:	00c0      	lsls	r0, r0, #3
 80028be:	08c0      	lsrs	r0, r0, #3
 80028c0:	0752      	lsls	r2, r2, #29
 80028c2:	4302      	orrs	r2, r0
 80028c4:	e601      	b.n	80024ca <__aeabi_dsub+0x222>
 80028c6:	4663      	mov	r3, ip
 80028c8:	1a1d      	subs	r5, r3, r0
 80028ca:	45ac      	cmp	ip, r5
 80028cc:	4192      	sbcs	r2, r2
 80028ce:	9b02      	ldr	r3, [sp, #8]
 80028d0:	4252      	negs	r2, r2
 80028d2:	1b1c      	subs	r4, r3, r4
 80028d4:	000e      	movs	r6, r1
 80028d6:	4688      	mov	r8, r1
 80028d8:	2701      	movs	r7, #1
 80028da:	1aa4      	subs	r4, r4, r2
 80028dc:	e546      	b.n	800236c <__aeabi_dsub+0xc4>
 80028de:	4663      	mov	r3, ip
 80028e0:	08d9      	lsrs	r1, r3, #3
 80028e2:	9b02      	ldr	r3, [sp, #8]
 80028e4:	075a      	lsls	r2, r3, #29
 80028e6:	430a      	orrs	r2, r1
 80028e8:	08dc      	lsrs	r4, r3, #3
 80028ea:	e5ee      	b.n	80024ca <__aeabi_dsub+0x222>
 80028ec:	4663      	mov	r3, ip
 80028ee:	9c02      	ldr	r4, [sp, #8]
 80028f0:	9303      	str	r3, [sp, #12]
 80028f2:	e6c7      	b.n	8002684 <__aeabi_dsub+0x3dc>
 80028f4:	08c0      	lsrs	r0, r0, #3
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x654>
 80028fa:	e6aa      	b.n	8002652 <__aeabi_dsub+0x3aa>
 80028fc:	0762      	lsls	r2, r4, #29
 80028fe:	4310      	orrs	r0, r2
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	08e4      	lsrs	r4, r4, #3
 8002904:	0312      	lsls	r2, r2, #12
 8002906:	4214      	tst	r4, r2
 8002908:	d0d7      	beq.n	80028ba <__aeabi_dsub+0x612>
 800290a:	9f02      	ldr	r7, [sp, #8]
 800290c:	08fd      	lsrs	r5, r7, #3
 800290e:	4215      	tst	r5, r2
 8002910:	d1d3      	bne.n	80028ba <__aeabi_dsub+0x612>
 8002912:	4663      	mov	r3, ip
 8002914:	2601      	movs	r6, #1
 8002916:	08d8      	lsrs	r0, r3, #3
 8002918:	077b      	lsls	r3, r7, #29
 800291a:	002c      	movs	r4, r5
 800291c:	4318      	orrs	r0, r3
 800291e:	400e      	ands	r6, r1
 8002920:	e7cb      	b.n	80028ba <__aeabi_dsub+0x612>
 8002922:	000a      	movs	r2, r1
 8002924:	0027      	movs	r7, r4
 8002926:	3a20      	subs	r2, #32
 8002928:	40d7      	lsrs	r7, r2
 800292a:	2920      	cmp	r1, #32
 800292c:	d005      	beq.n	800293a <__aeabi_dsub+0x692>
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	1a52      	subs	r2, r2, r1
 8002932:	4094      	lsls	r4, r2
 8002934:	0025      	movs	r5, r4
 8002936:	4305      	orrs	r5, r0
 8002938:	9503      	str	r5, [sp, #12]
 800293a:	9d03      	ldr	r5, [sp, #12]
 800293c:	1e6a      	subs	r2, r5, #1
 800293e:	4195      	sbcs	r5, r2
 8002940:	432f      	orrs	r7, r5
 8002942:	e610      	b.n	8002566 <__aeabi_dsub+0x2be>
 8002944:	0014      	movs	r4, r2
 8002946:	2500      	movs	r5, #0
 8002948:	2200      	movs	r2, #0
 800294a:	e556      	b.n	80023fa <__aeabi_dsub+0x152>
 800294c:	9b02      	ldr	r3, [sp, #8]
 800294e:	4460      	add	r0, ip
 8002950:	4699      	mov	r9, r3
 8002952:	4560      	cmp	r0, ip
 8002954:	4192      	sbcs	r2, r2
 8002956:	444c      	add	r4, r9
 8002958:	4252      	negs	r2, r2
 800295a:	0005      	movs	r5, r0
 800295c:	18a4      	adds	r4, r4, r2
 800295e:	e74c      	b.n	80027fa <__aeabi_dsub+0x552>
 8002960:	001a      	movs	r2, r3
 8002962:	001c      	movs	r4, r3
 8002964:	432a      	orrs	r2, r5
 8002966:	d000      	beq.n	800296a <__aeabi_dsub+0x6c2>
 8002968:	e6b3      	b.n	80026d2 <__aeabi_dsub+0x42a>
 800296a:	e6c9      	b.n	8002700 <__aeabi_dsub+0x458>
 800296c:	2480      	movs	r4, #128	@ 0x80
 800296e:	2600      	movs	r6, #0
 8002970:	0324      	lsls	r4, r4, #12
 8002972:	e5ae      	b.n	80024d2 <__aeabi_dsub+0x22a>
 8002974:	2120      	movs	r1, #32
 8002976:	2500      	movs	r5, #0
 8002978:	1a09      	subs	r1, r1, r0
 800297a:	e517      	b.n	80023ac <__aeabi_dsub+0x104>
 800297c:	2200      	movs	r2, #0
 800297e:	2500      	movs	r5, #0
 8002980:	4c0b      	ldr	r4, [pc, #44]	@ (80029b0 <__aeabi_dsub+0x708>)
 8002982:	e53a      	b.n	80023fa <__aeabi_dsub+0x152>
 8002984:	2d00      	cmp	r5, #0
 8002986:	d100      	bne.n	800298a <__aeabi_dsub+0x6e2>
 8002988:	e5f6      	b.n	8002578 <__aeabi_dsub+0x2d0>
 800298a:	464b      	mov	r3, r9
 800298c:	1bda      	subs	r2, r3, r7
 800298e:	4692      	mov	sl, r2
 8002990:	2f00      	cmp	r7, #0
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x6ee>
 8002994:	e66f      	b.n	8002676 <__aeabi_dsub+0x3ce>
 8002996:	2a38      	cmp	r2, #56	@ 0x38
 8002998:	dc05      	bgt.n	80029a6 <__aeabi_dsub+0x6fe>
 800299a:	2680      	movs	r6, #128	@ 0x80
 800299c:	0436      	lsls	r6, r6, #16
 800299e:	4334      	orrs	r4, r6
 80029a0:	4688      	mov	r8, r1
 80029a2:	000e      	movs	r6, r1
 80029a4:	e6d1      	b.n	800274a <__aeabi_dsub+0x4a2>
 80029a6:	4688      	mov	r8, r1
 80029a8:	000e      	movs	r6, r1
 80029aa:	2501      	movs	r5, #1
 80029ac:	e6de      	b.n	800276c <__aeabi_dsub+0x4c4>
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	000007ff 	.word	0x000007ff
 80029b4:	ff7fffff 	.word	0xff7fffff
 80029b8:	000007fe 	.word	0x000007fe
 80029bc:	2d00      	cmp	r5, #0
 80029be:	d100      	bne.n	80029c2 <__aeabi_dsub+0x71a>
 80029c0:	e668      	b.n	8002694 <__aeabi_dsub+0x3ec>
 80029c2:	464b      	mov	r3, r9
 80029c4:	1bd9      	subs	r1, r3, r7
 80029c6:	2f00      	cmp	r7, #0
 80029c8:	d101      	bne.n	80029ce <__aeabi_dsub+0x726>
 80029ca:	468a      	mov	sl, r1
 80029cc:	e5a7      	b.n	800251e <__aeabi_dsub+0x276>
 80029ce:	2701      	movs	r7, #1
 80029d0:	2938      	cmp	r1, #56	@ 0x38
 80029d2:	dd00      	ble.n	80029d6 <__aeabi_dsub+0x72e>
 80029d4:	e5c7      	b.n	8002566 <__aeabi_dsub+0x2be>
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	0412      	lsls	r2, r2, #16
 80029da:	4314      	orrs	r4, r2
 80029dc:	e5af      	b.n	800253e <__aeabi_dsub+0x296>
 80029de:	46c0      	nop			@ (mov r8, r8)

080029e0 <__aeabi_dcmpun>:
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e2:	46c6      	mov	lr, r8
 80029e4:	031e      	lsls	r6, r3, #12
 80029e6:	0b36      	lsrs	r6, r6, #12
 80029e8:	46b0      	mov	r8, r6
 80029ea:	4e0d      	ldr	r6, [pc, #52]	@ (8002a20 <__aeabi_dcmpun+0x40>)
 80029ec:	030c      	lsls	r4, r1, #12
 80029ee:	004d      	lsls	r5, r1, #1
 80029f0:	005f      	lsls	r7, r3, #1
 80029f2:	b500      	push	{lr}
 80029f4:	0b24      	lsrs	r4, r4, #12
 80029f6:	0d6d      	lsrs	r5, r5, #21
 80029f8:	0d7f      	lsrs	r7, r7, #21
 80029fa:	42b5      	cmp	r5, r6
 80029fc:	d00b      	beq.n	8002a16 <__aeabi_dcmpun+0x36>
 80029fe:	4908      	ldr	r1, [pc, #32]	@ (8002a20 <__aeabi_dcmpun+0x40>)
 8002a00:	2000      	movs	r0, #0
 8002a02:	428f      	cmp	r7, r1
 8002a04:	d104      	bne.n	8002a10 <__aeabi_dcmpun+0x30>
 8002a06:	4646      	mov	r6, r8
 8002a08:	4316      	orrs	r6, r2
 8002a0a:	0030      	movs	r0, r6
 8002a0c:	1e43      	subs	r3, r0, #1
 8002a0e:	4198      	sbcs	r0, r3
 8002a10:	bc80      	pop	{r7}
 8002a12:	46b8      	mov	r8, r7
 8002a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a16:	4304      	orrs	r4, r0
 8002a18:	2001      	movs	r0, #1
 8002a1a:	2c00      	cmp	r4, #0
 8002a1c:	d1f8      	bne.n	8002a10 <__aeabi_dcmpun+0x30>
 8002a1e:	e7ee      	b.n	80029fe <__aeabi_dcmpun+0x1e>
 8002a20:	000007ff 	.word	0x000007ff

08002a24 <__aeabi_i2d>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d016      	beq.n	8002a58 <__aeabi_i2d+0x34>
 8002a2a:	17c3      	asrs	r3, r0, #31
 8002a2c:	18c5      	adds	r5, r0, r3
 8002a2e:	405d      	eors	r5, r3
 8002a30:	0fc4      	lsrs	r4, r0, #31
 8002a32:	0028      	movs	r0, r5
 8002a34:	f000 f8f0 	bl	8002c18 <__clzsi2>
 8002a38:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <__aeabi_i2d+0x58>)
 8002a3a:	1a1b      	subs	r3, r3, r0
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	0d5b      	lsrs	r3, r3, #21
 8002a40:	280a      	cmp	r0, #10
 8002a42:	dc14      	bgt.n	8002a6e <__aeabi_i2d+0x4a>
 8002a44:	0002      	movs	r2, r0
 8002a46:	002e      	movs	r6, r5
 8002a48:	3215      	adds	r2, #21
 8002a4a:	4096      	lsls	r6, r2
 8002a4c:	220b      	movs	r2, #11
 8002a4e:	1a12      	subs	r2, r2, r0
 8002a50:	40d5      	lsrs	r5, r2
 8002a52:	032d      	lsls	r5, r5, #12
 8002a54:	0b2d      	lsrs	r5, r5, #12
 8002a56:	e003      	b.n	8002a60 <__aeabi_i2d+0x3c>
 8002a58:	2400      	movs	r4, #0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	2600      	movs	r6, #0
 8002a60:	051b      	lsls	r3, r3, #20
 8002a62:	432b      	orrs	r3, r5
 8002a64:	07e4      	lsls	r4, r4, #31
 8002a66:	4323      	orrs	r3, r4
 8002a68:	0030      	movs	r0, r6
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	380b      	subs	r0, #11
 8002a70:	4085      	lsls	r5, r0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	2600      	movs	r6, #0
 8002a76:	0b2d      	lsrs	r5, r5, #12
 8002a78:	e7f2      	b.n	8002a60 <__aeabi_i2d+0x3c>
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	0000041e 	.word	0x0000041e

08002a80 <__aeabi_f2d>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	0242      	lsls	r2, r0, #9
 8002a84:	0043      	lsls	r3, r0, #1
 8002a86:	0fc4      	lsrs	r4, r0, #31
 8002a88:	20fe      	movs	r0, #254	@ 0xfe
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	1c59      	adds	r1, r3, #1
 8002a8e:	0a55      	lsrs	r5, r2, #9
 8002a90:	4208      	tst	r0, r1
 8002a92:	d00c      	beq.n	8002aae <__aeabi_f2d+0x2e>
 8002a94:	21e0      	movs	r1, #224	@ 0xe0
 8002a96:	0089      	lsls	r1, r1, #2
 8002a98:	468c      	mov	ip, r1
 8002a9a:	076d      	lsls	r5, r5, #29
 8002a9c:	0b12      	lsrs	r2, r2, #12
 8002a9e:	4463      	add	r3, ip
 8002aa0:	051b      	lsls	r3, r3, #20
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	07e4      	lsls	r4, r4, #31
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0028      	movs	r0, r5
 8002aaa:	0019      	movs	r1, r3
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d114      	bne.n	8002adc <__aeabi_f2d+0x5c>
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	d01b      	beq.n	8002aee <__aeabi_f2d+0x6e>
 8002ab6:	0028      	movs	r0, r5
 8002ab8:	f000 f8ae 	bl	8002c18 <__clzsi2>
 8002abc:	280a      	cmp	r0, #10
 8002abe:	dc1c      	bgt.n	8002afa <__aeabi_f2d+0x7a>
 8002ac0:	230b      	movs	r3, #11
 8002ac2:	002a      	movs	r2, r5
 8002ac4:	1a1b      	subs	r3, r3, r0
 8002ac6:	40da      	lsrs	r2, r3
 8002ac8:	0003      	movs	r3, r0
 8002aca:	3315      	adds	r3, #21
 8002acc:	409d      	lsls	r5, r3
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <__aeabi_f2d+0x88>)
 8002ad0:	0312      	lsls	r2, r2, #12
 8002ad2:	1a1b      	subs	r3, r3, r0
 8002ad4:	055b      	lsls	r3, r3, #21
 8002ad6:	0b12      	lsrs	r2, r2, #12
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	e7e1      	b.n	8002aa0 <__aeabi_f2d+0x20>
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	d009      	beq.n	8002af4 <__aeabi_f2d+0x74>
 8002ae0:	0b13      	lsrs	r3, r2, #12
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	0312      	lsls	r2, r2, #12
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	076d      	lsls	r5, r5, #29
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <__aeabi_f2d+0x8c>)
 8002aec:	e7d8      	b.n	8002aa0 <__aeabi_f2d+0x20>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2200      	movs	r2, #0
 8002af2:	e7d5      	b.n	8002aa0 <__aeabi_f2d+0x20>
 8002af4:	2200      	movs	r2, #0
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <__aeabi_f2d+0x8c>)
 8002af8:	e7d2      	b.n	8002aa0 <__aeabi_f2d+0x20>
 8002afa:	0003      	movs	r3, r0
 8002afc:	002a      	movs	r2, r5
 8002afe:	3b0b      	subs	r3, #11
 8002b00:	409a      	lsls	r2, r3
 8002b02:	2500      	movs	r5, #0
 8002b04:	e7e3      	b.n	8002ace <__aeabi_f2d+0x4e>
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	00000389 	.word	0x00000389
 8002b0c:	000007ff 	.word	0x000007ff

08002b10 <__aeabi_d2f>:
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	004b      	lsls	r3, r1, #1
 8002b14:	030f      	lsls	r7, r1, #12
 8002b16:	0d5b      	lsrs	r3, r3, #21
 8002b18:	4c3b      	ldr	r4, [pc, #236]	@ (8002c08 <__aeabi_d2f+0xf8>)
 8002b1a:	0f45      	lsrs	r5, r0, #29
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	0a7f      	lsrs	r7, r7, #9
 8002b20:	1c5e      	adds	r6, r3, #1
 8002b22:	432f      	orrs	r7, r5
 8002b24:	9000      	str	r0, [sp, #0]
 8002b26:	9101      	str	r1, [sp, #4]
 8002b28:	0fca      	lsrs	r2, r1, #31
 8002b2a:	00c5      	lsls	r5, r0, #3
 8002b2c:	4226      	tst	r6, r4
 8002b2e:	d00b      	beq.n	8002b48 <__aeabi_d2f+0x38>
 8002b30:	4936      	ldr	r1, [pc, #216]	@ (8002c0c <__aeabi_d2f+0xfc>)
 8002b32:	185c      	adds	r4, r3, r1
 8002b34:	2cfe      	cmp	r4, #254	@ 0xfe
 8002b36:	dd13      	ble.n	8002b60 <__aeabi_d2f+0x50>
 8002b38:	20ff      	movs	r0, #255	@ 0xff
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	05c0      	lsls	r0, r0, #23
 8002b3e:	4318      	orrs	r0, r3
 8002b40:	07d2      	lsls	r2, r2, #31
 8002b42:	4310      	orrs	r0, r2
 8002b44:	b003      	add	sp, #12
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <__aeabi_d2f+0x42>
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e7f4      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002b52:	433d      	orrs	r5, r7
 8002b54:	d0f0      	beq.n	8002b38 <__aeabi_d2f+0x28>
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	03db      	lsls	r3, r3, #15
 8002b5a:	20ff      	movs	r0, #255	@ 0xff
 8002b5c:	433b      	orrs	r3, r7
 8002b5e:	e7ed      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002b60:	2c00      	cmp	r4, #0
 8002b62:	dd14      	ble.n	8002b8e <__aeabi_d2f+0x7e>
 8002b64:	9b00      	ldr	r3, [sp, #0]
 8002b66:	00ff      	lsls	r7, r7, #3
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	0f69      	lsrs	r1, r5, #29
 8002b70:	433b      	orrs	r3, r7
 8002b72:	430b      	orrs	r3, r1
 8002b74:	0759      	lsls	r1, r3, #29
 8002b76:	d041      	beq.n	8002bfc <__aeabi_d2f+0xec>
 8002b78:	210f      	movs	r1, #15
 8002b7a:	4019      	ands	r1, r3
 8002b7c:	2904      	cmp	r1, #4
 8002b7e:	d028      	beq.n	8002bd2 <__aeabi_d2f+0xc2>
 8002b80:	3304      	adds	r3, #4
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	d525      	bpl.n	8002bd2 <__aeabi_d2f+0xc2>
 8002b86:	3401      	adds	r4, #1
 8002b88:	2300      	movs	r3, #0
 8002b8a:	b2e0      	uxtb	r0, r4
 8002b8c:	e7d6      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002b8e:	0021      	movs	r1, r4
 8002b90:	3117      	adds	r1, #23
 8002b92:	dbdb      	blt.n	8002b4c <__aeabi_d2f+0x3c>
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	201e      	movs	r0, #30
 8002b98:	0409      	lsls	r1, r1, #16
 8002b9a:	4339      	orrs	r1, r7
 8002b9c:	1b00      	subs	r0, r0, r4
 8002b9e:	281f      	cmp	r0, #31
 8002ba0:	dd1b      	ble.n	8002bda <__aeabi_d2f+0xca>
 8002ba2:	2602      	movs	r6, #2
 8002ba4:	4276      	negs	r6, r6
 8002ba6:	1b34      	subs	r4, r6, r4
 8002ba8:	000e      	movs	r6, r1
 8002baa:	40e6      	lsrs	r6, r4
 8002bac:	0034      	movs	r4, r6
 8002bae:	2820      	cmp	r0, #32
 8002bb0:	d004      	beq.n	8002bbc <__aeabi_d2f+0xac>
 8002bb2:	4817      	ldr	r0, [pc, #92]	@ (8002c10 <__aeabi_d2f+0x100>)
 8002bb4:	4684      	mov	ip, r0
 8002bb6:	4463      	add	r3, ip
 8002bb8:	4099      	lsls	r1, r3
 8002bba:	430d      	orrs	r5, r1
 8002bbc:	002b      	movs	r3, r5
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	418b      	sbcs	r3, r1
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	0759      	lsls	r1, r3, #29
 8002bc6:	d015      	beq.n	8002bf4 <__aeabi_d2f+0xe4>
 8002bc8:	210f      	movs	r1, #15
 8002bca:	2400      	movs	r4, #0
 8002bcc:	4019      	ands	r1, r3
 8002bce:	2904      	cmp	r1, #4
 8002bd0:	d117      	bne.n	8002c02 <__aeabi_d2f+0xf2>
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	b2e0      	uxtb	r0, r4
 8002bd8:	e7b0      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002bda:	4c0e      	ldr	r4, [pc, #56]	@ (8002c14 <__aeabi_d2f+0x104>)
 8002bdc:	191c      	adds	r4, r3, r4
 8002bde:	002b      	movs	r3, r5
 8002be0:	40a5      	lsls	r5, r4
 8002be2:	40c3      	lsrs	r3, r0
 8002be4:	40a1      	lsls	r1, r4
 8002be6:	1e68      	subs	r0, r5, #1
 8002be8:	4185      	sbcs	r5, r0
 8002bea:	4329      	orrs	r1, r5
 8002bec:	430b      	orrs	r3, r1
 8002bee:	2400      	movs	r4, #0
 8002bf0:	0759      	lsls	r1, r3, #29
 8002bf2:	d1c1      	bne.n	8002b78 <__aeabi_d2f+0x68>
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	0a5b      	lsrs	r3, r3, #9
 8002bfa:	e79f      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	b2e0      	uxtb	r0, r4
 8002c00:	e79c      	b.n	8002b3c <__aeabi_d2f+0x2c>
 8002c02:	3304      	adds	r3, #4
 8002c04:	e7e5      	b.n	8002bd2 <__aeabi_d2f+0xc2>
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	000007fe 	.word	0x000007fe
 8002c0c:	fffffc80 	.word	0xfffffc80
 8002c10:	fffffca2 	.word	0xfffffca2
 8002c14:	fffffc82 	.word	0xfffffc82

08002c18 <__clzsi2>:
 8002c18:	211c      	movs	r1, #28
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	d301      	bcc.n	8002c26 <__clzsi2+0xe>
 8002c22:	0c00      	lsrs	r0, r0, #16
 8002c24:	3910      	subs	r1, #16
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	4298      	cmp	r0, r3
 8002c2a:	d301      	bcc.n	8002c30 <__clzsi2+0x18>
 8002c2c:	0a00      	lsrs	r0, r0, #8
 8002c2e:	3908      	subs	r1, #8
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	4298      	cmp	r0, r3
 8002c34:	d301      	bcc.n	8002c3a <__clzsi2+0x22>
 8002c36:	0900      	lsrs	r0, r0, #4
 8002c38:	3904      	subs	r1, #4
 8002c3a:	a202      	add	r2, pc, #8	@ (adr r2, 8002c44 <__clzsi2+0x2c>)
 8002c3c:	5c10      	ldrb	r0, [r2, r0]
 8002c3e:	1840      	adds	r0, r0, r1
 8002c40:	4770      	bx	lr
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	02020304 	.word	0x02020304
 8002c48:	01010101 	.word	0x01010101
	...

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c5a:	f000 fd7b 	bl	8003754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5e:	f000 f8c7 	bl	8002df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c62:	f000 f9f5 	bl	8003050 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c66:	f000 f90b 	bl	8002e80 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002c6a:	f000 f9b1 	bl	8002fd0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reset_screen();
 8002c6e:	f000 fa4d 	bl	800310c <reset_screen>
  init_screen();
 8002c72:	f000 fa64 	bl	800313e <init_screen>
  clear_screen();
 8002c76:	f000 fa82 	bl	800317e <clear_screen>
  comm_write(0x40); // Display start address + 0x40
 8002c7a:	2040      	movs	r0, #64	@ 0x40
 8002c7c:	f000 fac0 	bl	8003200 <comm_write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i = 0; i < 4; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e015      	b.n	8002cb2 <main+0x5e>
	  {
		  HAL_ADC_Start(&hadc1);
 8002c86:	4b56      	ldr	r3, [pc, #344]	@ (8002de0 <main+0x18c>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f001 f90d 	bl	8003ea8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <main+0x18c>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 f956 	bl	8003f44 <HAL_ADC_PollForConversion>
		  ADC_buffer[i] = HAL_ADC_GetValue(&hadc1);
 8002c98:	4b51      	ldr	r3, [pc, #324]	@ (8002de0 <main+0x18c>)
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f001 f9e6 	bl	800406c <HAL_ADC_GetValue>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8002de4 <main+0x190>)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	0052      	lsls	r2, r2, #1
 8002caa:	52d1      	strh	r1, [r2, r3]
	  for(int i = 0; i < 4; i++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	dde6      	ble.n	8002c86 <main+0x32>
		  //print_data(numText, i);

	  }
	  //Now the buffer contains all 4 values.
	  //snprintf(numText, sizeof(numText), "%.2f", ADC_buffer[0]*sys_voltage*vi_scale/adc_res);
	  ftoa((float)ADC_buffer[0]*vi_scale/adc_res, numText, 3);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <main+0x190>)
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fe f841 	bl	8000d44 <__aeabi_ui2f>
 8002cc2:	1c04      	adds	r4, r0, #0
 8002cc4:	2311      	movs	r3, #17
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fff0 	bl	8000cac <__aeabi_i2f>
 8002ccc:	1c03      	adds	r3, r0, #0
 8002cce:	1c19      	adds	r1, r3, #0
 8002cd0:	1c20      	adds	r0, r4, #0
 8002cd2:	f7fd fce9 	bl	80006a8 <__aeabi_fmul>
 8002cd6:	1c03      	adds	r3, r0, #0
 8002cd8:	1c1c      	adds	r4, r3, #0
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <main+0x194>)
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fd ffe5 	bl	8000cac <__aeabi_i2f>
 8002ce2:	1c03      	adds	r3, r0, #0
 8002ce4:	1c19      	adds	r1, r3, #0
 8002ce6:	1c20      	adds	r0, r4, #0
 8002ce8:	f7fd fbbe 	bl	8000468 <__aeabi_fdiv>
 8002cec:	1c03      	adds	r3, r0, #0
 8002cee:	1c18      	adds	r0, r3, #0
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	f000 fba7 	bl	8003448 <ftoa>
	  print_data(numText, 0);
 8002cfa:	003b      	movs	r3, r7
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 face 	bl	80032a0 <print_data>

	  //sprintf(numText, "%d", ADC_buffer[1]);
	  ftoa((float)ADC_buffer[1]*vo_scale/adc_res, numText, 3);
 8002d04:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <main+0x190>)
 8002d06:	885b      	ldrh	r3, [r3, #2]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fe f81b 	bl	8000d44 <__aeabi_ui2f>
 8002d0e:	1c04      	adds	r4, r0, #0
 8002d10:	2314      	movs	r3, #20
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd ffca 	bl	8000cac <__aeabi_i2f>
 8002d18:	1c03      	adds	r3, r0, #0
 8002d1a:	1c19      	adds	r1, r3, #0
 8002d1c:	1c20      	adds	r0, r4, #0
 8002d1e:	f7fd fcc3 	bl	80006a8 <__aeabi_fmul>
 8002d22:	1c03      	adds	r3, r0, #0
 8002d24:	1c1c      	adds	r4, r3, #0
 8002d26:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <main+0x194>)
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fd ffbf 	bl	8000cac <__aeabi_i2f>
 8002d2e:	1c03      	adds	r3, r0, #0
 8002d30:	1c19      	adds	r1, r3, #0
 8002d32:	1c20      	adds	r0, r4, #0
 8002d34:	f7fd fb98 	bl	8000468 <__aeabi_fdiv>
 8002d38:	1c03      	adds	r3, r0, #0
 8002d3a:	1c18      	adds	r0, r3, #0
 8002d3c:	003b      	movs	r3, r7
 8002d3e:	2203      	movs	r2, #3
 8002d40:	0019      	movs	r1, r3
 8002d42:	f000 fb81 	bl	8003448 <ftoa>
	  print_data(numText, 1);
 8002d46:	003b      	movs	r3, r7
 8002d48:	2101      	movs	r1, #1
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 faa8 	bl	80032a0 <print_data>


	  ftoa((float)ADC_buffer[2]*curr_scale/adc_res, numText, 3);
 8002d50:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <main+0x190>)
 8002d52:	889b      	ldrh	r3, [r3, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd fff5 	bl	8000d44 <__aeabi_ui2f>
 8002d5a:	1c03      	adds	r3, r0, #0
 8002d5c:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <main+0x198>)
 8002d5e:	1c11      	adds	r1, r2, #0
 8002d60:	1c18      	adds	r0, r3, #0
 8002d62:	f7fd fca1 	bl	80006a8 <__aeabi_fmul>
 8002d66:	1c03      	adds	r3, r0, #0
 8002d68:	1c1c      	adds	r4, r3, #0
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <main+0x194>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fd ff9d 	bl	8000cac <__aeabi_i2f>
 8002d72:	1c03      	adds	r3, r0, #0
 8002d74:	1c19      	adds	r1, r3, #0
 8002d76:	1c20      	adds	r0, r4, #0
 8002d78:	f7fd fb76 	bl	8000468 <__aeabi_fdiv>
 8002d7c:	1c03      	adds	r3, r0, #0
 8002d7e:	1c18      	adds	r0, r3, #0
 8002d80:	003b      	movs	r3, r7
 8002d82:	2203      	movs	r2, #3
 8002d84:	0019      	movs	r1, r3
 8002d86:	f000 fb5f 	bl	8003448 <ftoa>
	  print_data(numText, 2);
 8002d8a:	003b      	movs	r3, r7
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fa86 	bl	80032a0 <print_data>


	  ftoa((float)ADC_buffer[3]*curr_scale/adc_res, numText, 3);
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <main+0x190>)
 8002d96:	88db      	ldrh	r3, [r3, #6]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd ffd3 	bl	8000d44 <__aeabi_ui2f>
 8002d9e:	1c03      	adds	r3, r0, #0
 8002da0:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <main+0x198>)
 8002da2:	1c11      	adds	r1, r2, #0
 8002da4:	1c18      	adds	r0, r3, #0
 8002da6:	f7fd fc7f 	bl	80006a8 <__aeabi_fmul>
 8002daa:	1c03      	adds	r3, r0, #0
 8002dac:	1c1c      	adds	r4, r3, #0
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <main+0x194>)
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fd ff7b 	bl	8000cac <__aeabi_i2f>
 8002db6:	1c03      	adds	r3, r0, #0
 8002db8:	1c19      	adds	r1, r3, #0
 8002dba:	1c20      	adds	r0, r4, #0
 8002dbc:	f7fd fb54 	bl	8000468 <__aeabi_fdiv>
 8002dc0:	1c03      	adds	r3, r0, #0
 8002dc2:	1c18      	adds	r0, r3, #0
 8002dc4:	003b      	movs	r3, r7
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	0019      	movs	r1, r3
 8002dca:	f000 fb3d 	bl	8003448 <ftoa>
	  print_data(numText, 3);
 8002dce:	003b      	movs	r3, r7
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fa64 	bl	80032a0 <print_data>

	  HAL_Delay(100);
 8002dd8:	2064      	movs	r0, #100	@ 0x64
 8002dda:	f000 fd41 	bl	8003860 <HAL_Delay>
	  for(int i = 0; i < 4; i++)
 8002dde:	e74f      	b.n	8002c80 <main+0x2c>
 8002de0:	2000008c 	.word	0x2000008c
 8002de4:	20000154 	.word	0x20000154
 8002de8:	00000fff 	.word	0x00000fff
 8002dec:	3fe8ba2f 	.word	0x3fe8ba2f

08002df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b093      	sub	sp, #76	@ 0x4c
 8002df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df6:	2414      	movs	r4, #20
 8002df8:	193b      	adds	r3, r7, r4
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	2334      	movs	r3, #52	@ 0x34
 8002dfe:	001a      	movs	r2, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	f003 f82d 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f003 f826 	bl	8005e60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f001 ffb9 	bl	8004d90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	0052      	lsls	r2, r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	2240      	movs	r2, #64	@ 0x40
 8002e36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	0018      	movs	r0, r3
 8002e42:	f001 ffe5 	bl	8004e10 <HAL_RCC_OscConfig>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002e4a:	f000 fb4f 	bl	80034ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2100      	movs	r1, #0
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f002 fae0 	bl	8005430 <HAL_RCC_ClockConfig>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d001      	beq.n	8002e78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002e74:	f000 fb3a 	bl	80034ec <Error_Handler>
  }
}
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b013      	add	sp, #76	@ 0x4c
 8002e7e:	bd90      	pop	{r4, r7, pc}

08002e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	0018      	movs	r0, r3
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f002 ffe6 	bl	8005e60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e94:	4b48      	ldr	r3, [pc, #288]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002e96:	4a49      	ldr	r2, [pc, #292]	@ (8002fbc <MX_ADC1_Init+0x13c>)
 8002e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e9a:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	05d2      	lsls	r2, r2, #23
 8002ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ea2:	4b45      	ldr	r3, [pc, #276]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ea8:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002eae:	4b42      	ldr	r3, [pc, #264]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002eb0:	2280      	movs	r2, #128	@ 0x80
 8002eb2:	0392      	lsls	r2, r2, #14
 8002eb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002eb8:	2204      	movs	r2, #4
 8002eba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8002ece:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002ed4:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002edc:	4b36      	ldr	r3, [pc, #216]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ee2:	4b35      	ldr	r3, [pc, #212]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ee8:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002eea:	222c      	movs	r2, #44	@ 0x2c
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ef0:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002ef6:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002efc:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002f02:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f04:	223c      	movs	r2, #60	@ 0x3c
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f10:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fe20 	bl	8003b58 <HAL_ADC_Init>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002f1c:	f000 fae6 	bl	80034ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <MX_ADC1_Init+0x140>)
 8002f24:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	4b20      	ldr	r3, [pc, #128]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f001 f8a3 	bl	8004084 <HAL_ADC_ConfigChannel>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002f42:	f000 fad3 	bl	80034ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <MX_ADC1_Init+0x144>)
 8002f4a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	2204      	movs	r2, #4
 8002f50:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f52:	1d3a      	adds	r2, r7, #4
 8002f54:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f56:	0011      	movs	r1, r2
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f001 f893 	bl	8004084 <HAL_ADC_ConfigChannel>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002f62:	f000 fac3 	bl	80034ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <MX_ADC1_Init+0x148>)
 8002f6a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2208      	movs	r2, #8
 8002f70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f72:	1d3a      	adds	r2, r7, #4
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f001 f883 	bl	8004084 <HAL_ADC_ConfigChannel>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d001      	beq.n	8002f86 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002f82:	f000 fab3 	bl	80034ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	4a10      	ldr	r2, [pc, #64]	@ (8002fcc <MX_ADC1_Init+0x14c>)
 8002f8a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	220c      	movs	r2, #12
 8002f90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f92:	1d3a      	adds	r2, r7, #4
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002f96:	0011      	movs	r1, r2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 f873 	bl	8004084 <HAL_ADC_ConfigChannel>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002fa2:	f000 faa3 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002fa6:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <MX_ADC1_Init+0x138>)
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fbbf 	bl	800472c <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	2000008c 	.word	0x2000008c
 8002fbc:	40012400 	.word	0x40012400
 8002fc0:	2c000800 	.word	0x2c000800
 8002fc4:	20000100 	.word	0x20000100
 8002fc8:	18000040 	.word	0x18000040
 8002fcc:	1c000080 	.word	0x1c000080

08002fd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <MX_SPI2_Init+0x7c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002fdc:	2282      	movs	r2, #130	@ 0x82
 8002fde:	0052      	lsls	r2, r2, #1
 8002fe0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	0212      	lsls	r2, r2, #8
 8002fe8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fea:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002fec:	22e0      	movs	r2, #224	@ 0xe0
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff2:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <MX_SPI2_Init+0x78>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003008:	2200      	movs	r2, #0
 800300a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <MX_SPI2_Init+0x78>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003012:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <MX_SPI2_Init+0x78>)
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003020:	2207      	movs	r2, #7
 8003022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003024:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <MX_SPI2_Init+0x78>)
 800302c:	2208      	movs	r2, #8
 800302e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <MX_SPI2_Init+0x78>)
 8003032:	0018      	movs	r0, r3
 8003034:	f002 fb86 	bl	8005744 <HAL_SPI_Init>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d001      	beq.n	8003040 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800303c:	f000 fa56 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	200000f0 	.word	0x200000f0
 800304c:	40003800 	.word	0x40003800

08003050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b089      	sub	sp, #36	@ 0x24
 8003054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003056:	240c      	movs	r4, #12
 8003058:	193b      	adds	r3, r7, r4
 800305a:	0018      	movs	r0, r3
 800305c:	2314      	movs	r3, #20
 800305e:	001a      	movs	r2, r3
 8003060:	2100      	movs	r1, #0
 8003062:	f002 fefd 	bl	8005e60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <MX_GPIO_Init+0xb4>)
 8003068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800306a:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <MX_GPIO_Init+0xb4>)
 800306c:	2102      	movs	r1, #2
 800306e:	430a      	orrs	r2, r1
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <MX_GPIO_Init+0xb4>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <MX_GPIO_Init+0xb4>)
 8003080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <MX_GPIO_Init+0xb4>)
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
 800308a:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <MX_GPIO_Init+0xb4>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);
 8003096:	23a0      	movs	r3, #160	@ 0xa0
 8003098:	05db      	lsls	r3, r3, #23
 800309a:	2200      	movs	r2, #0
 800309c:	2106      	movs	r1, #6
 800309e:	0018      	movs	r0, r3
 80030a0:	f001 fe58 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 80030a4:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <MX_GPIO_Init+0xb8>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	2108      	movs	r1, #8
 80030aa:	0018      	movs	r0, r3
 80030ac:	f001 fe52 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _RST_Pin A0_Pin */
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	2206      	movs	r2, #6
 80030b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	2201      	movs	r2, #1
 80030ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	193a      	adds	r2, r7, r4
 80030ca:	23a0      	movs	r3, #160	@ 0xa0
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 fcdb 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : _CS_Pin */
  GPIO_InitStruct.Pin = _CS_Pin;
 80030d6:	0021      	movs	r1, r4
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2208      	movs	r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2201      	movs	r2, #1
 80030e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2200      	movs	r2, #0
 80030ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	4a05      	ldr	r2, [pc, #20]	@ (8003108 <MX_GPIO_Init+0xb8>)
 80030f4:	0019      	movs	r1, r3
 80030f6:	0010      	movs	r0, r2
 80030f8:	f001 fcc8 	bl	8004a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b009      	add	sp, #36	@ 0x24
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	50000400 	.word	0x50000400

0800310c <reset_screen>:

/* USER CODE BEGIN 4 */
void reset_screen()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_RESET);
 8003110:	23a0      	movs	r3, #160	@ 0xa0
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	2200      	movs	r2, #0
 8003116:	2102      	movs	r1, #2
 8003118:	0018      	movs	r0, r3
 800311a:	f001 fe1b 	bl	8004d54 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800311e:	2064      	movs	r0, #100	@ 0x64
 8003120:	f000 fb9e 	bl	8003860 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_SET);
 8003124:	23a0      	movs	r3, #160	@ 0xa0
 8003126:	05db      	lsls	r3, r3, #23
 8003128:	2201      	movs	r2, #1
 800312a:	2102      	movs	r1, #2
 800312c:	0018      	movs	r0, r3
 800312e:	f001 fe11 	bl	8004d54 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003132:	2064      	movs	r0, #100	@ 0x64
 8003134:	f000 fb94 	bl	8003860 <HAL_Delay>
}
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <init_screen>:

void init_screen()
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
	comm_write(0xA0); //Set SEG (column) direction - left to right
 8003142:	20a0      	movs	r0, #160	@ 0xa0
 8003144:	f000 f85c 	bl	8003200 <comm_write>
	comm_write(0xAE); //Turn the display off
 8003148:	20ae      	movs	r0, #174	@ 0xae
 800314a:	f000 f859 	bl	8003200 <comm_write>
	comm_write(0xC8); //Set COM (row) direction - top to bottom
 800314e:	20c8      	movs	r0, #200	@ 0xc8
 8003150:	f000 f856 	bl	8003200 <comm_write>
	comm_write(0xA2); //Set LCD bias
 8003154:	20a2      	movs	r0, #162	@ 0xa2
 8003156:	f000 f853 	bl	8003200 <comm_write>
	comm_write(0x2F); //Power Control Set - Boost, Regulator and Follower are all on
 800315a:	202f      	movs	r0, #47	@ 0x2f
 800315c:	f000 f850 	bl	8003200 <comm_write>
	comm_write(0x21); //Set Resistor Ratio - 001 -> 3.5
 8003160:	2021      	movs	r0, #33	@ 0x21
 8003162:	f000 f84d 	bl	8003200 <comm_write>
	comm_write(0x81); //Electronic Volume Command (set contrast) Double Byte: 1 of 2
 8003166:	2081      	movs	r0, #129	@ 0x81
 8003168:	f000 f84a 	bl	8003200 <comm_write>
	comm_write(0x20); //Electronic Volume value (contrast value) Double Byte: 2 of 2
 800316c:	2020      	movs	r0, #32
 800316e:	f000 f847 	bl	8003200 <comm_write>
	comm_write(0xAF); //Display ON
 8003172:	20af      	movs	r0, #175	@ 0xaf
 8003174:	f000 f844 	bl	8003200 <comm_write>
}
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <clear_screen>:

void clear_screen()
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
	uint8_t page = 0xB0; //'B'- command to set Page Address, lower four bits contain actual address
 8003184:	1dfb      	adds	r3, r7, #7
 8003186:	22b0      	movs	r2, #176	@ 0xb0
 8003188:	701a      	strb	r2, [r3, #0]
						//Command := 0xB0 + start address
	comm_write(0xAE); // Display OFF
 800318a:	20ae      	movs	r0, #174	@ 0xae
 800318c:	f000 f838 	bl	8003200 <comm_write>
	comm_write(0x40); // D7,D6 = "01" - command to set start line, Bottom 5 bits are start line address
 8003190:	2040      	movs	r0, #64	@ 0x40
 8003192:	f000 f835 	bl	8003200 <comm_write>
						//Command := 0x40 + start line address

	for(uint8_t i = 0; i < 4; i++)
 8003196:	1dbb      	adds	r3, r7, #6
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e025      	b.n	80031ea <clear_screen+0x6c>
	{
		comm_write(page);	// send page address
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f82c 	bl	8003200 <comm_write>
		//	Following two lines set the column address to leftmost column
		comm_write(0x10); // column address upper 4 bits + 0x10
 80031a8:	2010      	movs	r0, #16
 80031aa:	f000 f829 	bl	8003200 <comm_write>
		comm_write(0x00); // column address lower 4 bits + 0x00
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 f826 	bl	8003200 <comm_write>

		for(uint8_t j = 0; j < 128; j++)
 80031b4:	1d7b      	adds	r3, r7, #5
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e007      	b.n	80031cc <clear_screen+0x4e>
		{
			data_write(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f000 f847 	bl	8003250 <data_write>
		for(uint8_t j = 0; j < 128; j++)
 80031c2:	1d7b      	adds	r3, r7, #5
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	1d7b      	adds	r3, r7, #5
 80031c8:	3201      	adds	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	1d7b      	adds	r3, r7, #5
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	daf2      	bge.n	80031bc <clear_screen+0x3e>
		}
		page++;//After 128 columns, go to the next page
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	3201      	adds	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80031e0:	1dbb      	adds	r3, r7, #6
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	3201      	adds	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d9d5      	bls.n	800319e <clear_screen+0x20>
	}
	comm_write(0xAF);//Turn the display back on
 80031f2:	20af      	movs	r0, #175	@ 0xaf
 80031f4:	f000 f804 	bl	8003200 <comm_write>
}
 80031f8:	46c0      	nop			@ (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <comm_write>:

void comm_write(uint8_t c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
 800320c:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <comm_write+0x48>)
 800320e:	2200      	movs	r2, #0
 8003210:	2108      	movs	r1, #8
 8003212:	0018      	movs	r0, r3
 8003214:	f001 fd9e 	bl	8004d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_RESET);	//Set message type to command
 8003218:	23a0      	movs	r3, #160	@ 0xa0
 800321a:	05db      	lsls	r3, r3, #23
 800321c:	2200      	movs	r2, #0
 800321e:	2104      	movs	r1, #4
 8003220:	0018      	movs	r0, r3
 8003222:	f001 fd97 	bl	8004d54 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 100); // transmit command
 8003226:	1df9      	adds	r1, r7, #7
 8003228:	4808      	ldr	r0, [pc, #32]	@ (800324c <comm_write+0x4c>)
 800322a:	2364      	movs	r3, #100	@ 0x64
 800322c:	2201      	movs	r2, #1
 800322e:	f002 fb41 	bl	80058b4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <comm_write+0x48>)
 8003234:	2201      	movs	r2, #1
 8003236:	2108      	movs	r1, #8
 8003238:	0018      	movs	r0, r3
 800323a:	f001 fd8b 	bl	8004d54 <HAL_GPIO_WritePin>

}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b002      	add	sp, #8
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	50000400 	.word	0x50000400
 800324c:	200000f0 	.word	0x200000f0

08003250 <data_write>:

void data_write(uint8_t d)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	0002      	movs	r2, r0
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <data_write+0x48>)
 800325e:	2200      	movs	r2, #0
 8003260:	2108      	movs	r1, #8
 8003262:	0018      	movs	r0, r3
 8003264:	f001 fd76 	bl	8004d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_SET);	//Set message type to
 8003268:	23a0      	movs	r3, #160	@ 0xa0
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	2201      	movs	r2, #1
 800326e:	2104      	movs	r1, #4
 8003270:	0018      	movs	r0, r3
 8003272:	f001 fd6f 	bl	8004d54 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 100); //transmit data
 8003276:	1df9      	adds	r1, r7, #7
 8003278:	4808      	ldr	r0, [pc, #32]	@ (800329c <data_write+0x4c>)
 800327a:	2364      	movs	r3, #100	@ 0x64
 800327c:	2201      	movs	r2, #1
 800327e:	f002 fb19 	bl	80058b4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <data_write+0x48>)
 8003284:	2201      	movs	r2, #1
 8003286:	2108      	movs	r1, #8
 8003288:	0018      	movs	r0, r3
 800328a:	f001 fd63 	bl	8004d54 <HAL_GPIO_WritePin>
}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	50000400 	.word	0x50000400
 800329c:	200000f0 	.word	0x200000f0

080032a0 <print_data>:

void print_data(char* text, uint8_t rowIndex)
{
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	000a      	movs	r2, r1
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	701a      	strb	r2, [r3, #0]
	unsigned char page = 0xB0;
 80032ae:	210d      	movs	r1, #13
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	22b0      	movs	r2, #176	@ 0xb0
 80032b4:	701a      	strb	r2, [r3, #0]
	comm_write(page + rowIndex); // send page address
 80032b6:	187a      	adds	r2, r7, r1
 80032b8:	1cfb      	adds	r3, r7, #3
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	18d3      	adds	r3, r2, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff ff9c 	bl	8003200 <comm_write>
	comm_write(0x10); // column address upper 4 bits + 0x10
 80032c8:	2010      	movs	r0, #16
 80032ca:	f7ff ff99 	bl	8003200 <comm_write>
	comm_write(0x00); // column address lower 4 bits + 0x00
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff ff96 	bl	8003200 <comm_write>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 80032d4:	230f      	movs	r3, #15
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e036      	b.n	800334c <print_data+0xac>
	{
		uint8_t c = (uint8_t)text[i] - 32;
 80032de:	230f      	movs	r3, #15
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	230c      	movs	r3, #12
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	3a20      	subs	r2, #32
 80032f0:	701a      	strb	r2, [r3, #0]
		uint8_t val = 0;
 80032f2:	230b      	movs	r3, #11
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]

		for(uint8_t j = 0; j < 5; j++)
 80032fa:	230e      	movs	r3, #14
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e018      	b.n	8003336 <print_data+0x96>
		{
			val = Ascii_1[c][j];
 8003304:	230c      	movs	r3, #12
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	250e      	movs	r5, #14
 800330c:	197b      	adds	r3, r7, r5
 800330e:	7818      	ldrb	r0, [r3, #0]
 8003310:	260b      	movs	r6, #11
 8003312:	19b9      	adds	r1, r7, r6
 8003314:	4c14      	ldr	r4, [pc, #80]	@ (8003368 <print_data+0xc8>)
 8003316:	0013      	movs	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	189b      	adds	r3, r3, r2
 800331c:	18e3      	adds	r3, r4, r3
 800331e:	5c1b      	ldrb	r3, [r3, r0]
 8003320:	700b      	strb	r3, [r1, #0]
			data_write(val);
 8003322:	19bb      	adds	r3, r7, r6
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff ff92 	bl	8003250 <data_write>
		for(uint8_t j = 0; j < 5; j++)
 800332c:	197b      	adds	r3, r7, r5
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	197b      	adds	r3, r7, r5
 8003332:	3201      	adds	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	230e      	movs	r3, #14
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d9e1      	bls.n	8003304 <print_data+0x64>
	for(uint8_t i = 0; text[i] != '\0'; i++)
 8003340:	210f      	movs	r1, #15
 8003342:	187b      	adds	r3, r7, r1
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	187b      	adds	r3, r7, r1
 8003348:	3201      	adds	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	230f      	movs	r3, #15
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1c0      	bne.n	80032de <print_data+0x3e>
		}
	}
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b005      	add	sp, #20
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	08006dec 	.word	0x08006dec

0800336c <reverse>:

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8003380:	e018      	b.n	80033b4 <reverse+0x48>
        temp = str[i];
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	18d3      	adds	r3, r2, r3
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	18d2      	adds	r2, r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	18cb      	adds	r3, r1, r3
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
        i++;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
        j--;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	dbe2      	blt.n	8003382 <reverse+0x16>
    }
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
    int i = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
    while (x) {
 80033d6:	e016      	b.n	8003406 <intToStr+0x40>
        str[i++] = (x % 10) + '0';
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	210a      	movs	r1, #10
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fc ffff 	bl	80003e0 <__aeabi_idivmod>
 80033e2:	000b      	movs	r3, r1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1c59      	adds	r1, r3, #1
 80033ea:	6179      	str	r1, [r7, #20]
 80033ec:	0019      	movs	r1, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	185b      	adds	r3, r3, r1
 80033f2:	3230      	adds	r2, #48	@ 0x30
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	210a      	movs	r1, #10
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7fc ff09 	bl	8000214 <__divsi3>
 8003402:	0003      	movs	r3, r0
 8003404:	60fb      	str	r3, [r7, #12]
    while (x) {
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e5      	bne.n	80033d8 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800340c:	e007      	b.n	800341e <intToStr+0x58>
        str[i++] = '0';
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	617a      	str	r2, [r7, #20]
 8003414:	001a      	movs	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	189b      	adds	r3, r3, r2
 800341a:	2230      	movs	r2, #48	@ 0x30
 800341c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	dbf3      	blt.n	800340e <intToStr+0x48>

    reverse(str, i);
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0011      	movs	r1, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff ff9d 	bl	800336c <reverse>
    str[i] = '\0';
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	18d3      	adds	r3, r2, r3
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    return i;
 800343c:	697b      	ldr	r3, [r7, #20]
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b006      	add	sp, #24
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fd fc09 	bl	8000c6c <__aeabi_f2iz>
 800345a:	0003      	movs	r3, r0
 800345c:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800345e:	69f8      	ldr	r0, [r7, #28]
 8003460:	f7fd fc24 	bl	8000cac <__aeabi_i2f>
 8003464:	1c03      	adds	r3, r0, #0
 8003466:	1c19      	adds	r1, r3, #0
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7fd fa5b 	bl	8000924 <__aeabi_fsub>
 800346e:	1c03      	adds	r3, r0, #0
 8003470:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2200      	movs	r2, #0
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff ffa4 	bl	80033c6 <intToStr>
 800347e:	0003      	movs	r3, r0
 8003480:	617b      	str	r3, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02b      	beq.n	80034e0 <ftoa+0x98>
        res[i] = '.'; // add dot
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	222e      	movs	r2, #46	@ 0x2e
 8003490:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f7ff faf4 	bl	8002a80 <__aeabi_f2d>
 8003498:	0004      	movs	r4, r0
 800349a:	000d      	movs	r5, r1
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff fac1 	bl	8002a24 <__aeabi_i2d>
 80034a2:	0002      	movs	r2, r0
 80034a4:	000b      	movs	r3, r1
 80034a6:	2000      	movs	r0, #0
 80034a8:	490f      	ldr	r1, [pc, #60]	@ (80034e8 <ftoa+0xa0>)
 80034aa:	f002 fd0b 	bl	8005ec4 <pow>
 80034ae:	0002      	movs	r2, r0
 80034b0:	000b      	movs	r3, r1
 80034b2:	0020      	movs	r0, r4
 80034b4:	0029      	movs	r1, r5
 80034b6:	f7fe fc2f 	bl	8001d18 <__aeabi_dmul>
 80034ba:	0002      	movs	r2, r0
 80034bc:	000b      	movs	r3, r1
 80034be:	0010      	movs	r0, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	f7ff fb25 	bl	8002b10 <__aeabi_d2f>
 80034c6:	1c03      	adds	r3, r0, #0
 80034c8:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80034ca:	69b8      	ldr	r0, [r7, #24]
 80034cc:	f7fd fbce 	bl	8000c6c <__aeabi_f2iz>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	18d3      	adds	r3, r2, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	0019      	movs	r1, r3
 80034dc:	f7ff ff73 	bl	80033c6 <intToStr>
    }
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b008      	add	sp, #32
 80034e6:	bdb0      	pop	{r4, r5, r7, pc}
 80034e8:	40240000 	.word	0x40240000

080034ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
}
 80034f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	e7fd      	b.n	80034f4 <Error_Handler+0x8>

080034f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <HAL_MspInit+0x44>)
 8003500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_MspInit+0x44>)
 8003504:	2101      	movs	r1, #1
 8003506:	430a      	orrs	r2, r1
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
 800350a:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_MspInit+0x44>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	2201      	movs	r2, #1
 8003510:	4013      	ands	r3, r2
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_MspInit+0x44>)
 8003518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800351a:	4b08      	ldr	r3, [pc, #32]	@ (800353c <HAL_MspInit+0x44>)
 800351c:	2180      	movs	r1, #128	@ 0x80
 800351e:	0549      	lsls	r1, r1, #21
 8003520:	430a      	orrs	r2, r1
 8003522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_MspInit+0x44>)
 8003526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	055b      	lsls	r3, r3, #21
 800352c:	4013      	ands	r3, r2
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b08b      	sub	sp, #44	@ 0x2c
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	2414      	movs	r4, #20
 800354a:	193b      	adds	r3, r7, r4
 800354c:	0018      	movs	r0, r3
 800354e:	2314      	movs	r3, #20
 8003550:	001a      	movs	r2, r3
 8003552:	2100      	movs	r1, #0
 8003554:	f002 fc84 	bl	8005e60 <memset>
  if(hadc->Instance==ADC1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <HAL_ADC_MspInit+0xb8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d145      	bne.n	80035ee <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003562:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003566:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	0349      	lsls	r1, r1, #13
 800356c:	430a      	orrs	r2, r1
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003570:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	035b      	lsls	r3, r3, #13
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	4b1f      	ldr	r3, [pc, #124]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003584:	2102      	movs	r1, #2
 8003586:	430a      	orrs	r2, r1
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34
 800358a:	4b1c      	ldr	r3, [pc, #112]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 8003598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 800359c:	2101      	movs	r1, #1
 800359e:	430a      	orrs	r2, r1
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <HAL_ADC_MspInit+0xbc>)
 80035a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S_Input_Voltage_Pin|S_Output_Voltage_Pin;
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	2281      	movs	r2, #129	@ 0x81
 80035b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	2203      	movs	r2, #3
 80035b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003600 <HAL_ADC_MspInit+0xc0>)
 80035c4:	0019      	movs	r1, r3
 80035c6:	0010      	movs	r0, r2
 80035c8:	f001 fa60 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_Input_Current_Pin|S_Output_Current_Pin;
 80035cc:	0021      	movs	r1, r4
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	22c0      	movs	r2, #192	@ 0xc0
 80035d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2203      	movs	r2, #3
 80035d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	187a      	adds	r2, r7, r1
 80035e2:	23a0      	movs	r3, #160	@ 0xa0
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f001 fa4f 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b00b      	add	sp, #44	@ 0x2c
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	40012400 	.word	0x40012400
 80035fc:	40021000 	.word	0x40021000
 8003600:	50000400 	.word	0x50000400

08003604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b08b      	sub	sp, #44	@ 0x2c
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	2414      	movs	r4, #20
 800360e:	193b      	adds	r3, r7, r4
 8003610:	0018      	movs	r0, r3
 8003612:	2314      	movs	r3, #20
 8003614:	001a      	movs	r2, r3
 8003616:	2100      	movs	r1, #0
 8003618:	f002 fc22 	bl	8005e60 <memset>
  if(hspi->Instance==SPI2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <HAL_SPI_MspInit+0xb8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d146      	bne.n	80036b4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 8003628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800362a:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	01c9      	lsls	r1, r1, #7
 8003630:	430a      	orrs	r2, r1
 8003632:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003634:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 8003636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	4b1f      	ldr	r3, [pc, #124]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 8003644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003646:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 8003648:	2101      	movs	r1, #1
 800364a:	430a      	orrs	r2, r1
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34
 800364e:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <HAL_SPI_MspInit+0xbc>)
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	193b      	adds	r3, r7, r4
 8003662:	2202      	movs	r2, #2
 8003664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	193b      	adds	r3, r7, r4
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	193b      	adds	r3, r7, r4
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003678:	193a      	adds	r2, r7, r4
 800367a:	23a0      	movs	r3, #160	@ 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f001 fa03 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003686:	0021      	movs	r1, r4
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2210      	movs	r2, #16
 800368c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2202      	movs	r2, #2
 8003692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2201      	movs	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a6:	187a      	adds	r2, r7, r1
 80036a8:	23a0      	movs	r3, #160	@ 0xa0
 80036aa:	05db      	lsls	r3, r3, #23
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 f9ec 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b00b      	add	sp, #44	@ 0x2c
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	40003800 	.word	0x40003800
 80036c0:	40021000 	.word	0x40021000

080036c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	e7fd      	b.n	80036c8 <NMI_Handler+0x4>

080036cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	e7fd      	b.n	80036d0 <HardFault_Handler+0x4>

080036d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ec:	f000 f89c 	bl	8003828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003700:	480d      	ldr	r0, [pc, #52]	@ (8003738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003702:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003704:	f7ff fff7 	bl	80036f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003708:	480c      	ldr	r0, [pc, #48]	@ (800373c <LoopForever+0x6>)
  ldr r1, =_edata
 800370a:	490d      	ldr	r1, [pc, #52]	@ (8003740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800370c:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <LoopForever+0xe>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003720:	4c0a      	ldr	r4, [pc, #40]	@ (800374c <LoopForever+0x16>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800372e:	f002 fba5 	bl	8005e7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003732:	f7ff fa8f 	bl	8002c54 <main>

08003736 <LoopForever>:

LoopForever:
  b LoopForever
 8003736:	e7fe      	b.n	8003736 <LoopForever>
  ldr   r0, =_estack
 8003738:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003744:	08007050 	.word	0x08007050
  ldr r2, =_sbss
 8003748:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800374c:	20000298 	.word	0x20000298

08003750 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003750:	e7fe      	b.n	8003750 <ADC1_IRQHandler>
	...

08003754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_Init+0x3c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_Init+0x3c>)
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	0049      	lsls	r1, r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800376e:	2003      	movs	r0, #3
 8003770:	f000 f810 	bl	8003794 <HAL_InitTick>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d003      	beq.n	8003780 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e001      	b.n	8003784 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003780:	f7ff feba 	bl	80034f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037a4:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <HAL_InitTick+0x88>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02b      	beq.n	8003804 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003820 <HAL_InitTick+0x8c>)
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <HAL_InitTick+0x88>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	0019      	movs	r1, r3
 80037b6:	23fa      	movs	r3, #250	@ 0xfa
 80037b8:	0098      	lsls	r0, r3, #2
 80037ba:	f7fc fca1 	bl	8000100 <__udivsi3>
 80037be:	0003      	movs	r3, r0
 80037c0:	0019      	movs	r1, r3
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fc fc9c 	bl	8000100 <__udivsi3>
 80037c8:	0003      	movs	r3, r0
 80037ca:	0018      	movs	r0, r3
 80037cc:	f001 f951 	bl	8004a72 <HAL_SYSTICK_Config>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d112      	bne.n	80037fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d80a      	bhi.n	80037f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	2301      	movs	r3, #1
 80037de:	425b      	negs	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	0018      	movs	r0, r3
 80037e4:	f001 f930 	bl	8004a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_InitTick+0x90>)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00d      	b.n	800380c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80037f0:	230f      	movs	r3, #15
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e008      	b.n	800380c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037fa:	230f      	movs	r3, #15
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e003      	b.n	800380c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800380c:	230f      	movs	r3, #15
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b005      	add	sp, #20
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	20000008 	.word	0x20000008
 8003820:	20000000 	.word	0x20000000
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_IncTick+0x1c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	001a      	movs	r2, r3
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_IncTick+0x20>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	18d2      	adds	r2, r2, r3
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <HAL_IncTick+0x20>)
 800383a:	601a      	str	r2, [r3, #0]
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	20000008 	.word	0x20000008
 8003848:	2000015c 	.word	0x2000015c

0800384c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  return uwTick;
 8003850:	4b02      	ldr	r3, [pc, #8]	@ (800385c <HAL_GetTick+0x10>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	2000015c 	.word	0x2000015c

08003860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff fff0 	bl	800384c <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	d005      	beq.n	8003886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800387a:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <HAL_Delay+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	001a      	movs	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	189b      	adds	r3, r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	f7ff ffe0 	bl	800384c <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d8f7      	bhi.n	8003888 <HAL_Delay+0x28>
  {
  }
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	20000008 	.word	0x20000008

080038a8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80038b8:	401a      	ands	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	fe3fffff 	.word	0xfe3fffff

080038d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	23e0      	movs	r3, #224	@ 0xe0
 80038de:	045b      	lsls	r3, r3, #17
 80038e0:	4013      	ands	r3, r2
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b002      	add	sp, #8
 80038e8:	bd80      	pop	{r7, pc}

080038ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	2104      	movs	r1, #4
 80038fe:	400a      	ands	r2, r1
 8003900:	2107      	movs	r1, #7
 8003902:	4091      	lsls	r1, r2
 8003904:	000a      	movs	r2, r1
 8003906:	43d2      	mvns	r2, r2
 8003908:	401a      	ands	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2104      	movs	r1, #4
 800390e:	400b      	ands	r3, r1
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4099      	lsls	r1, r3
 8003914:	000b      	movs	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}

08003924 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	2104      	movs	r1, #4
 8003936:	400a      	ands	r2, r1
 8003938:	2107      	movs	r1, #7
 800393a:	4091      	lsls	r1, r2
 800393c:	000a      	movs	r2, r1
 800393e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2104      	movs	r1, #4
 8003944:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003946:	40da      	lsrs	r2, r3
 8003948:	0013      	movs	r3, r2
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}

08003952 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	23c0      	movs	r3, #192	@ 0xc0
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	4013      	ands	r3, r2
 8003964:	d101      	bne.n	800396a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	211f      	movs	r1, #31
 8003988:	400a      	ands	r2, r1
 800398a:	210f      	movs	r1, #15
 800398c:	4091      	lsls	r1, r2
 800398e:	000a      	movs	r2, r1
 8003990:	43d2      	mvns	r2, r2
 8003992:	401a      	ands	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0e9b      	lsrs	r3, r3, #26
 8003998:	210f      	movs	r1, #15
 800399a:	4019      	ands	r1, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	201f      	movs	r0, #31
 80039a0:	4003      	ands	r3, r0
 80039a2:	4099      	lsls	r1, r3
 80039a4:	000b      	movs	r3, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b004      	add	sp, #16
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	035b      	lsls	r3, r3, #13
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	0352      	lsls	r2, r2, #13
 80039e8:	0b52      	lsrs	r2, r2, #13
 80039ea:	43d2      	mvns	r2, r2
 80039ec:	401a      	ands	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	0212      	lsls	r2, r2, #8
 8003a10:	43d2      	mvns	r2, r2
 8003a12:	401a      	ands	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	4904      	ldr	r1, [pc, #16]	@ (8003a30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a1e:	400b      	ands	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	07ffff00 	.word	0x07ffff00

08003a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a05      	ldr	r2, [pc, #20]	@ (8003a58 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	0552      	lsls	r2, r2, #21
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	6fffffe8 	.word	0x6fffffe8

08003a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	055b      	lsls	r3, r3, #21
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	055b      	lsls	r3, r3, #21
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d101      	bne.n	8003a7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a04      	ldr	r2, [pc, #16]	@ (8003aa4 <LL_ADC_Enable+0x20>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	2201      	movs	r2, #1
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	7fffffe8 	.word	0x7fffffe8

08003aa8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	@ (8003ac8 <LL_ADC_Disable+0x20>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2202      	movs	r2, #2
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	7fffffe8 	.word	0x7fffffe8

08003acc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <LL_ADC_IsEnabled+0x18>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <LL_ADC_IsEnabled+0x1a>
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}

08003aee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsDisableOngoing+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsDisableOngoing+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <LL_ADC_REG_StartConversion+0x20>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2204      	movs	r2, #4
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	7fffffe8 	.word	0x7fffffe8

08003b34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2204      	movs	r2, #4
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d101      	bne.n	8003b4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b60:	231f      	movs	r3, #31
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e17f      	b.n	8003e7e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff fcd9 	bl	8003540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2254      	movs	r2, #84	@ 0x54
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7ff ff5b 	bl	8003a5c <LL_ADC_IsInternalRegulatorEnabled>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7ff ff40 	bl	8003a34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bb4:	4bb4      	ldr	r3, [pc, #720]	@ (8003e88 <HAL_ADC_Init+0x330>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	49b4      	ldr	r1, [pc, #720]	@ (8003e8c <HAL_ADC_Init+0x334>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc faa0 	bl	8000100 <__udivsi3>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bc8:	e002      	b.n	8003bd0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f9      	bne.n	8003bca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff ff3e 	bl	8003a5c <LL_ADC_IsInternalRegulatorEnabled>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d10f      	bne.n	8003c04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	2210      	movs	r2, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff ff93 	bl	8003b34 <LL_ADC_REG_IsConversionOngoing>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	2210      	movs	r2, #16
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d000      	beq.n	8003c1e <HAL_ADC_Init+0xc6>
 8003c1c:	e122      	b.n	8003e64 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d000      	beq.n	8003c26 <HAL_ADC_Init+0xce>
 8003c24:	e11e      	b.n	8003e64 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	4a99      	ldr	r2, [pc, #612]	@ (8003e90 <HAL_ADC_Init+0x338>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2202      	movs	r2, #2
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7ff ff46 	bl	8003acc <LL_ADC_IsEnabled>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d000      	beq.n	8003c46 <HAL_ADC_Init+0xee>
 8003c44:	e0ad      	b.n	8003da2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7e1b      	ldrb	r3, [r3, #24]
 8003c4e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003c50:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7e5b      	ldrb	r3, [r3, #25]
 8003c56:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c58:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	7e9b      	ldrb	r3, [r3, #26]
 8003c5e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c60:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_ADC_Init+0x118>
 8003c6a:	2380      	movs	r3, #128	@ 0x80
 8003c6c:	015b      	lsls	r3, r3, #5
 8003c6e:	e000      	b.n	8003c72 <HAL_ADC_Init+0x11a>
 8003c70:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c72:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c78:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da04      	bge.n	8003c8c <HAL_ADC_Init+0x134>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	e001      	b.n	8003c90 <HAL_ADC_Init+0x138>
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003c90:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	212c      	movs	r1, #44	@ 0x2c
 8003c96:	5c5b      	ldrb	r3, [r3, r1]
 8003c98:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c9a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	5c9b      	ldrb	r3, [r3, r2]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d115      	bne.n	8003cd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e9b      	ldrb	r3, [r3, #26]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	0252      	lsls	r2, r2, #9
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ce4:	23e0      	movs	r3, #224	@ 0xe0
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	@ (8003e94 <HAL_ADC_Init+0x33c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0f9b      	lsrs	r3, r3, #30
 8003d12:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	223c      	movs	r2, #60	@ 0x3c
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d111      	bne.n	8003d4e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	0f9b      	lsrs	r3, r3, #30
 8003d30:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d36:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003d3c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003d42:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4a50      	ldr	r2, [pc, #320]	@ (8003e98 <HAL_ADC_Init+0x340>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	23c0      	movs	r3, #192	@ 0xc0
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d018      	beq.n	8003da2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	05db      	lsls	r3, r3, #23
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d012      	beq.n	8003da2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d00c      	beq.n	8003da2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003d88:	4b44      	ldr	r3, [pc, #272]	@ (8003e9c <HAL_ADC_Init+0x344>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a44      	ldr	r2, [pc, #272]	@ (8003ea0 <HAL_ADC_Init+0x348>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	23f0      	movs	r3, #240	@ 0xf0
 8003d98:	039b      	lsls	r3, r3, #14
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <HAL_ADC_Init+0x344>)
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003daa:	001a      	movs	r2, r3
 8003dac:	2100      	movs	r1, #0
 8003dae:	f7ff fd9c 	bl	80038ea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	493a      	ldr	r1, [pc, #232]	@ (8003ea4 <HAL_ADC_Init+0x34c>)
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	f7ff fd94 	bl	80038ea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2110      	movs	r1, #16
 8003dd6:	4249      	negs	r1, r1
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ddc:	e018      	b.n	8003e10 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	039b      	lsls	r3, r3, #14
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d112      	bne.n	8003e10 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	221c      	movs	r2, #28
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	4252      	negs	r2, r2
 8003e00:	409a      	lsls	r2, r3
 8003e02:	0011      	movs	r1, r2
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fd84 	bl	8003924 <LL_ADC_GetSamplingTimeCommonChannels>
 8003e1c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d10b      	bne.n	8003e3e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	2203      	movs	r2, #3
 8003e32:	4393      	bics	r3, r2
 8003e34:	2201      	movs	r2, #1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e3c:	e01c      	b.n	8003e78 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	2212      	movs	r2, #18
 8003e44:	4393      	bics	r3, r2
 8003e46:	2210      	movs	r2, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	2201      	movs	r2, #1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e5a:	231f      	movs	r3, #31
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e62:	e009      	b.n	8003e78 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	2210      	movs	r2, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e70:	231f      	movs	r3, #31
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003e78:	231f      	movs	r3, #31
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781b      	ldrb	r3, [r3, #0]
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b008      	add	sp, #32
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	00030d40 	.word	0x00030d40
 8003e90:	fffffefd 	.word	0xfffffefd
 8003e94:	ffde0201 	.word	0xffde0201
 8003e98:	1ffffc02 	.word	0x1ffffc02
 8003e9c:	40012708 	.word	0x40012708
 8003ea0:	ffc3ffff 	.word	0xffc3ffff
 8003ea4:	07ffff04 	.word	0x07ffff04

08003ea8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b5b0      	push	{r4, r5, r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fe3d 	bl	8003b34 <LL_ADC_REG_IsConversionOngoing>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d135      	bne.n	8003f2a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2254      	movs	r2, #84	@ 0x54
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_Start+0x24>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e035      	b.n	8003f38 <HAL_ADC_Start+0x90>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2254      	movs	r2, #84	@ 0x54
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ed4:	250f      	movs	r5, #15
 8003ed6:	197c      	adds	r4, r7, r5
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 faaa 	bl	8004434 <ADC_Enable>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ee4:	197b      	adds	r3, r7, r5
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d119      	bne.n	8003f20 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	4a13      	ldr	r2, [pc, #76]	@ (8003f40 <HAL_ADC_Start+0x98>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2280      	movs	r2, #128	@ 0x80
 8003ef6:	0052      	lsls	r2, r2, #1
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	221c      	movs	r2, #28
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2254      	movs	r2, #84	@ 0x54
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff fdf9 	bl	8003b10 <LL_ADC_REG_StartConversion>
 8003f1e:	e008      	b.n	8003f32 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2254      	movs	r2, #84	@ 0x54
 8003f24:	2100      	movs	r1, #0
 8003f26:	5499      	strb	r1, [r3, r2]
 8003f28:	e003      	b.n	8003f32 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f2a:	230f      	movs	r3, #15
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003f32:	230f      	movs	r3, #15
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b004      	add	sp, #16
 8003f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f40:	fffff0fe 	.word	0xfffff0fe

08003f44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d102      	bne.n	8003f5c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003f56:	2308      	movs	r3, #8
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e00f      	b.n	8003f7c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	d007      	beq.n	8003f78 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e072      	b.n	800405e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003f78:	2304      	movs	r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f7c:	f7ff fc66 	bl	800384c <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f84:	e01f      	b.n	8003fc6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f8c:	f7ff fc5e 	bl	800384c <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <HAL_ADC_PollForConversion+0x5e>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d111      	bne.n	8003fc6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	d10b      	bne.n	8003fc6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2254      	movs	r2, #84	@ 0x54
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e04b      	b.n	800405e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d0d9      	beq.n	8003f86 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	2280      	movs	r2, #128	@ 0x80
 8003fd8:	0092      	lsls	r2, r2, #2
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fcb4 	bl	8003952 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d02e      	beq.n	800404c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7e9b      	ldrb	r3, [r3, #26]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d12a      	bne.n	800404c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b08      	cmp	r3, #8
 8004002:	d123      	bne.n	800404c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fd93 	bl	8003b34 <LL_ADC_REG_IsConversionOngoing>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d110      	bne.n	8004034 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	210c      	movs	r1, #12
 800401e:	438a      	bics	r2, r1
 8004020:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a10      	ldr	r2, [pc, #64]	@ (8004068 <HAL_ADC_PollForConversion+0x124>)
 8004028:	4013      	ands	r3, r2
 800402a:	2201      	movs	r2, #1
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	659a      	str	r2, [r3, #88]	@ 0x58
 8004032:	e00b      	b.n	800404c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	2220      	movs	r2, #32
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	2201      	movs	r2, #1
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7e1b      	ldrb	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	220c      	movs	r2, #12
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	fffffefe 	.word	0xfffffefe

0800406c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408e:	2317      	movs	r3, #23
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2254      	movs	r2, #84	@ 0x54
 800409e:	5c9b      	ldrb	r3, [r3, r2]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x24>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e1c0      	b.n	800442a <HAL_ADC_ConfigChannel+0x3a6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2254      	movs	r2, #84	@ 0x54
 80040ac:	2101      	movs	r1, #1
 80040ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff fd3d 	bl	8003b34 <LL_ADC_REG_IsConversionOngoing>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d000      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x3c>
 80040be:	e1a3      	b.n	8004408 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d100      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x46>
 80040c8:	e143      	b.n	8004352 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d004      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040da:	4ac1      	ldr	r2, [pc, #772]	@ (80043e0 <HAL_ADC_ConfigChannel+0x35c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0019      	movs	r1, r3
 80040ea:	0010      	movs	r0, r2
 80040ec:	f7ff fc62 	bl	80039b4 <LL_ADC_REG_SetSequencerChAdd>
 80040f0:	e0c9      	b.n	8004286 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	211f      	movs	r1, #31
 80040fc:	400b      	ands	r3, r1
 80040fe:	210f      	movs	r1, #15
 8004100:	4099      	lsls	r1, r3
 8004102:	000b      	movs	r3, r1
 8004104:	43db      	mvns	r3, r3
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	035b      	lsls	r3, r3, #13
 8004110:	0b5b      	lsrs	r3, r3, #13
 8004112:	d105      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x9c>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	221f      	movs	r2, #31
 800411c:	4013      	ands	r3, r2
 800411e:	e098      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	4013      	ands	r3, r2
 8004128:	d000      	beq.n	800412c <HAL_ADC_ConfigChannel+0xa8>
 800412a:	e091      	b.n	8004250 <HAL_ADC_ConfigChannel+0x1cc>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d000      	beq.n	8004138 <HAL_ADC_ConfigChannel+0xb4>
 8004136:	e089      	b.n	800424c <HAL_ADC_ConfigChannel+0x1c8>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	4013      	ands	r3, r2
 8004140:	d000      	beq.n	8004144 <HAL_ADC_ConfigChannel+0xc0>
 8004142:	e081      	b.n	8004248 <HAL_ADC_ConfigChannel+0x1c4>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	4013      	ands	r3, r2
 800414c:	d000      	beq.n	8004150 <HAL_ADC_ConfigChannel+0xcc>
 800414e:	e079      	b.n	8004244 <HAL_ADC_ConfigChannel+0x1c0>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	4013      	ands	r3, r2
 8004158:	d000      	beq.n	800415c <HAL_ADC_ConfigChannel+0xd8>
 800415a:	e071      	b.n	8004240 <HAL_ADC_ConfigChannel+0x1bc>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2220      	movs	r2, #32
 8004162:	4013      	ands	r3, r2
 8004164:	d000      	beq.n	8004168 <HAL_ADC_ConfigChannel+0xe4>
 8004166:	e069      	b.n	800423c <HAL_ADC_ConfigChannel+0x1b8>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	4013      	ands	r3, r2
 8004170:	d000      	beq.n	8004174 <HAL_ADC_ConfigChannel+0xf0>
 8004172:	e061      	b.n	8004238 <HAL_ADC_ConfigChannel+0x1b4>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2280      	movs	r2, #128	@ 0x80
 800417a:	4013      	ands	r3, r2
 800417c:	d000      	beq.n	8004180 <HAL_ADC_ConfigChannel+0xfc>
 800417e:	e059      	b.n	8004234 <HAL_ADC_ConfigChannel+0x1b0>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d151      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x1ac>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d149      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1a8>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4013      	ands	r3, r2
 80041a2:	d141      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x1a4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	4013      	ands	r3, r2
 80041ae:	d139      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1a0>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	4013      	ands	r3, r2
 80041ba:	d131      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x19c>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	4013      	ands	r3, r2
 80041c6:	d129      	bne.n	800421c <HAL_ADC_ConfigChannel+0x198>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	01db      	lsls	r3, r3, #7
 80041d0:	4013      	ands	r3, r2
 80041d2:	d121      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x194>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	4013      	ands	r3, r2
 80041de:	d119      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x190>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	4013      	ands	r3, r2
 80041ea:	d111      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x18c>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	d109      	bne.n	800420c <HAL_ADC_ConfigChannel+0x188>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	02db      	lsls	r3, r3, #11
 8004200:	4013      	ands	r3, r2
 8004202:	d001      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x184>
 8004204:	2312      	movs	r3, #18
 8004206:	e024      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004208:	2300      	movs	r3, #0
 800420a:	e022      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 800420c:	2311      	movs	r3, #17
 800420e:	e020      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004210:	2310      	movs	r3, #16
 8004212:	e01e      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004214:	230f      	movs	r3, #15
 8004216:	e01c      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004218:	230e      	movs	r3, #14
 800421a:	e01a      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 800421c:	230d      	movs	r3, #13
 800421e:	e018      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004220:	230c      	movs	r3, #12
 8004222:	e016      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004224:	230b      	movs	r3, #11
 8004226:	e014      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004228:	230a      	movs	r3, #10
 800422a:	e012      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 800422c:	2309      	movs	r3, #9
 800422e:	e010      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004230:	2308      	movs	r3, #8
 8004232:	e00e      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004234:	2307      	movs	r3, #7
 8004236:	e00c      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004238:	2306      	movs	r3, #6
 800423a:	e00a      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 800423c:	2305      	movs	r3, #5
 800423e:	e008      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004240:	2304      	movs	r3, #4
 8004242:	e006      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004244:	2303      	movs	r3, #3
 8004246:	e004      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	2302      	movs	r3, #2
 800424a:	e002      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	2300      	movs	r3, #0
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	6852      	ldr	r2, [r2, #4]
 8004256:	201f      	movs	r0, #31
 8004258:	4002      	ands	r2, r0
 800425a:	4093      	lsls	r3, r2
 800425c:	000a      	movs	r2, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	429a      	cmp	r2, r3
 8004272:	d808      	bhi.n	8004286 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	001a      	movs	r2, r3
 8004282:	f7ff fb77 	bl	8003974 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	001a      	movs	r2, r3
 8004294:	f7ff fbb2 	bl	80039fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db00      	blt.n	80042a2 <HAL_ADC_ConfigChannel+0x21e>
 80042a0:	e0bc      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a2:	4b50      	ldr	r3, [pc, #320]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff fb13 	bl	80038d0 <LL_ADC_GetCommonPathInternalCh>
 80042aa:	0003      	movs	r3, r0
 80042ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4d      	ldr	r2, [pc, #308]	@ (80043e8 <HAL_ADC_ConfigChannel+0x364>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d122      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042c0:	d11d      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2280      	movs	r2, #128	@ 0x80
 80042c6:	0412      	lsls	r2, r2, #16
 80042c8:	4313      	orrs	r3, r2
 80042ca:	4a46      	ldr	r2, [pc, #280]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 80042cc:	0019      	movs	r1, r3
 80042ce:	0010      	movs	r0, r2
 80042d0:	f7ff faea 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042d4:	4b45      	ldr	r3, [pc, #276]	@ (80043ec <HAL_ADC_ConfigChannel+0x368>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4945      	ldr	r1, [pc, #276]	@ (80043f0 <HAL_ADC_ConfigChannel+0x36c>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f7fb ff10 	bl	8000100 <__udivsi3>
 80042e0:	0003      	movs	r3, r0
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	0013      	movs	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042ee:	e002      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f9      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042fc:	e08e      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3c      	ldr	r2, [pc, #240]	@ (80043f4 <HAL_ADC_ConfigChannel+0x370>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10e      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	045b      	lsls	r3, r3, #17
 800430e:	4013      	ands	r3, r2
 8004310:	d109      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	0452      	lsls	r2, r2, #17
 8004318:	4313      	orrs	r3, r2
 800431a:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 800431c:	0019      	movs	r1, r3
 800431e:	0010      	movs	r0, r2
 8004320:	f7ff fac2 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
 8004324:	e07a      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a33      	ldr	r2, [pc, #204]	@ (80043f8 <HAL_ADC_ConfigChannel+0x374>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d000      	beq.n	8004332 <HAL_ADC_ConfigChannel+0x2ae>
 8004330:	e074      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	03db      	lsls	r3, r3, #15
 8004338:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800433a:	d000      	beq.n	800433e <HAL_ADC_ConfigChannel+0x2ba>
 800433c:	e06e      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	03d2      	lsls	r2, r2, #15
 8004344:	4313      	orrs	r3, r2
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 8004348:	0019      	movs	r1, r3
 800434a:	0010      	movs	r0, r2
 800434c:	f7ff faac 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
 8004350:	e064      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	429a      	cmp	r2, r3
 800435c:	d004      	beq.n	8004368 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004362:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <HAL_ADC_ConfigChannel+0x35c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d107      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0019      	movs	r1, r3
 8004372:	0010      	movs	r0, r2
 8004374:	f7ff fb2f 	bl	80039d6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da4d      	bge.n	800441c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004380:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 8004382:	0018      	movs	r0, r3
 8004384:	f7ff faa4 	bl	80038d0 <LL_ADC_GetCommonPathInternalCh>
 8004388:	0003      	movs	r3, r0
 800438a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <HAL_ADC_ConfigChannel+0x364>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4a18      	ldr	r2, [pc, #96]	@ (80043fc <HAL_ADC_ConfigChannel+0x378>)
 800439a:	4013      	ands	r3, r2
 800439c:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 800439e:	0019      	movs	r1, r3
 80043a0:	0010      	movs	r0, r2
 80043a2:	f7ff fa81 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
 80043a6:	e039      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_ADC_ConfigChannel+0x370>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4a12      	ldr	r2, [pc, #72]	@ (8004400 <HAL_ADC_ConfigChannel+0x37c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 80043ba:	0019      	movs	r1, r3
 80043bc:	0010      	movs	r0, r2
 80043be:	f7ff fa73 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
 80043c2:	e02b      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0b      	ldr	r2, [pc, #44]	@ (80043f8 <HAL_ADC_ConfigChannel+0x374>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d126      	bne.n	800441c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004404 <HAL_ADC_ConfigChannel+0x380>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	4a03      	ldr	r2, [pc, #12]	@ (80043e4 <HAL_ADC_ConfigChannel+0x360>)
 80043d6:	0019      	movs	r1, r3
 80043d8:	0010      	movs	r0, r2
 80043da:	f7ff fa65 	bl	80038a8 <LL_ADC_SetCommonPathInternalCh>
 80043de:	e01d      	b.n	800441c <HAL_ADC_ConfigChannel+0x398>
 80043e0:	80000004 	.word	0x80000004
 80043e4:	40012708 	.word	0x40012708
 80043e8:	b0001000 	.word	0xb0001000
 80043ec:	20000000 	.word	0x20000000
 80043f0:	00030d40 	.word	0x00030d40
 80043f4:	b8004000 	.word	0xb8004000
 80043f8:	b4002000 	.word	0xb4002000
 80043fc:	ff7fffff 	.word	0xff7fffff
 8004400:	feffffff 	.word	0xfeffffff
 8004404:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440c:	2220      	movs	r2, #32
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004414:	2317      	movs	r3, #23
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2254      	movs	r2, #84	@ 0x54
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004424:	2317      	movs	r3, #23
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	781b      	ldrb	r3, [r3, #0]
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b006      	add	sp, #24
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			@ (mov r8, r8)

08004434 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff fb41 	bl	8003acc <LL_ADC_IsEnabled>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d000      	beq.n	8004450 <ADC_Enable+0x1c>
 800444e:	e069      	b.n	8004524 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4a36      	ldr	r2, [pc, #216]	@ (8004530 <ADC_Enable+0xfc>)
 8004458:	4013      	ands	r3, r2
 800445a:	d00d      	beq.n	8004478 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	2210      	movs	r2, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446c:	2201      	movs	r2, #1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e056      	b.n	8004526 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff fb01 	bl	8003a84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004482:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <ADC_Enable+0x100>)
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fa23 	bl	80038d0 <LL_ADC_GetCommonPathInternalCh>
 800448a:	0002      	movs	r2, r0
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	4013      	ands	r3, r2
 8004492:	d00f      	beq.n	80044b4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <ADC_Enable+0x104>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4928      	ldr	r1, [pc, #160]	@ (800453c <ADC_Enable+0x108>)
 800449a:	0018      	movs	r0, r3
 800449c:	f7fb fe30 	bl	8000100 <__udivsi3>
 80044a0:	0003      	movs	r3, r0
 80044a2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80044a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044a6:	e002      	b.n	80044ae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f9      	bne.n	80044a8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7e5b      	ldrb	r3, [r3, #25]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d033      	beq.n	8004524 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80044bc:	f7ff f9c6 	bl	800384c <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c4:	e027      	b.n	8004516 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f7ff fafe 	bl	8003acc <LL_ADC_IsEnabled>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d104      	bne.n	80044de <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fad3 	bl	8003a84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044de:	f7ff f9b5 	bl	800384c <HAL_GetTick>
 80044e2:	0002      	movs	r2, r0
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d914      	bls.n	8004516 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d00d      	beq.n	8004516 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	2210      	movs	r2, #16
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2201      	movs	r2, #1
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e007      	b.n	8004526 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	4013      	ands	r3, r2
 8004520:	2b01      	cmp	r3, #1
 8004522:	d1d0      	bne.n	80044c6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	80000017 	.word	0x80000017
 8004534:	40012708 	.word	0x40012708
 8004538:	20000000 	.word	0x20000000
 800453c:	00030d40 	.word	0x00030d40

08004540 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff face 	bl	8003aee <LL_ADC_IsDisableOngoing>
 8004552:	0003      	movs	r3, r0
 8004554:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0018      	movs	r0, r3
 800455c:	f7ff fab6 	bl	8003acc <LL_ADC_IsEnabled>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d046      	beq.n	80045f2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d143      	bne.n	80045f2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2205      	movs	r2, #5
 8004572:	4013      	ands	r3, r2
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10d      	bne.n	8004594 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0018      	movs	r0, r3
 800457e:	f7ff fa93 	bl	8003aa8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2203      	movs	r2, #3
 8004588:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800458a:	f7ff f95f 	bl	800384c <HAL_GetTick>
 800458e:	0003      	movs	r3, r0
 8004590:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004592:	e028      	b.n	80045e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	2210      	movs	r2, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2201      	movs	r2, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e021      	b.n	80045f4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b0:	f7ff f94c 	bl	800384c <HAL_GetTick>
 80045b4:	0002      	movs	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d913      	bls.n	80045e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	d00d      	beq.n	80045e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	2210      	movs	r2, #16
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	2201      	movs	r2, #1
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e006      	b.n	80045f4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d1de      	bne.n	80045b0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LL_ADC_GetCommonClock>:
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	23f0      	movs	r3, #240	@ 0xf0
 800460a:	039b      	lsls	r3, r3, #14
 800460c:	4013      	ands	r3, r2
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <LL_ADC_GetClock>:
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	0f9b      	lsrs	r3, r3, #30
 8004624:	079b      	lsls	r3, r3, #30
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}

0800462e <LL_ADC_SetCalibrationFactor>:
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	22b4      	movs	r2, #180	@ 0xb4
 800463c:	589b      	ldr	r3, [r3, r2]
 800463e:	227f      	movs	r2, #127	@ 0x7f
 8004640:	4393      	bics	r3, r2
 8004642:	001a      	movs	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	21b4      	movs	r1, #180	@ 0xb4
 800464c:	505a      	str	r2, [r3, r1]
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}

08004656 <LL_ADC_GetCalibrationFactor>:
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	22b4      	movs	r2, #180	@ 0xb4
 8004662:	589b      	ldr	r3, [r3, r2]
 8004664:	227f      	movs	r2, #127	@ 0x7f
 8004666:	4013      	ands	r3, r2
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <LL_ADC_Enable>:
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <LL_ADC_Enable+0x20>)
 800467e:	4013      	ands	r3, r2
 8004680:	2201      	movs	r2, #1
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	46c0      	nop			@ (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}
 8004690:	7fffffe8 	.word	0x7fffffe8

08004694 <LL_ADC_Disable>:
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <LL_ADC_Disable+0x20>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2202      	movs	r2, #2
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	7fffffe8 	.word	0x7fffffe8

080046b8 <LL_ADC_IsEnabled>:
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <LL_ADC_IsEnabled+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <LL_ADC_IsEnabled+0x1a>
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <LL_ADC_StartCalibration>:
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a05      	ldr	r2, [pc, #20]	@ (8004700 <LL_ADC_StartCalibration+0x24>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	2280      	movs	r2, #128	@ 0x80
 80046ee:	0612      	lsls	r2, r2, #24
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	609a      	str	r2, [r3, #8]
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	7fffffe8 	.word	0x7fffffe8

08004704 <LL_ADC_IsCalibrationOnGoing>:
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	0fdb      	lsrs	r3, r3, #31
 8004712:	07da      	lsls	r2, r3, #31
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	429a      	cmp	r2, r3
 800471a:	d101      	bne.n	8004720 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b08b      	sub	sp, #44	@ 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2254      	movs	r2, #84	@ 0x54
 8004740:	5c9b      	ldrb	r3, [r3, r2]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_ADCEx_Calibration_Start+0x1e>
 8004746:	2302      	movs	r3, #2
 8004748:	e0dd      	b.n	8004906 <HAL_ADCEx_Calibration_Start+0x1da>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2254      	movs	r2, #84	@ 0x54
 800474e:	2101      	movs	r1, #1
 8004750:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004752:	231f      	movs	r3, #31
 8004754:	18fc      	adds	r4, r7, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7ff fef1 	bl	8004540 <ADC_Disable>
 800475e:	0003      	movs	r3, r0
 8004760:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff ffa6 	bl	80046b8 <LL_ADC_IsEnabled>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d000      	beq.n	8004772 <HAL_ADCEx_Calibration_Start+0x46>
 8004770:	e0bc      	b.n	80048ec <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	4a66      	ldr	r2, [pc, #408]	@ (8004910 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8004778:	4013      	ands	r3, r2
 800477a:	2202      	movs	r2, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a62      	ldr	r2, [pc, #392]	@ (8004914 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	495f      	ldr	r1, [pc, #380]	@ (8004918 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800479a:	400a      	ands	r2, r1
 800479c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a2:	e02d      	b.n	8004800 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff ff97 	bl	80046dc <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047ae:	e014      	b.n	80047da <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a58      	ldr	r2, [pc, #352]	@ (800491c <HAL_ADCEx_Calibration_Start+0x1f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90d      	bls.n	80047da <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c2:	2212      	movs	r2, #18
 80047c4:	4393      	bics	r3, r2
 80047c6:	2210      	movs	r2, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2254      	movs	r2, #84	@ 0x54
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e095      	b.n	8004906 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff ff90 	bl	8004704 <LL_ADC_IsCalibrationOnGoing>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d1e3      	bne.n	80047b0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff ff32 	bl	8004656 <LL_ADC_GetCalibrationFactor>
 80047f2:	0002      	movs	r2, r0
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	3301      	adds	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	2b07      	cmp	r3, #7
 8004804:	d9ce      	bls.n	80047a4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004806:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004808:	6a38      	ldr	r0, [r7, #32]
 800480a:	f7fb fc79 	bl	8000100 <__udivsi3>
 800480e:	0003      	movs	r3, r0
 8004810:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff ff2a 	bl	8004670 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff fef8 	bl	8004616 <LL_ADC_GetClock>
 8004826:	1e03      	subs	r3, r0, #0
 8004828:	d11b      	bne.n	8004862 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800482a:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff fee5 	bl	80045fc <LL_ADC_GetCommonClock>
 8004832:	0003      	movs	r3, r0
 8004834:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	23e0      	movs	r3, #224	@ 0xe0
 800483a:	035b      	lsls	r3, r3, #13
 800483c:	429a      	cmp	r2, r3
 800483e:	d310      	bcc.n	8004862 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	0c9b      	lsrs	r3, r3, #18
 8004844:	3b03      	subs	r3, #3
 8004846:	2201      	movs	r2, #1
 8004848:	409a      	lsls	r2, r3
 800484a:	0013      	movs	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8004854:	e002      	b.n	800485c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3b01      	subs	r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f9      	bne.n	8004856 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff fedf 	bl	800462e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0018      	movs	r0, r3
 8004876:	f7ff ff0d 	bl	8004694 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800487a:	f7fe ffe7 	bl	800384c <HAL_GetTick>
 800487e:	0003      	movs	r3, r0
 8004880:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004882:	e01b      	b.n	80048bc <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004884:	f7fe ffe2 	bl	800384c <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d914      	bls.n	80048bc <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff ff0e 	bl	80046b8 <LL_ADC_IsEnabled>
 800489c:	1e03      	subs	r3, r0, #0
 800489e:	d00d      	beq.n	80048bc <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	2210      	movs	r2, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b0:	2201      	movs	r2, #1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e024      	b.n	8004906 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff fef9 	bl	80046b8 <LL_ADC_IsEnabled>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d1dc      	bne.n	8004884 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	2203      	movs	r2, #3
 80048e0:	4393      	bics	r3, r2
 80048e2:	2201      	movs	r2, #1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80048ea:	e005      	b.n	80048f8 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	2210      	movs	r2, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2254      	movs	r2, #84	@ 0x54
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004900:	231f      	movs	r3, #31
 8004902:	18fb      	adds	r3, r7, r3
 8004904:	781b      	ldrb	r3, [r3, #0]
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b00b      	add	sp, #44	@ 0x2c
 800490c:	bd90      	pop	{r4, r7, pc}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	fffffefd 	.word	0xfffffefd
 8004914:	00008003 	.word	0x00008003
 8004918:	ffff7ffc 	.word	0xffff7ffc
 800491c:	0002f1ff 	.word	0x0002f1ff
 8004920:	40012708 	.word	0x40012708

08004924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	0002      	movs	r2, r0
 800492c:	6039      	str	r1, [r7, #0]
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b7f      	cmp	r3, #127	@ 0x7f
 8004938:	d828      	bhi.n	800498c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800493a:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <__NVIC_SetPriority+0xd4>)
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b25b      	sxtb	r3, r3
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	33c0      	adds	r3, #192	@ 0xc0
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	1dfa      	adds	r2, r7, #7
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	0011      	movs	r1, r2
 8004950:	2203      	movs	r2, #3
 8004952:	400a      	ands	r2, r1
 8004954:	00d2      	lsls	r2, r2, #3
 8004956:	21ff      	movs	r1, #255	@ 0xff
 8004958:	4091      	lsls	r1, r2
 800495a:	000a      	movs	r2, r1
 800495c:	43d2      	mvns	r2, r2
 800495e:	401a      	ands	r2, r3
 8004960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	22ff      	movs	r2, #255	@ 0xff
 8004968:	401a      	ands	r2, r3
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	0018      	movs	r0, r3
 8004970:	2303      	movs	r3, #3
 8004972:	4003      	ands	r3, r0
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004978:	481f      	ldr	r0, [pc, #124]	@ (80049f8 <__NVIC_SetPriority+0xd4>)
 800497a:	1dfb      	adds	r3, r7, #7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b25b      	sxtb	r3, r3
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	430a      	orrs	r2, r1
 8004984:	33c0      	adds	r3, #192	@ 0xc0
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800498a:	e031      	b.n	80049f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800498c:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <__NVIC_SetPriority+0xd8>)
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	0019      	movs	r1, r3
 8004994:	230f      	movs	r3, #15
 8004996:	400b      	ands	r3, r1
 8004998:	3b08      	subs	r3, #8
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3306      	adds	r3, #6
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	18d3      	adds	r3, r2, r3
 80049a2:	3304      	adds	r3, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1dfa      	adds	r2, r7, #7
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	0011      	movs	r1, r2
 80049ac:	2203      	movs	r2, #3
 80049ae:	400a      	ands	r2, r1
 80049b0:	00d2      	lsls	r2, r2, #3
 80049b2:	21ff      	movs	r1, #255	@ 0xff
 80049b4:	4091      	lsls	r1, r2
 80049b6:	000a      	movs	r2, r1
 80049b8:	43d2      	mvns	r2, r2
 80049ba:	401a      	ands	r2, r3
 80049bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	22ff      	movs	r2, #255	@ 0xff
 80049c4:	401a      	ands	r2, r3
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	0018      	movs	r0, r3
 80049cc:	2303      	movs	r3, #3
 80049ce:	4003      	ands	r3, r0
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049d4:	4809      	ldr	r0, [pc, #36]	@ (80049fc <__NVIC_SetPriority+0xd8>)
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	001c      	movs	r4, r3
 80049dc:	230f      	movs	r3, #15
 80049de:	4023      	ands	r3, r4
 80049e0:	3b08      	subs	r3, #8
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	430a      	orrs	r2, r1
 80049e6:	3306      	adds	r3, #6
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	18c3      	adds	r3, r0, r3
 80049ec:	3304      	adds	r3, #4
 80049ee:	601a      	str	r2, [r3, #0]
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b003      	add	sp, #12
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	e000e100 	.word	0xe000e100
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	045b      	lsls	r3, r3, #17
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d301      	bcc.n	8004a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a14:	2301      	movs	r3, #1
 8004a16:	e010      	b.n	8004a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a18:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <SysTick_Config+0x44>)
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a20:	2301      	movs	r3, #1
 8004a22:	425b      	negs	r3, r3
 8004a24:	2103      	movs	r1, #3
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7ff ff7c 	bl	8004924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <SysTick_Config+0x44>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a32:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <SysTick_Config+0x44>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	e000e010 	.word	0xe000e010

08004a48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	210f      	movs	r1, #15
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	1c02      	adds	r2, r0, #0
 8004a58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f7ff ff5d 	bl	8004924 <__NVIC_SetPriority>
}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff ffbf 	bl	8004a00 <SysTick_Config>
 8004a82:	0003      	movs	r3, r0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a9a:	e147      	b.n	8004d2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4091      	lsls	r1, r2
 8004aa6:	000a      	movs	r2, r1
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d100      	bne.n	8004ab4 <HAL_GPIO_Init+0x28>
 8004ab2:	e138      	b.n	8004d26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d005      	beq.n	8004acc <HAL_GPIO_Init+0x40>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d130      	bne.n	8004b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	0013      	movs	r3, r2
 8004adc:	43da      	mvns	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	409a      	lsls	r2, r3
 8004aee:	0013      	movs	r3, r2
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b02:	2201      	movs	r2, #1
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	409a      	lsls	r2, r3
 8004b08:	0013      	movs	r3, r2
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	2201      	movs	r2, #1
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	0013      	movs	r3, r2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d017      	beq.n	8004b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2203      	movs	r2, #3
 8004b46:	409a      	lsls	r2, r3
 8004b48:	0013      	movs	r3, r2
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	0013      	movs	r3, r2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d123      	bne.n	8004bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	08da      	lsrs	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3208      	adds	r2, #8
 8004b7e:	0092      	lsls	r2, r2, #2
 8004b80:	58d3      	ldr	r3, [r2, r3]
 8004b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2207      	movs	r2, #7
 8004b88:	4013      	ands	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	220f      	movs	r2, #15
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	0013      	movs	r3, r2
 8004b92:	43da      	mvns	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2107      	movs	r1, #7
 8004ba2:	400b      	ands	r3, r1
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	08da      	lsrs	r2, r3, #3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3208      	adds	r2, #8
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	2203      	movs	r2, #3
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	0013      	movs	r3, r2
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	401a      	ands	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	23c0      	movs	r3, #192	@ 0xc0
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d100      	bne.n	8004c00 <HAL_GPIO_Init+0x174>
 8004bfe:	e092      	b.n	8004d26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004c00:	4a50      	ldr	r2, [pc, #320]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	089b      	lsrs	r3, r3, #2
 8004c06:	3318      	adds	r3, #24
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	589b      	ldr	r3, [r3, r2]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2203      	movs	r2, #3
 8004c12:	4013      	ands	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	220f      	movs	r2, #15
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	0013      	movs	r3, r2
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	23a0      	movs	r3, #160	@ 0xa0
 8004c28:	05db      	lsls	r3, r3, #23
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d013      	beq.n	8004c56 <HAL_GPIO_Init+0x1ca>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a45      	ldr	r2, [pc, #276]	@ (8004d48 <HAL_GPIO_Init+0x2bc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00d      	beq.n	8004c52 <HAL_GPIO_Init+0x1c6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a44      	ldr	r2, [pc, #272]	@ (8004d4c <HAL_GPIO_Init+0x2c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <HAL_GPIO_Init+0x1c2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <HAL_GPIO_Init+0x2c4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_GPIO_Init+0x1be>
 8004c46:	2303      	movs	r3, #3
 8004c48:	e006      	b.n	8004c58 <HAL_GPIO_Init+0x1cc>
 8004c4a:	2305      	movs	r3, #5
 8004c4c:	e004      	b.n	8004c58 <HAL_GPIO_Init+0x1cc>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e002      	b.n	8004c58 <HAL_GPIO_Init+0x1cc>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_GPIO_Init+0x1cc>
 8004c56:	2300      	movs	r3, #0
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	2103      	movs	r1, #3
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	00d2      	lsls	r2, r2, #3
 8004c60:	4093      	lsls	r3, r2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c68:	4936      	ldr	r1, [pc, #216]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3318      	adds	r3, #24
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c76:	4b33      	ldr	r3, [pc, #204]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	035b      	lsls	r3, r3, #13
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004ca0:	4b28      	ldr	r3, [pc, #160]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	2380      	movs	r3, #128	@ 0x80
 8004cb6:	039b      	lsls	r3, r3, #14
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cca:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004ccc:	2384      	movs	r3, #132	@ 0x84
 8004cce:	58d3      	ldr	r3, [r2, r3]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	029b      	lsls	r3, r3, #10
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cf0:	4914      	ldr	r1, [pc, #80]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004cf2:	2284      	movs	r2, #132	@ 0x84
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004cf8:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	58d3      	ldr	r3, [r2, r3]
 8004cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43da      	mvns	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	4013      	ands	r3, r2
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d1e:	4909      	ldr	r1, [pc, #36]	@ (8004d44 <HAL_GPIO_Init+0x2b8>)
 8004d20:	2280      	movs	r2, #128	@ 0x80
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	40da      	lsrs	r2, r3
 8004d34:	1e13      	subs	r3, r2, #0
 8004d36:	d000      	beq.n	8004d3a <HAL_GPIO_Init+0x2ae>
 8004d38:	e6b0      	b.n	8004a9c <HAL_GPIO_Init+0x10>
  }
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46c0      	nop			@ (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021800 	.word	0x40021800
 8004d48:	50000400 	.word	0x50000400
 8004d4c:	50000800 	.word	0x50000800
 8004d50:	50000c00 	.word	0x50000c00

08004d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	0008      	movs	r0, r1
 8004d5e:	0011      	movs	r1, r2
 8004d60:	1cbb      	adds	r3, r7, #2
 8004d62:	1c02      	adds	r2, r0, #0
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	1c7b      	adds	r3, r7, #1
 8004d68:	1c0a      	adds	r2, r1, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d6c:	1c7b      	adds	r3, r7, #1
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d74:	1cbb      	adds	r3, r7, #2
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d7c:	e003      	b.n	8004d86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d7e:	1cbb      	adds	r3, r7, #2
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b002      	add	sp, #8
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a19      	ldr	r2, [pc, #100]	@ (8004e04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	4b17      	ldr	r3, [pc, #92]	@ (8004e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d11f      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004db4:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	0013      	movs	r3, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	189b      	adds	r3, r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4912      	ldr	r1, [pc, #72]	@ (8004e0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f7fb f99c 	bl	8000100 <__udivsi3>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dce:	e008      	b.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e001      	b.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e009      	b.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	2380      	movs	r3, #128	@ 0x80
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	401a      	ands	r2, r3
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d0ed      	beq.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	40007000 	.word	0x40007000
 8004e04:	fffff9ff 	.word	0xfffff9ff
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	000f4240 	.word	0x000f4240

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e2f3      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <HAL_RCC_OscConfig+0x1e>
 8004e2c:	e07c      	b.n	8004f28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	4bc3      	ldr	r3, [pc, #780]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2238      	movs	r2, #56	@ 0x38
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e38:	4bc0      	ldr	r3, [pc, #768]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	4013      	ands	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d102      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3e>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d002      	beq.n	8004e54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4bb9      	ldr	r3, [pc, #740]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d062      	beq.n	8004f26 <HAL_RCC_OscConfig+0x116>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d15e      	bne.n	8004f26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e2ce      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	025b      	lsls	r3, r3, #9
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_OscConfig+0x78>
 8004e78:	4bb0      	ldr	r3, [pc, #704]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4baf      	ldr	r3, [pc, #700]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e7e:	2180      	movs	r1, #128	@ 0x80
 8004e80:	0249      	lsls	r1, r1, #9
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e020      	b.n	8004eca <HAL_RCC_OscConfig+0xba>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	23a0      	movs	r3, #160	@ 0xa0
 8004e8e:	02db      	lsls	r3, r3, #11
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10e      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xa2>
 8004e94:	4ba9      	ldr	r3, [pc, #676]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4ba8      	ldr	r3, [pc, #672]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004e9a:	2180      	movs	r1, #128	@ 0x80
 8004e9c:	02c9      	lsls	r1, r1, #11
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	4ba6      	ldr	r3, [pc, #664]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004ea8:	2180      	movs	r1, #128	@ 0x80
 8004eaa:	0249      	lsls	r1, r1, #9
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e00b      	b.n	8004eca <HAL_RCC_OscConfig+0xba>
 8004eb2:	4ba2      	ldr	r3, [pc, #648]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4ba1      	ldr	r3, [pc, #644]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004eb8:	49a1      	ldr	r1, [pc, #644]	@ (8005140 <HAL_RCC_OscConfig+0x330>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004ec4:	499f      	ldr	r1, [pc, #636]	@ (8005144 <HAL_RCC_OscConfig+0x334>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d014      	beq.n	8004efc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fe fcbb 	bl	800384c <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fcb6 	bl	800384c <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e28d      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eee:	4b93      	ldr	r3, [pc, #588]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xcc>
 8004efa:	e015      	b.n	8004f28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe fca6 	bl	800384c <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f06:	f7fe fca1 	bl	800384c <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b64      	cmp	r3, #100	@ 0x64
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e278      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f18:	4b88      	ldr	r3, [pc, #544]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2380      	movs	r3, #128	@ 0x80
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	4013      	ands	r3, r2
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0xf6>
 8004f24:	e000      	b.n	8004f28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d100      	bne.n	8004f34 <HAL_RCC_OscConfig+0x124>
 8004f32:	e099      	b.n	8005068 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f34:	4b81      	ldr	r3, [pc, #516]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2238      	movs	r2, #56	@ 0x38
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2203      	movs	r2, #3
 8004f44:	4013      	ands	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_OscConfig+0x144>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d002      	beq.n	8004f5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d135      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f5a:	4b78      	ldr	r3, [pc, #480]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2380      	movs	r3, #128	@ 0x80
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4013      	ands	r3, r2
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x162>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e24b      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b72      	ldr	r3, [pc, #456]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a74      	ldr	r2, [pc, #464]	@ (8005148 <HAL_RCC_OscConfig+0x338>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	4b6e      	ldr	r3, [pc, #440]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d112      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_RCC_OscConfig+0x33c>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	4b67      	ldr	r3, [pc, #412]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fa2:	4b66      	ldr	r3, [pc, #408]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0adb      	lsrs	r3, r3, #11
 8004fa8:	2207      	movs	r2, #7
 8004faa:	4013      	ands	r3, r2
 8004fac:	4a68      	ldr	r2, [pc, #416]	@ (8005150 <HAL_RCC_OscConfig+0x340>)
 8004fae:	40da      	lsrs	r2, r3
 8004fb0:	4b68      	ldr	r3, [pc, #416]	@ (8005154 <HAL_RCC_OscConfig+0x344>)
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fb4:	4b68      	ldr	r3, [pc, #416]	@ (8005158 <HAL_RCC_OscConfig+0x348>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fe fbeb 	bl	8003794 <HAL_InitTick>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d051      	beq.n	8005066 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e221      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d030      	beq.n	8005030 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fce:	4b5b      	ldr	r3, [pc, #364]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800514c <HAL_RCC_OscConfig+0x33c>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	4b57      	ldr	r3, [pc, #348]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004fe2:	4b56      	ldr	r3, [pc, #344]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b55      	ldr	r3, [pc, #340]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8004fe8:	2180      	movs	r1, #128	@ 0x80
 8004fea:	0049      	lsls	r1, r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fc2c 	bl	800384c <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffa:	f7fe fc27 	bl	800384c <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1fe      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800500c:	4b4b      	ldr	r3, [pc, #300]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4013      	ands	r3, r2
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005018:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a4a      	ldr	r2, [pc, #296]	@ (8005148 <HAL_RCC_OscConfig+0x338>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	4b44      	ldr	r3, [pc, #272]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	e01b      	b.n	8005068 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005030:	4b42      	ldr	r3, [pc, #264]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005036:	4949      	ldr	r1, [pc, #292]	@ (800515c <HAL_RCC_OscConfig+0x34c>)
 8005038:	400a      	ands	r2, r1
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe fc06 	bl	800384c <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005046:	f7fe fc01 	bl	800384c <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e1d8      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005058:	4b38      	ldr	r3, [pc, #224]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4013      	ands	r3, r2
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x236>
 8005064:	e000      	b.n	8005068 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005066:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	4013      	ands	r3, r2
 8005070:	d047      	beq.n	8005102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005072:	4b32      	ldr	r3, [pc, #200]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2238      	movs	r2, #56	@ 0x38
 8005078:	4013      	ands	r3, r2
 800507a:	2b18      	cmp	r3, #24
 800507c:	d10a      	bne.n	8005094 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800507e:	4b2f      	ldr	r3, [pc, #188]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	2202      	movs	r2, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d03c      	beq.n	8005102 <HAL_RCC_OscConfig+0x2f2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d138      	bne.n	8005102 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e1ba      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800509c:	4b27      	ldr	r3, [pc, #156]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 800509e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050a0:	4b26      	ldr	r3, [pc, #152]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 80050a2:	2101      	movs	r1, #1
 80050a4:	430a      	orrs	r2, r1
 80050a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fe fbd0 	bl	800384c <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fe fbcb 	bl	800384c <HAL_GetTick>
 80050b6:	0002      	movs	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1a2      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c4:	4b1d      	ldr	r3, [pc, #116]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 80050c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c8:	2202      	movs	r2, #2
 80050ca:	4013      	ands	r3, r2
 80050cc:	d0f1      	beq.n	80050b2 <HAL_RCC_OscConfig+0x2a2>
 80050ce:	e018      	b.n	8005102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 80050d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050d4:	4b19      	ldr	r3, [pc, #100]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 80050d6:	2101      	movs	r1, #1
 80050d8:	438a      	bics	r2, r1
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe fbb6 	bl	800384c <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e6:	f7fe fbb1 	bl	800384c <HAL_GetTick>
 80050ea:	0002      	movs	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e188      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f8:	4b10      	ldr	r3, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 80050fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fc:	2202      	movs	r2, #2
 80050fe:	4013      	ands	r3, r2
 8005100:	d1f1      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2204      	movs	r2, #4
 8005108:	4013      	ands	r3, r2
 800510a:	d100      	bne.n	800510e <HAL_RCC_OscConfig+0x2fe>
 800510c:	e0c6      	b.n	800529c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	231f      	movs	r3, #31
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005116:	4b09      	ldr	r3, [pc, #36]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2238      	movs	r2, #56	@ 0x38
 800511c:	4013      	ands	r3, r2
 800511e:	2b20      	cmp	r3, #32
 8005120:	d11e      	bne.n	8005160 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <HAL_RCC_OscConfig+0x32c>)
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	2202      	movs	r2, #2
 8005128:	4013      	ands	r3, r2
 800512a:	d100      	bne.n	800512e <HAL_RCC_OscConfig+0x31e>
 800512c:	e0b6      	b.n	800529c <HAL_RCC_OscConfig+0x48c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d000      	beq.n	8005138 <HAL_RCC_OscConfig+0x328>
 8005136:	e0b1      	b.n	800529c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e166      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
 800513c:	40021000 	.word	0x40021000
 8005140:	fffeffff 	.word	0xfffeffff
 8005144:	fffbffff 	.word	0xfffbffff
 8005148:	ffff80ff 	.word	0xffff80ff
 800514c:	ffffc7ff 	.word	0xffffc7ff
 8005150:	00f42400 	.word	0x00f42400
 8005154:	20000000 	.word	0x20000000
 8005158:	20000004 	.word	0x20000004
 800515c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005160:	4bac      	ldr	r3, [pc, #688]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	055b      	lsls	r3, r3, #21
 8005168:	4013      	ands	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_RCC_OscConfig+0x360>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x362>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	4ba7      	ldr	r3, [pc, #668]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800517a:	4ba6      	ldr	r3, [pc, #664]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	0549      	lsls	r1, r1, #21
 8005180:	430a      	orrs	r2, r1
 8005182:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005184:	4ba3      	ldr	r3, [pc, #652]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005188:	2380      	movs	r3, #128	@ 0x80
 800518a:	055b      	lsls	r3, r3, #21
 800518c:	4013      	ands	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005192:	231f      	movs	r3, #31
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800519a:	4b9f      	ldr	r3, [pc, #636]	@ (8005418 <HAL_RCC_OscConfig+0x608>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	2380      	movs	r3, #128	@ 0x80
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4013      	ands	r3, r2
 80051a4:	d11a      	bne.n	80051dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005418 <HAL_RCC_OscConfig+0x608>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b9b      	ldr	r3, [pc, #620]	@ (8005418 <HAL_RCC_OscConfig+0x608>)
 80051ac:	2180      	movs	r1, #128	@ 0x80
 80051ae:	0049      	lsls	r1, r1, #1
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051b4:	f7fe fb4a 	bl	800384c <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7fe fb45 	bl	800384c <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e11c      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d0:	4b91      	ldr	r3, [pc, #580]	@ (8005418 <HAL_RCC_OscConfig+0x608>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3e2>
 80051e4:	4b8b      	ldr	r3, [pc, #556]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80051e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	430a      	orrs	r2, r1
 80051ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x41c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x404>
 80051fa:	4b86      	ldr	r3, [pc, #536]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80051fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051fe:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005200:	2104      	movs	r1, #4
 8005202:	430a      	orrs	r2, r1
 8005204:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005206:	4b83      	ldr	r3, [pc, #524]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800520a:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800520c:	2101      	movs	r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x41c>
 8005214:	4b7f      	ldr	r3, [pc, #508]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005218:	4b7e      	ldr	r3, [pc, #504]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005220:	4b7c      	ldr	r3, [pc, #496]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005222:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005224:	4b7b      	ldr	r3, [pc, #492]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005226:	2104      	movs	r1, #4
 8005228:	438a      	bics	r2, r1
 800522a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fe fb0a 	bl	800384c <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	e009      	b.n	8005252 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fe fb05 	bl	800384c <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a74      	ldr	r2, [pc, #464]	@ (800541c <HAL_RCC_OscConfig+0x60c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0db      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005252:	4b70      	ldr	r3, [pc, #448]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x42e>
 800525c:	e013      	b.n	8005286 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fe faf5 	bl	800384c <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005266:	e009      	b.n	800527c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fe faf0 	bl	800384c <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a6a      	ldr	r2, [pc, #424]	@ (800541c <HAL_RCC_OscConfig+0x60c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0c6      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800527c:	4b65      	ldr	r3, [pc, #404]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800527e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005286:	231f      	movs	r3, #31
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b60      	ldr	r3, [pc, #384]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005294:	4b5f      	ldr	r3, [pc, #380]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005296:	4962      	ldr	r1, [pc, #392]	@ (8005420 <HAL_RCC_OscConfig+0x610>)
 8005298:	400a      	ands	r2, r1
 800529a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d100      	bne.n	80052a6 <HAL_RCC_OscConfig+0x496>
 80052a4:	e0b0      	b.n	8005408 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2238      	movs	r2, #56	@ 0x38
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d100      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4a4>
 80052b2:	e078      	b.n	80053a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d153      	bne.n	8005364 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052bc:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b54      	ldr	r3, [pc, #336]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80052c2:	4958      	ldr	r1, [pc, #352]	@ (8005424 <HAL_RCC_OscConfig+0x614>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fe fac0 	bl	800384c <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fe fabb 	bl	800384c <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e092      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2380      	movs	r3, #128	@ 0x80
 80052ea:	049b      	lsls	r3, r3, #18
 80052ec:	4013      	ands	r3, r2
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f0:	4b48      	ldr	r3, [pc, #288]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a4c      	ldr	r2, [pc, #304]	@ (8005428 <HAL_RCC_OscConfig+0x618>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	0019      	movs	r1, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	431a      	orrs	r2, r3
 8005318:	4b3e      	ldr	r3, [pc, #248]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800531a:	430a      	orrs	r2, r1
 800531c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800531e:	4b3d      	ldr	r3, [pc, #244]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005324:	2180      	movs	r1, #128	@ 0x80
 8005326:	0449      	lsls	r1, r1, #17
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800532c:	4b39      	ldr	r3, [pc, #228]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	4b38      	ldr	r3, [pc, #224]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005332:	2180      	movs	r1, #128	@ 0x80
 8005334:	0549      	lsls	r1, r1, #21
 8005336:	430a      	orrs	r2, r1
 8005338:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fe fa87 	bl	800384c <HAL_GetTick>
 800533e:	0003      	movs	r3, r0
 8005340:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fe fa82 	bl	800384c <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e059      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	049b      	lsls	r3, r3, #18
 800535e:	4013      	ands	r3, r2
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x534>
 8005362:	e051      	b.n	8005408 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800536a:	492e      	ldr	r1, [pc, #184]	@ (8005424 <HAL_RCC_OscConfig+0x614>)
 800536c:	400a      	ands	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fe fa6c 	bl	800384c <HAL_GetTick>
 8005374:	0003      	movs	r3, r0
 8005376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fe fa67 	bl	800384c <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e03e      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800538c:	4b21      	ldr	r3, [pc, #132]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	049b      	lsls	r3, r3, #18
 8005394:	4013      	ands	r3, r2
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005398:	4b1e      	ldr	r3, [pc, #120]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 800539e:	4923      	ldr	r1, [pc, #140]	@ (800542c <HAL_RCC_OscConfig+0x61c>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	60da      	str	r2, [r3, #12]
 80053a4:	e030      	b.n	8005408 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e02b      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80053b2:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <HAL_RCC_OscConfig+0x604>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2203      	movs	r2, #3
 80053bc:	401a      	ands	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d11e      	bne.n	8005404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2270      	movs	r2, #112	@ 0x70
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d117      	bne.n	8005404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	23fe      	movs	r3, #254	@ 0xfe
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d10e      	bne.n	8005404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	23f8      	movs	r3, #248	@ 0xf8
 80053ea:	039b      	lsls	r3, r3, #14
 80053ec:	401a      	ands	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	0f5b      	lsrs	r3, r3, #29
 80053fa:	075a      	lsls	r2, r3, #29
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b008      	add	sp, #32
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
 800541c:	00001388 	.word	0x00001388
 8005420:	efffffff 	.word	0xefffffff
 8005424:	feffffff 	.word	0xfeffffff
 8005428:	1fc1808c 	.word	0x1fc1808c
 800542c:	effefffc 	.word	0xeffefffc

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0e9      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b76      	ldr	r3, [pc, #472]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2207      	movs	r2, #7
 800544a:	4013      	ands	r3, r2
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d91e      	bls.n	8005490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b73      	ldr	r3, [pc, #460]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2207      	movs	r2, #7
 8005458:	4393      	bics	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	4b70      	ldr	r3, [pc, #448]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005464:	f7fe f9f2 	bl	800384c <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800546c:	e009      	b.n	8005482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546e:	f7fe f9ed 	bl	800384c <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4a6a      	ldr	r2, [pc, #424]	@ (8005624 <HAL_RCC_ClockConfig+0x1f4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0ca      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005482:	4b67      	ldr	r3, [pc, #412]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2207      	movs	r2, #7
 8005488:	4013      	ands	r3, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d1ee      	bne.n	800546e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2202      	movs	r2, #2
 8005496:	4013      	ands	r3, r2
 8005498:	d015      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2204      	movs	r2, #4
 80054a0:	4013      	ands	r3, r2
 80054a2:	d006      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054a4:	4b60      	ldr	r3, [pc, #384]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054aa:	21e0      	movs	r1, #224	@ 0xe0
 80054ac:	01c9      	lsls	r1, r1, #7
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4a5d      	ldr	r2, [pc, #372]	@ (800562c <HAL_RCC_ClockConfig+0x1fc>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	4b59      	ldr	r3, [pc, #356]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	d057      	beq.n	8005580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d8:	4b53      	ldr	r3, [pc, #332]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	@ 0x80
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	4013      	ands	r3, r2
 80054e2:	d12b      	bne.n	800553c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e097      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	049b      	lsls	r3, r3, #18
 80054f8:	4013      	ands	r3, r2
 80054fa:	d11f      	bne.n	800553c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e08b      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d107      	bne.n	8005518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005508:	4b47      	ldr	r3, [pc, #284]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4013      	ands	r3, r2
 8005512:	d113      	bne.n	800553c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e07f      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d106      	bne.n	800552e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005520:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 8005522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005524:	2202      	movs	r2, #2
 8005526:	4013      	ands	r3, r2
 8005528:	d108      	bne.n	800553c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e074      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552e:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 8005530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005532:	2202      	movs	r2, #2
 8005534:	4013      	ands	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e06d      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800553c:	4b3a      	ldr	r3, [pc, #232]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2207      	movs	r2, #7
 8005542:	4393      	bics	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4b37      	ldr	r3, [pc, #220]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fe f97c 	bl	800384c <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005558:	e009      	b.n	800556e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555a:	f7fe f977 	bl	800384c <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	4a2f      	ldr	r2, [pc, #188]	@ (8005624 <HAL_RCC_ClockConfig+0x1f4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e054      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2238      	movs	r2, #56	@ 0x38
 8005574:	401a      	ands	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	429a      	cmp	r2, r3
 800557e:	d1ec      	bne.n	800555a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b27      	ldr	r3, [pc, #156]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2207      	movs	r2, #7
 8005586:	4013      	ands	r3, r2
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d21e      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b24      	ldr	r3, [pc, #144]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2207      	movs	r2, #7
 8005594:	4393      	bics	r3, r2
 8005596:	0019      	movs	r1, r3
 8005598:	4b21      	ldr	r3, [pc, #132]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055a0:	f7fe f954 	bl	800384c <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055a8:	e009      	b.n	80055be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055aa:	f7fe f94f 	bl	800384c <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005624 <HAL_RCC_ClockConfig+0x1f4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e02c      	b.n	8005618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055be:	4b18      	ldr	r3, [pc, #96]	@ (8005620 <HAL_RCC_ClockConfig+0x1f0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2207      	movs	r2, #7
 80055c4:	4013      	ands	r3, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1ee      	bne.n	80055aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2204      	movs	r2, #4
 80055d2:	4013      	ands	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055d6:	4b14      	ldr	r3, [pc, #80]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a15      	ldr	r2, [pc, #84]	@ (8005630 <HAL_RCC_ClockConfig+0x200>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b10      	ldr	r3, [pc, #64]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80055ea:	f000 f829 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055ee:	0001      	movs	r1, r0
 80055f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <HAL_RCC_ClockConfig+0x1f8>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	220f      	movs	r2, #15
 80055f8:	401a      	ands	r2, r3
 80055fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <HAL_RCC_ClockConfig+0x204>)
 80055fc:	0092      	lsls	r2, r2, #2
 80055fe:	58d3      	ldr	r3, [r2, r3]
 8005600:	221f      	movs	r2, #31
 8005602:	4013      	ands	r3, r2
 8005604:	000a      	movs	r2, r1
 8005606:	40da      	lsrs	r2, r3
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_ClockConfig+0x208>)
 800560a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <HAL_RCC_ClockConfig+0x20c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0018      	movs	r0, r3
 8005612:	f7fe f8bf 	bl	8003794 <HAL_InitTick>
 8005616:	0003      	movs	r3, r0
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b004      	add	sp, #16
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40022000 	.word	0x40022000
 8005624:	00001388 	.word	0x00001388
 8005628:	40021000 	.word	0x40021000
 800562c:	fffff0ff 	.word	0xfffff0ff
 8005630:	ffff8fff 	.word	0xffff8fff
 8005634:	08006fd4 	.word	0x08006fd4
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005646:	4b3c      	ldr	r3, [pc, #240]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2238      	movs	r2, #56	@ 0x38
 800564c:	4013      	ands	r3, r2
 800564e:	d10f      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0adb      	lsrs	r3, r3, #11
 8005656:	2207      	movs	r2, #7
 8005658:	4013      	ands	r3, r2
 800565a:	2201      	movs	r2, #1
 800565c:	409a      	lsls	r2, r3
 800565e:	0013      	movs	r3, r2
 8005660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	4835      	ldr	r0, [pc, #212]	@ (800573c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005666:	f7fa fd4b 	bl	8000100 <__udivsi3>
 800566a:	0003      	movs	r3, r0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e05d      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005670:	4b31      	ldr	r3, [pc, #196]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2238      	movs	r2, #56	@ 0x38
 8005676:	4013      	ands	r3, r2
 8005678:	2b08      	cmp	r3, #8
 800567a:	d102      	bne.n	8005682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800567c:	4b30      	ldr	r3, [pc, #192]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x100>)
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e054      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005682:	4b2d      	ldr	r3, [pc, #180]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2238      	movs	r2, #56	@ 0x38
 8005688:	4013      	ands	r3, r2
 800568a:	2b10      	cmp	r3, #16
 800568c:	d138      	bne.n	8005700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800568e:	4b2a      	ldr	r3, [pc, #168]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2203      	movs	r2, #3
 8005694:	4013      	ands	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005698:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	2207      	movs	r2, #7
 80056a0:	4013      	ands	r3, r2
 80056a2:	3301      	adds	r3, #1
 80056a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4824      	ldr	r0, [pc, #144]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x100>)
 80056b0:	f7fa fd26 	bl	8000100 <__udivsi3>
 80056b4:	0003      	movs	r3, r0
 80056b6:	0019      	movs	r1, r3
 80056b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	227f      	movs	r2, #127	@ 0x7f
 80056c0:	4013      	ands	r3, r2
 80056c2:	434b      	muls	r3, r1
 80056c4:	617b      	str	r3, [r7, #20]
        break;
 80056c6:	e00d      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	481c      	ldr	r0, [pc, #112]	@ (800573c <HAL_RCC_GetSysClockFreq+0xfc>)
 80056cc:	f7fa fd18 	bl	8000100 <__udivsi3>
 80056d0:	0003      	movs	r3, r0
 80056d2:	0019      	movs	r1, r3
 80056d4:	4b18      	ldr	r3, [pc, #96]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	227f      	movs	r2, #127	@ 0x7f
 80056dc:	4013      	ands	r3, r2
 80056de:	434b      	muls	r3, r1
 80056e0:	617b      	str	r3, [r7, #20]
        break;
 80056e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80056e4:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	0f5b      	lsrs	r3, r3, #29
 80056ea:	2207      	movs	r2, #7
 80056ec:	4013      	ands	r3, r2
 80056ee:	3301      	adds	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	6978      	ldr	r0, [r7, #20]
 80056f6:	f7fa fd03 	bl	8000100 <__udivsi3>
 80056fa:	0003      	movs	r3, r0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e015      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005700:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2238      	movs	r2, #56	@ 0x38
 8005706:	4013      	ands	r3, r2
 8005708:	2b20      	cmp	r3, #32
 800570a:	d103      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e00b      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005714:	4b08      	ldr	r3, [pc, #32]	@ (8005738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2238      	movs	r2, #56	@ 0x38
 800571a:	4013      	ands	r3, r2
 800571c:	2b18      	cmp	r3, #24
 800571e:	d103      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005720:	23fa      	movs	r3, #250	@ 0xfa
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e001      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800572c:	693b      	ldr	r3, [r7, #16]
}
 800572e:	0018      	movs	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	b006      	add	sp, #24
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	40021000 	.word	0x40021000
 800573c:	00f42400 	.word	0x00f42400
 8005740:	007a1200 	.word	0x007a1200

08005744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e0a8      	b.n	80058a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	2382      	movs	r3, #130	@ 0x82
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	429a      	cmp	r2, r3
 8005768:	d009      	beq.n	800577e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	61da      	str	r2, [r3, #28]
 8005770:	e005      	b.n	800577e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	225d      	movs	r2, #93	@ 0x5d
 8005788:	5c9b      	ldrb	r3, [r3, r2]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	225c      	movs	r2, #92	@ 0x5c
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0018      	movs	r0, r3
 800579c:	f7fd ff32 	bl	8003604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	225d      	movs	r2, #93	@ 0x5d
 80057a4:	2102      	movs	r1, #2
 80057a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2140      	movs	r1, #64	@ 0x40
 80057b4:	438a      	bics	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	23e0      	movs	r3, #224	@ 0xe0
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d902      	bls.n	80057ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e002      	b.n	80057d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057ca:	2380      	movs	r3, #128	@ 0x80
 80057cc:	015b      	lsls	r3, r3, #5
 80057ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	23f0      	movs	r3, #240	@ 0xf0
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	429a      	cmp	r2, r3
 80057da:	d008      	beq.n	80057ee <HAL_SPI_Init+0xaa>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	23e0      	movs	r3, #224	@ 0xe0
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	2382      	movs	r3, #130	@ 0x82
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	401a      	ands	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	2384      	movs	r3, #132	@ 0x84
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	400b      	ands	r3, r1
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2102      	movs	r1, #2
 800580a:	400b      	ands	r3, r1
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2101      	movs	r1, #1
 8005814:	400b      	ands	r3, r1
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6999      	ldr	r1, [r3, #24]
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	400b      	ands	r3, r1
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2138      	movs	r1, #56	@ 0x38
 800582a:	400b      	ands	r3, r1
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	400b      	ands	r3, r1
 8005836:	431a      	orrs	r2, r3
 8005838:	0011      	movs	r1, r2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	401a      	ands	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	2204      	movs	r2, #4
 8005854:	401a      	ands	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	2110      	movs	r1, #16
 800585c:	400b      	ands	r3, r1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005864:	2108      	movs	r1, #8
 8005866:	400b      	ands	r3, r1
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68d9      	ldr	r1, [r3, #12]
 800586e:	23f0      	movs	r3, #240	@ 0xf0
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	400b      	ands	r3, r1
 8005874:	431a      	orrs	r2, r3
 8005876:	0011      	movs	r1, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	015b      	lsls	r3, r3, #5
 800587e:	401a      	ands	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4907      	ldr	r1, [pc, #28]	@ (80058b0 <HAL_SPI_Init+0x16c>)
 8005894:	400a      	ands	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	225d      	movs	r2, #93	@ 0x5d
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b004      	add	sp, #16
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	fffff7ff 	.word	0xfffff7ff

080058b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058c4:	231f      	movs	r3, #31
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	225c      	movs	r2, #92	@ 0x5c
 80058d0:	5c9b      	ldrb	r3, [r3, r2]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Transmit+0x26>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e147      	b.n	8005b6a <HAL_SPI_Transmit+0x2b6>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	225c      	movs	r2, #92	@ 0x5c
 80058de:	2101      	movs	r1, #1
 80058e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e2:	f7fd ffb3 	bl	800384c <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058ea:	2316      	movs	r3, #22
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	1dba      	adds	r2, r7, #6
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	225d      	movs	r2, #93	@ 0x5d
 80058f8:	5c9b      	ldrb	r3, [r3, r2]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d004      	beq.n	800590a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005900:	231f      	movs	r3, #31
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
    goto error;
 8005908:	e128      	b.n	8005b5c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_SPI_Transmit+0x64>
 8005910:	1dbb      	adds	r3, r7, #6
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005920:	e11c      	b.n	8005b5c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	225d      	movs	r2, #93	@ 0x5d
 8005926:	2103      	movs	r1, #3
 8005928:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1dba      	adds	r2, r7, #6
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1dba      	adds	r2, r7, #6
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2244      	movs	r2, #68	@ 0x44
 8005950:	2100      	movs	r1, #0
 8005952:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2246      	movs	r2, #70	@ 0x46
 8005958:	2100      	movs	r1, #0
 800595a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	429a      	cmp	r2, r3
 8005972:	d110      	bne.n	8005996 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2140      	movs	r1, #64	@ 0x40
 8005980:	438a      	bics	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2180      	movs	r1, #128	@ 0x80
 8005990:	01c9      	lsls	r1, r1, #7
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2240      	movs	r2, #64	@ 0x40
 800599e:	4013      	ands	r3, r2
 80059a0:	2b40      	cmp	r3, #64	@ 0x40
 80059a2:	d007      	beq.n	80059b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2140      	movs	r1, #64	@ 0x40
 80059b0:	430a      	orrs	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	23e0      	movs	r3, #224	@ 0xe0
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	429a      	cmp	r2, r3
 80059be:	d952      	bls.n	8005a66 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <HAL_SPI_Transmit+0x11e>
 80059c8:	2316      	movs	r3, #22
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d143      	bne.n	8005a5a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059f6:	e030      	b.n	8005a5a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2202      	movs	r2, #2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d112      	bne.n	8005a2c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a2a:	e016      	b.n	8005a5a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2c:	f7fd ff0e 	bl	800384c <HAL_GetTick>
 8005a30:	0002      	movs	r2, r0
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d802      	bhi.n	8005a42 <HAL_SPI_Transmit+0x18e>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_Transmit+0x194>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005a48:	231f      	movs	r3, #31
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	225d      	movs	r2, #93	@ 0x5d
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]
          goto error;
 8005a58:	e080      	b.n	8005b5c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1c9      	bne.n	80059f8 <HAL_SPI_Transmit+0x144>
 8005a64:	e053      	b.n	8005b0e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <HAL_SPI_Transmit+0x1c4>
 8005a6e:	2316      	movs	r3, #22
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d145      	bne.n	8005b04 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005a9e:	e031      	b.n	8005b04 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d113      	bne.n	8005ad6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ad4:	e016      	b.n	8005b04 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad6:	f7fd feb9 	bl	800384c <HAL_GetTick>
 8005ada:	0002      	movs	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d802      	bhi.n	8005aec <HAL_SPI_Transmit+0x238>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_Transmit+0x23e>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005af2:	231f      	movs	r3, #31
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	2203      	movs	r2, #3
 8005af8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	225d      	movs	r2, #93	@ 0x5d
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]
          goto error;
 8005b02:	e02b      	b.n	8005b5c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1c8      	bne.n	8005aa0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f95d 	bl	8005dd4 <SPI_EndRxTxTransaction>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005b4a:	231f      	movs	r3, #31
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e003      	b.n	8005b5c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	225d      	movs	r2, #93	@ 0x5d
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	225c      	movs	r2, #92	@ 0x5c
 8005b60:	2100      	movs	r1, #0
 8005b62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b64:	231f      	movs	r3, #31
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	781b      	ldrb	r3, [r3, #0]
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b008      	add	sp, #32
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b84:	f7fd fe62 	bl	800384c <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	18d3      	adds	r3, r2, r3
 8005b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b94:	f7fd fe5a 	bl	800384c <HAL_GetTick>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c88 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	015b      	lsls	r3, r3, #5
 8005ba2:	0d1b      	lsrs	r3, r3, #20
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	4353      	muls	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	e058      	b.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	d055      	beq.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bb2:	f7fd fe4b 	bl	800384c <HAL_GetTick>
 8005bb6:	0002      	movs	r2, r0
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d902      	bls.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d142      	bne.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	21e0      	movs	r1, #224	@ 0xe0
 8005bd4:	438a      	bics	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	2382      	movs	r3, #130	@ 0x82
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d113      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d005      	beq.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d107      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2140      	movs	r1, #64	@ 0x40
 8005c08:	438a      	bics	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c10:	2380      	movs	r3, #128	@ 0x80
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d110      	bne.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	491a      	ldr	r1, [pc, #104]	@ (8005c8c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2180      	movs	r1, #128	@ 0x80
 8005c34:	0189      	lsls	r1, r1, #6
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	225d      	movs	r2, #93	@ 0x5d
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	225c      	movs	r2, #92	@ 0x5c
 8005c46:	2100      	movs	r1, #0
 8005c48:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e017      	b.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	425a      	negs	r2, r3
 8005c6e:	4153      	adcs	r3, r2
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	001a      	movs	r2, r3
 8005c74:	1dfb      	adds	r3, r7, #7
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d197      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b008      	add	sp, #32
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	ffffdfff 	.word	0xffffdfff

08005c90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c9e:	2317      	movs	r3, #23
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ca6:	f7fd fdd1 	bl	800384c <HAL_GetTick>
 8005caa:	0002      	movs	r2, r0
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	18d3      	adds	r3, r2, r3
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005cb6:	f7fd fdc9 	bl	800384c <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cc6:	4b41      	ldr	r3, [pc, #260]	@ (8005dcc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	0013      	movs	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	00da      	lsls	r2, r3, #3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd8:	4353      	muls	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cdc:	e068      	b.n	8005db0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	23c0      	movs	r3, #192	@ 0xc0
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d10a      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d107      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	2117      	movs	r1, #23
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	d055      	beq.n	8005db0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d04:	f7fd fda2 	bl	800384c <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d902      	bls.n	8005d1a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d142      	bne.n	8005da0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	21e0      	movs	r1, #224	@ 0xe0
 8005d26:	438a      	bics	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	2382      	movs	r3, #130	@ 0x82
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d113      	bne.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	2380      	movs	r3, #128	@ 0x80
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d005      	beq.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	2380      	movs	r3, #128	@ 0x80
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d107      	bne.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	438a      	bics	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d62:	2380      	movs	r3, #128	@ 0x80
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d110      	bne.n	8005d8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4916      	ldr	r1, [pc, #88]	@ (8005dd0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2180      	movs	r1, #128	@ 0x80
 8005d86:	0189      	lsls	r1, r1, #6
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	225d      	movs	r2, #93	@ 0x5d
 8005d90:	2101      	movs	r1, #1
 8005d92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	225c      	movs	r2, #92	@ 0x5c
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e010      	b.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4013      	ands	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d18e      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b00a      	add	sp, #40	@ 0x28
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	20000000 	.word	0x20000000
 8005dd0:	ffffdfff 	.word	0xffffdfff

08005dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	23c0      	movs	r3, #192	@ 0xc0
 8005de4:	0159      	lsls	r1, r3, #5
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	0013      	movs	r3, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	f7ff ff4e 	bl	8005c90 <SPI_WaitFifoStateUntilTimeout>
 8005df4:	1e03      	subs	r3, r0, #0
 8005df6:	d007      	beq.n	8005e08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e027      	b.n	8005e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	0013      	movs	r3, r2
 8005e12:	2200      	movs	r2, #0
 8005e14:	2180      	movs	r1, #128	@ 0x80
 8005e16:	f7ff fead 	bl	8005b74 <SPI_WaitFlagStateUntilTimeout>
 8005e1a:	1e03      	subs	r3, r0, #0
 8005e1c:	d007      	beq.n	8005e2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e22:	2220      	movs	r2, #32
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e014      	b.n	8005e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	23c0      	movs	r3, #192	@ 0xc0
 8005e32:	00d9      	lsls	r1, r3, #3
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	0013      	movs	r3, r2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f7ff ff27 	bl	8005c90 <SPI_WaitFifoStateUntilTimeout>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d007      	beq.n	8005e56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e000      	b.n	8005e58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	0018      	movs	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b004      	add	sp, #16
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <memset>:
 8005e60:	0003      	movs	r3, r0
 8005e62:	1882      	adds	r2, r0, r2
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	7019      	strb	r1, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <__errno>:
 8005e70:	4b01      	ldr	r3, [pc, #4]	@ (8005e78 <__errno+0x8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	4770      	bx	lr
 8005e76:	46c0      	nop			@ (mov r8, r8)
 8005e78:	2000000c 	.word	0x2000000c

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	2600      	movs	r6, #0
 8005e80:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb4 <__libc_init_array+0x38>)
 8005e82:	4d0d      	ldr	r5, [pc, #52]	@ (8005eb8 <__libc_init_array+0x3c>)
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	42a6      	cmp	r6, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	f000 ff41 	bl	8006d14 <_init>
 8005e92:	4c0a      	ldr	r4, [pc, #40]	@ (8005ebc <__libc_init_array+0x40>)
 8005e94:	4d0a      	ldr	r5, [pc, #40]	@ (8005ec0 <__libc_init_array+0x44>)
 8005e96:	1b64      	subs	r4, r4, r5
 8005e98:	10a4      	asrs	r4, r4, #2
 8005e9a:	42a6      	cmp	r6, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	00b3      	lsls	r3, r6, #2
 8005ea2:	58eb      	ldr	r3, [r5, r3]
 8005ea4:	4798      	blx	r3
 8005ea6:	3601      	adds	r6, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	00b3      	lsls	r3, r6, #2
 8005eac:	58eb      	ldr	r3, [r5, r3]
 8005eae:	4798      	blx	r3
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	08007048 	.word	0x08007048
 8005eb8:	08007048 	.word	0x08007048
 8005ebc:	0800704c 	.word	0x0800704c
 8005ec0:	08007048 	.word	0x08007048

08005ec4 <pow>:
 8005ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec6:	0014      	movs	r4, r2
 8005ec8:	001d      	movs	r5, r3
 8005eca:	9000      	str	r0, [sp, #0]
 8005ecc:	9101      	str	r1, [sp, #4]
 8005ece:	f000 f86f 	bl	8005fb0 <__ieee754_pow>
 8005ed2:	0022      	movs	r2, r4
 8005ed4:	0006      	movs	r6, r0
 8005ed6:	000f      	movs	r7, r1
 8005ed8:	002b      	movs	r3, r5
 8005eda:	0020      	movs	r0, r4
 8005edc:	0029      	movs	r1, r5
 8005ede:	f7fc fd7f 	bl	80029e0 <__aeabi_dcmpun>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d13f      	bne.n	8005f66 <pow+0xa2>
 8005ee6:	9800      	ldr	r0, [sp, #0]
 8005ee8:	9901      	ldr	r1, [sp, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	2300      	movs	r3, #0
 8005eee:	f7fa fa8d 	bl	800040c <__aeabi_dcmpeq>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d019      	beq.n	8005f2a <pow+0x66>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2300      	movs	r3, #0
 8005efa:	0020      	movs	r0, r4
 8005efc:	0029      	movs	r1, r5
 8005efe:	f7fa fa85 	bl	800040c <__aeabi_dcmpeq>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d146      	bne.n	8005f94 <pow+0xd0>
 8005f06:	0020      	movs	r0, r4
 8005f08:	0029      	movs	r1, r5
 8005f0a:	f000 f849 	bl	8005fa0 <finite>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d029      	beq.n	8005f66 <pow+0xa2>
 8005f12:	2200      	movs	r2, #0
 8005f14:	2300      	movs	r3, #0
 8005f16:	0020      	movs	r0, r4
 8005f18:	0029      	movs	r1, r5
 8005f1a:	f7fa fa7d 	bl	8000418 <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d021      	beq.n	8005f66 <pow+0xa2>
 8005f22:	f7ff ffa5 	bl	8005e70 <__errno>
 8005f26:	2322      	movs	r3, #34	@ 0x22
 8005f28:	e01c      	b.n	8005f64 <pow+0xa0>
 8005f2a:	0030      	movs	r0, r6
 8005f2c:	0039      	movs	r1, r7
 8005f2e:	f000 f837 	bl	8005fa0 <finite>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d11b      	bne.n	8005f6e <pow+0xaa>
 8005f36:	9800      	ldr	r0, [sp, #0]
 8005f38:	9901      	ldr	r1, [sp, #4]
 8005f3a:	f000 f831 	bl	8005fa0 <finite>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d015      	beq.n	8005f6e <pow+0xaa>
 8005f42:	0020      	movs	r0, r4
 8005f44:	0029      	movs	r1, r5
 8005f46:	f000 f82b 	bl	8005fa0 <finite>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d00f      	beq.n	8005f6e <pow+0xaa>
 8005f4e:	0032      	movs	r2, r6
 8005f50:	003b      	movs	r3, r7
 8005f52:	0030      	movs	r0, r6
 8005f54:	0039      	movs	r1, r7
 8005f56:	f7fc fd43 	bl	80029e0 <__aeabi_dcmpun>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d0e1      	beq.n	8005f22 <pow+0x5e>
 8005f5e:	f7ff ff87 	bl	8005e70 <__errno>
 8005f62:	2321      	movs	r3, #33	@ 0x21
 8005f64:	6003      	str	r3, [r0, #0]
 8005f66:	0030      	movs	r0, r6
 8005f68:	0039      	movs	r1, r7
 8005f6a:	b003      	add	sp, #12
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2300      	movs	r3, #0
 8005f72:	0030      	movs	r0, r6
 8005f74:	0039      	movs	r1, r7
 8005f76:	f7fa fa49 	bl	800040c <__aeabi_dcmpeq>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0f3      	beq.n	8005f66 <pow+0xa2>
 8005f7e:	9800      	ldr	r0, [sp, #0]
 8005f80:	9901      	ldr	r1, [sp, #4]
 8005f82:	f000 f80d 	bl	8005fa0 <finite>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0ed      	beq.n	8005f66 <pow+0xa2>
 8005f8a:	0020      	movs	r0, r4
 8005f8c:	0029      	movs	r1, r5
 8005f8e:	f000 f807 	bl	8005fa0 <finite>
 8005f92:	e7c4      	b.n	8005f1e <pow+0x5a>
 8005f94:	2600      	movs	r6, #0
 8005f96:	4f01      	ldr	r7, [pc, #4]	@ (8005f9c <pow+0xd8>)
 8005f98:	e7e5      	b.n	8005f66 <pow+0xa2>
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	3ff00000 	.word	0x3ff00000

08005fa0 <finite>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	@ (8005fac <finite+0xc>)
 8005fa2:	0048      	lsls	r0, r1, #1
 8005fa4:	0840      	lsrs	r0, r0, #1
 8005fa6:	18c0      	adds	r0, r0, r3
 8005fa8:	0fc0      	lsrs	r0, r0, #31
 8005faa:	4770      	bx	lr
 8005fac:	80100000 	.word	0x80100000

08005fb0 <__ieee754_pow>:
 8005fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb2:	b095      	sub	sp, #84	@ 0x54
 8005fb4:	9202      	str	r2, [sp, #8]
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	9a03      	ldr	r2, [sp, #12]
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	0052      	lsls	r2, r2, #1
 8005fc0:	9b02      	ldr	r3, [sp, #8]
 8005fc2:	0852      	lsrs	r2, r2, #1
 8005fc4:	9204      	str	r2, [sp, #16]
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	000f      	movs	r7, r1
 8005fca:	9904      	ldr	r1, [sp, #16]
 8005fcc:	0006      	movs	r6, r0
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	d119      	bne.n	8006006 <__ieee754_pow+0x56>
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	0309      	lsls	r1, r1, #12
 8005fd6:	4079      	eors	r1, r7
 8005fd8:	0002      	movs	r2, r0
 8005fda:	000b      	movs	r3, r1
 8005fdc:	1892      	adds	r2, r2, r2
 8005fde:	415b      	adcs	r3, r3
 8005fe0:	499b      	ldr	r1, [pc, #620]	@ (8006250 <__ieee754_pow+0x2a0>)
 8005fe2:	428b      	cmp	r3, r1
 8005fe4:	d806      	bhi.n	8005ff4 <__ieee754_pow+0x44>
 8005fe6:	d001      	beq.n	8005fec <__ieee754_pow+0x3c>
 8005fe8:	f000 fcde 	bl	80069a8 <__ieee754_pow+0x9f8>
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d101      	bne.n	8005ff4 <__ieee754_pow+0x44>
 8005ff0:	f000 fcda 	bl	80069a8 <__ieee754_pow+0x9f8>
 8005ff4:	9a02      	ldr	r2, [sp, #8]
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	0030      	movs	r0, r6
 8005ffa:	0039      	movs	r1, r7
 8005ffc:	f7fa fee4 	bl	8000dc8 <__aeabi_dadd>
 8006000:	9000      	str	r0, [sp, #0]
 8006002:	9101      	str	r1, [sp, #4]
 8006004:	e0af      	b.n	8006166 <__ieee754_pow+0x1b6>
 8006006:	4a93      	ldr	r2, [pc, #588]	@ (8006254 <__ieee754_pow+0x2a4>)
 8006008:	007c      	lsls	r4, r7, #1
 800600a:	9708      	str	r7, [sp, #32]
 800600c:	900e      	str	r0, [sp, #56]	@ 0x38
 800600e:	0864      	lsrs	r4, r4, #1
 8006010:	4294      	cmp	r4, r2
 8006012:	d809      	bhi.n	8006028 <__ieee754_pow+0x78>
 8006014:	d101      	bne.n	800601a <__ieee754_pow+0x6a>
 8006016:	2800      	cmp	r0, #0
 8006018:	d1ec      	bne.n	8005ff4 <__ieee754_pow+0x44>
 800601a:	9904      	ldr	r1, [sp, #16]
 800601c:	4a8d      	ldr	r2, [pc, #564]	@ (8006254 <__ieee754_pow+0x2a4>)
 800601e:	4291      	cmp	r1, r2
 8006020:	d802      	bhi.n	8006028 <__ieee754_pow+0x78>
 8006022:	d10c      	bne.n	800603e <__ieee754_pow+0x8e>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <__ieee754_pow+0x8e>
 8006028:	4b8b      	ldr	r3, [pc, #556]	@ (8006258 <__ieee754_pow+0x2a8>)
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	4333      	orrs	r3, r6
 800602e:	d1e1      	bne.n	8005ff4 <__ieee754_pow+0x44>
 8006030:	2180      	movs	r1, #128	@ 0x80
 8006032:	9803      	ldr	r0, [sp, #12]
 8006034:	0309      	lsls	r1, r1, #12
 8006036:	4048      	eors	r0, r1
 8006038:	0003      	movs	r3, r0
 800603a:	9a02      	ldr	r2, [sp, #8]
 800603c:	e7ce      	b.n	8005fdc <__ieee754_pow+0x2c>
 800603e:	2500      	movs	r5, #0
 8006040:	9a08      	ldr	r2, [sp, #32]
 8006042:	940a      	str	r4, [sp, #40]	@ 0x28
 8006044:	42aa      	cmp	r2, r5
 8006046:	da68      	bge.n	800611a <__ieee754_pow+0x16a>
 8006048:	4a84      	ldr	r2, [pc, #528]	@ (800625c <__ieee754_pow+0x2ac>)
 800604a:	9904      	ldr	r1, [sp, #16]
 800604c:	4291      	cmp	r1, r2
 800604e:	d863      	bhi.n	8006118 <__ieee754_pow+0x168>
 8006050:	4a83      	ldr	r2, [pc, #524]	@ (8006260 <__ieee754_pow+0x2b0>)
 8006052:	4291      	cmp	r1, r2
 8006054:	d910      	bls.n	8006078 <__ieee754_pow+0xc8>
 8006056:	150a      	asrs	r2, r1, #20
 8006058:	4982      	ldr	r1, [pc, #520]	@ (8006264 <__ieee754_pow+0x2b4>)
 800605a:	1852      	adds	r2, r2, r1
 800605c:	2a14      	cmp	r2, #20
 800605e:	dd3b      	ble.n	80060d8 <__ieee754_pow+0x128>
 8006060:	2134      	movs	r1, #52	@ 0x34
 8006062:	1a89      	subs	r1, r1, r2
 8006064:	9a02      	ldr	r2, [sp, #8]
 8006066:	40ca      	lsrs	r2, r1
 8006068:	0010      	movs	r0, r2
 800606a:	4088      	lsls	r0, r1
 800606c:	4298      	cmp	r0, r3
 800606e:	d103      	bne.n	8006078 <__ieee754_pow+0xc8>
 8006070:	2101      	movs	r1, #1
 8006072:	3502      	adds	r5, #2
 8006074:	400a      	ands	r2, r1
 8006076:	1aad      	subs	r5, r5, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d03d      	beq.n	80060f8 <__ieee754_pow+0x148>
 800607c:	0030      	movs	r0, r6
 800607e:	0039      	movs	r1, r7
 8006080:	f000 fcc2 	bl	8006a08 <fabs>
 8006084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006086:	9000      	str	r0, [sp, #0]
 8006088:	9101      	str	r1, [sp, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d000      	beq.n	8006090 <__ieee754_pow+0xe0>
 800608e:	e093      	b.n	80061b8 <__ieee754_pow+0x208>
 8006090:	4a75      	ldr	r2, [pc, #468]	@ (8006268 <__ieee754_pow+0x2b8>)
 8006092:	00bb      	lsls	r3, r7, #2
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	4293      	cmp	r3, r2
 8006098:	d002      	beq.n	80060a0 <__ieee754_pow+0xf0>
 800609a:	2c00      	cmp	r4, #0
 800609c:	d000      	beq.n	80060a0 <__ieee754_pow+0xf0>
 800609e:	e08b      	b.n	80061b8 <__ieee754_pow+0x208>
 80060a0:	9b06      	ldr	r3, [sp, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da07      	bge.n	80060b6 <__ieee754_pow+0x106>
 80060a6:	9a00      	ldr	r2, [sp, #0]
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	2000      	movs	r0, #0
 80060ac:	496e      	ldr	r1, [pc, #440]	@ (8006268 <__ieee754_pow+0x2b8>)
 80060ae:	f7fb f9ef 	bl	8001490 <__aeabi_ddiv>
 80060b2:	9000      	str	r0, [sp, #0]
 80060b4:	9101      	str	r1, [sp, #4]
 80060b6:	9b08      	ldr	r3, [sp, #32]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da54      	bge.n	8006166 <__ieee754_pow+0x1b6>
 80060bc:	4b66      	ldr	r3, [pc, #408]	@ (8006258 <__ieee754_pow+0x2a8>)
 80060be:	18e4      	adds	r4, r4, r3
 80060c0:	432c      	orrs	r4, r5
 80060c2:	d000      	beq.n	80060c6 <__ieee754_pow+0x116>
 80060c4:	e06d      	b.n	80061a2 <__ieee754_pow+0x1f2>
 80060c6:	9a00      	ldr	r2, [sp, #0]
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	0010      	movs	r0, r2
 80060cc:	0019      	movs	r1, r3
 80060ce:	f7fc f8eb 	bl	80022a8 <__aeabi_dsub>
 80060d2:	0002      	movs	r2, r0
 80060d4:	000b      	movs	r3, r1
 80060d6:	e01c      	b.n	8006112 <__ieee754_pow+0x162>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1cf      	bne.n	800607c <__ieee754_pow+0xcc>
 80060dc:	3314      	adds	r3, #20
 80060de:	1a9a      	subs	r2, r3, r2
 80060e0:	9b04      	ldr	r3, [sp, #16]
 80060e2:	4113      	asrs	r3, r2
 80060e4:	0019      	movs	r1, r3
 80060e6:	4091      	lsls	r1, r2
 80060e8:	000a      	movs	r2, r1
 80060ea:	9904      	ldr	r1, [sp, #16]
 80060ec:	428a      	cmp	r2, r1
 80060ee:	d103      	bne.n	80060f8 <__ieee754_pow+0x148>
 80060f0:	2201      	movs	r2, #1
 80060f2:	2502      	movs	r5, #2
 80060f4:	4013      	ands	r3, r2
 80060f6:	1aed      	subs	r5, r5, r3
 80060f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006268 <__ieee754_pow+0x2b8>)
 80060fa:	9a04      	ldr	r2, [sp, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d136      	bne.n	800616e <__ieee754_pow+0x1be>
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	9600      	str	r6, [sp, #0]
 8006104:	9701      	str	r7, [sp, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	da2d      	bge.n	8006166 <__ieee754_pow+0x1b6>
 800610a:	0032      	movs	r2, r6
 800610c:	003b      	movs	r3, r7
 800610e:	2000      	movs	r0, #0
 8006110:	4955      	ldr	r1, [pc, #340]	@ (8006268 <__ieee754_pow+0x2b8>)
 8006112:	f7fb f9bd 	bl	8001490 <__aeabi_ddiv>
 8006116:	e773      	b.n	8006000 <__ieee754_pow+0x50>
 8006118:	2502      	movs	r5, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1ae      	bne.n	800607c <__ieee754_pow+0xcc>
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	4a4c      	ldr	r2, [pc, #304]	@ (8006254 <__ieee754_pow+0x2a4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d1e8      	bne.n	80060f8 <__ieee754_pow+0x148>
 8006126:	4b4c      	ldr	r3, [pc, #304]	@ (8006258 <__ieee754_pow+0x2a8>)
 8006128:	18e3      	adds	r3, r4, r3
 800612a:	4333      	orrs	r3, r6
 800612c:	d101      	bne.n	8006132 <__ieee754_pow+0x182>
 800612e:	f000 fc3b 	bl	80069a8 <__ieee754_pow+0x9f8>
 8006132:	4b4b      	ldr	r3, [pc, #300]	@ (8006260 <__ieee754_pow+0x2b0>)
 8006134:	429c      	cmp	r4, r3
 8006136:	d909      	bls.n	800614c <__ieee754_pow+0x19c>
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	da01      	bge.n	8006142 <__ieee754_pow+0x192>
 800613e:	f000 fc37 	bl	80069b0 <__ieee754_pow+0xa00>
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	9c03      	ldr	r4, [sp, #12]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	9401      	str	r4, [sp, #4]
 800614a:	e00c      	b.n	8006166 <__ieee754_pow+0x1b6>
 800614c:	9b06      	ldr	r3, [sp, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	db01      	blt.n	8006156 <__ieee754_pow+0x1a6>
 8006152:	f000 fc2d 	bl	80069b0 <__ieee754_pow+0xa00>
 8006156:	2280      	movs	r2, #128	@ 0x80
 8006158:	0612      	lsls	r2, r2, #24
 800615a:	4694      	mov	ip, r2
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	4463      	add	r3, ip
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	9800      	ldr	r0, [sp, #0]
 8006168:	9901      	ldr	r1, [sp, #4]
 800616a:	b015      	add	sp, #84	@ 0x54
 800616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	9a06      	ldr	r2, [sp, #24]
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	429a      	cmp	r2, r3
 8006176:	d106      	bne.n	8006186 <__ieee754_pow+0x1d6>
 8006178:	0032      	movs	r2, r6
 800617a:	003b      	movs	r3, r7
 800617c:	0030      	movs	r0, r6
 800617e:	0039      	movs	r1, r7
 8006180:	f7fb fdca 	bl	8001d18 <__aeabi_dmul>
 8006184:	e73c      	b.n	8006000 <__ieee754_pow+0x50>
 8006186:	4b39      	ldr	r3, [pc, #228]	@ (800626c <__ieee754_pow+0x2bc>)
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	429a      	cmp	r2, r3
 800618c:	d000      	beq.n	8006190 <__ieee754_pow+0x1e0>
 800618e:	e775      	b.n	800607c <__ieee754_pow+0xcc>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da00      	bge.n	8006198 <__ieee754_pow+0x1e8>
 8006196:	e771      	b.n	800607c <__ieee754_pow+0xcc>
 8006198:	0030      	movs	r0, r6
 800619a:	0039      	movs	r1, r7
 800619c:	f000 fcd2 	bl	8006b44 <__ieee754_sqrt>
 80061a0:	e72e      	b.n	8006000 <__ieee754_pow+0x50>
 80061a2:	2d01      	cmp	r5, #1
 80061a4:	d1df      	bne.n	8006166 <__ieee754_pow+0x1b6>
 80061a6:	9800      	ldr	r0, [sp, #0]
 80061a8:	2180      	movs	r1, #128	@ 0x80
 80061aa:	0002      	movs	r2, r0
 80061ac:	9801      	ldr	r0, [sp, #4]
 80061ae:	0609      	lsls	r1, r1, #24
 80061b0:	1843      	adds	r3, r0, r1
 80061b2:	9200      	str	r2, [sp, #0]
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	e7d6      	b.n	8006166 <__ieee754_pow+0x1b6>
 80061b8:	0ffb      	lsrs	r3, r7, #31
 80061ba:	3b01      	subs	r3, #1
 80061bc:	001a      	movs	r2, r3
 80061be:	432a      	orrs	r2, r5
 80061c0:	d104      	bne.n	80061cc <__ieee754_pow+0x21c>
 80061c2:	0032      	movs	r2, r6
 80061c4:	003b      	movs	r3, r7
 80061c6:	0030      	movs	r0, r6
 80061c8:	0039      	movs	r1, r7
 80061ca:	e780      	b.n	80060ce <__ieee754_pow+0x11e>
 80061cc:	3d01      	subs	r5, #1
 80061ce:	2200      	movs	r2, #0
 80061d0:	431d      	orrs	r5, r3
 80061d2:	d015      	beq.n	8006200 <__ieee754_pow+0x250>
 80061d4:	4b24      	ldr	r3, [pc, #144]	@ (8006268 <__ieee754_pow+0x2b8>)
 80061d6:	9208      	str	r2, [sp, #32]
 80061d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061da:	2384      	movs	r3, #132	@ 0x84
 80061dc:	9a04      	ldr	r2, [sp, #16]
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d800      	bhi.n	80061e6 <__ieee754_pow+0x236>
 80061e4:	e102      	b.n	80063ec <__ieee754_pow+0x43c>
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <__ieee754_pow+0x2c0>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d912      	bls.n	8006212 <__ieee754_pow+0x262>
 80061ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006260 <__ieee754_pow+0x2b0>)
 80061ee:	429c      	cmp	r4, r3
 80061f0:	d808      	bhi.n	8006204 <__ieee754_pow+0x254>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da08      	bge.n	800620a <__ieee754_pow+0x25a>
 80061f8:	2000      	movs	r0, #0
 80061fa:	f000 fc9b 	bl	8006b34 <__math_oflow>
 80061fe:	e6ff      	b.n	8006000 <__ieee754_pow+0x50>
 8006200:	4b1c      	ldr	r3, [pc, #112]	@ (8006274 <__ieee754_pow+0x2c4>)
 8006202:	e7e8      	b.n	80061d6 <__ieee754_pow+0x226>
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dcf6      	bgt.n	80061f8 <__ieee754_pow+0x248>
 800620a:	2000      	movs	r0, #0
 800620c:	f000 fc8b 	bl	8006b26 <__math_uflow>
 8006210:	e6f6      	b.n	8006000 <__ieee754_pow+0x50>
 8006212:	4b19      	ldr	r3, [pc, #100]	@ (8006278 <__ieee754_pow+0x2c8>)
 8006214:	429c      	cmp	r4, r3
 8006216:	d80b      	bhi.n	8006230 <__ieee754_pow+0x280>
 8006218:	9808      	ldr	r0, [sp, #32]
 800621a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800621c:	2300      	movs	r3, #0
 800621e:	2200      	movs	r2, #0
 8006220:	f7fa f8fa 	bl	8000418 <__aeabi_dcmplt>
 8006224:	1e43      	subs	r3, r0, #1
 8006226:	4198      	sbcs	r0, r3
 8006228:	9b06      	ldr	r3, [sp, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	daee      	bge.n	800620c <__ieee754_pow+0x25c>
 800622e:	e7e4      	b.n	80061fa <__ieee754_pow+0x24a>
 8006230:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <__ieee754_pow+0x2b8>)
 8006232:	2200      	movs	r2, #0
 8006234:	429c      	cmp	r4, r3
 8006236:	d921      	bls.n	800627c <__ieee754_pow+0x2cc>
 8006238:	9808      	ldr	r0, [sp, #32]
 800623a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800623c:	2300      	movs	r3, #0
 800623e:	f7fa f8eb 	bl	8000418 <__aeabi_dcmplt>
 8006242:	1e43      	subs	r3, r0, #1
 8006244:	4198      	sbcs	r0, r3
 8006246:	9b06      	ldr	r3, [sp, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	dcd6      	bgt.n	80061fa <__ieee754_pow+0x24a>
 800624c:	e7de      	b.n	800620c <__ieee754_pow+0x25c>
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	fff00000 	.word	0xfff00000
 8006254:	7ff00000 	.word	0x7ff00000
 8006258:	c0100000 	.word	0xc0100000
 800625c:	433fffff 	.word	0x433fffff
 8006260:	3fefffff 	.word	0x3fefffff
 8006264:	fffffc01 	.word	0xfffffc01
 8006268:	3ff00000 	.word	0x3ff00000
 800626c:	3fe00000 	.word	0x3fe00000
 8006270:	43f00000 	.word	0x43f00000
 8006274:	bff00000 	.word	0xbff00000
 8006278:	3feffffe 	.word	0x3feffffe
 800627c:	9800      	ldr	r0, [sp, #0]
 800627e:	9901      	ldr	r1, [sp, #4]
 8006280:	4b4f      	ldr	r3, [pc, #316]	@ (80063c0 <__ieee754_pow+0x410>)
 8006282:	f7fc f811 	bl	80022a8 <__aeabi_dsub>
 8006286:	22c0      	movs	r2, #192	@ 0xc0
 8006288:	4b4e      	ldr	r3, [pc, #312]	@ (80063c4 <__ieee754_pow+0x414>)
 800628a:	05d2      	lsls	r2, r2, #23
 800628c:	0006      	movs	r6, r0
 800628e:	000f      	movs	r7, r1
 8006290:	f7fb fd42 	bl	8001d18 <__aeabi_dmul>
 8006294:	4a4c      	ldr	r2, [pc, #304]	@ (80063c8 <__ieee754_pow+0x418>)
 8006296:	9004      	str	r0, [sp, #16]
 8006298:	9105      	str	r1, [sp, #20]
 800629a:	4b4c      	ldr	r3, [pc, #304]	@ (80063cc <__ieee754_pow+0x41c>)
 800629c:	0030      	movs	r0, r6
 800629e:	0039      	movs	r1, r7
 80062a0:	f7fb fd3a 	bl	8001d18 <__aeabi_dmul>
 80062a4:	2200      	movs	r2, #0
 80062a6:	9000      	str	r0, [sp, #0]
 80062a8:	9101      	str	r1, [sp, #4]
 80062aa:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <__ieee754_pow+0x420>)
 80062ac:	0030      	movs	r0, r6
 80062ae:	0039      	movs	r1, r7
 80062b0:	f7fb fd32 	bl	8001d18 <__aeabi_dmul>
 80062b4:	0002      	movs	r2, r0
 80062b6:	000b      	movs	r3, r1
 80062b8:	4846      	ldr	r0, [pc, #280]	@ (80063d4 <__ieee754_pow+0x424>)
 80062ba:	4947      	ldr	r1, [pc, #284]	@ (80063d8 <__ieee754_pow+0x428>)
 80062bc:	f7fb fff4 	bl	80022a8 <__aeabi_dsub>
 80062c0:	0032      	movs	r2, r6
 80062c2:	003b      	movs	r3, r7
 80062c4:	f7fb fd28 	bl	8001d18 <__aeabi_dmul>
 80062c8:	0002      	movs	r2, r0
 80062ca:	000b      	movs	r3, r1
 80062cc:	2000      	movs	r0, #0
 80062ce:	4943      	ldr	r1, [pc, #268]	@ (80063dc <__ieee754_pow+0x42c>)
 80062d0:	f7fb ffea 	bl	80022a8 <__aeabi_dsub>
 80062d4:	0032      	movs	r2, r6
 80062d6:	0004      	movs	r4, r0
 80062d8:	000d      	movs	r5, r1
 80062da:	003b      	movs	r3, r7
 80062dc:	0030      	movs	r0, r6
 80062de:	0039      	movs	r1, r7
 80062e0:	f7fb fd1a 	bl	8001d18 <__aeabi_dmul>
 80062e4:	0002      	movs	r2, r0
 80062e6:	000b      	movs	r3, r1
 80062e8:	0020      	movs	r0, r4
 80062ea:	0029      	movs	r1, r5
 80062ec:	f7fb fd14 	bl	8001d18 <__aeabi_dmul>
 80062f0:	4a3b      	ldr	r2, [pc, #236]	@ (80063e0 <__ieee754_pow+0x430>)
 80062f2:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <__ieee754_pow+0x414>)
 80062f4:	f7fb fd10 	bl	8001d18 <__aeabi_dmul>
 80062f8:	0002      	movs	r2, r0
 80062fa:	000b      	movs	r3, r1
 80062fc:	9800      	ldr	r0, [sp, #0]
 80062fe:	9901      	ldr	r1, [sp, #4]
 8006300:	f7fb ffd2 	bl	80022a8 <__aeabi_dsub>
 8006304:	0002      	movs	r2, r0
 8006306:	000b      	movs	r3, r1
 8006308:	0004      	movs	r4, r0
 800630a:	000d      	movs	r5, r1
 800630c:	9804      	ldr	r0, [sp, #16]
 800630e:	9905      	ldr	r1, [sp, #20]
 8006310:	f7fa fd5a 	bl	8000dc8 <__aeabi_dadd>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	9b05      	ldr	r3, [sp, #20]
 8006318:	2000      	movs	r0, #0
 800631a:	9000      	str	r0, [sp, #0]
 800631c:	9101      	str	r1, [sp, #4]
 800631e:	f7fb ffc3 	bl	80022a8 <__aeabi_dsub>
 8006322:	0002      	movs	r2, r0
 8006324:	000b      	movs	r3, r1
 8006326:	0020      	movs	r0, r4
 8006328:	0029      	movs	r1, r5
 800632a:	f7fb ffbd 	bl	80022a8 <__aeabi_dsub>
 800632e:	9b02      	ldr	r3, [sp, #8]
 8006330:	9c03      	ldr	r4, [sp, #12]
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	9405      	str	r4, [sp, #20]
 8006336:	2300      	movs	r3, #0
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	9c04      	ldr	r4, [sp, #16]
 800633c:	9d05      	ldr	r5, [sp, #20]
 800633e:	0006      	movs	r6, r0
 8006340:	000f      	movs	r7, r1
 8006342:	9802      	ldr	r0, [sp, #8]
 8006344:	9903      	ldr	r1, [sp, #12]
 8006346:	0022      	movs	r2, r4
 8006348:	002b      	movs	r3, r5
 800634a:	f7fb ffad 	bl	80022a8 <__aeabi_dsub>
 800634e:	9a00      	ldr	r2, [sp, #0]
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	f7fb fce1 	bl	8001d18 <__aeabi_dmul>
 8006356:	9a02      	ldr	r2, [sp, #8]
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	9006      	str	r0, [sp, #24]
 800635c:	9107      	str	r1, [sp, #28]
 800635e:	0030      	movs	r0, r6
 8006360:	0039      	movs	r1, r7
 8006362:	f7fb fcd9 	bl	8001d18 <__aeabi_dmul>
 8006366:	0002      	movs	r2, r0
 8006368:	000b      	movs	r3, r1
 800636a:	9806      	ldr	r0, [sp, #24]
 800636c:	9907      	ldr	r1, [sp, #28]
 800636e:	f7fa fd2b 	bl	8000dc8 <__aeabi_dadd>
 8006372:	0022      	movs	r2, r4
 8006374:	002b      	movs	r3, r5
 8006376:	9002      	str	r0, [sp, #8]
 8006378:	9103      	str	r1, [sp, #12]
 800637a:	9800      	ldr	r0, [sp, #0]
 800637c:	9901      	ldr	r1, [sp, #4]
 800637e:	f7fb fccb 	bl	8001d18 <__aeabi_dmul>
 8006382:	000b      	movs	r3, r1
 8006384:	0002      	movs	r2, r0
 8006386:	0006      	movs	r6, r0
 8006388:	000f      	movs	r7, r1
 800638a:	9802      	ldr	r0, [sp, #8]
 800638c:	9903      	ldr	r1, [sp, #12]
 800638e:	f7fa fd1b 	bl	8000dc8 <__aeabi_dadd>
 8006392:	9000      	str	r0, [sp, #0]
 8006394:	9101      	str	r1, [sp, #4]
 8006396:	9c01      	ldr	r4, [sp, #4]
 8006398:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <__ieee754_pow+0x434>)
 800639a:	9406      	str	r4, [sp, #24]
 800639c:	429c      	cmp	r4, r3
 800639e:	dc00      	bgt.n	80063a2 <__ieee754_pow+0x3f2>
 80063a0:	e222      	b.n	80067e8 <__ieee754_pow+0x838>
 80063a2:	4a11      	ldr	r2, [pc, #68]	@ (80063e8 <__ieee754_pow+0x438>)
 80063a4:	18a3      	adds	r3, r4, r2
 80063a6:	9a00      	ldr	r2, [sp, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	d100      	bne.n	80063ae <__ieee754_pow+0x3fe>
 80063ac:	e1a0      	b.n	80066f0 <__ieee754_pow+0x740>
 80063ae:	9808      	ldr	r0, [sp, #32]
 80063b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	f7fa f82f 	bl	8000418 <__aeabi_dcmplt>
 80063ba:	1e43      	subs	r3, r0, #1
 80063bc:	4198      	sbcs	r0, r3
 80063be:	e71c      	b.n	80061fa <__ieee754_pow+0x24a>
 80063c0:	3ff00000 	.word	0x3ff00000
 80063c4:	3ff71547 	.word	0x3ff71547
 80063c8:	f85ddf44 	.word	0xf85ddf44
 80063cc:	3e54ae0b 	.word	0x3e54ae0b
 80063d0:	3fd00000 	.word	0x3fd00000
 80063d4:	55555555 	.word	0x55555555
 80063d8:	3fd55555 	.word	0x3fd55555
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	652b82fe 	.word	0x652b82fe
 80063e4:	408fffff 	.word	0x408fffff
 80063e8:	bf700000 	.word	0xbf700000
 80063ec:	4be0      	ldr	r3, [pc, #896]	@ (8006770 <__ieee754_pow+0x7c0>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	423b      	tst	r3, r7
 80063f2:	d10b      	bne.n	800640c <__ieee754_pow+0x45c>
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	9901      	ldr	r1, [sp, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	4bde      	ldr	r3, [pc, #888]	@ (8006774 <__ieee754_pow+0x7c4>)
 80063fc:	f7fb fc8c 	bl	8001d18 <__aeabi_dmul>
 8006400:	2235      	movs	r2, #53	@ 0x35
 8006402:	9000      	str	r0, [sp, #0]
 8006404:	9101      	str	r1, [sp, #4]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	4252      	negs	r2, r2
 800640a:	930a      	str	r3, [sp, #40]	@ 0x28
 800640c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800640e:	49da      	ldr	r1, [pc, #872]	@ (8006778 <__ieee754_pow+0x7c8>)
 8006410:	151b      	asrs	r3, r3, #20
 8006412:	185b      	adds	r3, r3, r1
 8006414:	189b      	adds	r3, r3, r2
 8006416:	930e      	str	r3, [sp, #56]	@ 0x38
 8006418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800641a:	4dd8      	ldr	r5, [pc, #864]	@ (800677c <__ieee754_pow+0x7cc>)
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	4ad8      	ldr	r2, [pc, #864]	@ (8006780 <__ieee754_pow+0x7d0>)
 8006420:	0b1b      	lsrs	r3, r3, #12
 8006422:	2600      	movs	r6, #0
 8006424:	431d      	orrs	r5, r3
 8006426:	4293      	cmp	r3, r2
 8006428:	dd09      	ble.n	800643e <__ieee754_pow+0x48e>
 800642a:	4ad6      	ldr	r2, [pc, #856]	@ (8006784 <__ieee754_pow+0x7d4>)
 800642c:	3601      	adds	r6, #1
 800642e:	4293      	cmp	r3, r2
 8006430:	dd05      	ble.n	800643e <__ieee754_pow+0x48e>
 8006432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006434:	199b      	adds	r3, r3, r6
 8006436:	2600      	movs	r6, #0
 8006438:	930e      	str	r3, [sp, #56]	@ 0x38
 800643a:	4bd3      	ldr	r3, [pc, #844]	@ (8006788 <__ieee754_pow+0x7d8>)
 800643c:	18ed      	adds	r5, r5, r3
 800643e:	9800      	ldr	r0, [sp, #0]
 8006440:	9901      	ldr	r1, [sp, #4]
 8006442:	0029      	movs	r1, r5
 8006444:	4bd1      	ldr	r3, [pc, #836]	@ (800678c <__ieee754_pow+0x7dc>)
 8006446:	00f2      	lsls	r2, r6, #3
 8006448:	189b      	adds	r3, r3, r2
 800644a:	685c      	ldr	r4, [r3, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006450:	930a      	str	r3, [sp, #40]	@ 0x28
 8006452:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006454:	001a      	movs	r2, r3
 8006456:	0023      	movs	r3, r4
 8006458:	900c      	str	r0, [sp, #48]	@ 0x30
 800645a:	910d      	str	r1, [sp, #52]	@ 0x34
 800645c:	f7fb ff24 	bl	80022a8 <__aeabi_dsub>
 8006460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006464:	9010      	str	r0, [sp, #64]	@ 0x40
 8006466:	9111      	str	r1, [sp, #68]	@ 0x44
 8006468:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800646a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800646c:	f7fa fcac 	bl	8000dc8 <__aeabi_dadd>
 8006470:	0002      	movs	r2, r0
 8006472:	000b      	movs	r3, r1
 8006474:	2000      	movs	r0, #0
 8006476:	49c1      	ldr	r1, [pc, #772]	@ (800677c <__ieee754_pow+0x7cc>)
 8006478:	f7fb f80a 	bl	8001490 <__aeabi_ddiv>
 800647c:	0002      	movs	r2, r0
 800647e:	000b      	movs	r3, r1
 8006480:	9012      	str	r0, [sp, #72]	@ 0x48
 8006482:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006484:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006486:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006488:	f7fb fc46 	bl	8001d18 <__aeabi_dmul>
 800648c:	9006      	str	r0, [sp, #24]
 800648e:	9107      	str	r1, [sp, #28]
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	9c07      	ldr	r4, [sp, #28]
 8006494:	2180      	movs	r1, #128	@ 0x80
 8006496:	9304      	str	r3, [sp, #16]
 8006498:	9405      	str	r4, [sp, #20]
 800649a:	2080      	movs	r0, #128	@ 0x80
 800649c:	2300      	movs	r3, #0
 800649e:	2200      	movs	r2, #0
 80064a0:	106d      	asrs	r5, r5, #1
 80064a2:	0589      	lsls	r1, r1, #22
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	4329      	orrs	r1, r5
 80064a8:	0300      	lsls	r0, r0, #12
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	9c05      	ldr	r4, [sp, #20]
 80064ae:	1809      	adds	r1, r1, r0
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	9401      	str	r4, [sp, #4]
 80064b4:	04b6      	lsls	r6, r6, #18
 80064b6:	198b      	adds	r3, r1, r6
 80064b8:	9800      	ldr	r0, [sp, #0]
 80064ba:	9901      	ldr	r1, [sp, #4]
 80064bc:	0014      	movs	r4, r2
 80064be:	001d      	movs	r5, r3
 80064c0:	f7fb fc2a 	bl	8001d18 <__aeabi_dmul>
 80064c4:	0002      	movs	r2, r0
 80064c6:	000b      	movs	r3, r1
 80064c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80064ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80064cc:	f7fb feec 	bl	80022a8 <__aeabi_dsub>
 80064d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064d4:	0006      	movs	r6, r0
 80064d6:	000f      	movs	r7, r1
 80064d8:	0020      	movs	r0, r4
 80064da:	0029      	movs	r1, r5
 80064dc:	f7fb fee4 	bl	80022a8 <__aeabi_dsub>
 80064e0:	0002      	movs	r2, r0
 80064e2:	000b      	movs	r3, r1
 80064e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80064e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80064e8:	f7fb fede 	bl	80022a8 <__aeabi_dsub>
 80064ec:	9a00      	ldr	r2, [sp, #0]
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	f7fb fc12 	bl	8001d18 <__aeabi_dmul>
 80064f4:	0002      	movs	r2, r0
 80064f6:	000b      	movs	r3, r1
 80064f8:	0030      	movs	r0, r6
 80064fa:	0039      	movs	r1, r7
 80064fc:	f7fb fed4 	bl	80022a8 <__aeabi_dsub>
 8006500:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006502:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006504:	f7fb fc08 	bl	8001d18 <__aeabi_dmul>
 8006508:	9a06      	ldr	r2, [sp, #24]
 800650a:	9b07      	ldr	r3, [sp, #28]
 800650c:	900a      	str	r0, [sp, #40]	@ 0x28
 800650e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006510:	0010      	movs	r0, r2
 8006512:	0019      	movs	r1, r3
 8006514:	f7fb fc00 	bl	8001d18 <__aeabi_dmul>
 8006518:	0006      	movs	r6, r0
 800651a:	000f      	movs	r7, r1
 800651c:	4a9c      	ldr	r2, [pc, #624]	@ (8006790 <__ieee754_pow+0x7e0>)
 800651e:	4b9d      	ldr	r3, [pc, #628]	@ (8006794 <__ieee754_pow+0x7e4>)
 8006520:	f7fb fbfa 	bl	8001d18 <__aeabi_dmul>
 8006524:	4a9c      	ldr	r2, [pc, #624]	@ (8006798 <__ieee754_pow+0x7e8>)
 8006526:	4b9d      	ldr	r3, [pc, #628]	@ (800679c <__ieee754_pow+0x7ec>)
 8006528:	f7fa fc4e 	bl	8000dc8 <__aeabi_dadd>
 800652c:	0032      	movs	r2, r6
 800652e:	003b      	movs	r3, r7
 8006530:	f7fb fbf2 	bl	8001d18 <__aeabi_dmul>
 8006534:	4a9a      	ldr	r2, [pc, #616]	@ (80067a0 <__ieee754_pow+0x7f0>)
 8006536:	4b9b      	ldr	r3, [pc, #620]	@ (80067a4 <__ieee754_pow+0x7f4>)
 8006538:	f7fa fc46 	bl	8000dc8 <__aeabi_dadd>
 800653c:	0032      	movs	r2, r6
 800653e:	003b      	movs	r3, r7
 8006540:	f7fb fbea 	bl	8001d18 <__aeabi_dmul>
 8006544:	4a98      	ldr	r2, [pc, #608]	@ (80067a8 <__ieee754_pow+0x7f8>)
 8006546:	4b99      	ldr	r3, [pc, #612]	@ (80067ac <__ieee754_pow+0x7fc>)
 8006548:	f7fa fc3e 	bl	8000dc8 <__aeabi_dadd>
 800654c:	0032      	movs	r2, r6
 800654e:	003b      	movs	r3, r7
 8006550:	f7fb fbe2 	bl	8001d18 <__aeabi_dmul>
 8006554:	4a96      	ldr	r2, [pc, #600]	@ (80067b0 <__ieee754_pow+0x800>)
 8006556:	4b97      	ldr	r3, [pc, #604]	@ (80067b4 <__ieee754_pow+0x804>)
 8006558:	f7fa fc36 	bl	8000dc8 <__aeabi_dadd>
 800655c:	0032      	movs	r2, r6
 800655e:	003b      	movs	r3, r7
 8006560:	f7fb fbda 	bl	8001d18 <__aeabi_dmul>
 8006564:	4a94      	ldr	r2, [pc, #592]	@ (80067b8 <__ieee754_pow+0x808>)
 8006566:	4b95      	ldr	r3, [pc, #596]	@ (80067bc <__ieee754_pow+0x80c>)
 8006568:	f7fa fc2e 	bl	8000dc8 <__aeabi_dadd>
 800656c:	0032      	movs	r2, r6
 800656e:	0004      	movs	r4, r0
 8006570:	000d      	movs	r5, r1
 8006572:	003b      	movs	r3, r7
 8006574:	0030      	movs	r0, r6
 8006576:	0039      	movs	r1, r7
 8006578:	f7fb fbce 	bl	8001d18 <__aeabi_dmul>
 800657c:	0002      	movs	r2, r0
 800657e:	000b      	movs	r3, r1
 8006580:	0020      	movs	r0, r4
 8006582:	0029      	movs	r1, r5
 8006584:	f7fb fbc8 	bl	8001d18 <__aeabi_dmul>
 8006588:	9a00      	ldr	r2, [sp, #0]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	0004      	movs	r4, r0
 800658e:	000d      	movs	r5, r1
 8006590:	9806      	ldr	r0, [sp, #24]
 8006592:	9907      	ldr	r1, [sp, #28]
 8006594:	f7fa fc18 	bl	8000dc8 <__aeabi_dadd>
 8006598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800659a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800659c:	f7fb fbbc 	bl	8001d18 <__aeabi_dmul>
 80065a0:	0022      	movs	r2, r4
 80065a2:	002b      	movs	r3, r5
 80065a4:	f7fa fc10 	bl	8000dc8 <__aeabi_dadd>
 80065a8:	9a00      	ldr	r2, [sp, #0]
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	900c      	str	r0, [sp, #48]	@ 0x30
 80065ae:	910d      	str	r1, [sp, #52]	@ 0x34
 80065b0:	0010      	movs	r0, r2
 80065b2:	0019      	movs	r1, r3
 80065b4:	f7fb fbb0 	bl	8001d18 <__aeabi_dmul>
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b81      	ldr	r3, [pc, #516]	@ (80067c0 <__ieee754_pow+0x810>)
 80065bc:	0004      	movs	r4, r0
 80065be:	000d      	movs	r5, r1
 80065c0:	f7fa fc02 	bl	8000dc8 <__aeabi_dadd>
 80065c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065c8:	f7fa fbfe 	bl	8000dc8 <__aeabi_dadd>
 80065cc:	2000      	movs	r0, #0
 80065ce:	000f      	movs	r7, r1
 80065d0:	0006      	movs	r6, r0
 80065d2:	0002      	movs	r2, r0
 80065d4:	000b      	movs	r3, r1
 80065d6:	9800      	ldr	r0, [sp, #0]
 80065d8:	9901      	ldr	r1, [sp, #4]
 80065da:	f7fb fb9d 	bl	8001d18 <__aeabi_dmul>
 80065de:	2200      	movs	r2, #0
 80065e0:	9000      	str	r0, [sp, #0]
 80065e2:	9101      	str	r1, [sp, #4]
 80065e4:	4b76      	ldr	r3, [pc, #472]	@ (80067c0 <__ieee754_pow+0x810>)
 80065e6:	0030      	movs	r0, r6
 80065e8:	0039      	movs	r1, r7
 80065ea:	f7fb fe5d 	bl	80022a8 <__aeabi_dsub>
 80065ee:	0022      	movs	r2, r4
 80065f0:	002b      	movs	r3, r5
 80065f2:	f7fb fe59 	bl	80022a8 <__aeabi_dsub>
 80065f6:	0002      	movs	r2, r0
 80065f8:	000b      	movs	r3, r1
 80065fa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80065fc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80065fe:	f7fb fe53 	bl	80022a8 <__aeabi_dsub>
 8006602:	9a06      	ldr	r2, [sp, #24]
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	f7fb fb87 	bl	8001d18 <__aeabi_dmul>
 800660a:	0032      	movs	r2, r6
 800660c:	0004      	movs	r4, r0
 800660e:	000d      	movs	r5, r1
 8006610:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006614:	003b      	movs	r3, r7
 8006616:	f7fb fb7f 	bl	8001d18 <__aeabi_dmul>
 800661a:	0002      	movs	r2, r0
 800661c:	000b      	movs	r3, r1
 800661e:	0020      	movs	r0, r4
 8006620:	0029      	movs	r1, r5
 8006622:	f7fa fbd1 	bl	8000dc8 <__aeabi_dadd>
 8006626:	0004      	movs	r4, r0
 8006628:	000d      	movs	r5, r1
 800662a:	0002      	movs	r2, r0
 800662c:	000b      	movs	r3, r1
 800662e:	9800      	ldr	r0, [sp, #0]
 8006630:	9901      	ldr	r1, [sp, #4]
 8006632:	f7fa fbc9 	bl	8000dc8 <__aeabi_dadd>
 8006636:	22e0      	movs	r2, #224	@ 0xe0
 8006638:	2000      	movs	r0, #0
 800663a:	4b62      	ldr	r3, [pc, #392]	@ (80067c4 <__ieee754_pow+0x814>)
 800663c:	0612      	lsls	r2, r2, #24
 800663e:	0006      	movs	r6, r0
 8006640:	000f      	movs	r7, r1
 8006642:	f7fb fb69 	bl	8001d18 <__aeabi_dmul>
 8006646:	9006      	str	r0, [sp, #24]
 8006648:	9107      	str	r1, [sp, #28]
 800664a:	9a00      	ldr	r2, [sp, #0]
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	0030      	movs	r0, r6
 8006650:	0039      	movs	r1, r7
 8006652:	f7fb fe29 	bl	80022a8 <__aeabi_dsub>
 8006656:	0002      	movs	r2, r0
 8006658:	000b      	movs	r3, r1
 800665a:	0020      	movs	r0, r4
 800665c:	0029      	movs	r1, r5
 800665e:	f7fb fe23 	bl	80022a8 <__aeabi_dsub>
 8006662:	4a59      	ldr	r2, [pc, #356]	@ (80067c8 <__ieee754_pow+0x818>)
 8006664:	4b57      	ldr	r3, [pc, #348]	@ (80067c4 <__ieee754_pow+0x814>)
 8006666:	f7fb fb57 	bl	8001d18 <__aeabi_dmul>
 800666a:	4a58      	ldr	r2, [pc, #352]	@ (80067cc <__ieee754_pow+0x81c>)
 800666c:	0004      	movs	r4, r0
 800666e:	000d      	movs	r5, r1
 8006670:	0030      	movs	r0, r6
 8006672:	0039      	movs	r1, r7
 8006674:	4b56      	ldr	r3, [pc, #344]	@ (80067d0 <__ieee754_pow+0x820>)
 8006676:	f7fb fb4f 	bl	8001d18 <__aeabi_dmul>
 800667a:	0002      	movs	r2, r0
 800667c:	000b      	movs	r3, r1
 800667e:	0020      	movs	r0, r4
 8006680:	0029      	movs	r1, r5
 8006682:	f7fa fba1 	bl	8000dc8 <__aeabi_dadd>
 8006686:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006688:	4b52      	ldr	r3, [pc, #328]	@ (80067d4 <__ieee754_pow+0x824>)
 800668a:	189b      	adds	r3, r3, r2
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f7fa fb9a 	bl	8000dc8 <__aeabi_dadd>
 8006694:	900a      	str	r0, [sp, #40]	@ 0x28
 8006696:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006698:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800669a:	f7fc f9c3 	bl	8002a24 <__aeabi_i2d>
 800669e:	0004      	movs	r4, r0
 80066a0:	000d      	movs	r5, r1
 80066a2:	9806      	ldr	r0, [sp, #24]
 80066a4:	9907      	ldr	r1, [sp, #28]
 80066a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066a8:	4b4b      	ldr	r3, [pc, #300]	@ (80067d8 <__ieee754_pow+0x828>)
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	681e      	ldr	r6, [r3, #0]
 80066ae:	685f      	ldr	r7, [r3, #4]
 80066b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b4:	f7fa fb88 	bl	8000dc8 <__aeabi_dadd>
 80066b8:	0032      	movs	r2, r6
 80066ba:	003b      	movs	r3, r7
 80066bc:	f7fa fb84 	bl	8000dc8 <__aeabi_dadd>
 80066c0:	0022      	movs	r2, r4
 80066c2:	002b      	movs	r3, r5
 80066c4:	f7fa fb80 	bl	8000dc8 <__aeabi_dadd>
 80066c8:	2000      	movs	r0, #0
 80066ca:	0022      	movs	r2, r4
 80066cc:	002b      	movs	r3, r5
 80066ce:	9000      	str	r0, [sp, #0]
 80066d0:	9101      	str	r1, [sp, #4]
 80066d2:	f7fb fde9 	bl	80022a8 <__aeabi_dsub>
 80066d6:	0032      	movs	r2, r6
 80066d8:	003b      	movs	r3, r7
 80066da:	f7fb fde5 	bl	80022a8 <__aeabi_dsub>
 80066de:	9a06      	ldr	r2, [sp, #24]
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	f7fb fde1 	bl	80022a8 <__aeabi_dsub>
 80066e6:	0002      	movs	r2, r0
 80066e8:	000b      	movs	r3, r1
 80066ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ee:	e61c      	b.n	800632a <__ieee754_pow+0x37a>
 80066f0:	4a3a      	ldr	r2, [pc, #232]	@ (80067dc <__ieee754_pow+0x82c>)
 80066f2:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <__ieee754_pow+0x830>)
 80066f4:	9802      	ldr	r0, [sp, #8]
 80066f6:	9903      	ldr	r1, [sp, #12]
 80066f8:	f7fa fb66 	bl	8000dc8 <__aeabi_dadd>
 80066fc:	0032      	movs	r2, r6
 80066fe:	003b      	movs	r3, r7
 8006700:	9004      	str	r0, [sp, #16]
 8006702:	9105      	str	r1, [sp, #20]
 8006704:	9800      	ldr	r0, [sp, #0]
 8006706:	9901      	ldr	r1, [sp, #4]
 8006708:	f7fb fdce 	bl	80022a8 <__aeabi_dsub>
 800670c:	0002      	movs	r2, r0
 800670e:	000b      	movs	r3, r1
 8006710:	9804      	ldr	r0, [sp, #16]
 8006712:	9905      	ldr	r1, [sp, #20]
 8006714:	f7f9 fe94 	bl	8000440 <__aeabi_dcmpgt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d000      	beq.n	800671e <__ieee754_pow+0x76e>
 800671c:	e647      	b.n	80063ae <__ieee754_pow+0x3fe>
 800671e:	2580      	movs	r5, #128	@ 0x80
 8006720:	4b30      	ldr	r3, [pc, #192]	@ (80067e4 <__ieee754_pow+0x834>)
 8006722:	036d      	lsls	r5, r5, #13
 8006724:	1524      	asrs	r4, r4, #20
 8006726:	18e4      	adds	r4, r4, r3
 8006728:	002b      	movs	r3, r5
 800672a:	4123      	asrs	r3, r4
 800672c:	9a06      	ldr	r2, [sp, #24]
 800672e:	4912      	ldr	r1, [pc, #72]	@ (8006778 <__ieee754_pow+0x7c8>)
 8006730:	189b      	adds	r3, r3, r2
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	4c14      	ldr	r4, [pc, #80]	@ (8006788 <__ieee754_pow+0x7d8>)
 8006736:	0d52      	lsrs	r2, r2, #21
 8006738:	1852      	adds	r2, r2, r1
 800673a:	4114      	asrs	r4, r2
 800673c:	401c      	ands	r4, r3
 800673e:	0021      	movs	r1, r4
 8006740:	2414      	movs	r4, #20
 8006742:	031b      	lsls	r3, r3, #12
 8006744:	0b1b      	lsrs	r3, r3, #12
 8006746:	432b      	orrs	r3, r5
 8006748:	1aa2      	subs	r2, r4, r2
 800674a:	4113      	asrs	r3, r2
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	2000      	movs	r0, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	da02      	bge.n	800675c <__ieee754_pow+0x7ac>
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	425b      	negs	r3, r3
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	0002      	movs	r2, r0
 800675e:	000b      	movs	r3, r1
 8006760:	0030      	movs	r0, r6
 8006762:	0039      	movs	r1, r7
 8006764:	f7fb fda0 	bl	80022a8 <__aeabi_dsub>
 8006768:	0006      	movs	r6, r0
 800676a:	000f      	movs	r7, r1
 800676c:	e065      	b.n	800683a <__ieee754_pow+0x88a>
 800676e:	46c0      	nop			@ (mov r8, r8)
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	43400000 	.word	0x43400000
 8006778:	fffffc01 	.word	0xfffffc01
 800677c:	3ff00000 	.word	0x3ff00000
 8006780:	0003988e 	.word	0x0003988e
 8006784:	000bb679 	.word	0x000bb679
 8006788:	fff00000 	.word	0xfff00000
 800678c:	08007038 	.word	0x08007038
 8006790:	4a454eef 	.word	0x4a454eef
 8006794:	3fca7e28 	.word	0x3fca7e28
 8006798:	93c9db65 	.word	0x93c9db65
 800679c:	3fcd864a 	.word	0x3fcd864a
 80067a0:	a91d4101 	.word	0xa91d4101
 80067a4:	3fd17460 	.word	0x3fd17460
 80067a8:	518f264d 	.word	0x518f264d
 80067ac:	3fd55555 	.word	0x3fd55555
 80067b0:	db6fabff 	.word	0xdb6fabff
 80067b4:	3fdb6db6 	.word	0x3fdb6db6
 80067b8:	33333303 	.word	0x33333303
 80067bc:	3fe33333 	.word	0x3fe33333
 80067c0:	40080000 	.word	0x40080000
 80067c4:	3feec709 	.word	0x3feec709
 80067c8:	dc3a03fd 	.word	0xdc3a03fd
 80067cc:	145b01f5 	.word	0x145b01f5
 80067d0:	be3e2fe0 	.word	0xbe3e2fe0
 80067d4:	08007018 	.word	0x08007018
 80067d8:	08007028 	.word	0x08007028
 80067dc:	652b82fe 	.word	0x652b82fe
 80067e0:	3c971547 	.word	0x3c971547
 80067e4:	fffffc02 	.word	0xfffffc02
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	005c      	lsls	r4, r3, #1
 80067ec:	4b72      	ldr	r3, [pc, #456]	@ (80069b8 <__ieee754_pow+0xa08>)
 80067ee:	0864      	lsrs	r4, r4, #1
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d91c      	bls.n	800682e <__ieee754_pow+0x87e>
 80067f4:	4a71      	ldr	r2, [pc, #452]	@ (80069bc <__ieee754_pow+0xa0c>)
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	189b      	adds	r3, r3, r2
 80067fa:	9a00      	ldr	r2, [sp, #0]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	d008      	beq.n	8006812 <__ieee754_pow+0x862>
 8006800:	9808      	ldr	r0, [sp, #32]
 8006802:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006804:	2300      	movs	r3, #0
 8006806:	2200      	movs	r2, #0
 8006808:	f7f9 fe06 	bl	8000418 <__aeabi_dcmplt>
 800680c:	1e43      	subs	r3, r0, #1
 800680e:	4198      	sbcs	r0, r3
 8006810:	e4fc      	b.n	800620c <__ieee754_pow+0x25c>
 8006812:	0032      	movs	r2, r6
 8006814:	9800      	ldr	r0, [sp, #0]
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	003b      	movs	r3, r7
 800681a:	f7fb fd45 	bl	80022a8 <__aeabi_dsub>
 800681e:	9a02      	ldr	r2, [sp, #8]
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	f7f9 fe17 	bl	8000454 <__aeabi_dcmpge>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1ea      	bne.n	8006800 <__ieee754_pow+0x850>
 800682a:	4c65      	ldr	r4, [pc, #404]	@ (80069c0 <__ieee754_pow+0xa10>)
 800682c:	e777      	b.n	800671e <__ieee754_pow+0x76e>
 800682e:	9a04      	ldr	r2, [sp, #16]
 8006830:	4b64      	ldr	r3, [pc, #400]	@ (80069c4 <__ieee754_pow+0xa14>)
 8006832:	9200      	str	r2, [sp, #0]
 8006834:	429c      	cmp	r4, r3
 8006836:	d900      	bls.n	800683a <__ieee754_pow+0x88a>
 8006838:	e771      	b.n	800671e <__ieee754_pow+0x76e>
 800683a:	9a02      	ldr	r2, [sp, #8]
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	0030      	movs	r0, r6
 8006840:	0039      	movs	r1, r7
 8006842:	f7fa fac1 	bl	8000dc8 <__aeabi_dadd>
 8006846:	2000      	movs	r0, #0
 8006848:	2200      	movs	r2, #0
 800684a:	4b5f      	ldr	r3, [pc, #380]	@ (80069c8 <__ieee754_pow+0xa18>)
 800684c:	9004      	str	r0, [sp, #16]
 800684e:	9105      	str	r1, [sp, #20]
 8006850:	f7fb fa62 	bl	8001d18 <__aeabi_dmul>
 8006854:	0032      	movs	r2, r6
 8006856:	003b      	movs	r3, r7
 8006858:	9006      	str	r0, [sp, #24]
 800685a:	9107      	str	r1, [sp, #28]
 800685c:	9804      	ldr	r0, [sp, #16]
 800685e:	9905      	ldr	r1, [sp, #20]
 8006860:	f7fb fd22 	bl	80022a8 <__aeabi_dsub>
 8006864:	0002      	movs	r2, r0
 8006866:	000b      	movs	r3, r1
 8006868:	9802      	ldr	r0, [sp, #8]
 800686a:	9903      	ldr	r1, [sp, #12]
 800686c:	f7fb fd1c 	bl	80022a8 <__aeabi_dsub>
 8006870:	4a56      	ldr	r2, [pc, #344]	@ (80069cc <__ieee754_pow+0xa1c>)
 8006872:	4b57      	ldr	r3, [pc, #348]	@ (80069d0 <__ieee754_pow+0xa20>)
 8006874:	f7fb fa50 	bl	8001d18 <__aeabi_dmul>
 8006878:	4a56      	ldr	r2, [pc, #344]	@ (80069d4 <__ieee754_pow+0xa24>)
 800687a:	0004      	movs	r4, r0
 800687c:	000d      	movs	r5, r1
 800687e:	9804      	ldr	r0, [sp, #16]
 8006880:	9905      	ldr	r1, [sp, #20]
 8006882:	4b55      	ldr	r3, [pc, #340]	@ (80069d8 <__ieee754_pow+0xa28>)
 8006884:	f7fb fa48 	bl	8001d18 <__aeabi_dmul>
 8006888:	0002      	movs	r2, r0
 800688a:	000b      	movs	r3, r1
 800688c:	0020      	movs	r0, r4
 800688e:	0029      	movs	r1, r5
 8006890:	f7fa fa9a 	bl	8000dc8 <__aeabi_dadd>
 8006894:	0004      	movs	r4, r0
 8006896:	000d      	movs	r5, r1
 8006898:	0002      	movs	r2, r0
 800689a:	000b      	movs	r3, r1
 800689c:	9806      	ldr	r0, [sp, #24]
 800689e:	9907      	ldr	r1, [sp, #28]
 80068a0:	f7fa fa92 	bl	8000dc8 <__aeabi_dadd>
 80068a4:	9a06      	ldr	r2, [sp, #24]
 80068a6:	9b07      	ldr	r3, [sp, #28]
 80068a8:	0006      	movs	r6, r0
 80068aa:	000f      	movs	r7, r1
 80068ac:	f7fb fcfc 	bl	80022a8 <__aeabi_dsub>
 80068b0:	0002      	movs	r2, r0
 80068b2:	000b      	movs	r3, r1
 80068b4:	0020      	movs	r0, r4
 80068b6:	0029      	movs	r1, r5
 80068b8:	f7fb fcf6 	bl	80022a8 <__aeabi_dsub>
 80068bc:	0032      	movs	r2, r6
 80068be:	9002      	str	r0, [sp, #8]
 80068c0:	9103      	str	r1, [sp, #12]
 80068c2:	003b      	movs	r3, r7
 80068c4:	0030      	movs	r0, r6
 80068c6:	0039      	movs	r1, r7
 80068c8:	f7fb fa26 	bl	8001d18 <__aeabi_dmul>
 80068cc:	0004      	movs	r4, r0
 80068ce:	000d      	movs	r5, r1
 80068d0:	4a42      	ldr	r2, [pc, #264]	@ (80069dc <__ieee754_pow+0xa2c>)
 80068d2:	4b43      	ldr	r3, [pc, #268]	@ (80069e0 <__ieee754_pow+0xa30>)
 80068d4:	f7fb fa20 	bl	8001d18 <__aeabi_dmul>
 80068d8:	4a42      	ldr	r2, [pc, #264]	@ (80069e4 <__ieee754_pow+0xa34>)
 80068da:	4b43      	ldr	r3, [pc, #268]	@ (80069e8 <__ieee754_pow+0xa38>)
 80068dc:	f7fb fce4 	bl	80022a8 <__aeabi_dsub>
 80068e0:	0022      	movs	r2, r4
 80068e2:	002b      	movs	r3, r5
 80068e4:	f7fb fa18 	bl	8001d18 <__aeabi_dmul>
 80068e8:	4a40      	ldr	r2, [pc, #256]	@ (80069ec <__ieee754_pow+0xa3c>)
 80068ea:	4b41      	ldr	r3, [pc, #260]	@ (80069f0 <__ieee754_pow+0xa40>)
 80068ec:	f7fa fa6c 	bl	8000dc8 <__aeabi_dadd>
 80068f0:	0022      	movs	r2, r4
 80068f2:	002b      	movs	r3, r5
 80068f4:	f7fb fa10 	bl	8001d18 <__aeabi_dmul>
 80068f8:	4a3e      	ldr	r2, [pc, #248]	@ (80069f4 <__ieee754_pow+0xa44>)
 80068fa:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <__ieee754_pow+0xa48>)
 80068fc:	f7fb fcd4 	bl	80022a8 <__aeabi_dsub>
 8006900:	0022      	movs	r2, r4
 8006902:	002b      	movs	r3, r5
 8006904:	f7fb fa08 	bl	8001d18 <__aeabi_dmul>
 8006908:	4a3c      	ldr	r2, [pc, #240]	@ (80069fc <__ieee754_pow+0xa4c>)
 800690a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a00 <__ieee754_pow+0xa50>)
 800690c:	f7fa fa5c 	bl	8000dc8 <__aeabi_dadd>
 8006910:	0022      	movs	r2, r4
 8006912:	002b      	movs	r3, r5
 8006914:	f7fb fa00 	bl	8001d18 <__aeabi_dmul>
 8006918:	0002      	movs	r2, r0
 800691a:	000b      	movs	r3, r1
 800691c:	0030      	movs	r0, r6
 800691e:	0039      	movs	r1, r7
 8006920:	f7fb fcc2 	bl	80022a8 <__aeabi_dsub>
 8006924:	0004      	movs	r4, r0
 8006926:	000d      	movs	r5, r1
 8006928:	0002      	movs	r2, r0
 800692a:	000b      	movs	r3, r1
 800692c:	0030      	movs	r0, r6
 800692e:	0039      	movs	r1, r7
 8006930:	f7fb f9f2 	bl	8001d18 <__aeabi_dmul>
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	9004      	str	r0, [sp, #16]
 8006938:	9105      	str	r1, [sp, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	0020      	movs	r0, r4
 800693e:	0029      	movs	r1, r5
 8006940:	05db      	lsls	r3, r3, #23
 8006942:	f7fb fcb1 	bl	80022a8 <__aeabi_dsub>
 8006946:	0002      	movs	r2, r0
 8006948:	000b      	movs	r3, r1
 800694a:	9804      	ldr	r0, [sp, #16]
 800694c:	9905      	ldr	r1, [sp, #20]
 800694e:	f7fa fd9f 	bl	8001490 <__aeabi_ddiv>
 8006952:	9a02      	ldr	r2, [sp, #8]
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	0004      	movs	r4, r0
 8006958:	000d      	movs	r5, r1
 800695a:	0030      	movs	r0, r6
 800695c:	0039      	movs	r1, r7
 800695e:	f7fb f9db 	bl	8001d18 <__aeabi_dmul>
 8006962:	9a02      	ldr	r2, [sp, #8]
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	f7fa fa2f 	bl	8000dc8 <__aeabi_dadd>
 800696a:	0002      	movs	r2, r0
 800696c:	000b      	movs	r3, r1
 800696e:	0020      	movs	r0, r4
 8006970:	0029      	movs	r1, r5
 8006972:	f7fb fc99 	bl	80022a8 <__aeabi_dsub>
 8006976:	0032      	movs	r2, r6
 8006978:	003b      	movs	r3, r7
 800697a:	f7fb fc95 	bl	80022a8 <__aeabi_dsub>
 800697e:	0002      	movs	r2, r0
 8006980:	000b      	movs	r3, r1
 8006982:	2000      	movs	r0, #0
 8006984:	491f      	ldr	r1, [pc, #124]	@ (8006a04 <__ieee754_pow+0xa54>)
 8006986:	f7fb fc8f 	bl	80022a8 <__aeabi_dsub>
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	051b      	lsls	r3, r3, #20
 800698e:	185b      	adds	r3, r3, r1
 8006990:	151a      	asrs	r2, r3, #20
 8006992:	2a00      	cmp	r2, #0
 8006994:	dc06      	bgt.n	80069a4 <__ieee754_pow+0x9f4>
 8006996:	9a00      	ldr	r2, [sp, #0]
 8006998:	f000 f83a 	bl	8006a10 <scalbn>
 800699c:	9a08      	ldr	r2, [sp, #32]
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	f7ff fbee 	bl	8006180 <__ieee754_pow+0x1d0>
 80069a4:	0019      	movs	r1, r3
 80069a6:	e7f9      	b.n	800699c <__ieee754_pow+0x9ec>
 80069a8:	2300      	movs	r3, #0
 80069aa:	4c16      	ldr	r4, [pc, #88]	@ (8006a04 <__ieee754_pow+0xa54>)
 80069ac:	f7ff fbcb 	bl	8006146 <__ieee754_pow+0x196>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2400      	movs	r4, #0
 80069b4:	f7ff fbc7 	bl	8006146 <__ieee754_pow+0x196>
 80069b8:	4090cbff 	.word	0x4090cbff
 80069bc:	3f6f3400 	.word	0x3f6f3400
 80069c0:	4090cc00 	.word	0x4090cc00
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	3fe62e43 	.word	0x3fe62e43
 80069cc:	fefa39ef 	.word	0xfefa39ef
 80069d0:	3fe62e42 	.word	0x3fe62e42
 80069d4:	0ca86c39 	.word	0x0ca86c39
 80069d8:	be205c61 	.word	0xbe205c61
 80069dc:	72bea4d0 	.word	0x72bea4d0
 80069e0:	3e663769 	.word	0x3e663769
 80069e4:	c5d26bf1 	.word	0xc5d26bf1
 80069e8:	3ebbbd41 	.word	0x3ebbbd41
 80069ec:	af25de2c 	.word	0xaf25de2c
 80069f0:	3f11566a 	.word	0x3f11566a
 80069f4:	16bebd93 	.word	0x16bebd93
 80069f8:	3f66c16c 	.word	0x3f66c16c
 80069fc:	5555553e 	.word	0x5555553e
 8006a00:	3fc55555 	.word	0x3fc55555
 8006a04:	3ff00000 	.word	0x3ff00000

08006a08 <fabs>:
 8006a08:	0049      	lsls	r1, r1, #1
 8006a0a:	084b      	lsrs	r3, r1, #1
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	4770      	bx	lr

08006a10 <scalbn>:
 8006a10:	004b      	lsls	r3, r1, #1
 8006a12:	b570      	push	{r4, r5, r6, lr}
 8006a14:	0d5b      	lsrs	r3, r3, #21
 8006a16:	0014      	movs	r4, r2
 8006a18:	000d      	movs	r5, r1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <scalbn+0x2e>
 8006a1e:	004b      	lsls	r3, r1, #1
 8006a20:	085b      	lsrs	r3, r3, #1
 8006a22:	4303      	orrs	r3, r0
 8006a24:	d012      	beq.n	8006a4c <scalbn+0x3c>
 8006a26:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <scalbn+0xa4>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7fb f975 	bl	8001d18 <__aeabi_dmul>
 8006a2e:	4b22      	ldr	r3, [pc, #136]	@ (8006ab8 <scalbn+0xa8>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	da0c      	bge.n	8006a4e <scalbn+0x3e>
 8006a34:	4a21      	ldr	r2, [pc, #132]	@ (8006abc <scalbn+0xac>)
 8006a36:	4b22      	ldr	r3, [pc, #136]	@ (8006ac0 <scalbn+0xb0>)
 8006a38:	f7fb f96e 	bl	8001d18 <__aeabi_dmul>
 8006a3c:	e006      	b.n	8006a4c <scalbn+0x3c>
 8006a3e:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <scalbn+0xb4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d108      	bne.n	8006a56 <scalbn+0x46>
 8006a44:	0002      	movs	r2, r0
 8006a46:	000b      	movs	r3, r1
 8006a48:	f7fa f9be 	bl	8000dc8 <__aeabi_dadd>
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	000d      	movs	r5, r1
 8006a50:	004b      	lsls	r3, r1, #1
 8006a52:	0d5b      	lsrs	r3, r3, #21
 8006a54:	3b36      	subs	r3, #54	@ 0x36
 8006a56:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac8 <scalbn+0xb8>)
 8006a58:	4294      	cmp	r4, r2
 8006a5a:	dd0a      	ble.n	8006a72 <scalbn+0x62>
 8006a5c:	4c1b      	ldr	r4, [pc, #108]	@ (8006acc <scalbn+0xbc>)
 8006a5e:	4d1c      	ldr	r5, [pc, #112]	@ (8006ad0 <scalbn+0xc0>)
 8006a60:	2900      	cmp	r1, #0
 8006a62:	da01      	bge.n	8006a68 <scalbn+0x58>
 8006a64:	4c19      	ldr	r4, [pc, #100]	@ (8006acc <scalbn+0xbc>)
 8006a66:	4d1b      	ldr	r5, [pc, #108]	@ (8006ad4 <scalbn+0xc4>)
 8006a68:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <scalbn+0xbc>)
 8006a6a:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <scalbn+0xc0>)
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	0029      	movs	r1, r5
 8006a70:	e7e2      	b.n	8006a38 <scalbn+0x28>
 8006a72:	18e2      	adds	r2, r4, r3
 8006a74:	4b18      	ldr	r3, [pc, #96]	@ (8006ad8 <scalbn+0xc8>)
 8006a76:	429a      	cmp	r2, r3
 8006a78:	dcf0      	bgt.n	8006a5c <scalbn+0x4c>
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	dd05      	ble.n	8006a8a <scalbn+0x7a>
 8006a7e:	4b17      	ldr	r3, [pc, #92]	@ (8006adc <scalbn+0xcc>)
 8006a80:	0512      	lsls	r2, r2, #20
 8006a82:	402b      	ands	r3, r5
 8006a84:	431a      	orrs	r2, r3
 8006a86:	0011      	movs	r1, r2
 8006a88:	e7e0      	b.n	8006a4c <scalbn+0x3c>
 8006a8a:	0013      	movs	r3, r2
 8006a8c:	3335      	adds	r3, #53	@ 0x35
 8006a8e:	da08      	bge.n	8006aa2 <scalbn+0x92>
 8006a90:	4c0a      	ldr	r4, [pc, #40]	@ (8006abc <scalbn+0xac>)
 8006a92:	4d0b      	ldr	r5, [pc, #44]	@ (8006ac0 <scalbn+0xb0>)
 8006a94:	2900      	cmp	r1, #0
 8006a96:	da01      	bge.n	8006a9c <scalbn+0x8c>
 8006a98:	4c08      	ldr	r4, [pc, #32]	@ (8006abc <scalbn+0xac>)
 8006a9a:	4d11      	ldr	r5, [pc, #68]	@ (8006ae0 <scalbn+0xd0>)
 8006a9c:	4a07      	ldr	r2, [pc, #28]	@ (8006abc <scalbn+0xac>)
 8006a9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <scalbn+0xb0>)
 8006aa0:	e7e4      	b.n	8006a6c <scalbn+0x5c>
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8006adc <scalbn+0xcc>)
 8006aa4:	3236      	adds	r2, #54	@ 0x36
 8006aa6:	401d      	ands	r5, r3
 8006aa8:	0512      	lsls	r2, r2, #20
 8006aaa:	432a      	orrs	r2, r5
 8006aac:	0011      	movs	r1, r2
 8006aae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <scalbn+0xd4>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	e7c1      	b.n	8006a38 <scalbn+0x28>
 8006ab4:	43500000 	.word	0x43500000
 8006ab8:	ffff3cb0 	.word	0xffff3cb0
 8006abc:	c2f8f359 	.word	0xc2f8f359
 8006ac0:	01a56e1f 	.word	0x01a56e1f
 8006ac4:	000007ff 	.word	0x000007ff
 8006ac8:	0000c350 	.word	0x0000c350
 8006acc:	8800759c 	.word	0x8800759c
 8006ad0:	7e37e43c 	.word	0x7e37e43c
 8006ad4:	fe37e43c 	.word	0xfe37e43c
 8006ad8:	000007fe 	.word	0x000007fe
 8006adc:	800fffff 	.word	0x800fffff
 8006ae0:	81a56e1f 	.word	0x81a56e1f
 8006ae4:	3c900000 	.word	0x3c900000

08006ae8 <with_errno>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	000d      	movs	r5, r1
 8006aec:	0016      	movs	r6, r2
 8006aee:	0004      	movs	r4, r0
 8006af0:	f7ff f9be 	bl	8005e70 <__errno>
 8006af4:	0029      	movs	r1, r5
 8006af6:	6006      	str	r6, [r0, #0]
 8006af8:	0020      	movs	r0, r4
 8006afa:	bd70      	pop	{r4, r5, r6, pc}

08006afc <xflow>:
 8006afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006afe:	0014      	movs	r4, r2
 8006b00:	001d      	movs	r5, r3
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d002      	beq.n	8006b0c <xflow+0x10>
 8006b06:	2180      	movs	r1, #128	@ 0x80
 8006b08:	0609      	lsls	r1, r1, #24
 8006b0a:	185b      	adds	r3, r3, r1
 8006b0c:	9200      	str	r2, [sp, #0]
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	9a00      	ldr	r2, [sp, #0]
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	0020      	movs	r0, r4
 8006b16:	0029      	movs	r1, r5
 8006b18:	f7fb f8fe 	bl	8001d18 <__aeabi_dmul>
 8006b1c:	2222      	movs	r2, #34	@ 0x22
 8006b1e:	f7ff ffe3 	bl	8006ae8 <with_errno>
 8006b22:	b003      	add	sp, #12
 8006b24:	bd30      	pop	{r4, r5, pc}

08006b26 <__math_uflow>:
 8006b26:	2380      	movs	r3, #128	@ 0x80
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	055b      	lsls	r3, r3, #21
 8006b2e:	f7ff ffe5 	bl	8006afc <xflow>
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <__math_oflow>:
 8006b34:	23e0      	movs	r3, #224	@ 0xe0
 8006b36:	b510      	push	{r4, lr}
 8006b38:	2200      	movs	r2, #0
 8006b3a:	05db      	lsls	r3, r3, #23
 8006b3c:	f7ff ffde 	bl	8006afc <xflow>
 8006b40:	bd10      	pop	{r4, pc}
	...

08006b44 <__ieee754_sqrt>:
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	000a      	movs	r2, r1
 8006b48:	000d      	movs	r5, r1
 8006b4a:	496d      	ldr	r1, [pc, #436]	@ (8006d00 <__ieee754_sqrt+0x1bc>)
 8006b4c:	0004      	movs	r4, r0
 8006b4e:	0003      	movs	r3, r0
 8006b50:	0008      	movs	r0, r1
 8006b52:	b087      	sub	sp, #28
 8006b54:	4028      	ands	r0, r5
 8006b56:	4288      	cmp	r0, r1
 8006b58:	d111      	bne.n	8006b7e <__ieee754_sqrt+0x3a>
 8006b5a:	0022      	movs	r2, r4
 8006b5c:	002b      	movs	r3, r5
 8006b5e:	0020      	movs	r0, r4
 8006b60:	0029      	movs	r1, r5
 8006b62:	f7fb f8d9 	bl	8001d18 <__aeabi_dmul>
 8006b66:	0002      	movs	r2, r0
 8006b68:	000b      	movs	r3, r1
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	0029      	movs	r1, r5
 8006b6e:	f7fa f92b 	bl	8000dc8 <__aeabi_dadd>
 8006b72:	0004      	movs	r4, r0
 8006b74:	000d      	movs	r5, r1
 8006b76:	0020      	movs	r0, r4
 8006b78:	0029      	movs	r1, r5
 8006b7a:	b007      	add	sp, #28
 8006b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	dc11      	bgt.n	8006ba6 <__ieee754_sqrt+0x62>
 8006b82:	0069      	lsls	r1, r5, #1
 8006b84:	0849      	lsrs	r1, r1, #1
 8006b86:	4321      	orrs	r1, r4
 8006b88:	d0f5      	beq.n	8006b76 <__ieee754_sqrt+0x32>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4285      	cmp	r5, r0
 8006b8e:	d010      	beq.n	8006bb2 <__ieee754_sqrt+0x6e>
 8006b90:	0022      	movs	r2, r4
 8006b92:	002b      	movs	r3, r5
 8006b94:	0020      	movs	r0, r4
 8006b96:	0029      	movs	r1, r5
 8006b98:	f7fb fb86 	bl	80022a8 <__aeabi_dsub>
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	000b      	movs	r3, r1
 8006ba0:	f7fa fc76 	bl	8001490 <__aeabi_ddiv>
 8006ba4:	e7e5      	b.n	8006b72 <__ieee754_sqrt+0x2e>
 8006ba6:	1528      	asrs	r0, r5, #20
 8006ba8:	d115      	bne.n	8006bd6 <__ieee754_sqrt+0x92>
 8006baa:	2480      	movs	r4, #128	@ 0x80
 8006bac:	2100      	movs	r1, #0
 8006bae:	0364      	lsls	r4, r4, #13
 8006bb0:	e007      	b.n	8006bc2 <__ieee754_sqrt+0x7e>
 8006bb2:	0ada      	lsrs	r2, r3, #11
 8006bb4:	3815      	subs	r0, #21
 8006bb6:	055b      	lsls	r3, r3, #21
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d0fa      	beq.n	8006bb2 <__ieee754_sqrt+0x6e>
 8006bbc:	e7f5      	b.n	8006baa <__ieee754_sqrt+0x66>
 8006bbe:	0052      	lsls	r2, r2, #1
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	4222      	tst	r2, r4
 8006bc4:	d0fb      	beq.n	8006bbe <__ieee754_sqrt+0x7a>
 8006bc6:	1e4c      	subs	r4, r1, #1
 8006bc8:	1b00      	subs	r0, r0, r4
 8006bca:	2420      	movs	r4, #32
 8006bcc:	001d      	movs	r5, r3
 8006bce:	1a64      	subs	r4, r4, r1
 8006bd0:	40e5      	lsrs	r5, r4
 8006bd2:	408b      	lsls	r3, r1
 8006bd4:	432a      	orrs	r2, r5
 8006bd6:	494b      	ldr	r1, [pc, #300]	@ (8006d04 <__ieee754_sqrt+0x1c0>)
 8006bd8:	0312      	lsls	r2, r2, #12
 8006bda:	1844      	adds	r4, r0, r1
 8006bdc:	2180      	movs	r1, #128	@ 0x80
 8006bde:	0b12      	lsrs	r2, r2, #12
 8006be0:	0349      	lsls	r1, r1, #13
 8006be2:	4311      	orrs	r1, r2
 8006be4:	07c0      	lsls	r0, r0, #31
 8006be6:	d403      	bmi.n	8006bf0 <__ieee754_sqrt+0xac>
 8006be8:	0fda      	lsrs	r2, r3, #31
 8006bea:	0049      	lsls	r1, r1, #1
 8006bec:	1851      	adds	r1, r2, r1
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	2500      	movs	r5, #0
 8006bf2:	1062      	asrs	r2, r4, #1
 8006bf4:	0049      	lsls	r1, r1, #1
 8006bf6:	2480      	movs	r4, #128	@ 0x80
 8006bf8:	9205      	str	r2, [sp, #20]
 8006bfa:	0fda      	lsrs	r2, r3, #31
 8006bfc:	1852      	adds	r2, r2, r1
 8006bfe:	2016      	movs	r0, #22
 8006c00:	0029      	movs	r1, r5
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	03a4      	lsls	r4, r4, #14
 8006c06:	190e      	adds	r6, r1, r4
 8006c08:	4296      	cmp	r6, r2
 8006c0a:	dc02      	bgt.n	8006c12 <__ieee754_sqrt+0xce>
 8006c0c:	1931      	adds	r1, r6, r4
 8006c0e:	1b92      	subs	r2, r2, r6
 8006c10:	192d      	adds	r5, r5, r4
 8006c12:	0fde      	lsrs	r6, r3, #31
 8006c14:	0052      	lsls	r2, r2, #1
 8006c16:	3801      	subs	r0, #1
 8006c18:	1992      	adds	r2, r2, r6
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	0864      	lsrs	r4, r4, #1
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d1f1      	bne.n	8006c06 <__ieee754_sqrt+0xc2>
 8006c22:	2620      	movs	r6, #32
 8006c24:	2780      	movs	r7, #128	@ 0x80
 8006c26:	0004      	movs	r4, r0
 8006c28:	9604      	str	r6, [sp, #16]
 8006c2a:	063f      	lsls	r7, r7, #24
 8006c2c:	19c6      	adds	r6, r0, r7
 8006c2e:	46b4      	mov	ip, r6
 8006c30:	4291      	cmp	r1, r2
 8006c32:	db02      	blt.n	8006c3a <__ieee754_sqrt+0xf6>
 8006c34:	d114      	bne.n	8006c60 <__ieee754_sqrt+0x11c>
 8006c36:	429e      	cmp	r6, r3
 8006c38:	d812      	bhi.n	8006c60 <__ieee754_sqrt+0x11c>
 8006c3a:	4660      	mov	r0, ip
 8006c3c:	4666      	mov	r6, ip
 8006c3e:	19c0      	adds	r0, r0, r7
 8006c40:	9100      	str	r1, [sp, #0]
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	da03      	bge.n	8006c4e <__ieee754_sqrt+0x10a>
 8006c46:	43c6      	mvns	r6, r0
 8006c48:	0ff6      	lsrs	r6, r6, #31
 8006c4a:	198e      	adds	r6, r1, r6
 8006c4c:	9600      	str	r6, [sp, #0]
 8006c4e:	1a52      	subs	r2, r2, r1
 8006c50:	4563      	cmp	r3, ip
 8006c52:	4189      	sbcs	r1, r1
 8006c54:	4249      	negs	r1, r1
 8006c56:	1a52      	subs	r2, r2, r1
 8006c58:	4661      	mov	r1, ip
 8006c5a:	1a5b      	subs	r3, r3, r1
 8006c5c:	9900      	ldr	r1, [sp, #0]
 8006c5e:	19e4      	adds	r4, r4, r7
 8006c60:	0fde      	lsrs	r6, r3, #31
 8006c62:	0052      	lsls	r2, r2, #1
 8006c64:	1992      	adds	r2, r2, r6
 8006c66:	9e04      	ldr	r6, [sp, #16]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	3e01      	subs	r6, #1
 8006c6c:	087f      	lsrs	r7, r7, #1
 8006c6e:	9604      	str	r6, [sp, #16]
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d1db      	bne.n	8006c2c <__ieee754_sqrt+0xe8>
 8006c74:	431a      	orrs	r2, r3
 8006c76:	d01f      	beq.n	8006cb8 <__ieee754_sqrt+0x174>
 8006c78:	4e23      	ldr	r6, [pc, #140]	@ (8006d08 <__ieee754_sqrt+0x1c4>)
 8006c7a:	4f24      	ldr	r7, [pc, #144]	@ (8006d0c <__ieee754_sqrt+0x1c8>)
 8006c7c:	6830      	ldr	r0, [r6, #0]
 8006c7e:	6871      	ldr	r1, [r6, #4]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	9200      	str	r2, [sp, #0]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	6832      	ldr	r2, [r6, #0]
 8006c8a:	6873      	ldr	r3, [r6, #4]
 8006c8c:	9202      	str	r2, [sp, #8]
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	9a00      	ldr	r2, [sp, #0]
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	f7fb fb08 	bl	80022a8 <__aeabi_dsub>
 8006c98:	0002      	movs	r2, r0
 8006c9a:	000b      	movs	r3, r1
 8006c9c:	9802      	ldr	r0, [sp, #8]
 8006c9e:	9903      	ldr	r1, [sp, #12]
 8006ca0:	f7f9 fbc4 	bl	800042c <__aeabi_dcmple>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d007      	beq.n	8006cb8 <__ieee754_sqrt+0x174>
 8006ca8:	6830      	ldr	r0, [r6, #0]
 8006caa:	6871      	ldr	r1, [r6, #4]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	1c67      	adds	r7, r4, #1
 8006cb2:	d10f      	bne.n	8006cd4 <__ieee754_sqrt+0x190>
 8006cb4:	9c04      	ldr	r4, [sp, #16]
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	4b15      	ldr	r3, [pc, #84]	@ (8006d10 <__ieee754_sqrt+0x1cc>)
 8006cba:	106a      	asrs	r2, r5, #1
 8006cbc:	18d2      	adds	r2, r2, r3
 8006cbe:	0863      	lsrs	r3, r4, #1
 8006cc0:	07ed      	lsls	r5, r5, #31
 8006cc2:	d502      	bpl.n	8006cca <__ieee754_sqrt+0x186>
 8006cc4:	2180      	movs	r1, #128	@ 0x80
 8006cc6:	0609      	lsls	r1, r1, #24
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	9905      	ldr	r1, [sp, #20]
 8006ccc:	001c      	movs	r4, r3
 8006cce:	0509      	lsls	r1, r1, #20
 8006cd0:	188d      	adds	r5, r1, r2
 8006cd2:	e750      	b.n	8006b76 <__ieee754_sqrt+0x32>
 8006cd4:	f7fa f878 	bl	8000dc8 <__aeabi_dadd>
 8006cd8:	6877      	ldr	r7, [r6, #4]
 8006cda:	6836      	ldr	r6, [r6, #0]
 8006cdc:	0002      	movs	r2, r0
 8006cde:	000b      	movs	r3, r1
 8006ce0:	0030      	movs	r0, r6
 8006ce2:	0039      	movs	r1, r7
 8006ce4:	f7f9 fb98 	bl	8000418 <__aeabi_dcmplt>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d004      	beq.n	8006cf6 <__ieee754_sqrt+0x1b2>
 8006cec:	3402      	adds	r4, #2
 8006cee:	4263      	negs	r3, r4
 8006cf0:	4163      	adcs	r3, r4
 8006cf2:	18ed      	adds	r5, r5, r3
 8006cf4:	e7e0      	b.n	8006cb8 <__ieee754_sqrt+0x174>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	439c      	bics	r4, r3
 8006cfc:	e7dc      	b.n	8006cb8 <__ieee754_sqrt+0x174>
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	7ff00000 	.word	0x7ff00000
 8006d04:	fffffc01 	.word	0xfffffc01
 8006d08:	20000068 	.word	0x20000068
 8006d0c:	20000060 	.word	0x20000060
 8006d10:	3fe00000 	.word	0x3fe00000

08006d14 <_init>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr

08006d20 <_fini>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr
