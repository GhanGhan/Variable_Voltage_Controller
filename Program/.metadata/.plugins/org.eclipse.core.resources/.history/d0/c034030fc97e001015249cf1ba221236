/*
 * NHD_lcd.c
 *
 *  Created on: Aug 21, 2025
 *      Author: Ghani
 */

#include "main.h"
#include "NHD_lcd.h"
#include "NHD_lcd_config.h"



void reset_screen()
{
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOA, _RST_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
}

void init_screen()
{
	comm_write(0xA0); //Set SEG (column) direction - left to right
	comm_write(0xAE); //Turn the display off
	comm_write(0xC8); //Set COM (row) direction - top to bottom
	comm_write(0xA2); //Set LCD bias
	comm_write(0x2F); //Power Control Set - Boost, Regulator and Follower are all on
	comm_write(0x21); //Set Resistor Ratio - 001 -> 3.5
	comm_write(0x81); //Electronic Volume Command (set contrast) Double Byte: 1 of 2
	comm_write(0x20); //Electronic Volume value (contrast value) Double Byte: 2 of 2
	comm_write(0xAF); //Display ON
}

void clear_screen()
{
	uint8_t page = 0xB0; //'B'- command to set Page Address, lower four bits contain actual address
						//Command := 0xB0 + start address
	comm_write(0xAE); // Display OFF
	comm_write(0x40); // D7,D6 = "01" - command to set start line, Bottom 5 bits are start line address
						//Command := 0x40 + start line address

	for(uint8_t i = 0; i < 4; i++)
	{
		comm_write(page);	// send page address
		//	Following two lines set the column address to leftmost column
		comm_write(0x10); // column address upper 4 bits + 0x10
		comm_write(0x00); // column address lower 4 bits + 0x00

		for(uint8_t j = 0; j < 128; j++)
		{
			data_write(0x00);
		}
		page++;//After 128 columns, go to the next page
	}
	comm_write(0xAF);//Turn the display back on
}

void comm_write(uint8_t c)
{
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_RESET);	//Set message type to command

	HAL_SPI_Transmit(&SPI_HANDLE, &c, 1, 100); // transmit command

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen

}

void data_write(uint8_t d)
{
	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);//Select LCD Screen
	HAL_GPIO_WritePin(GPIOA, A0_Pin, GPIO_PIN_SET);	//Set message type to

	HAL_SPI_Transmit(&SPI_HANDLE, &d, 1, 100); //transmit data

	HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_SET);//De-select LCD Screen
}

void print_data(char* text, uint8_t rowIndex)
{
	unsigned char page = 0xB0;
	comm_write(page + rowIndex); // send page address
	comm_write(0x10); // column address upper 4 bits + 0x10
	comm_write(0x00); // column address lower 4 bits + 0x00
	for(uint8_t i = 0; text[i] != '\0'; i++)
	{
		uint8_t c = (uint8_t)text[i] - 32;
		uint8_t val = 0;

		for(uint8_t j = 0; j < 5; j++)
		{
			val = Ascii_1[c][j];
			data_write(val);
		}
	}
}

void erase_trails(char* text, uint8_t rowIndex)
{
	unsigned char page = 0xB0;
		comm_write(page + rowIndex); // send page address
		//comm_write(0x10); // column address upper 4 bits + 0x10
		//comm_write(0x00); // column address lower 4 bits + 0x00

		//find index of last character in text
		uint8_t i = 0;
		do{
			i++;
		}
		while(text[i] != '\0');

		uint8_t stop = i+2;
		char fill = ' ';

		while(i <= stop)
		{
			uint8_t c = (uint8_t)fill - 32;
			uint8_t val = 0;

			for(uint8_t j = 0; j < 5; j++)
			{
				val = Ascii_1[c][j];
				data_write(val);
			}
			i++;
		}
}
