/*
 * NHD_lcd.h
 *
 *  Created on: Aug 21, 2025
 *      Author: Ghani
 */

#ifndef INC_NHD_LCD_H_
#define INC_NHD_LCD_H_


#include "stm32g0xx_hal.h"

typedef enum{
	NHD_SPI_OK = 0u,
	NHD_SPI_BUSY = 1u,
	NHD_SPI_PARAM_ERROR = 2u,
	NHD_SPI_TIMEOUT = 3u,
}NHD_LCDstatus_t;

typedef struct NHD_LCD_HANDLE
{
  SPI_HandleTypeDef *hspi;  // SPI bus to use
  GPIO_TypeDef *cs_port;    // Chip Select port
  uint16_t cs_pin;          // Chip Select pin
  GPIO_TypeDef *op_port;    // Output (Data/Command) port
  uint16_t op_pin;          // Output (Data/Command) port
  GPIO_TypeDef *reset_port; // Reset port
  uint16_t reset_pin;       // Reset pin
} NHD_LCD_Handle_t;


void NHD_LCD_Reset_Screen(NHD_LCD_Handle_t* lcd_handle);
NHD_LCDstatus_t init_screen();
NHD_LCDstatus_t clear_screen();
NHD_LCDstatus_t cmd_write(uint8_t c);
NHD_LCDstatus_t data_write(uint8_t d);
NHD_LCDstatus_t print_data(const char * text, uint8_t row_index);


#define NUM_CHAR_ROWS 4
#define NUM_COLS 128
#define NUM_BYTES_PER_CHAR 5

#define SET_COLSD_LF	0xA0 	//Set SEG (column) direction - left to right
#define TURN_OFF		0xAE	  //Turn the display off
#define SET_ROWD_TP		0xC8	//Set COM (row) direction - top to bottom
#define SET_LCD_BIAS	0xA2	//Set LCD bias
#define SET_PWR_CTRL	0x2F	//Power Control Set - Boost, Regulator and Follower are all on
#define SET_RES_RTO		0x21	//Set Resistor Ratio - 001 -> 3.5
#define SET_EVM_CMD		0x81	//Electronic Volume Command (set contrast) Double Byte: 1 of 2
#define SET_EVM_VAL		0x20	//Electronic Volume value (contrast value) Double Byte: 2 of 2
#define TURN_ON			0xAF	  //Display ON

#define SET_PG_ADDR		0xB0	//'B'- command to set Page Address, lower four bits contain actual address
								              //Command := 0xB0 + start address
#define SET_SRT_ROW		0x40	// D7,D6 = "01" - command to set start line (row), Bottom 5 bits are start line address
								               //Command := 0x40 + start line address
#define SET_COL_ADRU	0x10	//Set Upper 4 bits of column address - Command := 0x10 + upper 4 fits
#define SET_COL_ADRL	0x00	//Set Lower 4 bits of column address - Command := 0x00 + lower 4 fits


#define CLR_PGE_BYTE	0x00	// Erase byte at pre-defined (column, page) section (effectively erase character in LCD screen)



#endif /* INC_NHD_LCD_H_ */
