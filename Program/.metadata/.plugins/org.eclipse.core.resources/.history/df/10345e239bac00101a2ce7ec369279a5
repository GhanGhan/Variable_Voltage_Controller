/*
 * string2float.c
 *
 *  Created on: Aug 22, 2025
 *      Author: Ghani
 */

#include <float2string.h>
#include <math.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>



/*
 * @brief Reverses a string 'str' of length 'len'
 *
 * @param str: character array that contains the floating point number
 * @param len: length of the character array
 *
 * @retval None
 */
void reverse(char * str, uint8_t len)
{
  uint8_t i = 0, j = len - 1, temp;
  while (i < j)
  {
    temp = str[i];
    str[i] = str[j];
    str[j] = temp;
    i++;
    j--;
  }
}


/*
 * @brief Converts a given integer 'x' to string 'str[].'
 *
 * @param x: integer we are converting to a string
 * @param str: character array we will store the converter integer in
 * @param d: number of digits to place after the decimal
 *
 * @retval The number of characters in the string
 */
int32_t int_to_str(int32_t x, char str[], uint8_t d)
{
	int32_t i = 0;
    while (x)
    {
      str[i++] = (x % 10) + '0';
      x = x / 10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
      str[i++] = '0';

    reverse(str, i);
    str[i] = '\0';
    return i;
}

// Converts a floating-point/double number to a string.
/*
 * @brief Converts a floating-point/double number to a string.
 *
 * @param n: floating point number
 * @param res: character array to store converted floating point number
 * @param afterpoint: number of digits to place after the decimal
 *
 * @retval None
 *
 */
void ftoa(float n, char * res, uint8_t afterpoint)
{
	// Check validity of the input number 'n'
	if (res == NULL) return;
	if (isnan(n)){strcpy(res,"nan"); return;}
	if (isinf(n)){strcpy(res,"inf"); return;}

	// Check if the input float number 'n' is equal to zero
	if (n == 0.0f)
	{
		res[0] = '0'; res[1] = '.';
		for (uint8_t  i= 1; i <= afterpoint; i++)
		{
			res[i + 1] = '0';
		}
		res[afterpoint + 2] = '\0';
		return;
	}

	// Check if the sign of n is negative
	uint8_t startIndex = 0;
	if (n < 0.0f)
	{
		res[startIndex] = '-';
		startIndex++;
		n = -n;
	}


	// Round ipart if if need be
	float multiplier = pow_10(afterpoint); // if n = 19.99 and afterpoint = 1, rounded value would be 20.0
	float round_n = round(n * multiplier)/multiplier; // so make '19' into '20'

	// Extract integer part
	int32_t ipart = (int32_t)round_n;
	int32_t i = 0; // i is the number of digits before the decimal

	// Check if the absolute value of n is less than 1
	if ((float)abs(round_n) < 1.0f)
	{
		res[startIndex] = '0';
		startIndex++;
	}
	else // abs(n) > 1
	{
		// convert integer part to string
		i = int_to_str(ipart, res + startIndex, 0);
	}

  // Extract floating part
  float fpart = n - (int32_t)n;

  // check for display option after point
  if (afterpoint != 0)
  {
    res[i + startIndex] = '.'; // add dot


    fpart = fpart * pow_10(afterpoint);// if fpart*pow_10(afterpoint) == '9.9'
    fpart = round(fpart);             // it would round to '10'
    if(fpart == pow_10(afterpoint)) /// In that case make it '0'
      fpart = 0;

    int_to_str((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
  }
}


//
/*
 * @brief Calculates the value of 10 raised to the specified exponent
 *
 * @param exponent: The value 10 is raised to i.e. number of times 10 is multiplied by itself, must be an integer
 *
 * @retval value of 10^exponent
 *
 */
float pow_10(uint8_t exponent)
{
  uint32_t result = 1;
  for (uint8_t i = 0; i < exponent; i++)
  {
    result *= 10;
  }
  return result;
}
