/*
 * string2float.c
 *
 *  Created on: Aug 22, 2025
 *      Author: Ghani
 */

#include <math.h>
#include "string2float.h"
#include <stdint.h>
#include <stdlib.h>



/*
 * @brief Reverses a string 'str' of length 'len'
 *
 * @param str: character array that contains the floating point number
 * @param len: length of the character array
 *
 * @retval None
 */
void reverse(char* str, uint8_t len)
{
	uint8_t i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}


/*
 * @brief Converts a given integer 'x' to string 'str[].'
 *
 * @param x: integer we are converting to a string
 * @param str: character array we will store the converter integer in
 * @param d: number of digits to place after the decimal
 *
 * @retval The number of characters in the string
 */
int intToStr(int32_t x, char str[], uint8_t d)
{
	int32_t i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';

    reverse(str, i);
    str[i] = '\0';
    return i;
}

// Converts a floating-point/double number to a string.
/*
 * @brief Converts a floating-point/double number to a string.
 *
 * @param n: floating point number
 * @param res: character array to store converted floating point number
 * @param afterpoint: number of digits to place after the decimal
 *
 * @retval None
 *
 */
void ftoa(float n, char* res, uint8_t afterpoint)
{
	// Check validity of the input number 'n'
	if(res == NULL) return;
	if(isnan(n)){strcpy(res,"nan"); return;}
	if(isinf(n)){strcpy(res,"inf"); return;}

	//Check if the input float number 'n' is equal to zero
	if(n == 0.0f)
	{
		res[0] = '0'; res[1] = '.';
		for(uint8_t  i= 1; i <= afterpoint; i++)
		{
			res[i + 1] = '0';
		}
		res[afterpoint + 2] = '\0';
		return;
	}

	// Check if the sign of n is negative
	uint8_t startIndex = 0;
	if(n < 0.0f)
	{
		res[startIndex] = '-';
		startIndex++;
		n = -n;
	}
	// Check if the absolute value of n is less than 1
	int32_t ipart, i;
	if((float)abs(n) < 1.0f)
	{
		res[startIndex] = '0';
		startIndex++;
	}
	else // abs(n) > 1
	{
		// Extract integer part
		ipart = (int32_t)n;
		// convert integer part to string
		i = intToStr(ipart, res + startIndex, 0);
	}

    // Extract floating part
    float fpart = n - (float)ipart;

    // check for display option after point
    if (afterpoint != 0) {
        res[i] = '.'; // add dot

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);

        intToStr((int32_t)fpart, res + i + 1 + startIndex, afterpoint);
    }
}

