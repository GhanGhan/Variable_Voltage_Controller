/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "fonts.h"
#include "NHD_lcd.h"
#include "float2string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define NUM_SENSORS 4
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

SPI_HandleTypeDef hspi2;

/* USER CODE BEGIN PV */
typedef enum sensor_val {v_input, v_output, i_input, i_output} Sensor_Value;
static const uint16_t g_adc_res = 65535;// ADC resolution = 2^16-1 /*4095;*/	//ADC resolution = 2^12-1
static const uint8_t g_vi_scale = 17; //largest allowable input voltage
static const uint8_t g_vo_scale = 20; //largest allowable output voltage
static const float g_current_scale = 3.3/(50*0.011f); //Amp gain * Rsense
static const float g_scales[NUM_SENSORS] = {g_vi_scale, g_vo_scale, g_current_scale, g_current_scale};
static uint16_t g_adc_buffer[NUM_SENSORS];

static const char g_vi_header[] = "Input Voltage: ";
static const char g_vo_header[] = "Output Voltage: ";
static const char g_ii_header[] = "Input Current: ";
static const char g_io_header[] = "Output Current: ";
static const char * g_unit_symbols[] = {" V", " A"};
static const uint8_t g_header_len[NUM_SENSORS] = {strlen(g_vi_header), strlen(g_vo_header),
    strlen(g_ii_header), strlen(g_io_header)};
#define MAX_NUM_LEN 10
static char g_num_text[MAX_NUM_LEN];
static char g_dest_text[NUM_COLS];
static const char * g_headers[NUM_SENSORS] = {g_vi_header, g_vo_header, g_ii_header, g_io_header};
//ERROR LOGGING
#define LOG_FLASH_START 0X0800F800U
#define MAX_LOG_NUM 256
#define LOG_FLASH_PAGE_NUM 31U
typedef struct log_struct{
  char b0;  //'I'
  uint8_t err_count;
  char source; // 'N' or 'P'
  uint8_t b1; //'T'
  uint8_t err_type;
  char b2;  //'L'
  uint16_t line_num;
} log_struct_t;
typedef enum process
  {init = 'N' /*Initialization function*/, print = 'P' /*Print to LCD display function*/
 } Process;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
static NHD_LCDstatus_t print_power_value(uint8_t index);
static void log_error(uint16_t line, char source, NHD_LCDstatus_t err);


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  //initialise_monitor_handles();
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */


  reset_screen();//Doesn't call SPI-related methods

  NHD_LCDstatus_t err_code = NHD_SPI_OK;

  err_code = init_screen();
  if (err_code != NHD_SPI_OK)
  {
    log_error(__LINE__, (char)init, err_code);
  }
  err_code = clear_screen();
  if (err_code != NHD_SPI_OK)
  {
    log_error(__LINE__, (char)init, err_code);
  }
  err_code = cmd_write(SET_SRT_ROW); // To first line
  if (err_code != NHD_SPI_OK)
  {
    log_error(__LINE__, (char)init, err_code);
  }


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Get voltage and current values from ADC
	  for (int i = 0; i < NUM_SENSORS; i++)
	  {
		  HAL_ADC_Start(&hadc1);
		  HAL_ADC_PollForConversion(&hadc1, 1);
		  g_adc_buffer[i] = HAL_ADC_GetValue(&hadc1);

	  }//Now the buffer contains all 4 values.
	  HAL_ADC_Stop(&hadc1); //Needed in for OVERSAMPLING MODE TO WORK

	  //Send input voltage, output voltage, input current, output current to the LCD screen
	  err_code = print_power_value(v_input);
	  if (err_code != NHD_SPI_OK)
	  {
	    log_error(__LINE__, (char)print, err_code);
	  }
	  err_code = print_power_value(v_output);
	  if (err_code != NHD_SPI_OK)
	  {
	    log_error(__LINE__, (char)print, err_code);
	  }
	  err_code = print_power_value(i_input);
	  if (err_code != NHD_SPI_OK)
	  {
	    log_error(__LINE__, (char)print, err_code);
	  }
	  err_code = print_power_value(i_output);
	  if (err_code != NHD_SPI_OK)
	  {
	    log_error(__LINE__, (char)print, err_code);
	  }
	  //delay for 100ms
	  HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _RST_Pin|A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : _RST_Pin A0_Pin */
  GPIO_InitStruct.Pin = _RST_Pin|A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : _CS_Pin */
  GPIO_InitStruct.Pin = _CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


/**
 * @brief This function prints the value of the voltage/current on the LCD screen
 *
 * @param index: The character row that the value would be displayed on
 * @retval NHD_LCD status
 */
static NHD_LCDstatus_t print_power_value(uint8_t index)
{
	// Set the number digits after the decimal point, and identify if it a current value or voltage value
	uint8_t decimals = 0;
	uint8_t symbol_index;
	if (index == v_input || index == v_output)
	{
		decimals = 1;
		symbol_index = 0;
	}
	else // if(index == i_input || i_output)
	{
		decimals = 2;
		symbol_index = 1;
	}

	// Convert the ADC value from an integer->float->string
	ftoa((float)g_adc_buffer[index]*g_scales[index]/g_adc_res, g_num_text, decimals);

	// Concatenate the header string, value string and symbol string
	uint8_t num_text_len = strlen(g_num_text);
	uint8_t symbol_len = strlen(g_unit_symbols[symbol_index]);
	uint8_t total_len = g_header_len[index] + num_text_len + symbol_len;

	if (sizeof(g_dest_text) - 1 > total_len) //checks there is enough space in the buffer for the combined text
	{
	  memcpy(g_dest_text, g_headers[index], g_header_len[index]);
		memcpy(g_dest_text + g_header_len[index], g_num_text, num_text_len);
		memcpy(g_dest_text + g_header_len[index] + num_text_len,
		    g_unit_symbols[symbol_index], symbol_len + 1); // "+ 1" to add '\0'
	}
	else
	{
	  NHD_LCDstatus_t err_code = NHD_SPI_OK;
	  if ((err_code = print_data("Error: string was too long", index)) != NHD_SPI_OK)
	    return err_code;
	}

	// Print string to the LCD string
	NHD_LCDstatus_t err_code = NHD_SPI_OK;
	if ((err_code = print_data(g_dest_text, index)) != NHD_SPI_OK)
		return err_code;

	return err_code;
}

void log_error(uint16_t line, char source, NHD_LCDstatus_t err)
{
  __disable_irq();
  // Populate Error Log values
  log_struct_t log;
  log.b0 = 'I';
  log.b1 = 'T';
  log.b2 = 'L';
  log.line_num = line;
  log.source = source;
  log.err_type = err;

  // Unlock the Flash
  if (HAL_FLASH_Unlock() != HAL_OK)
  {
    //Flash Unlocked Failed
    Error_Handler();
  }

  log_struct_t *plog = (log_struct_t*)LOG_FLASH_START;
  uint32_t addr;
  uint64_t data;
  uint8_t data_saved = 0;
  HAL_StatusTypeDef status;
  for(uint8_t i = 0; i < MAX_LOG_NUM; i++) //Search for first available index in page to save error log
  {
    if(plog->b0 != 'I')
    { //
      log.err_count = i;
      data =  *(uint64_t*)&log;
      addr = (uint32_t)plog;
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
      if(status != HAL_OK)
      {
        //Logging Error into Flash Failed
        Error_Handler();
      }
      data_saved = 1;
      break;
    }
    plog++;
  }

  if(!data_saved) //Flash page is full, must be cleared before adding a new entry
  {
    FLASH_EraseInitTypeDef erase_config;
    erase_config.TypeErase = FLASH_TYPEERASE_PAGES;
    erase_config.Banks = FLASH_BANK_1;
    erase_config.Page = LOG_FLASH_PAGE_NUM;
    erase_config.NbPages = 1;
    uint32_t page_error;
    status = HAL_FLASHEx_Erase(&erase_config, &page_error);
    if(status != HAL_OK)
    {
      //Logging Error into Flash Failed
      Error_Handler();
    }

    log.err_count = 0;
    data =  *(uint64_t*)&log;
    addr = (uint32_t)LOG_FLASH_START;
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
    if(status != HAL_OK)
    {
      //Logging Error into Flash Failed
      Error_Handler();
    }
    data_saved = 1;
  }
  HAL_FLASH_Lock();
  Error_Handler();
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq(); -- code placed here automatically by system, moved to beginning of log_error function
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
